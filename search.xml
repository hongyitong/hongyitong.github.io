<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何用牛顿法求一个数的平方根]]></title>
    <url>%2F2017%2F07%2F10%2F%E5%A6%82%E4%BD%95%E7%94%A8%E7%89%9B%E9%A1%BF%E6%B3%95%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9%2F</url>
    <content type="text"><![CDATA[对x的平方根的值一个猜想y。通过执行一个简单的操作去得到一个更好的猜测：只需要求出y和x/y的平均值（它更接近实际的平方根值）。例如，可以用这样方式去计算2的平方根。 猜想 商 平均值1 2/1=2 (2+1)/2 = 1.51.5 2/1.5=1.3333 (1.3333+1.5)/2 = 1.41671.4167 2/1.4167=1.4118 (1.4167+1.4118)/2=1.41421.4142 … …继续这一计算过程，我们就能得到对2的平方根的越来越好的近似值。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>平方根</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大陆法系和海洋法系的区别]]></title>
    <url>%2F2017%2F04%2F17%2F%E5%A4%A7%E9%99%86%E6%B3%95%E7%B3%BB%E5%92%8C%E6%B5%B7%E6%B4%8B%E6%B3%95%E7%B3%BB%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[「法系」是具有共同法律传统的若干国家和地区的法律现象的总称。下面是世界主要法律体系分布图，来源于维基百科.从图中我们可以看到，英美法系和大陆法系是当代世界上两大主要的法律体系。这两种法系涉及历史、文化、信仰立场、社会背景等，从本质到理念上均有较大差别。 大陆法系(Civil Law)又名欧陆法系，罗马法系，民法法系。大陆法系与罗马法在精神上一脉相承。十二世纪，查士丁尼的《国法大全》在意大利被重新发现，由于其法律体系较之当时欧洲诸领主国家的习惯法更加完备，于是罗马法在欧洲大陆上被纷纷效法，史称“罗马法复兴”，在与基督教文明与商业文明等渐渐融合后，形成了今天大陆法系的雏形。此为大陆法系由来，故大陆法系又称罗马法系。在今天来看，查士丁尼之《国法大全》的内容基本上属于民法，因此作为罗马法直接继承者的大陆法系以民法为基础。「公法」与「私法」分得极为清晰，对个人权利与公共权利均有约束规定。同另一大法律体系英美法系相比，其一大特点是具有系统的民法体系，所以大陆法系又称民法（Civil）法系。大陆法系沿袭罗马法，具有悠久的法典编纂传统，重视编写法典，具有详尽的成文法，强调法典必须完整，以致每一个法律范畴的每一个细节，都在法典里有明文规定。大陆法系崇尚法理上的逻辑推理，并以此为依据实行司法审判，要求法官严格按照法条审判。我国目前的法律体系主要师于德国，属于大陆体系，大陆体系的诸多特征看我国的法律体系就能略知一二。在实行大陆法系的国家中，法律的进步与完善的标志是一部部新法律的出台与实施。比如我国近年来《物权法》等法律的出台。由于欧陆法系在形式上具有体系化、概念化的特点，便于模仿和移植，因此容易成为中国、日本等后进国家效仿的对象。 海洋法系（Common Law）英美法系（Common Law）又称普通法系，海洋法系。英美法系起源于中世纪之英格兰，主要来源于盎格鲁-撒克逊习惯法与诺曼底封建法的融合，威廉公爵在诺曼底征服后踏上英格兰的土地，为了扩大王权，派遣大法官到英格兰各地出巡，处理农民与封建主之间的矛盾，在处理过程中有很多问题并无成文法可供凭借，判案全靠依据当时风俗习惯，基督教道德也对审判结果有很大影响，此为今英美法系之滥觞。随着十七到十八世纪大英帝国的扩张，传播到世界各地，如今主要在英联邦国家流行。英美法系因其起源，又称之为不成文法系。同大陆法系偏重于法典相比，英美法系在司法审判原则上更「遵循先例」，即作为判例的先例对其后的案件具有法律约束力，成为日后法官审判的基本原则。而这种以个案判例的形式表现出法律规范的判例法（case law）是不被实行大陆法系的国家承认的，最多只具有辅助参考价值。好像法律是被逐渐累积起来，而无须经过立法机关。英美法是判例之法，而非制定之法，法官在地方习惯法的基础上，归纳总结形成一套适用于整个社会的法律体系，具有适应性和开放性的特点。在审判时，更注重采取当事人进行主义和陪审团制度。下级法庭必须遵从上级法庭以往的判例，同级的法官判例没有必然约束力，但一般会互相参考。在实行英美法系的国家中，法律制度与理论的发展实质上靠的是一个个案例的推动。因此，我们看英美等地的判决，法官—陪审团—律师之间的博弈都极为精彩，而往往一个史无先例的判决产生后，都为后世相同情况之判决提供了依据。比如我们在看美国法制发展过程中，看到的往往都是一个个标志性的个案。举个栗子，比如美国著名的「布朗诉托皮卡教育局案」，从地方法院一直打到最高法院，最终判定南方省份种族隔离政策违宪。从今往后，所有类似于种族歧视与种族隔离案子的判决均须遵循此案中高院的判决。于是南方省份种族隔离政策终成为历史，美利坚迎来了历史上民权运动的一个伟大的胜利。 两者关系大陆法系与英美法系作为当今世界最重要的两大法系，并不是对立的，现在也多有交流和融合。上图中标示为灰色的国家采用的就是混合法系。判例法在一些大陆法系的国家中也具有参考价值，而像美国这样的海洋法系国家也开始积极编写法典配合，而并非单依靠案例来发展法律。这种趋势在世界各国都是越来越普遍。另外还有伊斯兰教法，以《古兰经》为依据，在诸多信仰伊斯兰教的国家中实行。我国古代实行中华法系，其主要在汉字文化圈内实行，以《唐律疏议》为代表，特点是以儒家思想为精神，刑法发达民法薄弱，行政与司法合一。在清末面对西方文化的洪洪巨浪时，中华法系宣告解体。我不是专业学这个的，查查资料学习了一下来回答这个问题，个人水平有限，有错误希望能指出并谅解。 转自：https://www.zhihu.com/question/21717298/answer/21025730]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>区别</tag>
        <tag>大陆法系</tag>
        <tag>海洋法系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《智能时代--大数据与智能革命重新定义未来》读书心得]]></title>
    <url>%2F2017%2F04%2F17%2F%E3%80%8A%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3--%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%99%BA%E8%83%BD%E9%9D%A9%E5%91%BD%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89%E6%9C%AA%E6%9D%A5%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[几千年来，我们都是以一种确定的方式来看待世界，我们努力找出上帝在表象之后设定的因果关系。令我们倍加鼓舞的是，我们还取得了不少的突破。从伽利略到牛顿到爱因斯坦，一批批的科学家用一些简单的公式、定理、数学模型，定义了这个世界的行为，这些让我们人类的自信得到了极大的提高。但是，人类社会在发展过程中，在我们的知识领域越来越大时，我们发现自己的未知领域反而更大了。这个世界在我们所理解的确定性之外，有着更多的不确定性。这个世界展现出来的一种混沌的表象，我们无法用确定的模型去模拟，即使想通过模型模拟，其中的参数数量也已经远远超出了人类所能控制的范围。例如天气预报，我们做到的只能是通过简化参数来预测（所以并不能做到100%准确）；甚至很多现象我们还找不出相关的模型和公式去模拟它，例如地震等。进一步说，量子力学里面的测不准原理直接定义了这个世界就是不可以直接测量的，更谈不上用模型去模拟了。人类科学经过工业革命、信息革命的快速发展，到了现代，想像以前那样找出一个优美的数学模型去模拟现实的世界，已经越来越困难了。通俗点说，就是肉都给吃光了，现在每个研究领域都是在啃硬骨头。所以，想获得更大的科学突破，科学家们开始改变思维：能找到现象背后的因果模型更好，因为这毕竟是一劳永逸的事情，很好的体现了上帝的意志。但是，在这个每个突破的都需要漫长的时间里，我们可以通过大数据思维，在基于不确定的前提下，借助数据量的突破性增长、借助计算机能力的突破性发展，以及人类在人工智能方面的飞跃（Alphago战胜了李世石），通过数据的相关性来掌握事物的规律，然后基于机器学习，不断优化模型。这就是大数据思维的核心。就像以前托密勒利用很多圆嵌套在一起，这个在地心说基础上的简单模型很好地描述了行星的运行规律，其准确程度比哥白尼基于日心说的模型还准确。同样，人们发现，在机器学习方面，多个简单模型的组合，然后通过大数据的机器训练，得出的参数结果，比复杂模型、小数据训练的效果更好。所以，现在数据量的增长成了解决问题的主要驱动力，在模型效果改进方面，模型的优化只占了20%，其它都是数据的增长带来的结果，例如机器的语音识别、机器翻译、图像识别等。大数据给人们思维带来全新的改变，但在大数据阶段，相关技术的发展和支持也是关键。大数据体现出大数据量、多维度、完备性等特征，对数据的收集、存储、传输、处理带来很大的挑战。不过随着计算机技术的发展，这些问题已经慢慢得到了解决。水到渠成，现在的机器智能在大数据的推动下，已经展现出了跳跃性的发展，使得人类开始正视人工智能对人类带来的好处和挑战。人工智能能让我们这个社会更智能，例如智能交通系统、实时路况；能让我们这个社会更精细化，例如区块链（Block Chain）通过使用RFID技术跟踪产品的整个流通和交易环节；能让我们这个社会更个性化，例如新闻定制、疾病的个性化诊断等。大数据已经在农业灌溉（滴灌技术）、体育（数据分析、传感器反馈动作）、汽车制造、医药研究等等都发挥了重大的作用。但是，人工智能（大数据）就像之前的工业革命一样，也会冲击现在人类的生活。包括从数据的安全（数据泄露的风险）、隐私的安全，还有就是冲击现在的职业体系。很多人在预测，人工智能之后，很多职业会在将来消失，甚至包括一些我们现在看来需要很高智能和经验的职业。例如律师，人工智能能更快速识别历史的档案文书、找出其中的有效信息；记者编辑，机器人能从各自媒体中，寻找热点问题，并写出不逊于人类的稿子；甚至将来的疾病也能通过人工智能进行诊断。不管你愿不愿意，人工智能时代总要到来，那时将是一个最好的时代，也是一个最坏的时代（狄更斯《双城记》）。在这个时代到来的之前，我们需要做好什么准备，让这个时代成为我们最好的时代呢？ 文章摘要 全球数据量按每年平均40%的速度增长。 大数据与机器智能相伴而生，促进物联网从感知到认知并智能决策的升华。 用不确定的眼光看待世界，再用信息来消除这种不确定性，是大数据解决智能问题的本质。 几千年来，我们人类的只是都是建立在归纳法之上，归纳法隐含的假设就是『未来将继续和过去一样』，换句话说应该叫连续性假设。 可避免，每一次大的技术革命都会带来阵痛，但同时诞生的，还有更多新的机会。 数据是文明的基石，人类对它的认识也反映了文明的程度。 数据中隐藏的信息和知识是客观存在的。…数据中挖掘出信息，对其进行处理和抽象后就是知识。 很多时候，我们无法直接获得信息，但是我们可以将相关联的信息量化，然后通过数学模型，间接地得到所要的信息。而各种数学模型的基础都离不开概率论和统计学。 回到数学模型上，其实只要数据量足够，就可以用若干个简单的模型取代一个复杂的模型。这种方法成为数据驱动方法。它是大数据的基础，也是智能革命的核心，更重要的是，它带来一种新的思维方式。 大量数据的使用，最大的意义在于它能让计算机完成一些过去只能有人类才能做到的事情，这最终将带来一场智能革命。 今天几乎所有的科学家都不坚持『机器要像人一样思考才能获得智能』，但是很多门外汉在谈到人工智能时依然想象着『机器在像我们那样思考。』…机器智能最重要的是能够解决人脑所能解决的问题，而不是在于是否需要采用和人一样的方法。 笛卡尔的贡献在于提出了科学的方法论，即大胆假设，小心求证。这个方法论在我们今天的工作中还在使用。 牛顿找到了开启工业革命大门的钥匙，而瓦特拿着这个钥匙开启了工业革命的大门。 相比工业革命，任何王侯将相所谓的丰功伟绩都显得微不足道。 信息论的作用远不止在科学和工程上——它也是一种全新的方法论。与机械思维是建立在一种确定性的基础上所截然不同的是，信息论完全是建立在不确定性基础上，而要消除这种不确定性，就要引入信息。至于要引入多少信息，则要看系统中不确定性有多大。这种思路成为信息时代做事情的根本方法。 熵这个词，成了信息论和不确定性的代名词。 而数据之间的相关性在某种程度上可以取代原来的因果关系，帮助我们得到我们想知道的答案，这便是大数据思维的核心。大数据思维和原有机械思维并非完全对立，它更多的是对后者的补充。 亚马逊：由商品直接推荐商品（Item to Item） 对Google自动驾驶汽车的各种报道通常会忽视一个事实，那就是它只能去Google『扫过街』的地方。 新技术+原有产业=新产业 中学为体，西学为用。 安迪-比尔定律：比尔要拿走安迪所给的。（What Andy gives，Bill takes away） 安迪：intel的CEO，比尔：比尔.盖茨 主动的一方不是各种看得见摸得着的工业品生产商，而是提供软件和服务的一方。 通常人们在方便性和安全性方面优先考虑方便性，这是人的天性使然。 计算机系统的设计和高楼设计很大的不同是，前者实现并不考虑安全的隐患，而后者在每一个环节都要考虑安全的问题，这就是我们面临的现实。 工业时代的一个特征，就是一切标准化。 隐私就像自由，只有当人们失去它的时候，才知道它的可贵。 人类总体来讲是过分自信的，趋利而忽视危害，这一点研究幸福学和心理学的学者早就有了定论。 智能革命所要替代的是人类最值得自豪的部分——大脑。 其实社会公平只能反映在机会平等上，而不是结果平等。 在每一个重大的技术革命开始的时候，真正勇敢地投身到技术革命大潮中的人毕竟是少数，受益者更少，大部分人则会犹豫和观望。 使用大数据就像在一堆沙子里淘金，要从里面挖掘出有价值的东西。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IC、RFID、NFC关系与区别]]></title>
    <url>%2F2017%2F04%2F17%2FIC%20RFID%20NFC%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[IC卡 (Integrated Circuit Card，集成电路卡)有些国家和地区也称智能卡(smart card)、智慧卡(intelligent card)、微电路卡(microcircuit card)或微芯片卡等。它是将一个微电子芯片嵌入符合ISO 7816标准的卡基中，做成卡片形式。所以非接触式IC卡又被称为射频卡或者电子标签。IC卡是指集成电路卡，一般用的公交车卡就是IC卡的一种，也应用在门禁管理、身份证明和电子钱包。IC卡有别于磁卡，所以说IC卡消磁纯属伪科学！简单来说，其工作原理就是读卡器发射一个根据信息变化的电磁波。卡片内部的感应线圈把这个电磁波转换成感应电流，用以传递信息和驱动芯片工作。 射频识别即RFID（Radio Frequency IDentification）又称电子标签、无线射频识别，是一种通信技术，可通过无线电讯号识别特定目标并读写相关数据，而无需识别系统与特定目标之间建立机械或光学接触。常用的有低频（125k~134.2K）、高频（13.56Mhz）、超高频，无源等技术。RFID读写器也分移动式的和固定式的，目前RFID技术应用很广，如：图书馆，门禁系统，食品安全溯源等。 NFC是Near Field Communication缩写，即近距离无线通讯技术。由飞利浦公司和索尼公司共同开发的NFC是一种非接触式识别和互联技术，可以在移动设备、消费类电子产品、PC 和智能控件工具间进行近距离无线通信。NFC 提供了一种简单、触控式的解决方案，可以让消费者简单直观地交换信息、访问内容与服务。 以上介绍我们可以知道IC卡是一种存储数据的卡，而RFID是一种通讯技术，IC卡属于RFID的一种物理形式。NFC是由RFID演变出来的，向下兼容RFID，自然也兼容IC卡。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>IC</tag>
        <tag>RFID</tag>
        <tag>NFC</tag>
        <tag>视频识别</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[位图和矢量图的区别]]></title>
    <url>%2F2017%2F04%2F17%2F%E4%BD%8D%E5%9B%BE%E5%92%8C%E7%9F%A2%E9%87%8F%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[位图和矢量图是计算机图形中的两大概念，这两种图形都被广泛应用到出版，印刷，互联网[如flash和svg]等各个方面，他们各有优缺点，两者各自的好处几乎是无法相互替代的，所以，长久以来，矢量跟位图在应用中一直是平分秋色。 位图[bitmap]也叫做点阵图，删格图象，像素图，简单的说，就是最小单位由象素构成的图，缩放会失真。构成位图的最小单位是象素，位图就是由象素阵列的排列来实现其显示效果的，每个象素有自己的颜色信息，在对位图图像进行编辑操作的时候，可操作的对象是每个象素，我们可以改变图像的色相、饱和度、明度，从而改变图像的显示效果。举个例子来说，位图图像就好比在巨大的沙盘上画好的画，当你从远处看的时候，画面细腻多彩，但是当你靠的非常近的时候，你就能看到组成画面的每粒沙子以及每个沙粒单纯的不可变化颜色。 矢量图[vector]也叫做向量图，简单的说，就是缩放不失真的图像格式。矢量图是通过多个对象的组合生成的，对其中的每一个对象的纪录方式，都是以数学函数来实现的，也就是说，矢量图实际上并不是象位图那样纪录画面上每一点的信息，而是纪录了元素形状及颜色的算法，当你打开一付矢量图的时候，软件对图形象对应的函数进行运算，将运算结果[图形的形状和颜色]显示给你看。无论显示画面是大还是小，画面上的对象对应的算法是不变的，所以，即使对画面进行倍数相当大的缩放，其显示效果仍然相同[不失真]。举例来说，矢量图就好比画在质量非常好的橡胶膜上的图，不管对橡胶膜怎样的常宽等比成倍拉伸，画面依然清晰，不管你离得多么近去看，也不会看到图形的最小单位。 区别位图的好处是，色彩变化丰富，编辑上，可以改变任何形状的区域的色彩显示效果，相应的，要实现的效果越复杂，需要的象素数越多，图像文件的大小[长宽]和体积[存储空间]越大。 矢量的好处是，轮廓的形状更容易修改和控制，但是对于单独的对象，色彩上变化的实现不如位图来的方便直接。另外，支持矢量格式的应用程序也远远没有支持位图的多，很多矢量图形都需要专门设计的程序才能打开浏览和编辑。 常用的位图绘制软件有adobe photoshop、corel painter等，对应的文件格式为[.psd .tif][.rif]等，另外还有[.jpg][.gif][.png][.bmp]等。常用的矢量绘制软件有adobe illustrator、coreldraw、freehand、flash等，对应的文件格式为[.ai .eps][.cdr][.fh][.fla/.swf]等，另外还有[.dwg][.wmf][.emf]等。 矢量图可以很容易的转化成位图，但是位图转化为矢量图却并不简单，往往需要比较复杂的运算和手工调节。矢量和位图在应用上也是可以相互结合的，比如在矢量文件中嵌入位图实现特别的效果，再比如在三维影象中用矢量建模和位图贴图实现逼真的视觉效果等等。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>区别</tag>
        <tag>位图</tag>
        <tag>矢量图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《富兰克林传》读书心得]]></title>
    <url>%2F2017%2F04%2F10%2F%E3%80%8A%E5%AF%8C%E5%85%B0%E5%85%8B%E6%9E%97%E4%BC%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[富兰克林本人就是美国梦，或者说美国价值观的代表。他从一个贫困的学徒成长成为一个成功的商人、哲学家、政治家、外交家，成为了国王的座上宾。富兰克林一生，在科学和政治方面的建树颇多。科学上最著名就是那个闪电实验，并且发明了避雷针，在电学领域可谓是开山鼻祖。政治上，他在美国独立过程中发挥了重大的作用，包括作为美国独立宣言的起草人之一（执笔人只要是杰斐逊）；在他作为驻法代表的时候，运筹帷幄，分别签订了美英、美法和平条约；独立战争之后，在决定美国未来的制宪会议上，利用他的名望和长者身份，促进了协议的签订，为美国的统一发展打下了坚实的基础。富兰克林的一生，他的哲学观、宗教观、政治观都是以实用主义出发。他倡导一种勤奋、节俭的生活观，倡导一种服务他人、善待他人就是信仰上帝的德行，这后来发展成为了中产阶级的价值观。富兰克林给自己制定了一套道德体系，然后践行之，虽然不能说十全十美，但是富兰克林的一生确实是给自己道德要求树立了一个很高的标准。在宗教方面，富兰克林是宗教包容的先驱，他认为关注教义区别会引发分歧，试图确定上帝的意志又超出了人类的智力范畴，这样的行为对社会无益。宗教的目的应该在于推动人和社会的进步，任何涉及这一点的教义对他来说都是好的。他认为宗教实践很有意义，因为他们鼓励善举，有助于推动社会道德的进步。在外交上、政治上，在确保利益、确保目标的前提下，富兰克林能做出妥协，所以在他的努力下，达成了很多决定美国未来的协议和制度。但是，再伟大如富兰克林者，在他的一生中，也遭遇到很多挫折和困难，特别是在伦敦的时候，那时的他还是一个骄傲、忠诚的英国人，他希望加强大英帝国的力量，而不是寻求北美殖民地的独立。富兰克林尽最大的努力想争取提升美殖民地地位和权利，但是，在英国那些高傲的大臣那里折翼而归。在富兰克林感到深深挫败感的同时，也孕育了他以后反对英国、争取独立的思想的种子，而这也正成就了富兰克林名垂青史的一个转折点。 文章摘要 他是活生生的人，而不是先贤祠中冰冷的大理石雕像。 对于美国的“浪漫”传说之一就是人们为了自由，尤其是宗教自由才来到北美殖民地。 每个人，乃至整个人类，都在实践中获取知识和智慧，不断前行，自我完善。 激发大家做有意义的事情。 苏格拉底辩论法：苏格拉底通过温和的质疑说服别人的辩论法。通过提出一些温和的问题，逐步引导他人赞同自己的观点。这是一种温和的、间接的，而不是粗鲁的对抗。先对对方某种方面表示赞同，然后委婉地提出自己的异议。…这种柔和、间接的辩论方式，使得富兰克林在某些人眼里就像圣人一眼个，尽管善于说服和控制别人。 当一名男子开始追求异性的时候，他就会变得比一生中任何时候都要愚蠢可笑。 没有思想自由就不会有思想，没有言论自由就不会有公众自由。 国家内部最危险的伪君子是那些拿着福音书又宣扬法律的家伙。一个以福音书和法律为幌子的人很可能会用他的宗教信仰欺骗人民，并以法律的名义糟蹋国家。 富兰克林就是一个意志坚定、自我实现的人，他一生中都在有计划的为特定目标而努力。 关于人性的课：如果你能够不让他人心生妒忌，他们就更容易赞赏你的工作。 两个判断力差不多的人仔一起赌的时候，对钱更在乎的人往往会输，他对成功的渴望往往会冲昏了自己的头脑。…如果一个人太在乎输赢，往往会采取守势，因此就失去了主动权。 知识智能通过耳朵来获得，而不是通过嘴巴，因此在共读社内，富兰克林开始练习沉默和温和的交流。 讨论的目的不是驳倒对方。 那些对他人错误保持沉默的人，当他们自己犯错误的时候，将会得到更多的宽容。 相信当真理和谬误公平较量时，前者总会压倒后者。 八卦还有助于道德的提升，很多人行事的顾虑是担心公众舆论而非出于对道德准则的遵从。 其自传的主题之一就是不断犯错误，又不断地弥补。 婚前要睁大双眼，婚后要半睁半闭。 上帝赐予我们眼泪，却带走生命让它落下。 大多数自然神论者相信“总体的福佑”，就是上帝通过设定自然规律来体现自己的意志而不是插手人间的每件事。 富兰克林给自己类除了一系列的美德，然后逼着自己践行，就像一个人非要带着枷锁走路一样。 他的布道很少讲枯燥的教义，而是主张进行道德的实践，因此令我感到愉悦。 信仰是产生道德的手段 那些曾经帮助过你的人的愿意再次帮你，他们比那些你帮助过的人更愿意如此。 咖啡馆阶层 中产阶级 如果女人可以保持冷静，那么男人们也会很快冷静下来。 自食其力的人起码是自由的。 他认为不问青红皂白，随便找一个人要他承担其族人所犯下的罪过是不道德的。“假如一个脸上有雀斑、红头发的人杀了我的妻子或孩子，难道从此我就可以杀死在任何地方遇到的所有长雀斑的红发男人、妇女和儿童作为报复吗？” 新兴的中产阶级：既敌视无知的暴民，又与顽固的权贵对抗。典型的中产阶级生活，既节俭，又放纵。中产阶级吸纳了精英们的高雅举止和工人阶级的勤劳本质。 这些都是诬陷，却说得理直气壮。 远亲好相处。 现款交易 英国人攻击奴隶制是对殖民地人民要求自由的莫大讽刺。 沉默一直是富兰克林最有力的武器，使其看起来睿智、温和、安宁。 美国在国际事务中的力量将来自一种独一无二的现实主义和理想主义的融合。 在美国，无所事事是种罪孽，但在法国，忙忙碌碌则显得粗俗。 要抑制自己想要战胜对手的欲望，及时自己输了也要保持微笑。即使你的对手想悔棋，你也要保持冷静，欣然接受— 也许你可能会因此输掉这盘棋，但你将赢得对手的尊重。 战争无益处，和平总无害。 如果这位先生和凡尔赛花园中的神像都被提名担任大使，我肯定会毫不犹豫的投雕像一票，起码它不会对国家造成伤害。 只要积极、热情，别人自然而然地会对你产生好感。 富兰克林清楚地意识到与会代表之所以能够成功，并不是他们的自信，而是因为他们愿意承认自己可能会失败。 支持妥协并不是英雄主义、道德或永久确定性的必要元素，但这是民主进程的本质。 也许你会发现即使没有宗教的帮助，也可以很容易地过上一种道德高尚的生活，但是想一想人类中有很大一部分人是虚弱无知的男女，还有很大一部分是未经世事、思虑不周的青少年，这些人需要宗教的帮助来使自己远离邪恶。 我们发现其所有的观点均来自心灵的伟大。 夏天的微风让人感到凉爽本不在于风本身，而是因为其加快了人汗水蒸发的过程。 爱默生:每一种制度都可以被看作是一些伟人影子的延伸。 善于讲故事时富兰克林的本质特征。借虚构的人物表达自己的观点。 团体出发，不是个人功劳。他发现人们不愿意去支持“一项公益事业的倡导者，因为他们认为他可能是在沽名钓誉”。所以富兰克林尽量“隐身幕后”，将这一提议说成是大家共同努力的结果。这个方法的确有效，“所以我以后屡试不爽”。富兰克林发现，只要不把功劳揽到自己身上，人们是愿意伸出援手的。 响尾蛇，别践踏我。 不议论别人的短处 自嘲会让自己变得更有魅力。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>读书心得</tag>
        <tag>富兰克林</tag>
        <tag>传记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验视频]]></title>
    <url>%2F2017%2F04%2F10%2F%E5%AE%9E%E9%AA%8C%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[https://www.youtube.com/watch?v=sinQ06YzbJI]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>物理</tag>
        <tag>实验</tag>
        <tag>视频</tag>
        <tag>youtube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[富兰克林道德养成法]]></title>
    <url>%2F2017%2F04%2F10%2F%E5%AF%8C%E5%85%B0%E5%85%8B%E6%9E%97%E9%81%93%E5%BE%B7%E5%85%BB%E6%88%90%E6%B3%95%2F</url>
    <content type="text"><![CDATA[自己考虑也做一个表，模仿富兰克林的做法。能够成为18世纪美国最伟大的科学家，著名的政治家和文学家，本杰明·富兰克林的一生最真实的写照是他自己所说过的一句话：“诚实和勤勉，应该成为你永久的伴侣”。艰苦创业、自学成才、坚持不懈成就了他的伟大贡献，并载入史册，刻在不朽的年代石碑上，为后人树立模范，给后人前进的动力和远大的目标！那么，本杰明自身又是如何磨练自己的呢？人们口中常说的，“十三条成功计划”（13-point plan for honest living）具体指的又是什么呢？1.节制。食不过饱；饮酒不醉。2.沉默寡言。言则于人于己有益，不作无益闲聊。3.生活有秩序。各样东西放在一定地方；各项日常事务应有一定的处理时间。4.决断。事情当做必做；既做则坚持到底。5.俭朴。花钱须于人于己有益，即不浪费。6.勤劳。不浪费时间；不去关注那些无聊的言论，每时每刻做有用之事，戒除一切不必要的行动。7.诚恳。不欺骗人；思想纯洁公正；说话也应诚实。8.正直。不做不利他人之事，切勿忘记履行对人有益的义务而伤害他人。9.中庸。勿走极端；受到应有的处罚，应当加以容忍。10.清洁。身体、衣服和住所应力求清洁。11.宁静。勿因琐事或普通而不可避免的事件而烦恼。12.贞节。切戒房事过度，勿伤害身体或有损自己或他人的安宁或名誉。13.谦虚。效法耶稣和苏格拉底。 具体的操作见下文：https://zhuanlan.zhihu.com/p/24888319]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>富兰克林</tag>
        <tag>道德</tag>
        <tag>13条</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[美元]]></title>
    <url>%2F2017%2F04%2F10%2F%E7%BE%8E%E5%85%83%2F</url>
    <content type="text"><![CDATA[美元纸币面额越小，上面的人物越重要。 1美元，乔治·华盛顿（George Washington）不必多言，被视为美国的国父，正是在他的领导下，美国从殖民地成功地独立，没有他，就没有美国，作为地位美国总统，他就是美国“独立”象征。 2美元，托马斯·杰弗逊（Thomas Jefferson）独立宣言的起草人，被誉为“自由的使者”。他所代表的自由思想不仅是美国的立国之本，而且为全世界所广泛认同。 5美元，亚伯拉罕·林肯（Abraham Lincoln）被称为“伟大的解放者”。在所有的美国人当中，他是唯一一个几乎被所有人称赞的，不管是不是美国人。他代表了美国人“人人生来平等”的基本价值观。 10美元，亚历山大·汉密尔顿（Alexander Hamilton）美国的缔造者之一，政治家，外交家。他所实行的政策，使美国得以富强壮大。他重视个人财产，认为私人财产神圣不容侵犯。他是美国“个人主义”思想的代表。 他是美国“个人主义”思想的代表。 20美元，安德鲁·杰克逊（Andrew Jackson）美国第一任民选总统，他出生西部，在任期内，他使得美国政府建立起一个亲民的形象，他的亲民行为改变了美国的民主模式，创造了新民主，美国的字典里多了一个新词“杰克逊式的民主”。他是一个传奇，对美国政治的影响可谓深远。“人人都可成为总统”的梦想从他开始。 50美元，尤利西斯·S·格兰特（Ulysses S. Grant）美国的常胜将军，西点军校毕业，美国内战在他的手中结束，凭借其显赫的战功，成功当选为总统。他是美国人的英雄，他阻止了分裂，他是美国尚武精神的代表。 100美元，本杰明·弗兰克林（Benjamin Franklin）他有一连串的头衔——作家，发明家，出版商，科学家，外交家。有评价说他是十八世纪，仅次于华盛顿的名人。弗兰克林的自传家喻户晓，他没有显赫的家世，没有富裕的生活，仅仅靠自己对宗教的虔诚，对教育的重视，生活的简朴，以及不屈的奋斗获得了在各个领域的成功，他是美国“清教主义”的杰出代表。 貌似米国的人的重要程度是按纸币的流通程度来对应的]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>富兰克林</tag>
        <tag>美元</tag>
        <tag>人物</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[印花税的历史]]></title>
    <url>%2F2017%2F04%2F10%2F%E5%8D%B0%E8%8A%B1%E7%A8%8E%E7%9A%84%E5%8E%86%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[印花税由纳税人按规定应税的比例和定额自行购买并粘贴印花税票，即完成纳税义务。证券交易印花税，是印花税的一部分，根据书立证券交易合同的金额对卖方计征，税率为1‰。经国务院批准，财政部决定从2008年9月19日起，对证券交易印花税政策进行调整，由现行双边征收改为单边征收，即只对卖出方（或继承、赠与A股、B股股权的出让方）征收证券（股票）交易印花税，对买入方(受让方)不再征税。税率仍保持1‰。印花税（Stamp duty）是一个很古老的税种，人们比较熟悉，但对它的起源却鲜为人知。从税史学理论上讲，任何一种税种的“出台”，都离不开当时的政治与经济的需要，印花税的产生也是如此。且其间有不少趣闻。公元1624年，荷兰政府发生经济危机，财政困难。当时执掌政权的统治者摩里斯（Maurs）为了解决财政上的需要问题，拟提出要用增加税收的办法来解决支出的困难，但又怕人民反对，便要求政府的大臣们出谋献策。众大臣议来议去，就是想不出两全其美的妙法来。于是，荷兰的统治阶级就采用公开招标办法，以重赏来寻求新税设计方案，谋求敛财之妙策。印花税，就是从千万个应征者设计的方案中精选出来的“杰作”。可见，印花税的产生较之其他税种，更具有传奇色彩。印花税的设计者可谓独具匠心。他观察到人们在日常生活中使用契约、借贷凭证之类的单据很多，连绵不断，所以，一旦征税，税源将很大；而且，人们还有一个心理，认为凭证单据上由政府盖个印，就成为合法凭证，在诉讼时可以有法律保障，因而对交纳印花税也乐于接受。正是这样，印花税被资产阶级经济学家誉为税负轻微、税源畅旺、手续简便、成本低廉的“良税”。英国的哥尔柏（Kolebe）说过：“税收这种技术，就是拔最多的鹅毛，听最少的鹅叫”。印花税就是这种具有“听最少鹅叫”特点的税种。从1624年世界上第一次在荷兰出现印花税后，由于印花税“取微用宏”，简便易行，欧美各国竞相效法。丹麦在1660年、法国在1665年、部分北美地区在1671年、奥地利在1686年、英国在1694年先后开征了印花税。它在不长的时间内，就成为世界上普遍采用的一个税种，在国际上盛行。根据印花税暂行条例规定，个人买卖房地产按交易合同记载金额的万分之五的税率对买卖双方征收印花税。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>印花税</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[富兰克林共读会]]></title>
    <url>%2F2017%2F04%2F10%2F%E5%AF%8C%E5%85%B0%E5%85%8B%E6%9E%97%E5%85%B1%E8%AF%BB%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[富兰克林还制定了社规，每个成员在交流的时候必须回答这些问题，一共有24个（只摘录了13个）。鉴于其反映出了富兰克林的实用主义，有必要有选择地把它们一一列举出来。 在你新近读到的书中，你觉得有什么知识或有什么人写的书值得评论或向共读社推荐的吗？ 最近你是否听到了什么新故事适合与大家分享？ 最近你是否听说哪个人经商失败？你知道是什么原因吗？ 最近你是否发现某些人发展得不错？他用了哪些方法？ 最近你是否听说了本地或外地的有钱人发家致富的方法？ 最近你是否发现有些人做了你值得表扬和学**的事？或有谁犯了需要我们注意、避免的错误？ 最近你观察到货听说过哪些由于酗酒、轻率、冲动或其他什么恶行或蠢行引起的不幸吗？ 自上次开会以来，你听说了有哪些值得帮助的外地人来到城里吗？据你听到或看到的，他的品行或事迹如何？你认为共读社能否按他所应得的那样去帮助或鼓励他？ 最近你是否发现你所在地的法律有什么缺陷？如何才能完善？ 最近你是否发现有侵犯公民自由的行为？ 最近有人对你的名誉进行攻讦吗？共读社能做些什么来捍卫你的名誉？ 你想得到什么人的友谊而共读社或其中哪一名成员能帮助你吗？ 以什么样的方式，共读社或其他任何成员能对你的任何光明正大的计划进行援助？]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>富兰克林</tag>
        <tag>共读会</tag>
        <tag>规定</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[飞机如何抵挡「天打雷劈」？]]></title>
    <url>%2F2017%2F04%2F10%2F%E9%A3%9E%E6%9C%BA%E5%A6%82%E4%BD%95%E6%8A%B5%E6%8C%A1%E3%80%8C%E5%A4%A9%E6%89%93%E9%9B%B7%E5%8A%88%E3%80%8D%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[闪电会释放强大的能量，因此地面上的高耸建筑物通常会装置避雷针来预防雷击伤害，但飞机无法安装避雷针，若刚好经过雷雨区附近，就有可能遭遇雷击。此时，飞机会怎么样？有办法避免雷击或降低雷击伤害的程度吗？在雷雨天，雷雨云上的静电会与地面产生「感应电荷」，造成云底为负电、地表为正电的情况。根据导体表面电荷分布的特性，电荷的密度以及电场的强度都跟导体表面的曲率半径有关，半径越小（也就是越尖锐），电荷密度跟电场强度就越高（见下图），因此，地表上高耸尖锐的物体就成为电荷集中所在，该处产生的电场相较四周强，也是最容易引起闪电之处。于是大雷雨时，高耸的物体如旗杆、树木、高塔、烟囱、电线杆等，都会成为闪电的通道，这也是为什么下雷雨时，我们总是被告诫千万不要站在宽广的平地上，因为相对于空气，人是良好的导体，容易引导电荷而受雷击。高大的建筑物为了避免遭到雷击，通常都会安装避雷针。避雷针是一支顶部高出建筑物、底部与地面相接的金属杆（见下图），能够吸引附近的雷电到自己身上来，使雷电通过自身而排到地面上，也就是「接地」。因此，避雷针的原理并不是阻挡雷电，而是引导云层里的电荷沿着安全路径和地面的电荷中和，藉此保护建筑物免受雷电伤害。 高空放电，降低雷击伤害飞机在飞行中也有可能遭到雷击，但是飞机没有办法装接地的避雷针，该如何是好？其实飞机上的乘客不必担心这个问题，因为由金属构成的飞机外壳遭受雷击时，电荷会均匀移动到互斥力最小的金属外壳表面，而机身内部则不会有电荷，因此内部电场必定为零（见注）。尽管如此，遭遇雷击的飞机仍可能因强大电流使机身过热而局部变形或熔毁；电流所形成的磁场，也会影响机上的电子装置，对飞航安全还是会有一定的风险。为了降低雷击的危害，飞机的机翼尾端会装置静电刷（见下图），机身尾部通常也会安装，藉由尖端放电原理，释放机壳上因空气摩擦而产生的电荷。金属的尖端容易吸引电荷，也容易释放电荷，当机壳上的电荷因释放而减少时，就能够大大降低雷击强度，也就能减缓飞机遭受雷击时所造成的伤害。换言之，静电刷与避雷针不同，它主要目的在释放电荷以降低雷击强度。另外有些汽车会在后端保险杆装置一根可拖行在地面上的静电刷，也是为了排除多余的静电荷，如此一来，在干燥的天气中开车门，可减少触电的可能性（见下图）。每次雷击都会伴随巨大能量产生，虽然我们对雷电的认识还非常有限，然而目前开发出的各种避免雷击或降低雷击强度的科技，已经足以保障大部份的民众生活，雷击已经不再那么具有威胁了。 注：金属壳内部电场必定为零，可由金属壳外施一外加电场的简单例子了解。当金属壳外加一电场（如下图蓝色箭头所示），金属壳会被感应而带有正负电荷，正电荷往与电场同向的方向移动，负电荷则相反；移动的电荷会在金属壳内部建立与外部电场抵消的新电场（如下图红色箭头所示），因此金属壳内部的电场为零。 认识电击伤电力虽然是人类生活中不可或缺的重要能源，但用电不慎造成的伤害，也会带来不堪设想的后果！不论是遭遇大自然的雷击，或是电器触电，这一类的伤害都称为「电击伤」，比较常见的情形有心室纤维震颤、中枢神经系统受损，或者是肌肉麻痹引发呼吸终止等，其他诸如溶血、蛋白凝固、血管血栓形成、脱水、肌肉和关节分离等伤害，也经常可见。造成电击伤的主角是「电流」，主要是因为电流直接的伤害，或者是电流所经路径产生的热能伤害。一般来讲，决定电击伤严重程度的因素包含通过电流大小、接触时间长短，以及电流流经路径等。「高压电」对人体之所以危险，是因为人体的电阻低，高压电两极间可以产生非常大的电流；相反的，如果链接高压电的物体具有很高的电阻，则通过电极两端的电流就会非常微小，也就不会造成重大伤害。比较起来，人体遭受大自然雷击的伤害程度会远大于电路的电击。雷击时，巨大电流会在短瞬间通过人体，从人体的一点进入，然后从另一点流出，并在进出的两个点造成严重灼伤，大多数时候还会造成心跳停止、脑部伤害等。若不幸在户外遇闪电打雷时，要迅速寻找适当建筑物或掩蔽物，如果身边没有可以掩蔽的区域，应立即将身上的金属物，如项链、手表、眼镜等取下，并尽可能向低漥处移动，万万不可在大树或凉亭下躲藏，更不能紧邻高墙、电线杆或天线设施附近，这样才能减轻雷击的危害。 转自：http://www.mes.com.tw/work/mes65.htm]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>原理</tag>
        <tag>闪电</tag>
        <tag>避雷针</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[富兰克林的制宪会议收尾演讲]]></title>
    <url>%2F2017%2F04%2F10%2F%E5%AF%8C%E5%85%B0%E5%85%8B%E6%9E%97%E7%9A%84%E5%88%B6%E5%AE%AA%E4%BC%9A%E8%AE%AE%E6%94%B6%E5%B0%BE%E6%BC%94%E8%AE%B2%2F</url>
    <content type="text"><![CDATA[先生，我承认，这部宪法中的若干部分，我现在还不能同意，但我没有把握说，我将来永不同意这些部分。活了这么大的年纪，我已经历过许多场合，由于获得更佳信息，或经过更周密的思考，责任心驱使我改变原来的观点，哪怕是在重大问题上，原来以为自己正确，后来恰恰相反。因此，年纪越大，越倾向于怀疑自己的判断，更尊重别人的判断。的确，大多数的人，也和宗教里的大多数教派一样，以为他们自己拥有全部真理，凡是别人的观点与他们不同，就认定是谬误。新教徒斯蒂尔在一篇献词中告诉教皇。“我们两家教会”都对自己的教义确信不疑，彼此之间的唯一区别，是表述的方式不同：“罗马天主教一贯正确，英格兰国教从未错过。”虽然许多平民都认为自己一贯正确，自信程度之高，就和他们所属的教派一样，但是，很少有人表达得像一位法国太太那么自然，他与妹妹发生争执时说，“我也不明白这是怎么回事，妹妹，可是我从来没有遇到一个永远正确的人，除了我自己。” 先生，从这种感觉出发，我同意这部宪法，连同它所有的瑕疵，如果它们确是瑕疵；因为，我认定我们需要一个总体政府，而现在还没有政府的形式，可是人民如能得到良好治理，或许是他们的福音。我进而相信，这一次可能治理得好若干年，不过最后还是会以专制收场，和以前的一些共和形式结局一样，人们一旦过于腐化，就需要专制政府，没有能力建成其他形式。我也怀疑，不论再开多少制宪会议，未必就能制定一部更好的宪法。因为，等你再召集一批人来，发挥他们的联合智慧，不可避免，也会把他们的偏见、他们的激情、他们的错误观念、他们的地方利益、他们的私人之见，连人一起召集拢来。从这样的会议里，能指望产生完美无缺的结果吗？先生，令我感到惊诧的是，现在制定的这套制度，如此接近完美；我认为，这部宪法也会使我们的敌人感到惊诧，他们正满怀自信的等着，以为我们开会，也会和巴比伦人建造通天塔一样，每次总是劳而无功；以为我们各邦正处在分崩离析的边缘，此后每次见面开会，只不过是为了掐断彼此的喉咙。先生，为此，我同意这部宪法，因为我不指望还能更好，因为我也没有把握说，现在这部宪法就不是最好的。为了公益，我牺牲我认为宪法中还有谬误的私人之见。 我从未在外面窃窃私语。在此四壁之内，我的话语诞生，也在这里消失。如果我们每个回到选民那里去的人，都向他们报告自己对宪法的反对意见，力图获得一帮一派的支持，我们或许要避免大家采取这种做法，免得我们的崇高努力前功尽弃，我们真实或表面的全体一致，自然会在世界各国和我们自己人中间产生出高尚效果和巨大益处。任何政府。为了获得和保障人民的幸福，大部分的力量和效能，取决于印象，取决于民众对政府的良好印象，取决于对治理者的智慧和人格完整的良好印象。为此，我希望，作为人民的组成部分，为了我们自己，为了子孙后代，我们采取全心全意、全体一致的行动，尽我们能力所及，推荐这部宪法（如果得到邦联议会的认可和各邦制宪会议的批准），把我们未来的思想和努力，转向治国安邦。 先生，总的来说，我禁不住想要表达一种愿望：’制宪会议中每位对宪法或许还有异议的代表和我一起，就此机会，略微怀疑一下自己的一贯正确，宣布我们取得一致，在此文件上签上他的名字。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>富兰克林</tag>
        <tag>制宪会议</tag>
        <tag>演讲</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[英国人的姓氏趣谈]]></title>
    <url>%2F2017%2F04%2F10%2F%E8%8B%B1%E5%9B%BD%E4%BA%BA%E7%9A%84%E5%A7%93%E6%B0%8F%E8%B6%A3%E8%B0%88%2F</url>
    <content type="text"><![CDATA[早期居住在英国本土的人，一生下来就只取一个名，如：John（约翰）、Hilda（希尔达）。当时，人们群居共处，就地扎寨，因人稀寨小，取名John,Hilda的人屈指可数，人们不易混淆。随着岁月的流逝，小村寨扩展成了大村庄，有些大村庄变成了市镇。这样，在同一地方就有好几个人取名相同。那么人们是怎样区别这些同名的人呢？第一个办法就是在原来的名词后面加上本人的职业名称。譬如两个人都叫John,一个的职业是织布工（the weaver），另一个的职业是厨师（the cook）。人们就分别叫他们John the Weaver（织布工约翰），John the Cook（厨师约翰）。类似的例子还有：John the Miller（磨坊工约翰），John the Shepherd（羊倌约翰），John the Thatcher（盖屋匠约翰）。不久这些叫法就成了：John Weaver（约翰·威弗尔），John Cook（约翰&amp;·库克），John Miller（约翰·米勒），John Shepherd（约翰•谢泼德），John Thatcher（约翰•撒切尔）。这样英语中的第二个名字即英国人现在用的姓便产生了，而且很快用在小孩的身上。如：约翰·威弗尔的孩子可能叫做：Hilda Weaver（希尔达·威弗尔），Charles Weaver（查尔斯·威弗尔）等。古英语中有个名字叫Wright,原意是工人或制造者。制造两轮马车的人叫cartwright,造车轮子的叫wheelwright、造船的叫shipwright。英国人至今还使用许多类似Wright（赖特），Cartwright（卡特赖特）和Wainwright（韦恩赖特）的姓。更为常见的姓是Smith（史密斯）。英语中的smith一字原意是用金属材料制造东西的人，如：goldsmith（金匠），blacksmith（铁匠），tinsmith（锡匠），coppersmith（铜匠）。历史上有很长一段时期smith一直是个重要的职业。现在虽很少提到它，但在英国人的姓氏中却仍被使用。第二个办法是在原名字后加上住处名称。这样，同一村庄里名叫Tom（汤姆）的人，可根据他们住处区别开来，如：居住在山崖下的汤姆，紧挨林边居住的汤姆和家舍坐落在田野里的汤姆，从而出现了一系列以处所命名的姓：英文姓氏 英文字意 汉译Wood 树林 伍德Field 田地 弗尔德Ford 小津 福特Street 街道 斯特里特Cliff 悬崖 克利夫Tree 树 特里Lane 小巷 莱恩Bush 灌木丛 布什Brook 小溪 布鲁克Pond 池塘 庞德Lake 湖 莱克Forest 森林 福雷斯特 有些姓是通过区别同名人的外表得来的：英文姓氏 英文字意 汉译Short 矮的 肖特Brown 棕色的 布朗Long 长的 朗第三个办法是用某某人之子的说法。用此种方法可以把三个同叫亨利的人称为：Henry son of John． （亨利·约翰之子）Henry son of Robin． （亨利·罗宾之子）Henry son of William．（亨利·威廉之子）最后这些名字就演变成了Johnson（约翰逊），Robinson（罗宾逊），Williamson（威廉逊）。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>英国人</tag>
        <tag>姓氏</tag>
        <tag>来源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清教徒和新教徒的区别]]></title>
    <url>%2F2017%2F03%2F30%2F%E6%B8%85%E6%95%99%E5%BE%92%E5%92%8C%E6%96%B0%E6%95%99%E5%BE%92%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[清教徒应该也是信奉新教的，这一点没错。但是新教是一个含义很广的概念。简要的回顾一下宗教改革的历史。中世纪的西欧全部是天主教徒，天主教的一个重要要素是罗马天主教会是信徒和上帝之间的中介，而马丁路德发起的宗教改革运动则认为信徒可以和上帝直接沟通（因信称义），通俗的说就是踢开教会干革命。我们国家的教科书里一般把这个归结为教会的腐败，这个固然是原因之一，但是马丁路德的宗教改革与天主教还存在着许多深刻的神学分歧。在马丁路德之后，各地都出现了宣扬与天主教教义不同的信徒，这些信徒彼此之间的神学差异都很明显的，而他们的共同点是不认可罗马教会在信徒和上帝间的中保地位，这些信徒被统称为新教徒。最著名的信教分支包括跟随马丁路德的信义宗，主要是在德国传播，跟随另一位宗教改革巨头加尔文的加尔文宗（又是也被称为长老宗），加尔文宗在法国也被称为胡格诺宗。此外瑞士和苏格兰都是比较有名的长老宗的根据地。英国的情况则有点特殊，英国当时也脱离了天主教会的管辖。不过英国的改革并不是来自于民间的神学运动，而是以国王名义由上而下的强制行动。亨利八世决定脱离天主教会的原因已经有点说不清了，为了离婚这个理由虽然够八卦，但肯定不是主要理由。不管怎么说，英国国王成为了新宗教的首脑，英国的教会从此也被称为英国国教或者圣公会。顺便可以插一句，于是英国官方的宗教成了圣公会，民间依然有不少天主教徒，苏格兰主要是长老会信徒，爱尔兰地区则依然信奉天主教徒，而英国历任国王的信仰则不怎么稳定。这也成为英国此后将近两百年国内宗教骚乱的肇始。就我个人的观点1640年英国革命不仅能说成资产阶级革命，肯定也是宗教战争。至于清教，则同样是新教的一支，但要比前述宗教改革晚一两代人，清教徒大体说来推崇加尔文宗的教义，但是他们恪守更加严格的道德戒律和行为准则，而且他们相信新教（主要指圣公会）虽然是以反对腐败的天主教之名诞生，但是本身也已经趋于腐败，而他们则要清除这种腐败的趋势。这也是清教得名的原因。因为教义上的差别，清教徒在英国国内受到国教的压制，从而促使大量清教徒前往英国在北美的殖民地。 链接：https://www.zhihu.com/question/20098275/answer/13966750]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>清教徒</tag>
        <tag>新教徒</tag>
        <tag>宗教改革</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《卓有成效的管理者》读书笔记]]></title>
    <url>%2F2017%2F03%2F28%2F%E3%80%8A%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[看过序最多的一本书，一共有六个推荐序. :-）作为管理学大师，作为第一位把管理进行科学化的思想家，德鲁克的管理学书籍通过简单易懂的描述，阐述了管理的精髓。现在社会以知识工作者为主，不同于以往的体力工作者，没有一套可量化的、固定的检查、考核体系能对知识工作者进行过程考核。所以，为了提高组织的绩效，管理者（大部分的知识工作者）必须提高自我的绩效，进行有效的自我管理才能达到组织的目的。本书围绕着，如何让自己成为一个有效的管理者。作者明确指出，卓有成效不是一种天赋，而是一种可以通过后天努力和实践学会的能力。所以，作者通过有效的时间管理、重视贡献、发挥人的长处、要事优先（其实也是时间管理的一部分）、有效决策等方面进行展开，说明了如何通过这些手段，让自己成为一个卓有成效的管理者。作者的很多观点，现在看来都耳目能详、天经地义，但是放回50年前（本书1966年出版），作者能在二战后不久，就提出这样的管理理念，确实是让人叹为观止。就像吴晓波在悼念德鲁克（2005年11月11日，彼得·德鲁克在酣睡中悄然去世）的文章所说的：“他走了之后，下一个该轮到谁来替我们思考管理？” 下面是本书的一些读书摘要 一、卓有成效是可以学会的把事情做对（to do things right）的能力，而不是“做对的事情”(to get the right things done)的能力的确，谁也不知道一位知识工作者在想些什么。然而，思考却是他的本分，他既然是在思考，他就是在工作。知识工作者并不产生本身具有效用的产品，他生产的是知识、创意和信息。知识工作者是一项特殊的“生产要素”。 一个专业人员的产出必须与其他人的产出结合在一起，才能产生成果。知识工作不能用数量来衡量，也不能用成本来衡量。衡量知识工作者主要看其成果。在组织内部不会有成果出现，一切成果都是发生在组织外部。对于外部的情况，真正重要的不是趋势，而是趋势的转变。趋势的转变才是决定一个机构及其努力的成败关键。对这种转变，必须有所察觉，转变是无法估量，无法界定，无法分类的。 二、掌握自己的时间在大型组织中，如果知识工作者的绩效表现不错，往往是因为该组织的高级主管能定期抽出时间来和他们进行交流。**例如交流： 你认为我们组织的领导，对你的工作应该了解些什么？ 你对我们这个组织有什么看法？ 你觉得我们还有哪些尚未开拓的机会？ 你觉得我们有哪些尚未觉察的危机？ 你希望从我这里知道些什么？** 只要遇到人事问题，决策总是很慢，并且需要经过多次考虑，才能最终定案。关于用人，通用总裁斯隆说过：“我没有秘诀。我只是有这样的感觉，我第一念就想到的人选，往往不会是最适当的人选。我总要反复再三，才能做最后决定。” 1、如何诊断自己的时间必须在处理某一工作的“当时”立即加以记录，而不能凭记忆补记。每月定期拿出来检讨。 找出什么事根本不必做逐项问：这件事如果不做，还有什么后果？如果认为不会有任何影响，那么这件事便该立即取消。（审视一下，这类事情对组织有无贡献，对于他本人有无贡献，或是对于对方的组织有无贡献。如果都没有，只要谢绝就得了。） 时间记录上的哪些活动可以有别人代为参加而又不影响效果 是否管理者在浪费别人的时间。 2、消除浪费时间的活动 找出缺乏制度或远见而产生时间浪费的因素例如，一项重复出现的危机应该是可预见的，因此，这类危机可以预先防止，或可以设计成一种例行作业，是每个人都能处理。 人员过多，也常造成时间浪费用一个人，应该是每天的工作都需要用到他。 组织不健全。其表现就是会议太多。会议是组织缺陷的一种补救措施。一个结构设计臻于理想的组织，应该没有任何会议。 信息功能不健全。 3、统一安排可以自由支配的时间以90分钟为一单元。根据研究发现，一个普通人“超过90分钟”精力就难以集中，而“不够90分钟”则难以处理好一件事情 三、我能贡献什么管理者要由技术进入到观念；有机械性工作进入到分析性方法；由效率进入到成果；管理者要自省：为什么组织聘他为管理者？他应该对组织由什么影响？管理者如果能着眼于贡献，那么他所重视的应当不仅是“方法”，而是“目标”和“结果”。 1、管理者的承诺重视贡献、关注整体绩效、关心组织目标。贡献的体现： 直接成果； 树立新的价值观及对这些价值观的重新确认； 培养与开发明天所需要的人才； 但是，职位的变化会使上面三种绩效之间的相对比重发生变化。所以，职位变化的时候，需要对自己提出新的挑战，需要看到努力的方向。一个管理这的职位越高，他在对外方面所需的贡献也越大，因为一个组织里，通常只有职位最高的管理者，才能在对外方面自由活动。 2、如何使专业人员的工作卓有成效对别人提出的问题：为便于你为机构做出贡献，你需要我做些什么贡献？需要我在什么时候，以哪种形式，用什么方式来提供这些共享。 3、正确的人际关系着眼于贡献 互相沟通 团队合作 自我发展对自己设定目标。 培养他人 4、有效的会议会议是管理者每日使用的管理工具。规则：你可以主持会议，听取重要的发言，也可以是与大家共同讨论。但你不能即主持会议，又高谈阔论。 四、发挥人的长处不仅要发挥下属的长处，我们还要发挥自己的长处，甚至要帮助上级发挥他的长处。充分发挥人的长处，才是组织存在的唯一目的。（用人之长、容人之短）一位管理者，如果仅能见人之短而不能识人之长，因而刻意避其所短，而非着眼于发挥其所长，则这位管理者本身就是一位弱者。他会觉得别人的才干可能构成对他本身的威胁。但是，世界上从来没有发生过下属的才干反而害了主管的事。美国的钢铁工业之父卡内基的墓志铭说得最为透彻：“这里躺着的人，知道选用比自己能力更强的人来为他工作。”充分发挥人的长处，这是对人的尊重；尊重自己，也尊重他人。这是管理者的价值观在行为上的体现。真正“苛求的上司”（实际上懂得用人的上司大部分都是“苛求”的上司），总是先发掘一个人最擅长做些什么，再来“苛求”他做些什么。通过组织来克服人的短处，就像一个球队、一个游戏的卡牌组合，都是充分利用个体的长处，个体的短处通过其它个体来弥补，达到最好的配合效果。因人设事的结果，是必将产生恩怨派系，组织绝对不能出现这种情况。我们常常可以听到这样的说法：能建立起第一流经营体制的管理者，通常不会与周围的同事及下属保持过分亲密的关系。（会造成跟进个人好恶来挑选人才） 1、用人的四个原则 卓有成效的管理者不会将职位设计成只有上帝才能胜任；只有让平凡的人都做出不平凡的事的组织，才是好的组织。 职位的要求严格，而涵盖要广；一位知识工作者在初任某一职位时，其职位的标准，应能作为他日后发展的引导，应能成为他衡量自己、评估贡献的依据。某人在某一组织能有什么贡献，他本身的指示和技能是一个因素，组织的价值观和目标也是同样重要的因素。 卓有成效的管理者在用人时，会先考虑某人能做些什么，而不是先考虑职位的要求是什么。面谈考评是整个考评制度的重心所在。今天大多数组织制定的考评方法，其实是脱胎于一般医生对病人的评估。医生的目的在于治病，医生重视的是病人的毛病，而不是病人的优点。 卓有成效的管理者知道在用人所长的同时，必须容忍人之所短。 2、如何管理上司人大致可以分为两种类型：“读者型”和“听者型”。协助上司发挥其所长，是促使管理者有效的最好方法。 3、充分发挥自己的长处所谓“别人不让我干”，恐怕是惰性和没有勇气的借口吧。就算是客观条件真有限制（事实上任何人做任何事均免不了有限制），也一定仍然可以做出许多有意义的重要工作来。难点是在于如何发现一个人的长处！ 思考自己的长处！他会问“此人能做些什么？” 他会问：“哪一类工作别人多起来要费九牛二虎之力，而我做起来确实轻而易举？” 五、要事优先first things first.do one thing at a time. 1、摆脱昨天尤其重要的是：有效管理者打算做一项新的业务，一定先删除一项原有的业务。这对控制组织的“膨胀”是非常必要的。（推陈出新）社按压力来决定优先，说到压力，往往总是为了昨天。&nbsp;确定优先次序的重要原则： 重将来而不重过去； 重视机会，不能只看到困难； 选择自己的方向，而不盲从； 目标要高，要有新意，不能只求安全和方便。 &nbsp;所谓“领导力”，并不是指智慧和天赋，而是指人人皆可达成的专心、决心和目标。 六、决策的要素防守政策将麻醉管理处的创造力。一个垄断性的企业虽然没有对手，但是应该以将来作为对手。决策，不是为了适应当时的临时需要，而是战略性的考虑。 决策的五个要素 要确定了解问题的性质，如果问题是经常性的，那就只能通过建立规则或原则的决策才能解决；以为有效的决策者碰到问题，总是先假设该问题为“经常性质”。他总是先假定该问题是一种表面现象，另有根本性的问题存在。 要确实找出解决问题时必须满足的界限，换言之，应找出问题的“边界条件”；解决某一问题应有什么最低需要。 仔细思考解决问题的正确方案是什么，以及这些方案必须满足哪些条件，然后再考虑必要的妥协、适应及让步事项，以期该决策能被接受；研究“正确”的决策是什么，而不是研究“能为人接受”的决策是什么。人总有采取折中方法的倾向。 决策方案要同时兼顾执行做事，让决策变成可以被贯彻的行动；决策应该匹配当前的管理水平、人员水平，需要考虑这一决策应该有谁来执行？他们能做什么？同时设计出验收标准。 在执行的过程中重视反馈，以印证决策的正确性及有效性。军队中最重要的反馈是亲子视察，报告或沟通不一定靠得住。 2000年前罗马律法就曾说过：“行政长官不宜考虑鸡毛蒜皮之类的事情。” 七、有效决策1、人见解和决策的关系决策的原则：除非有不同的见解，否则就不可能有决策； 2、反面意见的运用换位思考的能力，决策需遵循以下原则： 如果利益远大于成本及风险，就该行动； 行动或不行动；切忌只做一半或折中。 3、决策与电脑电脑的决策是“硬性原则”的决策相对电脑，人的逻辑性虽然不是特别强，但是人能够洞察，这正是人的有点所在。 文章摘要 德鲁克先生主张以创新这类演进的方式解决发展的问题。 从理解全局或整体出发，寻找不同事物之间的内在联系性，达到把握和解决个别问题的目的。 管理得好的工厂，总是单调乏味，没有任何激动人心的事件发生。 个人注：类似运维 有效管理就是要防患于未然，将例外管理变成例行管理。 个人注：类似风险管理。 在组织而言，需要个人提供其贡献，在个人而言，需要组织作为达到个人目的的工具。 总有人单独作战，无一部属，然而仍不失为管理者。 德鲁克是推动管理学发展成为一门严肃科学的先驱。 知识工作者的成果通常要与其他人的成果结合起来才能产生效益，因而管理者的作用日益凸显。 由于只是工作者难以监督，因而组织效率将取决于组织成员能够对自身进行有效的管理。 真正有创造力的企业要使组织内部每个员工具有企业家精神。 管理有效性的关键，不在于有效的管理别人，而在于有效地管理自己。 事实上，只要暂缓，就不会启动，也许永远不会启动。 形成“高层次概念性认识”，从高层次观念入手，寻求解决问题的系统方案。 管理最为重要的作用，就是把人们联系在一起共同实现目标的工作过程。 把脚踩在大地上，踏踏实实在工作中实践。 管理是一门实践的学科，管理不单在于“知”，更在于“行” 知识权威、职位权威。 对管理者的有效性而言，最重要的人物，往往不是管理者直接控制的下属，而是其他部门的人，即所谓的“旁系人士”，或是管理者本人的上司。一位管理者如果不能与这些人主动接触，不能是这些人利用他的贡献，他本身就没有有效性可言。 所谓事实，应该是已经认定，已做分类，并且已确知其关联性。在我们对其量化之前，必须掌握一个概念，那就是：必须从无数现象中抽象出某一具体的特性，并对其命名，然后才能进行计算。 社会生活及政治生活中最显著的一项事实是：暂时性的事物往往具有永久性。 **世事洞明皆学问，人情练达即文章。 奉为圭臬 fèng wéi guī niè ：奉：信奉；圭：意为土圭，测日影器；臬：意为水臬，古时测量水平的仪器；圭臬：比喻事物的准则。比喻把某些言论或事当成自己的准则。南橘北枳 nán jú běi zhǐ 枳：落叶灌木，味苦酸，球形。也叫枸橘。南方之橘移植淮河之北就会变成枳。比喻同一物种因环境条件不同而发生变异。** a blind Venetian 威尼斯盲人a Venetian blind 软百叶窗帘（活动百叶窗）]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>管理</tag>
        <tag>德鲁克</tag>
        <tag>卓有成效</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运筹学]]></title>
    <url>%2F2017%2F03%2F27%2F%E8%BF%90%E7%AD%B9%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[运筹学里面其实更重要的是建模。换言之，就是看现实问题和数学语言是怎么对应的。这个因为考试的原因，太容易被忽略了其重要性。建模这事情说难不难说易不易。易在好像就是定义几个变量，定义一下变量之间的关系和目标函数。难在:1、对现实问题要看透：什么才是问题里面的最重要的因素，抓住重点:2、找到最合适的数学语言和它对应，3、模型要尽量容易解 第一点是因问题而异的，没法聊。第二点是可以通过了解各种模型适用于刻画具有什么结构的问题来达到。运筹学里面有很多模型。举几个例子：1、线性规划能表示所有有线性结构的问题，例如做采购，我们知道了每家供应商的固定价格和最大供应量，我们希望最小化成本，那总成本＝单价×数量，这个就是这个问题里面的线性关系。2、整数规划能处理一些线性规划处理不了的问题。例如还是采购，假如选了某家供应商，每选定一个供应商，还要增加一个固定成本，于是我们就要多设一个变量来代表是不是选了这个供应商，这时候就需要整数限制。不然那个变量解出来等于０.５，我们只选半个它？3、当现实问题涉及多个参与者，每个参与者都有自己优化的东西，这时候就涉及互动，就可以将博弈论派上用场了。4、如果见到一个系统是随时间变化的，就可以考虑用最优控制。 等等等等。懂了对自己身边的具体问题建模，再拿个软件解一下模型，对大部分人就够了。所以要看书或者看视频自学的话，第一步是，每一章只看前面讲建模（modeling或者formulation）那一节。够用了。但是对于要更深入地去懂运筹学还不够。做得好的运筹学问题都是这样的：1、深刻认识现实问题2、用数学语言描述问题（建模）3、用数学工具研究模型4、再把研究出来的成果从数学语言翻译成我们能看懂的语言（例如汉语，英语。。。） 前面我们只聊到１,２和一点点３，真正的美出现在４。４的重要意义在于如果我们把一个问题解出来了，但是看不懂解出来的是什么，那么我们对这个问题其实是没有增加多少认识的。有些时候还会导致其他问题，例如你在解决某个现实问题的时候，你把一个计算机解出来给你的解拿来用了，发现现实情况不像你想象中那样，那怎么办？是计算机算解错了吗？还是你的模型没建好吗？如果有人给你投资做一个某些方面的优化系统，人家能信得过这样靠建个模型解个解得出的方案吗？大多数不懂你在做什么的人是不会信的。所以好的解可以提供insight！（能让人读懂的现实含义）例如Kelly Gambling，假如已知有n匹马，他们胜率分别是b_i,跑第一的话投1块钱能赢o_i块钱，你总共有100块钱（你可以当成一百万，具体数目不重要，关键是比例），投到第i匹马的钱是100p_i。假如你要买马买无数次，那应该怎么分配你的钱到各匹马上去？这个问题的解就是p_i和b_i成比例。给我们的insight就是，获胜几率大的多放点钱，几率小的少放点钱，就是这么简单。这个model的解给了我们分散投资的idea。这是最简单的情况，马和马之间是indepedent的，如果是投资股票，股票之间可能有相关性，如果这个相关性很重要，建模的时候就把它也考虑进去，得到考虑了相关性的解，再试图去interpret你的解。如果相关性不太重要，就没必要把模型搞复杂。能得到给我们insight的解难吗？当然难！要想４出现，前面的１，２,３一定要简洁而深刻。模型既能抓住问题的重点，还要足够简单，不然最后出来的结果怎么可能让人看得懂。这里头需要的可不仅是扎实的数学基础，数学只是描述问题的一种语言，更重要的还是对具体问题的认识和对建出来的模型的预判。对于一个现实问题，建立一个简单好解又能较好地描述现实情况的模型，是一种艺术。这是数学界甚至科学界追求的美的原则：simple and elegant.]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>运筹学</tag>
        <tag>建模</tag>
        <tag>线性规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Struts2技术内幕：深入解析Struts架构设计与实现原理》读书笔记]]></title>
    <url>%2F2017%2F03%2F20%2F%E3%80%8AStruts2%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%EF%BC%9A%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90Struts%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[网上查阅开发框架资料时，知乎推荐《Struts2技术内幕：深入解析Struts架构设计与实现原理》这本书。本书2013年出版，在亚马逊上只有Kindle电子版，后来在孔夫子旧书网上下单买了一本旧的全新书。购买本书时也犹豫过，一是，这是本号称技术内幕的书，担心作者会陷入技术的细枝末节；二是，对中国人写关于技术的书，大多在堆砌不同资料的套路中来回，结果都是大杂烩，对本质的东西反而讲不透。但是当开始看这本书的时候，就真正被吸引了，有一种爱不释手的感觉。作者的逻辑是，我们编程过程碰到什么问题？解决方案是什么样？具体实现方式以及背后的思想是什么？围绕这三个环节深入浅出的把Struts框架进行讲解，让人读后有一种醍醐灌顶的感觉，让读者真正做到知其然并知其所以然。总体来说是一本难得的好书。Struts2框架是表示层的框架，MVC又是表示层最经典的设计模式（最佳实践），所以本书最核心的部分是围绕着MVC模式在展开，讲述了为了满足MVC的实现，在数据流、控制流方面，整个框架是如何设计、各层是如何交互的。虽然目前Spring MVC异军突起，已经有开始取代Struts2的局面，但是从框架原理和思想角度来说，其实是相通的。关键点不是具体技术的细节，而是技术后面的方法论，技术背后的思想和思考问题的方法。下面是本书的一些读书笔记整理。 一、Struts2的架构 二、框架及设计模式 struts2是表示层框架的框架 因为其最为核心的内容就是和Web容器打交道，帮助我们处理Http请求。Struts2通过扩展实现Servlet标准来处理Http请求。 Spring是业务层的框架 Hibernate是持久层的框架 MVC是表示层的最佳实践（设计模式） M其实是请求—响应的数据模型（数据流） 本书的关于表示层的问题及解答：表示层的困惑 三、容器及依赖注入容器（Container），不仅支撑起一个框架的所有对象，同时也称为框架运行过程中最为重要的一个辅助元素，也是整个框架得以运行的核心基础。为了更好的管理对象的生命周期，解决如下两个问题： 1、在程序运行期间，应如何创建我们所需要的对象？ 2、当创建一个新的对象时，如何保证与这个对象所关联的依赖关系（其关联对象）也能够被正确的创建出来。 当我们需要寻求容器帮助时，只要再恰当的地方加入一个标识符Annotation，容器在进行依赖注入操作时，就能够知晓并接管整个过程了。在这里，我们看到两个过程共同构成了XWork容器进行对象依赖注入操作的步骤： 1、没某个对象的方法、构造函数、内部实例变量、方法参数变量加入@Inject的Annotation； 2、调用容器的inject方法，完成被加入Annotation的那些对象的依赖注入。 因为，我们这里顺利解决了容器定义中所提出的一个核心问题：如何建立起系统到容器或者容器托管对象的沟通桥梁—通过@Inject声明来完成。 在容器内部进行缓存的是对象实例的构建方法，而不是对象实例本身。这就让容器看起来像一个工厂集合，能够根据不同的要求，制造出不同种类的对象实例。 四、配置元素配置元素分类：从节点所表达的逻辑含义和节点在程序中所起的作用对配置元素进行分类。 1、容器配置元素Bean节点：构成程序运行时的对象Constant节点：程序运行的执行参数 2、事件映射关系Package节点：定义了一种事件请求响应的映射关系，反映的是Strut2对于外部事件情就是如何进行响应的处理序列。 五、Servlet及线程安全是J2EEden重要标准之一，规定了Java如何响应Http请求的规范。通过httpServletRequest和HttpServletResponse对象，我们能够轻松地与Web容器交互。线程安全，指的是在多线程环境下，一个类在执行某个方法时，对类的内部实例变量的访问时安全的。Servlet兑现故事一个无状态的单例对象（singleton），所以可能这个实例在不同的线程执行的时候，导致线程的实例变量被修改，因而不是线程安全的。ThreadLocal模式（以空间换时间）和Synchronized关键字（以时间换空间）都是用于处理多线程并发访问变量的问题。ThreadLocal模式两个步骤： 1、建立一个类，并在其中封装一个静态的ThreadLocal变量，使其成为一个共享数据环境； 2、在类中实现访问静态Trespassing变量的静态方法（设值和取值） 使用ThreadLocal模式，可以对执行逻辑与执行数据进行有效地解耦。这一点是ThreadLocal模式给我们带来的最为核心的一个影响。因为在一般情况下，Java对象之间的写作关系，主要是通过参数和返回值进行消息传递，这也是对象协作之间的一个重要依赖。而ThreadLocal模式彻底打破了这种依赖关系，通过线程安全的共享对象来进行数据共享，可以有效避免在编程层次之间形成数据依赖。这也称为XWork事件处理体系核心的设计。 六、表达式引擎OGNL表达式引擎 OGNL（Object Graph Navigation Language）： 使用某些符合特定规则的字符串表达式来对Java的对象进行读和写的操作。 解决了Web应用与Java世界之间的沟通问题。既然要使用Java来开发Web应用，就必须使Java的变成要素能够与Web浏览器之间在数据层面保持良好的沟通，而这种沟通就是通过表达式引擎来完成的。不同编程层次之间进行数据沟通的重要桥梁。数据在不同的MVC层次上，扮演的角色和表现形式不同。这是由于Http协议与Java面向对象之间的不匹配造成的。如果我们要数据在View层（页面）和Java世界中互相流转传递，就会在“字符串”与“对象树”之间存在不匹配。这就需要一个翻译的角色来解决这种不匹配。这个角色，就是我们所说的表达式引擎。 七、请求 - 响应模式 1、参数 - 返回值（Param-Return）模式对象的方法成为请求 - 响应模式在Java世界中的一种直观抽象； 2、参数 - 参数（Param-Param）模式参数 - 参数模式是一种最为基础的请求 - 响应实现机制，也是底层规范不得不采用的一种实现机制。 3、POJO模式POJO相对于某一次的响应是有状态响应。因为响应的处理流程、处理机制和处理结果，与当前POJO实例的内部属性的状态有关。POJO模式直接从概念上突破了Servlet的对象的限制，将每一个请求的处理映射到一个县城安全的响应对象中去执行。因而从模式上讲，POJO模式是对传统的Servlet模式的而一个重大改进，是一种崭新的请求 - 响应模式的实现。 文章摘录 轻量级的Web应用服务器是Jetty，无需安装、速度快，成为众多程序员进行Web开发调试的首选。 调试源码是本书最为推荐的一种源码级别学习方法 因为只有了解了为什么，我们才能知道怎么做，知道如何才能做得更好。 当我们加载一个JAR包到CLASSPATH时，实际上是获得了JAR中所有对JDK的额外支持。 框架只是一个JAR包而已，其本质是对JDF的功能扩展 最佳实践 Best Practice简单是美 Simple is Beauty！化繁入简 Heavy to light. 可读性、可维护性和可扩展性。 配置就像是程序的影子，与程序总是如影随形。 HTML语言是一种静态语言，它自身缺乏数据沟通的能力，也就是说，HTML语言需要另外一种机制的帮助才能完成与服务器端程序的沟通和逻辑控制。 JSP（Java Server Page）允许在构成Page的HTML语言之上，嵌入Java的语法片段，从而加强其与Server的交互能力。达到，页面视图的构建、与服务器端进行数据沟通。所有JSP在运行期间都被编译成Servlet在Web容器中运行。 HttpServletRequest兑现规划组要用于处理整个Http生命周期中的数据。 视图的本质是Web容器对象HttpServletRequest（负责数据处理）和HttpServletResponse（负责内容呈现）对浏览器行为的控制。 AJAX技术所带来的对视图便是的最重要 影响谬事通过JavaScript操作HTML的DOM节点来进行视图输出控制。它也逐渐成为视图表现的一个重要选择方向。不过我们可以发现，使用JavaScript来进行视图输出的控制实际上是把视图呈现的职责转移到了客户端变成的范畴，这是一种“职责转移”。 模块化实际上只一种“分而治之”的思想。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>框架</tag>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表示层的困惑]]></title>
    <url>%2F2017%2F03%2F18%2F%E8%A1%A8%E7%A4%BA%E5%B1%82%E7%9A%84%E5%9B%B0%E6%83%91%2F</url>
    <content type="text"><![CDATA[《Struts2技术内幕：深入解析Struts架构设计与实现原理》第2章固本清源—Web开发浅谈，本章讨论的话题是非常重要的，因为任何细节都无法脱离基本概念而存在。如果我们要探寻Struts2的细节，就必须了解Struts2作为一个框架存在的基本意义。本节为大家介绍表示层的困惑。除了上述这3段源代码外，我们还需要建立起JSP页面中的form请求与Servlet类的响应之间的关系。这一关系，是在web.xml中维护的，如代码清单2-9所示。代码清单2-9 web.xml12345678&lt;servlet&gt; &lt;servlet-name&gt;Register&lt;/servlet-name&gt; &lt;servlet-class&gt;example.RegistrationServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;Register&lt;/servlet-name&gt; &lt;url-pattern&gt;/struts2_example/registration&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 我们来看看上面的这4段代码是如何构成MVC的雏形的。 Model（数据模型）—User.java View（对外交互）—registration.jsp Control（程序执行和控制）—RegistrationServlet.java URL Mapping（请求转化）—web.xml我们可以看到MVC的实现似乎并不复杂。在不借助额外的框架帮助的前提下，只要基本知晓JSP和Servlet标准（它们是使用Java进行Web开发的规范和标准），任何程序员都可以像模像样地实现MVC模式，因为从原理上讲，MVC只是一个概念，我们只需要把这个概念中的各个元素赋予相应的程序实现即可。不过程序终究是一个动态的执行过程。一旦程序开始运行，上面的这些程序实现就会开始遭遇种种困境。这些困境主要来源于两个方面：其一，出于程序自身的可读性和可维护性考虑，需要通过重构来解决程序的复杂性困境。其二，出于业务扩展的需求，需要通过框架级别的功能增强来解决可扩展性困境。 问题1 当浏览器发送一个Http请求，Web容器是如何接收这个请求并指定相应的Java类来执行业务逻辑并返回处理结果的？这个问题是使用Java进行Web开发的核心问题之一，我们将这个问题简称为URL Mapping问题。这个问题的本质实际上来源于Http协议与Java程序之间的匹配和交互。Web开发经过了多年的发展，这一核心的哲学问题也经历了多次重大变革，有的崇尚由繁至简，有的则从形式多样化入手。在上面的例子中，我们可以看到使用web.xml来表达URL Mapping关系遇到的困境：当系统变大，这种配置上的重复操作会让web.xml变得越来越大而难以维护。不仅如此，web.xml的配置也无法为URL Mapping建立起合适的规则引擎。由此，解决URL Mapping问题的核心在于建立一套由Http协议中的URL表达式到Java世界中类对象的规则匹配引擎。额外的，这种规则匹配最好比较灵活而简单又不失必要的可维护性。 问题2 Web应用是典型的“请求-响应”模式的应用，数据是如何顺利流转于浏览器和Java世界之间的？面对Http协议与Java世界数据形式的不匹配性，我们如何能够在流转时做到数据类型的自动转化？这个问题伴随着问题1而来，数据请求与数据返回相当于是基于“请求-响应”模式的Web程序的输入和输出。数据的本质是存储于其中的信息，只不过数据在不同的地方有不同的表现形式。例如，在浏览器中，数据总是以字符串形式展现出来，表现出“弱类型”的特征；在Java世界，数据则体现为一个个结构化的Java对象，表现出“强类型”的特征。于是，就需要有一个工具能够帮助我们解决在数据流转时的数据形式的相互转化。在上面的例子中，我们可以看到RegistrationServlet中，我们编写了额外的代码，把页面上传递过来的日期值转化为Java中的Date对象。在参数的数量和Java对象越来越复杂的情况下，这种额外的代码就会变成一种灾难，甚至成为我们开发的主要瓶颈之一。解决数据流转问题的方案是使用表达式引擎。将表达式引擎插入到程序逻辑执行之前，我们就能从复杂的对象转化中解放出来，从而进一步简化开发流程。 问题3 Web容器是一个典型的多线程环境，针对每个Http请求，Web容器的线程池会分配一个特定的线程进行处理。那么如何保证在多线程环境下，处理请求的Java类是线程安全的对象？如何保证数据的流转和访问都是线程安全的？这个问题与问题1一样，也是Web开发中的核心问题之一，因为它涉及Web开发中最为底层的处理机制问题。在上面的例子中，我们使用的是基于Servlet标准的方式进行编程，扩展Servlet用于处理Http请求。然而恰恰就是这种编程模型，是一种非线程安全的编程模型，因为Servlet对象是一个非线程安全的对象。也就是说，如果我们在doPost方法中访问RegistrationServlet中所定义的局部变量，就会产生线程安全问题（第4章会重点介绍线程安全问题产生的来龙去脉）。传统的表示层框架对于这个问题的处理方式是采用规避问题的方式。既然Servlet对象不是一个线程安全的对象，那么我们就干脆禁止在Servlet对象的方法中访问Servlet对象的内部变量。这种鸵鸟算法固然是一种有效的方案，但它却不是一种合理的方案。最致命的一点是，它是一种非语法检查级别的禁止，因此也就无法从根本上杜绝程序员犯这样的错误。另外一种解决方案就是在整个请求周期中引入ThreadLocal模式，通过ThreadLocal模式的使用，将整个过程的对象访问都线程安全化，彻底解决多线程环境下的数据访问问题（有关ThreadLocal模式的方方面面，我们在后续章节中会详细介绍）。ThreadLocal模式的引入对于Web层框架的影响是深远并且颠覆性的，因为它为框架摆脱Web容器的依赖铺平了道路，意味着我们可以通过合理的设计，在脱离Servlet等Web容器元素的环境中进行编程。 问题4 Controller层作为MVC的核心控制器，如何能够在最大程度上支持功能点上的扩展？问题4来源于我们对程序本身的自然属性（可读性和可扩展性）的需求。这一内在需求实际上也驱动着我们着手在整个MVC的构架级别设计更为成熟有效的自扩展方案。从一个更加宏观的角度来帮助我们理解这个问题，我们来举一个制药工厂生产药品的例子。一个工厂在进行批量生产时，总是会引入“生产线”的概念。生产线能够把整个制药过程划分成若干道工序，当原材料经过每一道工序，最终就会成为一个可出厂销售的药品。某一天，由于市场推广的原因，需要改变药品的包装，那么我们对这条生产线的要求就是它能够改变“包装”这道工序的流程，更改成新的包装。在上面的例子中，我们可以看到并没有一个“生产线”的概念。这种情况下，我们日后对于逻辑功能的扩展就变得困难重重。虽然我们发现，RegistrationServlet或许和其他所有的Servlet有着非常类似的执行步骤：接收参数、进行类型转换、调用业务逻辑接口执行逻辑、返回处理结果。然而我们却缺乏一条可以任意配置调度的生产线将这个过程规范起来。解决这个问题从直观上来讲似乎很容易：没有生产线，我们建一条生产线就行了。而事实上，“造轮子”实在是一件费时费力的事情，因为我们要考虑的方面实在太多。这时我们就不得不借鉴许多前辈的经验了，寻找某些事件定义的框架，遵循框架的定义规范来进行编程将是我们解决这个问题的主要途径。 问题5 View层的表现形式总是多种多样的，随着Web开发技术的不断发展，MVC如何在框架级别提供一种完全透明的方式来应对不同的视图表现形式？这一问题是基于View（视图）技术的不断发展，造成传统的基于HTML的视图已经不能满足所有的需求而提出的。当今，越来越多新的视图技术被用于Web开发中，例如，模板技术、JSON数据流、Stream数据流、Flash展现等等。在上面的例子中，我们可以看到负责视图层跳转的RegistrationServlet是通过硬编码方式完成程序执行跳转的。这种方式不但无法支持多种新的视图技术，同时也无法使我们从复杂的视图跳转的硬编码中释放出来。解决这个问题的最有效途径是把不同的视图技术进行分类，针对不同的分类封装不同的视图跳转逻辑，而最重要的一步是将这两者与之前我们所提到的生产线有机结合起来。 问题6 MVC模式虽然很直观地为我们规定了表示层的各种元素，但是如何通过某种机制把这些元素有机整合在一起，从而成为一个整体呢？这个问题非常宏观，却是我们不得不去面对的一个问题。MVC虽然在概念上被规定下来，在实现上却需要一个完整的机制来把这些元素都容纳在一起。通常情况下，我们往往把这种机制称之为配置元素。配置元素是构成程序的重要组成部分，它把各种形式的程序通过某种配置规则联系在一起。之前我们提到的URL Mapping实际上也属于配置规则的一种，视图的跳转也是配置规则的一种。只有当这种配置规则被建立起来，MVC模式才能真正运作起来。这一系列配置元素在框架内部往往被定义成统一的可以被框架识别的数据结构并在系统初始化的时候进行缓存。而这些被缓存了的对象，也成为主程序的控制流在MVC框架中各个元素之间进行流转的依据。如果从元素的表现形式上来看配置元素和控制流的关系，我们实际上可以看到整合过程的两个层面：数据结构和流程控制。所谓的框架，我们也只是在这两个层面上做文章，一方面规定好这些配置元素的定义，另一方面指定程序运转的流程，从而控制和整合散落在各处的表示层元素。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>表示层</tag>
        <tag>方案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java反射机制基础详解]]></title>
    <url>%2F2017%2F03%2F17%2Fjava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1.什么是Java的反射？要让Java程序能够运行，就得让Java类被Java虚拟机加载。Java类如果不被Java虚拟机加载就不能正常运行。正常情况下，我们运行的所有的程序在编译期时候就已经把那个类被加载了。Java的反射机制是在编译时并不确定是哪个类被加载了，而是在程序运行的时候才加载、探知、自审。使用的是在编译期并不知道的类。这样的编译特点就是java反射。 2.Java反射的作用？假如有两个程序员，一个程序员在写程序的时需要使用第二个程序员所写的类，但第二个程序员并没完成他所写的类。那么第一个程序员的代码是不能通过编译的。此时，利用Java反射的机制，就可以让第一个程序员在没有得到第二个程序员所写的类的时候，来完成自身代码的编译。Java的反射机制它知道类的基本结构，这种对Java类结构探知的能力，我们称为Java类的“自审”。如eclipse中，一按点，编译工具就会自动的把该对象能够使用的所有的方法和属性全部都列出来，供用户进行选择。这就是利用了Java反射的原理，是对我们创建对象的探知、自审。 3.Class类要正确使用Java反射机制就得使用java.lang.Class这个类。它是Java反射机制的起源。当一个类被加载以后，Java虚拟机就会自动产生一个Class对象。通过这个Class对象我们就能获得加载到虚拟机当中这个Class对象对应的方法、成员以及构造方法的声明和定义等信息。 4.反射API反射API用于反应在当前Java虚拟机中的类、接口或者对象信息 功能1) 获取一个对象的类信息.2) 获取一个类的访问修饰符、成员、方法、构造方法以及超类的信息.3) 检获属于一个接口的常量和方法声明.4) 创建一个直到程序运行期间才知道名字的类的实例.5) 获取并设置一个对象的成员，这个成员的名字是在程序运行期间才知道.检测一个在运行期间才知道名字的对象的方法利用Java反射机制可以很灵活的对已经加载到Java虚拟机当中的类信息进行检测。这种检测在对运行的性能上会有些减弱，所以什么时候使用反射，要靠业务的需求、大小，以及经验的积累来决定。 那么如何利用反射API在运行的时候知道一个类的信息呢？代码示例：12345678910111213141516171819202122232425262728293031323334353637package com.reflection.classForName;import java.lang.reflect.Field;import java.lang.reflect.Method;import javax.swing.JOptionPane;/** *本类用于测试反射API，利用用户输入类的全路径， *找到该类所有的成员方法和成员属性 */public class ClassForName &#123; /** *构造方法 */ public ClassForName()&#123; String classInfo=JOptionPane.showInputDialog(null,"输入类全路径");//要求用户输入类的全路径 try &#123; Class&lt;?&gt; cla=Class.forName(classInfo);//根据类的全路径进行类加载，返回该类的Class对象 Method[] method=cla.getDeclaredMethods();//利用得到的Class对象的自审，返回方法对象集合 System.out.println("forName:"+cla); for(Method me:method)&#123;//遍历该类方法的集合 System.out.println("方法有:"+me.toString());//打印方法信息 &#125; System.out.println("*****************************************************"); Field[] field=cla.getDeclaredFields();//利用得到的Class对象的自审，返回属性对象集合 for(Field me:field)&#123; //遍历该类属性的集合 System.out.println("属性有:"+me.toString());//打印属性信息 &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; new ClassForName(); &#125;&#125; 运行的时候，我们输入java.lang.String，那么运行结果如下：forName:class java.lang.String方法有:public int java.lang.String.hashCode()方法有:public boolean java.lang.String.equals(java.lang.Object)方法有:public java.lang.String java.lang.String.toString()方法有:public char java.lang.String.charAt(int)方法有:private static void java.lang.String.checkBounds(byte[],int,int)方法有:public int java.lang.String.codePointAt(int)……………通过和个例子我们看到，类的全路径是在程序运行的时候，由我们手动输入的。所以虚拟机事先并不知道所要加载类的信息，这就是利用反射机制来对用户输入的类全路径来对类自身的一个自审。从而探知该类所拥有的方法和属性。编译器联想原理: 通过上面代码，我们可以知道编译工具为什么能够一按点就能列出用户当前对象的属性和方法了。它是先获得用户输入对象的字符串，然后利用反射原理来对这样的类进行自审，从而列出该类的方法和属性。 总结: 使用反射机制的步骤首先: 导入java.lang.relfect 包然后: 遵循三个步曲：（1）获得你想操作的类的 java.lang.Class 对象（2）调用诸如 getDeclaredMethods 的方法（3）使用反射API 来操作这些信息获得Class对象的三种方法已经得到一个类的实例，可以使用如下方式来得到Class对象：Class c = 对象名.getClass();例：TextField t = new TextField(); Class c = t.getClass(); Class s = c.getSuperclass();如果在编译期知道类的名字，可以使用如下方法：Class c = java.awt.Button.class;或 Class c = Integer.TYPE;如果类名在编译期不知道, 但是在运行期可以获得, 可以使用下面的方法： Class c = Class.forName(str); 注意:str是类的全路径 Example:1234567891011121314151617181920212223242526272829303132package com.reflection.classForName;public class GetClassTest &#123; public static void main(String[] args) throws InstantiationException, IllegalAccessException, NoSuchFieldException, SecurityException&#123; System.out.println("测试开始"); GetClassTestObj gctObj = new GetClassTestObj(); Class&lt;? extends GetClassTestObj&gt; clazzClass = gctObj.getClass(); //同过反射机制得到类的对象 System.out.println("clazzClass:"+clazzClass); GetClassTestObj gctObj2 = (GetClassTestObj)clazzClass.newInstance(); //调用无参构造方法，创建一个对象 System.out.println("gctObj==gctOb2 :"+(gctObj == gctObj2)); System.out.println("gctObj.getClass() == gctOb2.getClass() :"+(gctObj.getClass() == gctObj2.getClass())); gctObj2.print();// Field[] field=clazzClass.getDeclaredFields();// for(Field me : field)&#123;// System.out.println("shu:"+me);// &#125; &#125;&#125;package com.reflection.classForName;public class GetClassTestObj &#123; static&#123; //静态代码块，只执行一次 System.out.println("nihao"); &#125; private String name = "chen"; public String address = "chengdu"; public void print()&#123; System.out.println("name:"+name+" ,address:"+address); &#125;&#125; 这样获得Class类对象的方法，其实是利用反射API把指定字符串的类加载到内存中，所以也叫类加载器加载方法。这样的话，它会把该类的静态方法和静态属性，以及静态代码全部加载到内存中。但这时候，对象还没有产生。所以为什么静态方法不能访问非静态属性和方法。因为静态方法和属性产生的时机在非静态属性和方法之前。 代码示例：代码分析：在进行 gctObj.getClass()的时候，实际上是对指定类进行类加载，这时候，会把静态属性、方法以及静态代码块都加载到内存中。所以这时候会打印出”静态代码块运行”。但这时候，对象却还没有产生。所以”构造方法运行”这几个字不会打印。当执行cla.newInstance()的时候，就是利用反射机制将Class对象生成一个该类的一个实例。这时候对象就产生了。所以打印”构造方法运行”。当执行到GetClassTestObj gctObj = new GetClassTestObj();语句时，又生成了一个对象。但这时候类已经加载完毕，静态的东西已经加载到内存中，而静态代码块只执行一次，所以不用再去加载类，所以只会打印”构造方法运行”，而”静态代码块运行”不会打印。 反射机制不但可以例出该类对象所拥有的方法和属性，还可以获得该类的构造方法及通过构造方法获得实例。也可以动态的调用这个实例的成员方法。代码示例： 12345678910111213141516171819202122232425262728293031323334package com.reflection.constructor;import java.lang.reflect.Constructor;/** * 本类测试反射获得类的构造器对象， * 并通过类构造器对象生成该类的实例 */public class ConstructorTest &#123; public static void main(String[] args) &#123; try &#123; /** * 第一步:加载类对象 * 第二步：设置Class对象数组用于指定构造方法 * 第三步:获得Constructor构造器对象 */ Class clazz = Class.forName("com.reflection.constructor.Tests"); //加载指定字符串类的对象 Class[] cl=new Class[]&#123;int.class,int.class&#125;; //设置Class对象数组，用于指定构造方法类型 Constructor con=clazz.getConstructor(cl); //获得Constructor构造器对象。并指定构造方法类型 //Object[] x=&#123;new Integer(33),new Integer(67)&#125;; //给传入参数赋初值 //Object obj=con.newInstance(x); //得到实例 Object object = con.newInstance(33,66); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; class Tests&#123; public Tests(int x,int y)&#123; System.out.println(x+" ,"+y); &#125;&#125; 运行的结果是” 33 67”。说明我们已经生成了Tests这个类的一个对象。通过反射模式，来执行Java类的方法代码示例：123456789101112131415161718192021222324252627282930313233package com.reflection.MethodInvoke; import java.lang.reflect.Method; /** * * 本类测试反射获得类的方法对象， * 并通过类对象和类方法对象，运行该方法 */ public class MethodInvoke &#123; public static void main(String[] args) &#123; try &#123; Class cla=Class.forName("javax.swing.JFrame"); //获得窗体类的Class对象 Object obj=cla.newInstance(); //生成窗体类的无参实例 //Method methodSize=cla.getMethod("setSize", new Class[]&#123;int.class,int.class&#125;); //获得窗体类的setSize方法对象，并指定该方法参数类型为int,int Class[] classes = new Class[]&#123;int.class, int.class&#125;; Method methodSize = cla.getMethod("setSize", classes); /* * 执行setSize()方法，并传入一个Object[]数组对象， * 作为该方法参数，等同于 窗体对象.setSize(300,300); * 参数1:obj是类加载的一个实例对象 * 参数2:是一个指定的参数对象 */ methodSize.invoke(obj, new Object[]&#123;new Integer(600),new Integer(300)&#125;); //获得窗体类的setSize方法对象，并指定该方法参数类型为boolean Method methodVisible=cla.getMethod("setVisible", new Class[]&#123;boolean.class&#125;); /* * 执行setVisible()方法，并传入一个Object[]数组对象， *作为该方法参数。 等同于 窗体对象.setVisible(true); */ methodVisible.invoke(obj, new Object[]&#123;new Boolean(true)&#125;); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; 反射技术大量用于Java设计模式和框架技术，最常见的设计模式就是工厂模式(Factory)和单例模式(Singleton)。 单例模式(Singleton)保证在Java应用程序中，一个类Class只有一个实例存在。如：建立目录，数据库连接都需要这样的单线程操作。目的: 节省内存空间，保证我们所访问到的都是同一个对象。单例模式要求保证唯一 可以通过静态变量保证单列模式的唯一性。单例模式有以下两种形式：第一种形式：123456789101112131415161718192021222324252627282930313233343536package reflect;public class Singleton &#123; /* * 注意这是private私有的构造方法， 只供内部调用 * 外部不能通过new的方式来生成该类的实例 */ private Singleton() &#123; &#125; /* * 在自己内部定义自己一个实例，是不是很奇怪？ * 定义一个静态的实例，保证其唯一性 */ private static Singleton instance = new Singleton(); // 这里提供了一个供外部访问本class的静态方法，可以直接访问 public static Singleton getInstance() &#123; return instance; &#125;/** *测试单例模式 */class SingRun&#123; public static void main(String[] args)&#123; //这样的调用不被允许，因为构造方法是私有的。 //Singleton x=new Singleton(); //得到一个Singleton类实例 Singleton x=Singleton.getInstance(); //得到另一个Singleton类实例 Singleton y=Singleton.getInstance(); //比较x和y的地址，结果为true。说明两次获得的是同一个对象 System.out.println(x==y); &#125;&#125; 第二种形式：123456789101112public class Singleton &#123; //先申明该类静态对象 private static Singleton instance = null; //创建一个静态访问器，获得该类实例。加上同步机制，防止两个线程同时进行对对象的创建 public static synchronized Singleton getInstance() &#123; //如果为空，则生成一个该类实例 if (instance == null)&#123; instance = new Singleton(); &#125; return instance; &#125;&#125; 两种形式大体上是差不多的 工厂模式（Factory）工厂模式:著名的Jive论坛 ,就大量使用了工厂模式。为什么工厂模式是如此常用？因为工厂模式利用Java反射机制和Java多态的特性可以让我们的程序更加具有灵活性。用工厂模式进行大型项目的开发，可以很好的进行项目并行开发。就是一个程序员和另一个程序员可以同时去书写代码，而不是一个程序员等到另一个程序员写完以后再去书写代码。其中的粘合剂就是接口和配置文件。 利用接口可以将调用和实现相分离。那么这是怎么样去实现的呢？工厂模式可以为我们解答。我们先来了解一下软件的生命周期: 分析、设计、编码、调试、测试。分析: 就是指需求分析，就是知道这个软件要做成什么样子，要实现什么样的功能。设计: 设计的时候要考虑到怎么样高效的实现这个项目，如果让一个项目团队并行开发。这时候，通常先设计接口，把接口给实现接口的程序员和调用接口的程序员，在编码的时候，两个程序员可以互不影响的实现相应的功能，最后通过配置文件进行整合。 代码示例：12345678910111213/** * *定义接口 */package com.reflection.Factory;/** * @interface: InterfaceTest * @author: chenliang * @description: 声明一个测试接口 */public interface InterfaceTest &#123; public void getName();//定义获得名字的方法&#125; 实现这个接口，重写其中定义的方法接口实现方：123456789101112131415161718192021222324252627/** * @class: Test1 * @author: chenliang * @description: 测试类 */package com.reflection.Factory;public class Test1 implements InterfaceTest &#123; @Override public void getName() &#123; //测试方法 System.out.println("test1"); &#125;&#125;/** * @class: Test2 * @author: chenliang * @description: 测试类 */package com.reflection.Factory;public class Test2 implements InterfaceTest &#123; @Override public void getName() &#123; //测试方法 System.out.println("test2"); &#125;&#125; 可以发现，当接口定义好了以后，不但可以规范代码，而且可以让程序员有条不紊的进行功能的实现。实现接口的程序员根本不用去管，这个类要被谁去调用。那么怎么能获得这些程序员定义的对象呢？在工厂模式里，单独定义一个工厂类来实现对象的生产，注意这里返回的接口对象。 工厂类，生产接口对象：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 本类为工厂类，用于生成接口对象 *//** * @class: Factory * @author: chenliang * @description: 模仿创建一个工厂类 */package com.reflection.Factory;import java.io.InputStream;import java.util.Properties;public class Factory&#123; private static Properties prop=new Properties(); //创建私有的静态的Properties对象 static&#123; //静态代码块,在创建这个类的实例之前执行，且只执行一次，用来加载配置文件 try &#123; InputStream ips = Factory.class.getClassLoader().getResourceAsStream("file.properties"); //加载配置文件 prop.load(ips); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * 单例模式，保证该类只有一个Factory对象 */ private static Factory factory=new Factory(); private Factory()&#123;&#125; //构建一个私有构造方法 public static Factory getFactory()&#123; //返回工厂对象的方法 return factory; &#125; /** * 本方法为公有方法，用于生产接口对象 * @return： InterfaceTest接口对象 */ public InterfaceTest getInterface()&#123; InterfaceTest interfaceTest = null; //定义接口对象 try &#123; String classInfo = prop.getProperty("test"); //根据键，获得值，这里的值是类的全路径 Class&lt;?&gt; c = Class.forName(classInfo); //利用反射，生成Class对象 Object obj = c.newInstance(); //获得该Class对象的实例 interfaceTest = (InterfaceTest)obj; //将Object对象强转为接口对象 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return interfaceTest; //返回接口对象 &#125;&#125; 配置文件内容：test=com.reflection.Factory.Test1 通过这个类，可以发现，在调用的时候，得到的是个接口对象。而一个接口变量可以指向实现了这个接口的类对象。在利用反射的时候，我们并没有直接把类的全路径写出来，而是通过键获得值。这样的话，就有很大的灵活性，只要改变配置文件里的内容，就可以改变我们调用的接口实现类，而代码不需做任何改变。在调用的时候，我们也是通过接口调用，甚至我们可以连这个接口实现类的名字都不知道。 调用方：1234567891011121314/** * @author: chenliang * @class: FactoryTest * @description: 测试工厂类 */package com.reflection.Factory;public class FactoryTest &#123; public static void main(String[] args) &#123; Factory factory = Factory.getFactory(); //获得工厂类的实例 InterfaceTest interObj = factory.getInterface(); //调用获得接口对象的方法，获得接口对象 interObj.getName(); //调用接口定义的方法 &#125;&#125; 上面的代码就是调用方法。大家可以发现，在调用的时候，我们根本没有管这个接口定义的方法要怎么样去实现它，我们只知道这个接口定义这个方法起什么作用就行了。上面代码运行结果要根据配置文件来定。如果配置文件里的内容是test= com.reflection.Factory.Test2。那么表示调用com.reflection.Factory.Tes2这个类里实现接口的方法，这时候打印“test2”。如果配置文件里的内容是test= com.reflection.Factory.Test1。那么表示调用com.reflection.Factory.Test1这个类里实现接口的方法，这时候打印“test1”。 反射机制是框架技术的原理和核心部分。通过反射机制我们可以动态的通过改变配置文件(以后是XML文件)的方式来加载类、调用类方法，以及使用类属性。这样的话，对于编码和维护带来相当大的便利。在程序进行改动的时候，也只会改动相应的功能就行了，调用的方法是不用改的。更不会一改就改全身。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>工厂模式</tag>
        <tag>放射机制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java和JDK版本的关系]]></title>
    <url>%2F2017%2F03%2F17%2FJava%E5%92%8CJDK%E7%89%88%E6%9C%AC%E7%9A%84%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[经常看到各类文章中出现jdk1.5或者JAVA5，其实这都是指的同一个东西。JAVA的版本最开始是1995年的JDK Alpha and Beta版本，第二年发布JDK1.0版本之后就是JDK1.1，JDK1.2。到1998年，不再叫JDK了，而是叫J2SE，但是版本号还是继续延续下去。到了2004年，Sun公司又各种不爽了，按理J2SE1.5的版本，改名叫J2SE5.0了。之后又把J2SE改成Java SE 6.然后一直延续到现在，因此人们常说的Java X=Java SE X=JDK1.X，都是一回事。Java SE 8就是Java8，或者jdk1.8。Java各个版本发行日期：1 JDK Alpha and Beta (1995)2 JDK 1.0 (January 23, 1996)3 JDK 1.1 (February 19, 1997)4 J2SE 1.2 (December 8, 1998)5 J2SE 1.3 (May 8, 2000)6 J2SE 1.4 (February 6, 2002)7 J2SE 5.0 (September 30, 2004)8 Java SE 6 (December 11, 2006) 8.1 Java 6 updates9 Java SE 7 (July 28, 2011) 9.1 Java 7 updates10 Java SE 8 (March 18, 2014) 10.1 Java 8 updates]]></content>
  </entry>
  <entry>
    <title><![CDATA[浅谈IOC--说清楚IOC是什么]]></title>
    <url>%2F2017%2F03%2F16%2F%E6%B5%85%E8%B0%88IOC--%E8%AF%B4%E6%B8%85%E6%A5%9AIOC%E6%98%AF%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[1.IOC的理论背景我们知道在面向对象设计的软件系统中，它的底层都是由N个对象构成的，各个对象之间通过相互合作，最终实现系统地业务逻辑。 如果我们打开机械式手表的后盖，就会看到与上面类似的情形，各个齿轮分别带动时针、分针和秒针顺时针旋转，从而在表盘上产生正确的时间。图1中描述的就是这样的一个齿轮组，它拥有多个独立的齿轮，这些齿轮相互啮合在一起，协同工作，共同完成某项任务。我们可以看到，在这样的齿轮组中，如果有一个齿轮出了问题，就可能会影响到整个齿轮组的正常运转。齿轮组中齿轮之间的啮合关系,与软件系统中对象之间的耦合关系非常相似。对象之间的耦合关系是无法避免的，也是必要的，这是协同工作的基础。现在，伴随着工业级应用的规模越来越庞大，对象之间的依赖关系也越来越复杂，经常会出现对象之间的多重依赖性关系，因此，架构师和设计师对于系统的分析和设计，将面临更大的挑战。对象之间耦合度过高的系统，必然会出现牵一发而动全身的情形。耦合关系不仅会出现在对象与对象之间，也会出现在软件系统的各模块之间，以及软件系统和硬件系统之间。如何降低系统之间、模块之间和对象之间的耦合度，是软件工程永远追求的目标之一。为了解决对象之间的耦合度过高的问题，软件专家Michael Mattson 1996年提出了IOC理论，用来实现对象之间的“解耦”，目前这个理论已经被成功地应用到实践当中。 2.什么是IOCIOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”。1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC 这个概念。对于面向对象设计及编程的基本思想，前面我们已经讲了很多了，不再赘述，简单来说就是把复杂系统分解成相互合作的对象，这些对象类通过封装以后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。IOC理论提出的观点大体是这样的：借助于“第三方”实现具有依赖关系的对象之间的解耦。如下图：大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。我们再来做个试验：把上图中间的IOC容器拿掉，然后再来看看这套系统：图4 拿掉IOC容器后的系统我们现在看到的画面，就是我们要实现整个系统所需要完成的全部内容。这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。所以，如果真能实现IOC容器，对于系统开发而言，这将是一件多么美好的事情，参与开发的每一成员只要实现自己的类就可以了，跟别人没有任何关系！我们再来看看，控制反转(IOC)到底为什么要起这么个名字？我们来对比一下：软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。 3.IOC也叫依赖注入(DI)2004年，Martin Fowler探讨了同一个问题，既然IOC是控制反转，那么到底是“哪些方面的控制被反转了呢？”，经过详细地分析和论证后，他得出了答案：“获得依赖对象的过程被反转了”。控制被反转之后，获得依赖对象的过程由自身管理变为了由IOC容器主动注入。于是，他给“控制反转”取了一个更合适的名字叫做“依赖注入（Dependency Injection）”。他的这个答案，实际上给出了实现IOC的方法：注入。所谓依赖注入，就是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。所以，依赖注入(DI)和控制反转(IOC)是从不同的角度的描述的同一件事情，就是指通过引入IOC容器，利用依赖关系注入的方式，实现对象之间的解耦。学过IOC的人可能都看过Martin Fowler(老马,2004年post)的这篇文章：Inversion of Control Containers and the Dependency Injection pattern。博客园的园友EagleFish(邢瑜琨)的文章： 深度理解依赖注入（Dependence Injection）对老马那篇经典文章进行了解读。CSDN黄忠成的Inside ObjectBuilder[4]也是，不过他应该来自台湾省，用的是繁体，看不管繁体中文的，可以看园中的吕震宇博友的简体中文版[转]Object Builder Application Block[5] 。 4.IOC的优缺点In my experience, IoC using the Spring container brought the following advantages[6]:flexibilitychanging the implementation class for a widely used interface is simpler (e.g. replace a mock web service by the production instance)changing the retrieval strategy for a given class is simpler (e.g. moving a service from the classpath to the JNDI tree)adding interceptors is easy and done in a single place (e.g. adding a caching interceptor to a JDBC-based DAO)readabilitythe project has one unified and consistent component model and is not littered with factories (e.g. DAO factories)the code is briefer and is not littered without dependency lookup code (e.g. calls to JNDI InitialContext)testabilitydependencies are easy to replace mocks when they’re exposed through a constructor or settereasier testing leads to more testingmore testing leads to better code quality, lower coupling, higher cohesion使用IOC框架产品能够给我们的开发过程带来很大的好处，但是也要充分认识引入IOC框架的缺点，做到心中有数，杜绝滥用框架[1]。第一、软件系统中由于引入了第三方IOC容器，生成对象的步骤变得有些复杂，本来是两者之间的事情，又凭空多出一道手续，所以，我们在刚开始使用IOC框架的时候，会感觉系统变得不太直观。所以，引入了一个全新的框架，就会增加团队成员学习和认识的培训成本，并且在以后的运行维护中，还得让新加入者具备同样的知识体系。第二、由于IOC容器生成对象是通过反射方式，在运行效率上有一定的损耗。如果你要追求运行效率的话，就必须对此进行权衡。第三、具体到IOC框架产品(比如：Spring)来讲，需要进行大量的配制工作，比较繁琐，对于一些小的项目而言，客观上也可能加大一些工作成本。第四、IOC框架产品本身的成熟度需要进行评估，如果引入一个不成熟的IOC框架产品，那么会影响到整个项目，所以这也是一个隐性的风险。我们大体可以得出这样的结论：一些工作量不大的项目或者产品，不太适合使用IOC框架产品。另外，如果团队成员的知识能力欠缺，对于IOC框架产品缺乏深入的理解，也不要贸然引入。最后，特别强调运行效率的项目或者产品，也不太适合引入IOC框架产品，像WEB2.0网站就是这种情况。 5.IOC容器的技术剖析IOC中最基本的技术就是“反射(Reflection)”编程，目前.Net C#、Java和PHP5等语言均支持，其中PHP5的技术书籍中，有时候也被翻译成“映射”。有关反射的概念和用法，大家应该都很清楚，通俗来讲就是根据给出的类名（字符串方式）来动态地生成对象。这种编程方式可以让对象在生成时才决定到底是哪一种对象。反射的应用是很广泛的，很多的成熟的框架，比如象Java中的Hibernate、Spring框架，.Net中 NHibernate、Spring.Net框架都是把“反射”做为最基本的技术手段。 6.IOC容器的一些产品Sun ONE技术体系下的IOC容器有：轻量级的有Spring、Guice、Pico Container、Avalon、HiveMind；重量级的有EJB；不轻不重的有JBoss，Jdon等等。Spring框架作为Java开发中SSH(Struts、Spring、Hibernate)三剑客之一，大中小项目中都有使用，非常成熟，应用广泛，EJB在关键性的工业级项目中也被使用，比如某些电信业务。.Net技术体系下的IOC容器有：Spring.Net、Castle等等。Spring.Net是从Java的Spring移植过来的IOC容器，Castle的IOC容器就是Windsor部分。它们均是轻量级的框架，比较成熟，其中Spring.Net已经被广泛应用于各种项目中。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>IOC</tag>
        <tag>控制反转</tag>
        <tag>依赖注入</tag>
        <tag>Inject</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ Idea重构总结]]></title>
    <url>%2F2017%2F03%2F15%2FIntelliJ%20Idea%E9%87%8D%E6%9E%84%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[idea重构功能非常强大，特别是在java web方面，甚至能够重构html/css/js,下面我将为读者介绍idea的重构功能 重构快捷键Ctrl+Shift+Alt+T 1、重构之函数123456789101112public class ExtractMethord &#123; public void main(String[] args) &#123; System.out.println("Hello World!"); System.out.println("function start......"); System.out.println("1 + 1 = " + (1 + 1)); System.out.println("function over！"); System.out.println("program is over!"); &#125;&#125; 如图所示，我选择想要提取的代码，按快捷键Ctrl+Alt+M，就会弹出框，写出方法名称即可快速提取一个方法。 提取方法同样的idea 不仅可以提炼方法，还可以内联方法，其实就是提炼方法的逆操作，比如选择print按Ctrl+alt+N就会将print方法整个嵌套到刚刚的位置。 2、重构之变量Ctrl+Alt+C 快速提取常量（Constant）Ctrl+Alt+V快速提取变量（Variable）Ctrl+Alt+F快速提取成员变量（Filed Variable）Ctrl+Shift+f6 重构变量的类型点击变量，直接使用快捷键即可 3、快速更改类名称选中类名称，按快捷键shift+F6可以快速更改类名称，如果当前类是public的，idea会同时把文件名称给也修改了！甚至如果其他地方有引用该类的地方，会提醒你要不要一起更改，是不是功能很强大？! 4、Pull Members Up开始之前让我们先看看Cal2类:123456public class Cal2 extends Cal &#123; public int sub(int a,int b)&#123; return a-b; &#125;&#125; 以及Cal2的父类Cal1234567public class Cal &#123; public int add(int a,int b)&#123; return a+b; &#125;&#125; 最后的结果，就是将Cal2类中的sub方法，提到父类:12345678910public class Cal &#123; public int add(int a,int b)&#123; return a+b; &#125; public int sub(int a,int b)&#123; return a-b; &#125;&#125; 而我们所要做的就是鼠标右键Refactor-&gt;Pull Members Up将方法让子类继承，如图所示，Alt+Enter键后选择Implement method ‘XXX’]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式经典-模板模式]]></title>
    <url>%2F2017%2F03%2F15%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%BB%8F%E5%85%B8-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[定义模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。 角色这里写图片描述 抽象模板(Abstract Template)角色有如下责任定义了一个或多个抽象操作，以便让子类实现。这些抽象操作叫做基本操作，它们是一个顶级逻辑的组成步骤。定义并实现了一个模板方法。这个模板方法一般是一个具体方法，它给出了一个顶级逻辑的骨架，而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现。顶级逻辑也有可能调用一些具体方法。 具体模板(Concrete Template)角色又如下责任：实现父类所定义的一个或多个抽象方法，它们是一个顶级逻辑的组成步骤。每一个抽象模板角色都可以有任意多个具体模板角色与之对应，而每一个具体模板角色都可以给出这些抽象方法（也就是顶级逻辑的组成步骤）的不同实现，从而使得顶级逻辑的实现各不相同。 优点1.封装不变部分，扩展可变部分。把认为是不变部分的算法封装到父类实现，而可变部分的则可以通过继承来继续扩展。2.提取公共部分代码，便于维护。我们例子中刚刚走过的弯路就是最好的证明，如果我们不抽取到父类中，任由这种散乱的代码发生，想想后果是什么样子？维护人员为了修正一个缺陷，需要到处查找类似的代码！3.行为控制交由子类来实现。基本方法是由子类实现的，因此子类可以通过扩展的方式增加相应的功能，符合开闭原则。 缺点按照我们设计习惯，抽象类负责声明最抽象、最一般的事物属性和方法，实现类完成具体的事物属性和方法，但是模板方法模式却颠倒了，抽象类定义了部分抽象方法，由子类实现，子类执行的结果影响了父类的结果，也就是子类对父类产生了影响，这在复杂的项目中，会带来代码阅读的难度，而且也会让新手产生不适感。模板方法模式的使用场景 模板方法模式的使用场景1.多个子类有公有的方法，并且逻辑基本相同时。2.重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。3.重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。 实例抽象模板角色类，abstractMethod()、hookMethod()等基本方法是顶级逻辑的组成步骤，这个顶级逻辑由templateMethod()方法代表。12345678910111213141516171819202122232425public abstract class AbstractTemplate &#123; /** * 模板方法 */ public void templateMethod()&#123; //调用基本方法 abstractMethod(); hookMethod(); concreteMethod(); &#125; /** * 基本方法的声明（由子类实现） */ protected abstract void abstractMethod(); /** * 基本方法(空方法) */ protected void hookMethod()&#123;&#125; /** * 基本方法（已经实现） */ private final void concreteMethod()&#123; //业务相关的代码 &#125;&#125; 具体模板角色类，实现了父类所声明的基本方法，abstractMethod()方法所代表的就是强制子类实现的剩余逻辑&nbsp;hookMethod()方法是可选择实现的逻辑，不是必须实现的。 123456789101112public class ConcreteTemplate extends AbstractTemplate&#123; //基本方法的实现 @Override public void abstractMethod() &#123; //业务相关的代码 &#125; //重写父类的方法 @Override public void hookMethod() &#123; //业务相关的代码 &#125;&#125; 模板方法模式中的方法模板方法一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。一个抽象类可以有任意多个模板方法，而不限于一个。每一个模板方法都可以调用任意多个具体方法。 基本方法基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete Method)和钩子方法(Hook Method)。 抽象方法：一个抽象方法由抽象类声明，由具体子类实现。在Java语言里抽象方法以abstract关键字标示。 具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。 钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出的实现是一个空实现，作为方法的默认实现。 在上面的例子中，AbstractTemplate是一个抽象类，它带有三个方法。其中abstractMethod()是一个抽象方法，它由抽象类声明为抽象方法，并由子类实现；hookMethod()是一个钩子方法，它由抽象类声明并提供默认实现，并且由子类置换掉。concreteMethod()是一个具体方法，它由抽象类声明并实现。 默认钩子方法一个钩子方法常常由抽象类给出一个空实现作为此方法的默认实现。这种空的钩子方法叫做“Do Nothing Hook”。显然，这种默认钩子方法在缺省适配模式里面已经见过了，一个缺省适配模式讲的是一个类为一个接口提供一个默认的空实现，从而使得缺省适配类的子类不必像实现接口那样必须给出所有方法的实现，因为通常一个具体类并不需要所有的方法。 命名规则钩子方法的名字应当以do开始，这是熟悉设计模式的Java开发人员的标准做法。在上面的例子中，钩子方法hookMethod()应当以do开头；在HttpServlet类中，也遵从这一命名规则，如doGet()、doPost()等方法。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>钩子函数</tag>
        <tag>Hook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《敏捷软件开发(原则模式与实践)》读书心得]]></title>
    <url>%2F2017%2F03%2F15%2F%E3%80%8A%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91(%E5%8E%9F%E5%88%99%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%AE%9E%E8%B7%B5)%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[刚看完瀑布模型过程代表作—《软件是这样炼成的》，书中介绍了一种庞大的、重型的过程方法。为了比较，又看了这本关于敏捷开发的书。关于敏捷开发，之前陆陆续续有些了解，《敏捷软件开发(原则模式与实践)》的作者作为敏捷开发的创始者之一，在书中系统的说明了敏捷开发的思想以及相关实践。敏捷开发（Agile Development），是一种面临迅速变化的需求快速开发软件的能力。为了获取这种敏捷性，我们需要使用一些可以提供必要的纪律和反馈的实践。我们需要使用一些可以保持我们的软件灵活、可维护的设计原则，并且我们需要知道一些已经被证明针对特定的问题可以平衡这些原则的设计模式。本书其实就是按照上面这一段话进行编排，把敏捷开发的思想、实践（XP）、设计原则、设计模式进行了讲述。作为一种开发思想，敏捷开发只是提供了一些原则性的、指导性的思想，而XP（eXtreme Programming 极限编程）是敏捷开发的实践之一。敏捷开发强调尽早地、经常的进行交付，然后接受业务反馈进行迭代开发，这是一种轻量过程的开发模式。敏捷开发基于一个最重要的事实是：需求总是在变化。用户的需求是一直会变的，另外，用户不可能一下子提出所有的需求，直到他们看到了产品（或原型）。敏捷开发能通过业务的逐步反馈、逐步沟通，达到需求不断优化、功能不断完善来满足业务的变化。和瀑布模型不同的是，敏捷开发缺少了明确的设计阶段，并且敏捷开发的进度衡量是可工作软件（可工作的功能占比），而不是传统意义上的文档。这就解决了在瀑布模型中，需要分析、设计、编码之间的相关文档冻结，最后导致交付的成品不能符合业务当下的要求，一种可能是需求分析的不完善，或者是当前的业务已经发生了变化。作为敏捷思想最有名的实践，极限编程提出了符合敏捷开发的工作方式，客户作为团队成员、用户故事（索引卡片）、迭代、回顾会、测试驱动编程、持续集成（每日构建）、结对编程等等。这里面有很多理想的成分，在现实中很难落地，特别是在中国这个文化背景中。例如结对编程、客户一同办公，在中国的现状下是很难实现的。所以在实际的实践中，往往是把敏捷思想和传统瀑布过程管理模型进行结合和剪裁。例如，客户不能参加到团队中，可以以需求分析师作为客户代表，随时反馈业务的需求；不能做到结对编程，但是可以在有问题的时候，按需派出专人进行指导。但是尽早经常交付、迭代等思想还是可以采用，虽然迭代、持续构建对测试团队的自动化测试能力、回归测试能力要求很高。 相关极限编程的应用现状参照：极限编程的应用现状为了满足敏捷开发拥抱变化的思想，需要做到各次迭代之间软件结构的可维护性、灵活性，所以需要开发人员遵循相关面向对象的设计原则以及采用各种设计模式。作者对设计原则和设计模式讲述了很多，但是对比起《Head First 设计模式》一书，略显枯燥，所以本书这部分的章节基本略过了。本书最后的“两个公司的讽刺小品”，把瀑布型和敏捷开发的过程通过故事的形式展现出来，看了让人忍俊不禁，在一笑之余，还是明白了敏捷型给开发团队带来优势。 敏捷软件开发宣言我们一直在实践中探寻更好的软件开发方法，身体力行的同时也帮助他人。由此我们建立了如下价值观：个体和互动 高于 流程和工具工作的软件 高于 详尽的文档客户合作 高于 合同谈判响应变化 高于 遵循计划也就是说，尽管右项有其价值，我们更重视左项的价值。 敏捷宣言遵循的原则(12条)我们遵循以下原则： 我们最重要的目标，是通过持续不断地及早交付有价值的软件使客户满意。 欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。 经常地交付可工作的软件，相隔几星期或一两个月，倾向于采取较短的周期。 业务人员和开发人员必须相互合作，项目中的每一天都不例外。 激发个体的斗志，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。 不论团队内外，传递信息效果最好效率也最高的方式是面对面的交谈。 可工作的软件是进度的首要度量标准。 敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同维持其步调稳定延续。 坚持不懈地追求技术卓越和良好设计，敏捷能力由此增强。 以简洁为本，它是极力减少不必要工作量的艺术。 最好的架构、需求和设计出自自组织团队。 团队定期地反思如何能提高成效，并依此调整自身的举止表现。 面向对象设计的11个原则1、单一职责原则（SRP）就一个类而言，应该仅有一个引起它变化的原因。2、开放－封闭原则（OCP）软件实体（类、模块、函数等）应该是可以扩展的，但是不可修改的。3、Liskov替换原则（LSP）子类型（subtype）必须能够替换掉它们的基类型（base type）。4、依赖倒置原则（DIP）A、高层模块不应该依赖于低层模块，两者都应该依赖于抽象。B、抽象不应该依赖于细节，细节应该依赖于抽象。5、接口隔离原则（ISP）不应该强迫客户依赖于它们不要的方法。接口属于客户，不属于它所在的类层次结构。6、发布重用等价原则（REP）重用的粒度就是发布的粒度7、共同重用原则（CRP）一个包中的所有类应该是共同重用的。如果重用了包中的一个类，那么就要重用包中所有其它类。8、共同封闭原则（CCP）包中的所有类对于同一类性质的变化应该是共同封闭的。一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成任何影响。9、无环依赖原则（ADP）在包的依赖关系图中不允许存在环。10、稳定依赖原则（SDP）朝着稳定的方向进行依赖。11、稳定抽象原则（SAP）包的抽象程度应该和其稳定程度一致。其中：1－5的原则关注所有软件实体（类、模块、函数等）的结构和耦合性，这些原则能够指导我们设计软件实体和确定软件实体的相互关系；6－8的原则关注包的内聚性，这些原则能够指导我们对类组包；9－11的原则关注包的耦合性，这些原则帮助我们确定包之间的相互关系。 &nbsp;极限编程实践1. 完整团队XP项目的所有参与者（开发人员、客户、测试人员等）一起工作在一个开放的场所中，他们是同一个团队的成员。这个场所的墙壁上随意悬挂着大幅的、显著的图表以及其他一些显示他们进度的东西。2. 计划游戏计划是持续的、循序渐进的。每2周，开发人员就为下2周估算候选特性的成本，而客户则根据成本和商务价值来选择要实现的特性。3. 客户测试作为选择每个所期望的特性的一部分，客户可以根据脚本语言来定义出自动验收测试来表明该特性可以工作。4. 简单设计团队保持设计恰好和当前的系统功能相匹配。它通过了所有的测试，不包含任何重复，表达出了编写者想表达的所有东西，并且包含尽可能少的代码。5. 结对编程所有的产品软件都是由两个程序员、并排坐在一起在同一台机器上构建的。6. 测试驱动开发编写单元测试是一个验证行为，更是一个设计行为。同样，它更是一种编写文档的行为。编写单元测试避免了相当数量的反馈循环，尤其是功功能能验证方面的反馈循环。程序员以非常短的循环周期工作，他们先增加一个失败的测试，然后使之通过。7. 改进设计随时利用重构方法改进已经腐化的代码，保持代码尽可能的干净、具有表达力。8. 持续集成团队总是使系统完整地被集成。一个人拆入（Check in）后，其它所有人责任代码集成。9. 集体代码所有权任何结对的程序员都可以在任何时候改进任何代码。没有程序员对任何一个特定的模块或技术单独负责，每个人都可以参与任何其它方面的开发。10. 编码标准系统中所有的代码看起来就好像是一人单独编写的。11. 隐喻将整个系统联系在一起的全局视图的概念。它是系统的未来影像，是它使得所有单独模块的位置和外观变得明显直观。如果模块的外观与整个隐喻不符，那么你就知道该模块是错误的。12. 可持续的速度团队只有持久才有获胜的希望。他们以能够长期维持的速度努力工作，他们保存精力，把项目看作是马拉松长跑，而不是全速短跑。 文章摘要 有些东西讲得简明扼要能够给人以智慧的启迪。 mentor 导师check 支票magic number （魔数）意指直接写在程序里面的具体的数值。 人与人之间的交互是复杂的，并且其效果从来都难以预测，但却是工作中最为重要的方面。 我们建议从使用小工具开始，先使用一个免费的系统直到能够证明该系统已经不再合适，再考虑大一点的系统。不要认为更大的、更好的工具可以自动的帮你做得更好。通常，它们造成的障碍要大于带来的帮助。 如果文档和代码之间失去同步，那么文档就会变成庞大的、复杂的谎言，会造成重大的误导。 对于团队来说，编写并维护一份系统原理和结构方面的文档将总是一个好主意，但是那份文档应该是短小的（Short）并且主题突出的（salient）。“短小”的意思就是说，最多有一二十页。“主题突出的”意思是说，应该仅论述系统的高层结构和概括的设计原理。直到迫切需要并且意义重大时，才来编制文档。 成功的项目需要有序、频繁的客户反馈。不是依赖于合同或者关于工作的描述，而是让软件的客户和开发团队密切的在一起工作，并尽量经常地提供反馈。成功的关键在于和客户之间真诚的协作，并且合同知道了这种协作，而不是试图去规定项目范围的细节和固定成本下的进度。 计划不能考虑得过远…当团队增加了对于系统的认识，当客户增加了对需求的认识…计划将会遭到形态（shape）上的变化，而不仅仅是日期上的改变。较好的策略是：为下两周做详细的计划，为下三个月做粗略的计划，再以后就极为粗糙的计划。我们应该清楚的知道下两周要完成的任务，粗略的了解一下以后三个月要实现的需求。至于系统一年后将要做什么，有一个模糊的想法就行了。 密歇根大学的一项研究表明，在“充满积极讨论的屋子（War room）”里工作，生产率非但不会降低，反而会成倍的提高。 计划游戏（planning game）的本质是划分业务人员和开发人员之间的职责。业务人员（也就是客户）决定特性的重要性，开发人员决定实现一个特性所划分的代价。 重构：就是在不改变代码行为的前提下，对其进行一系列的改造（Transformation），旨在改进系统结构的实践活动。重构就好比用餐后对厨房的清理工作。 隐喻：它是将整个系统联系在一起的全局视图；它是系统的未来景象，是它使得所有单独模块的位置和外观变得明显直观。 即使没有完成所有的用户素材，迭代也要在先前指定的日期结束。可以把一些为完成的素材放到下一迭代，在保证本次迭代功能完整的前提下。 素材分解成开发任务，一个任务就是一个开发人员能够在4~16个小时之内能实现的一些功能。 烈火验真金，逆境磨意志。 首先编写测试可以迫使我们使用不同的观察点。我们必须从程序调用者的有利视角去观察我们将要编写的程序。… 为了是程序成为易于调用和可测试的，必须和周边环境解耦。这样，首先编写测试迫使我们接触软件中的耦合（Forces us to decouple teh sofeware) 测试就像一套范例，它帮助其他程序员了解如何使用代码。这份文档是可以编译的、可运行的。它保持最新，它不会撒谎。 为了使验收测试无需通过用户界面就能够获得对于业务规则的访问，就必须要以满足这个目的的方式来接触用户界面和业务规则之间的耦合。…验收测试可以促使你在大的方面做出优良的系统结构决策。 测试最重要的好处就是它对于架构和设计的影响。为了使一个模块或者应用程序具有可测试性，必须要对它进行解耦合。越是具有可测试性，耦合关系就越弱。全面地考虑验收测试和单元测试的行为对于软件的结构具有深远的正面影响。 画一幅图来探究一个想法是没有错的。然而，画一幅图后，不应该假定该图就是相关任务的最好设计。你会发现最好的设计是在你首先编写测试，一小步一小步前进时形成的。 在按照我的理解方式审查了软件开发的生命周期后，我得出一个结论：实际上满足工程设计标准的唯一软件文档，就是源代码清单。… 源代码就是设计。 OCP是面向对象设计的核心所在，背后的主要机制是抽象和多态。LSP是使OCP成为可能的主要原则之一。DIP是面向对象设计的标志所在。 依赖倒置原则：接口所有权的倒置。我们通常会认为工具库应该拥有他们的接口。但是当应用了DIP时，我们发现往往是客户拥有抽象的接口，而他们的服务者则从这些抽象接口派生。（客户定义了需要什么，服务提供者按照这个要求来提供服务） 事实上，包的依赖关系图和描绘应用程序的功能之间几乎没有关系。相反，它们是应用程序可构建性的映射图。…包的依赖关系结构是和系统的逻辑设计一起增长和演化的。 用例：描述了用户所期望的系统行为。…用例图是用来进行人与人之间的交流的，主要是用于分析师和干系人之间的交流。它们有助于按照不同类型的系统来组织系统的功能。 Martin文档第一定律：知道迫切需要并且意义重大时，才来编制文档。 领域模型（Domain）是一组图，这些图有助于定于出现在用例中的术语。这些图显示了问题中关键对象以及它们之间的关系。…领域模型是一种描述工具，用来帮助人们记录它们的决策以及相关之间的交流是非常重要的。领域模型中的对象未必对应面向对象的设计，这样的对应也没有多大的价值。…领域模型里面的类是问题领域中的概念元素，和软件类没有直接关系。…我们使用它们来和用户进行交流的，而不是为了说明软件结构。…两者是不同的概念层次。 通过创建一个领域模型，我们更好的理解了手边的问题。这种更好的理解有助于我们对用例进行改善和补充。这两者之间的这种迭代是自然的，也是必要的。 架构指的是构成应用程序的骨架（Skeleton）的软件结构。 有些东西讲得简明扼要能够给人以智慧的启迪]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>XP</tag>
        <tag>敏捷开发</tag>
        <tag>读书心得</tag>
        <tag>Agile</tag>
        <tag>极限开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[弱类型、强类型、动态类型、静态类型语言的区别是什么？]]></title>
    <url>%2F2017%2F03%2F15%2F%E5%BC%B1%E7%B1%BB%E5%9E%8B%E3%80%81%E5%BC%BA%E7%B1%BB%E5%9E%8B%E3%80%81%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E3%80%81%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[类型系统的一些概念，众说纷纭，使用上也比较乱。有些东西，甚至不好严格定义。以下算学术界的一种相对“严格”的说法。 1.先定义一些基础概念Program Errors trapped errors导致程序终止执行，如除0，Java中数组越界访问 untrapped errors出错后继续执行，但可能出现任意行为。如C里的缓冲区溢出、Jump到错误地址 Forbidden Behaviours语言设计时，可以定义一组forbidden behaviors. 它必须包括所有untrapped errors, 但可能包含trapped errors. Well behaved、ill behaved well behaved: 如果程序执行不可能出现forbidden behaviors, 则为well behaved。 ill behaved: 否则为ill behaved… 2. 有了上面的概念，再讨论强、弱类型，静态、动态类型强、弱类型 强类型strongly typed: 如果一种语言的所有程序都是well behaved——即不可能出现forbidden behaviors，则该语言为strongly typed。 弱类型weakly typed: 否则为weakly typed。比如C语言的缓冲区溢出，属于trapped errors，即属于forbidden behaviors..故C是弱类型 前面的人也说了，弱类型语言，类型检查更不严格，如偏向于容忍隐式类型转换。譬如说C语言的int可以变成double。 这样的结果是：容易产生forbidden behaviours，所以是弱类型的 动态、静态类型 静态类型 statically: 如果在编译时拒绝ill behaved程序，则是statically typed; 动态类型dynamiclly: 如果在运行时拒绝ill behaviors, 则是dynamiclly typed。 3. 误区大家觉得C语言要写int a, int b之类的，Python不用写(可以直接写a, b)，所以C是静态，Python是动态。这么理解是不够准确的。譬如Ocaml是静态类型的，但是也可以不用明确地写出来。。Ocaml是静态隐式类型 静态类型可以分为两种： 如果类型是语言语法的一部分，在是explicitly typed显式类型； 如果类型通过编译时推导，是implicity typed隐式类型, 比如ML和Haskell 4.下面是些例子 无类型： 汇编 弱类型、静态类型 ： C/C++ 弱类型、动态类型检查： Perl/PHP 强类型、静态类型检查 ：Java/C# 强类型、动态类型检查 ：Python, Scheme 静态显式类型 ：Java/C 静态隐式类型 ：Ocaml, Haskell]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>静态类型</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[极限编程的应用现状]]></title>
    <url>%2F2017%2F03%2F13%2F%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8%E7%8E%B0%E7%8A%B6%2F</url>
    <content type="text"><![CDATA[敏捷开发在中国的实践面临怎样的挑战？敏捷开发作为互联网时代的“产物”，在商业模式的运作下被迅速推广，它的确解决了一部分传统开发模式遇到的问题，如对需求的变化能快速做出反应，但同时也引发了许多问题，敏捷开发提倡的许多环节如结对编程、用户故事、评审会议等都有着较大的争议。本文的最新版在：http://www.zhangxun.com/?taijialliance/challenges挑战的一种解释就是问题（issuesor problems）。敏捷实践在中国遇到了哪些问题？十多年来积累的问题其实很多。以下是几个典型敏捷方法在中国实践遇到的问题与挑战。Scrum的主要缺点是过于理想化（美式理想），而且从一开始就不是为中国的软件江湖量身定做的。如何改变原有的考核激励机制和办法，取消针对开发团队每个个人的绩效考核，取而代之的是针对团队整体的考核？如何在此基础上进行公平、有效、合理地奖惩？如何去除国人积习已久的技术官僚体制和命令控制式（command and control）管理，推行并建立真正的自组织、服务型领导（Leader-Servant）、管理者教练（Manager-as-Teacher or Coach）等新型团队管理文化？如何改变管理结构，取消传统的项目经理和产品经理岗位，建立Scrum Master、Product Owner等新的岗位？如何有效地选拔出胜任这些新式岗位的领导，主要依靠员工民主投票？如何解决安排好老领导的去留，平稳地解除他们的职位，而尽量避免公司内部的政治与权利斗争？如何让一个极简的Scrum管理框架与公司现有的软件研发管理流程、方法、技术和工具等各方面很好地契合、集成，真正可持续地发挥出提高效率、进度和质量，减少开发成本的总体效益？如何让回顾会议（Retrospective）发挥真正的价值，让所有人（包括领导）敢于在会上作真诚的批评与自我批评，承认自己的错误？如何减少江湖习气，建立一个真话多于假话，好人得到重用不受排挤的团队文化氛围和环境？请大家补充。。。以上这几个难点没几个国内企业能全部或真正做到吧，真正能做到恐怕只有少数一流领导企业。真Scrum是很难的。绝不是像某些Scrum认证培训所教的那样，整一个十几个人的团队，每个迭代像模像样地开几次meetings就可以解决，获得Super Productivity的。Scrum其实是一种后现代管理（Post-Modern Management），它的实质内容带有革命性或者叫管理创新。而国内大部分的二三流软件企业连现代管理都还未成熟，还做得不够好呢。所以，我估计国内至少九成以上（99%?）是伪Scrum（Pseudo Scrum）。XP实践在国内遇到了哪些问题？首先，这十多年来，我本人在国内没有见到过一家真正符合极限精神、全面做到XP的公司，除了拥趸心中的XP伟大旗舰，不过这也只是我听说并非亲眼所见。据我观察，绝&nbsp;大部分的公司只是采用了XP的个别或一部分实践（如用户故事、CI、TDD等），而他们的总体开发流程和指导框架则是其他，如Scrum、ISO 9001、CMMI、UP或自研的。这说明了什么？2010年以后，随着Scrum认证的大热，大家都忙着开班捞钱或快速镀金、抢个上位，这几年下来好像已经很少见到有人在媒体和社区里把XP作为一套独特、整体的方法论来谈论了。而且国内外还有一个现象，自从Kent Beck发表了他的极为重要的极限编程2.0（XP2）名著后，（恕我孤陋寡闻）怎么这么多年我们好像没看到过什么有广泛影响力的XP2书评和深入研究的文章，而XP2新添的这么多实践也几乎无人问津？大家讨论来讨论去、有印象的依然只是XP1的那几个特色实践（CI、TDD和PP）。CI持续集成（CI，Continuous Integration）是国内外接受度比较高、可谓已基本普及的一个XP实践，最主要是因为CI开源工具经过充分竞争后已趋于成熟。不过，CI在国内还是存在一些应用上的误解和误区。很多人误以为CI就是最佳、最适合、唯一的敏捷代码集成方式，不知道Daily Build or Nightly Build等集成方式也是可选的敏捷实践，而国内许多中小团队其实并不需要CI，因为团队规模小，在一天之内他们的主干代码变化不大，或CI带来的效益并不显著，没必要在一天之内多次集成、测试主干，而且CI并不是国内许多中小团队敏捷改进优先级最高的那块最短板，CI的价值有被夸大之嫌。其实CI更适合大型团队。TDD测试驱动开发（TDD，Test Driven Development）是一个争议较大的XP实践，尽管有不少坚定的支持者，十多年来在国内外却也一直遭到不少专家的批评。受到媒体和运动式跟风的影响（在伟大运动中，你不紧跟，就可能成为遭鄙视的异类），许多人都声称他们在用TDD。然而，自动单元测试与TDD其实是两个不同的概念（尽管TDD中包含了自动单元测试）。国内许多码农、菜鸟由于未系统地学过（或不熟悉）软件工程方法论，所以常常有误解，以为：只要做了单元测试，就是TDD；只要用了JUnit，就是TDD——把两者混为一谈，然而事实上他们并没有在做TDD。TDD包含了几个明确的步骤和技术，有一个规范的执行流程，它的最大的缺点和问题在于test-first（尤其是单元测试驱动）。在我看来TDD并不是什么完美、成熟、全面的开发方法，虽然它有局部价值，但只是一种片面、不成熟、部分有效的半截技术。据我观察，国内真正严格坚持采用TDD的开发者和团队其实是很少的，许多项目和产品的开发不需要、没必要、也很难都从编写单元测试开始。于是乎，国外后来出现了改进版的ATDD（验收测试驱动开发）、BDD（行为驱动开发），但国内用的、研讨的人不多，相关的技术和工具也均未成熟。另一方面，JUnit类的自动单元测试工具确实是一项优秀、伟大的发明，目前基本普及了，但用了JUnit未必要用TDD，务实的敏捷开发者完全可以根据需要来决定编写单元测试的最佳时机，无论先后。事实上这些自动测试工具比TDD方法论本身更具有价值，在日常的敏捷开发中是必不可少的。PP结对编程（PP，Pair Programming）也是一个争议较大的实践。据我所知，国内严格坚持一贯采用PP的团队也是很少的，反正我是没见到过。每一个功能都必须由两名程序员结对在一台电脑前合作完成（Wikipedia: All code is produced by two people programming on one task on one workstation）？这似乎又是一种一刀切的极端想法。没错，PP在某些方面确实有一些好处，例如高手与低手结对，进行肩并肩地指导、教学，对低手的帮助提携往往是很大的，而且两人结对后，写代码时始终有一个人在帮边盯着帮着review，不知道怎么做了两人还可以一起研讨好于一人苦思冥想，理论上这么做确实可以提高开发质量和（局部的）效率。然而，质量是上去了，团队的整体开发效率呢，是否为此要花费更多的总体开发时间？另外，两个都已是高水平的程序员有必要结对吗，是否是浪费时间？如果某人对独立实现某个功能已有很大把握，这时旁边再坐着一个人，要么指指点点，要么一声不吭、冷眼旁观，是否还有必要，不是浪费么？如果让两个低水平或者没啥经验、不懂配合的程序员结对，恐怕质量和效率都难以保证吧。PP似乎更适合对进度要求不紧、时间较为宽松的项目。PP的替代方案之一是偶尔（或按需）结对，后者没有PP那么极限，即让一部分代码通过结对完成，而另一部分代码由单人完成，可以有时候结对，有时候不结对，要不要结对完全根据临时需要和具体情况而定。问题是，自始至终、时时刻刻严格执行的PP，对于团队开发的整体效果是否就一定优于偶尔/按需结对？对此，国际上目前尚无定论，缺乏靠谱、足够的科研比较数据和论证。不同于PP，按需结对并非什么全新的实践，其起源可能远早于1990年代吧。这恐怕也是国内外大部分团队一直沿用至今的编程方式。遇到难题不会做了，或者新手缺经验，两人临时结对互相帮助、指点下，做好了又分开，各自归位继续独立开发，这样做有什么不可以、不好的呢？ 国内采用PP还有一个现实问题，一个功能的代码全部是由两个人共同完成的，那这代码做好了、做坏了算谁的？在此基础上，如何公平、合理、有效地进行个人考核？再加上XP的另一个实践“集体代码所有制”（CCO）以及PP的轮转效应，导致每一块代码都没有一个固定的负责人，任何人都可以修改任何一块代码，这更是与国内普遍流行的个人绩效考核制相矛盾，可见PP施行起来绝非易事。而国内大多数团队没有盲目地采用PP，看来是个聪明的决定。用户故事。。。重构 。。。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>敏捷</tag>
        <tag>极限编程</tag>
        <tag>现状</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《软件是这样炼成的--软件过程管理与软件测试》 读书心得]]></title>
    <url>%2F2017%2F03%2F08%2F%E3%80%8A%E8%BD%AF%E4%BB%B6%E6%98%AF%E8%BF%99%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84--%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E7%AE%A1%E7%90%86%E4%B8%8E%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E3%80%8B%20%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[配置库管理软件质量目标 这一册主要是简述了软件工程的改进，其实就是质量保证的方方面面过程域。软件过程是一个为建造高质量软件所需完成的任务框架，软件过程改进包括下面四点： 1、软件过程定义 2、软件过程文档化 包括软件过程定义文档化和过程执行文档化两部分 3、软件过程培训 4、软件过程强制执行 整理脑图—过程域（可下载） 整理脑图—测试（可下载） 文章摘录 木星（Jupiter）是太阳系八大行星中体积最大、自转最快的行星，从内向外的第五颗 … 中文名: 木星; 外文名: Jupiter; 别 称: 朱庇特、岁星; 分 类: 行星; 发现者: 伽利略 在配置管理系统中，基线就是配置项在其生命周期的不同时间点上通过评审而进入正式受控的一种状态，而这个过程被称为“基线化”。每一个基线都是其下一步开发的基准。 影响软件质量的本质问题不是技术问题，而是管理；管理方法也不是管理的核心，管理的核心是管理意识。 组织评审会是，必须有评审依据。(最好有评审检查表) 软件质量保证的核心工作是软件开发过程保证。质量保证的本质工作是软件过程执行状态的监督，质量保证该软件开发过程中的每个过程点按照既定的质量执行，并且按照不同的评审等级进行评审。说白了就是制定标准（过程标准、模板等），然后组织评审。 短视者亡，长视者兴。 软件过程改进的4大要素是过程定义化、文档化、培训和强制执行。 梳理工作流程。只有将流程梳理清楚，明确了各部门内部员工的工作职责，明确部门之间的协调关系和协调资源。 企业组织设计的根本目的是为了实现企业战略任务和经营目标服务的。 盈利合同、战略合同、战术合同。 个人注：合道也应该把做具体事情的考核，转化为业绩目标性的考核。 项目经理和部门经理侧重于工作态度和能力的考核，这些指标无法量化，只能采取评语考核的方式了，只有这样才能给予部门经理和项目经理充分的考核全力，有效管理自己的团队。量化的考核，可以是结合项目的情况进行奖励考核的时候进行！ 经营企业和居家过日子一样，花每一分钱都要精打细算，该花的钱一点也不少花，不该花的钱一点也不多花，无效的工作不干。 风险识别的过程的目的是将事情的不确定性转变为明确的风险陈述，为风险分析提供依据。 需求评审分为：全局评审（业务中高层，项目目标、核心功能），局部评审（业务中层及一线人员，业务流程），内部评审（开发人员、分析人员）需求评审是项目评审中最高级别的评审。 要充分识别客户的需求和潜在需求，需求确认非常重要，需求双方都要务实，设计实现别让需求扩大化，严格规范需求变更控制流程，别忽视需求跟踪，别忽视需求跟踪…提炼客户需求的时候，采用’往前跨半步’的方式，满足客户现在以及最近的将来可能需要的需求以满足系统的灵活性，切忌追求更加抽象化、更加完美、盲目扩大需求范围。要知道，简单是美，适用的才是最好的。 概要设计阶段的核心人物是确定类间关系、确定类的方法体、确定方法体的输入和输出、设计类的接口与规范，而详细设计要完成数据库的逻辑结构、物理结构和概念设计等相关内容…详细设计的设计单位是类，设计内容是方法体 如果是小项目，概要设计和数据库设计合并成一个文档。（小项目一般没有详细设计） 要分析写的文档给谁看？写文档的意义和价值！ 软件开发过程，一般遵循以下几步执行：1、确定软件生命周期2、确定各里程碑3、确定各里程碑目标4、确定每个里程碑涉及哪些开发过程域5、确定每个开发过程域要执行哪些活动（可剪裁）6、确定这些活动遵循的标准、规程以及使用的模板7、制定验收标准 软件质量活动包括1、软件质量保证过程域2、软件配置管理过程域3、软件测试过程域 我认为敏捷开发适用Product而不太适用于Project。 个人注：管理就是轨道和信号等。在你开车走的时候，轨道就规定了你开车的路线，相关的信号灯就是随时给你反馈信息和要求。或者说，就是工程里面的工程监理。 可以达不到目标，但是不能没有目标。 每次变更都要考虑调整（进度、成本、质量）1、项目计划2、成本3、质量保证、配置管理 软件分层，不同层不同观点人开发，这样能保证不同层功能（服务）的可复用性…基于服务的架构，决定了编码的顺序是：创建数据库、实体Bean开发、会话Bean开发、业务逻辑开发和表示层开发，这是因为上一层是为下一层提供服务的。 详细设计做得好的话，程序员仅仅是“码工”了。 代码走查的核心任务是：规范性检查、代码BUG检查。 测试普遍存在的问题：1、测试人员配比不足，最好是1:1，至少要做到4~5:12、测试计划及进度受制于开发计划及进度3、测试人员和开发人员的沟通不畅，处于对立的局面4、测试工具的应用不好，特别是自动测试工具5、测试人员的技术不足，深层次的代码逻辑和数据库缺陷发现不了6、测试用例没有严格的科学依据，甚至没有用例，就是‘点点测试’ 软件测试过程的改进和优化：测试过程提升+技术提升。 制定计划的时候，一定要考虑冗余时间，一般来说，项目成熟度较高的项目，冗余10%~30%不等。反之，成熟度较低的话，冗余时间要设定得高一点，以防延期带来的连锁的反应。 测试需求分析其实在某种程度上可以取代部分用例设计工作，也就是说我们如果进行了较为详细的测试需求分析工作，测试用例就可以不用那么详细的编写了。例如上面的业务场景分析部分，只要按照业务流程直接进行测试执行是没有问题的。（个人注：其实是测试用例编写的依据，有了这些，就像编码之前的详细设计一样，基本水到渠成了。） 测试需求分析+业务流程分析—&gt;用例设计 文中重要图片截图冒烟测试的用例由测试来提供，开发执行重点]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
        <tag>软件过程</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[静态测试和动态测试—两个重要的测试技术之间的差异]]></title>
    <url>%2F2017%2F03%2F02%2F%E9%9D%99%E6%80%81%E6%B5%8B%E8%AF%95%E5%92%8C%E5%8A%A8%E6%80%81%E6%B5%8B%E8%AF%95%E2%80%94%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E5%B7%AE%E5%BC%82%2F</url>
    <content type="text"><![CDATA[测试是检验和确认。我们都知道，它需要2个V（verification&amp;validation），来使测试完成。在今天的文章中，我们将进一步了解静态测试。它也被称为检验（verification）。我们将学习有关它的一切，并要特别强调这一点，因为动态测试往往受到更大的关注，并有无数的文章详细的进行了说明。然而，如果不对与静态测试相对应的动态测试是什么进行解释，那讨论就将是不完整的。动态测试是验证（validation），另一个V。动态测试就是你使用实际的系统（不是什么代表系统的工件或模型），提供输入，获得输出并与预期运行输出的进行比较。它是以发现错误为目的的在系统上实际动手检验的工作。在这个过程中，我们将了解关于测试以下两种常见误解为何都是错误的：1.测试是在最后才开始的工作2.测试只需由测试人员来进行，和其他人无关让我们先从一个关于V模型的快速参考开始：在V模型的左侧是不由QA团队参与的活动。在右侧，我们有一些由测试者和用户对开发团队采取的的处理。让我们从——需求收集开始。它由业务分析人员和其他更高级别的管理部门执行——该阶段的输出文档是商业需求文档（Business requirement document），简称BRD。下一个阶段是在系统设计。在系统设计阶段，业务需求被转化为功能需求，在功能需求文档中（FRD，Functional requirements document）。当转换过程中，开发团队（此步骤的主要实施者）会对BRD文件一步一步，一页一页，并且一行行的仔细检查。尽管主要目标是为了翻译业务需求，BRD文件仍会被轮流审查。举个例子：假设这是银行网站的BRD，有很大的安全需求。在其BRD的一节中谈到了对各种用户在网银网站创建帐户密码的规则。期中的一个规则是：一个用户不能使用他在其他帐户使用过的密码。这是不可行的，因为，一个站点可以建议用户应该如何设置其登录信息，但是没办法对其进行强制。所以，这个要求是不可行的——换言之，无法通过软件来实现。现在让我们在此例子基础上考虑以下几点：怎么确定这个需求是无法构建的,所以也无法测试(换句话说,是不可行的)?我们是否先要有银行的网站,然后设置登录名和密码,最后才意识到这是不可能的?不,我们只是对这个BRD进行了审查，当然还需要一些常见的商业常识。我们我们是否在对这个要求进行测试？是的，但纯粹基于理论，概念意义上而不是实际通过AUT（测试应用）。这是此试验的物理形式？——对BRD的简单的阅读，或正是审查BRD，或更正式的可行性分析报告。回到我们的误解：谁在执行对BRD的审查？——主要是开发团队和其他负责创建产品的技术团队。没有测试人员。本次审查是否在产品完成之后进行？不，在项目开发的最初阶段。因此，不只是在最后阶段。 静态测试技术总之，静态测试是遵循以下方法的软件测试的验证部分： 文档审阅 走查 检查 可行性分析或任何其它形式的分析，以确定该软件是否是其应成为的样子 代码审查 引述CSTE CBOK的一句话：检验回答了这个问题，“我们是否建立了正确的系统？”，而确认致力于回答，“我们是否正确地建立了系统？”以下是所有发生在V模型的左侧静态测试活动。注意:此信息可以推广到任何遵循或多或少相似开发步骤的项目中去。上面V模型的右侧是验证部分。 动态测试技术 单元测试 集成测试 系统测试 单元测试，集成测试，系统测试和验收测试阶段都是在发展的不同阶段对软件创建并进行实际测试。即使测试是针对验证不同类型的要求，它们都是一个类型的测试。所以，不管是何种类型的测试，只要我们需要对软件测试，并且对于决定测试结果（无论成功与否）来说，其输出必需的——这就是确认。现在，是否可以确定V模型的右侧没有确认呢？答案是，没有所有在右侧各阶段的测试都在创建过程中经过了数次检验。测试文件检验的具体过程参见：http://www.softwaretestinghelp.com/test-documentation-reviews/在右侧：测试和代码都在单元/集成测试阶段由开发人员进行检验。系统测试的文档完成过程中要经过互查，完成后需要经过开发团队和业务分析人员的审查。验收测试阶段之前需要经过QA团队以及用户的审查。结论：总之，静态测试是一个重要的测试技术，它需要业务需求评审，功能需求评审，设计评审，代码走查和测试文件审查。它是一个连续的活动，而不是仅仅由测试人员完成的。确认，动态检测需要更多动手，并且是在产品本身，而不是在其他替代的工件上。一个更为正式的测试用例/状态识别流程，涵盖注意事项，执行和缺陷报告都属于动态测试方法。【英文原文：http://www.softwaretestinghelp.com/static-testing-and-dynamic-testing-difference/】]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>静态测试</tag>
        <tag>动态测试</tag>
        <tag>差异</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码走查工具Jupiter介绍]]></title>
    <url>%2F2017%2F03%2F01%2F%E4%BB%A3%E7%A0%81%E8%B5%B0%E6%9F%A5%E5%B7%A5%E5%85%B7Jupiter%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[引言Code Review的作用和意义已在很多技术团队内达成共识，可是很多时候并未被有效执行，甚至被认为是一项费时费力的工作。借助一些工具可以更容易，更有效率地来进行Code Review，本文介绍的Jupiter即是其中之一。 Jupiter概述Jupiter是一款开源的Eclipse插件，以XML形式存储review数据，通过SVN/CVS将review结果在团队内共享。一个很方便的功能是其建立了review问题跟具体源代码的对应关系（通过点击review问题列表中的问题可以跳转到对应的代码段，通过点击代码段上的review问题标记可对应到具体的问题描述），review问题列表支持各种filter规则（根据review问题状态、责任人等，通过这个filter可以列出具体阶段需关注的问题）。 Jupiter安装通过Eclipse的update site 在线安装：http://jupiter-eclipse-plugin.googlecode.com/svn/trunk/site/或下载后安装：http://code.google.com/p/jupiter-eclipse-plugin/downloads/list安装后可能需重启Eclipse。 Jupiter的Code Review流程Jupiter的Code Review流程为以下几步： 1.建立review任务：代码修改者或TL建立review任务，指定需评审的代码文件、参与评审的人员、定义问题类型及严重级别等。 2.个人评审阶段：开始个人独自评审，将可能出现的问题加入问题列表。 3.团队评审阶段：团队成员坐在一起，讨论个人评审阶段的问题，确定是否需要修复并分配解决人员。 4.问题修复阶段：每个人修复分配给自己的问题，修复后修改问题状态。 下面图文介绍具体的操作（点击图片看大图）。1、建立review任务在“Package Explorer”或“Navigater”里，右键点击项目名称，选择“Properties”显示项目属性窗口。选择“Review”将显示Jupiter属性点击“New”按钮打开新建Review ID对话框，输入Review ID（需符合文件命名规则）和Description。选择需要Review的文件，可一次选择多个需要Review的文件列表，可继续Add或选中后Remove设置参加Review的人员，每次添加一个，重复多次添加后的Reviewer列表，可继续Add或选中后remove选择评审负责人接下来的几步是设置问题类型及严重级别和filter，根据实际情况修改或用默认值，finish后会在工程根目录生成.jupiter文件，提交该文件到SVN。 2.个人评审阶段从SVN上更新最新的源代码和.jupiter文件，在Eclipse里“Window”-“Open Perspective”-“Other”选择“Review”打开Review视图选择“Individual Phase”选择Project Name(项目名称)，Review ID（review任务）和Reviewer ID（评审人员）“Review Table”右边第一个下拉菜单显示了需Review的文件选择文件就可以开始review了，发现问题时，光标停在问题代码处，点击鼠标右键选择“Add Review Issue……”在“Review Editor”里选择问题类型及严重性，添加概要和详细描述，保存。可以看到增加了Review问题的代码会在行首处有标记。个人评审完毕后将Jupiter评审数据目录(默认为review)下的数据上传到SVN。 3.团队评审阶段团队成员坐在一起，从SVN上更新最新的Review数据，从review试图中选择“Team Phase”，点击“Review Table”中的问题会跳到对应的代码，一起讨论代码是否确实存在问题，在“Review Editor”里分配修复人员及解决方式，保存。团队评审完毕后将Review数据上传到SVN。 4.问题修复阶段个人回到自己的工作机，更新最新的review数据，从review试图中选择“Rework Phase”,会在“Review Table”里列出分配给自己的问题，逐一修复，并在“Review Editor”将问题状态改为“Resovled”，保存并将review数据上传到SVN。Rework完成后，各位评审者再次检查，如果检查未通过，可将问题状态改为“Re-Opened”，确认问题修复后将问题状态改为“Closed”，至此，一个Code Review流程结束。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
        <tag>Jupiter</tag>
        <tag>代码走查</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云英未嫁]]></title>
    <url>%2F2017%2F02%2F28%2F%E4%BA%91%E8%8B%B1%E6%9C%AA%E5%AB%81%2F</url>
    <content type="text"><![CDATA[晚唐时期的罗隐是一个四海闻名的才子，但却一生怀才不遇。他本名罗横。相传当年罗秀才以寒士赴京应举，在钟陵筵上与颇有才思的歌女云英同席。谁曾想他先后十次考进士均未考中。在外流浪十二年后，落第书生终决心离开京城，改名罗隐，不再参加科举。（也有说因得罪权贵，礼部侍郎的官职被罢免。）回乡途中他路过钟陵，再次和云英不期而遇。西风瘦马时节，这时的云英仍隶名乐籍，未脱风尘，见到眼前的这位罗秀才竟还是当年的一身布衣，惊讶不已。罗隐不胜感慨，遂赠诗曰：钟陵醉别十余春，重见云英掌上身。我未成名君未嫁，可能俱是不如人？ 罗隐 《赠妓云英》“云英未嫁”的典故即出于此。一个是落第秀才，一个是半老歌女，地位虽有悬殊，命运却是相似。有诗评说，这两句与其说是反讥云英，倒不如说是借以自嘲。罗隐把成名与嫁人相提并论，可见在古人眼里，女子嫁人与考秀才一样乃是人生最大事业，十年已过，还见云英仍然未成就事业，罗隐不免有同是天涯沦落之感，重见云英掌上身，意思是可见你我事业都未成功，你又何苦来讽刺我？（网评）]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>云英</tag>
        <tag>罗隐</tag>
        <tag>怀才不遇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[伯罗奔尼撒战争（Peloponnesian War）]]></title>
    <url>%2F2017%2F02%2F28%2F%E4%BC%AF%E7%BD%97%E5%A5%94%E5%B0%BC%E6%92%92%E6%88%98%E4%BA%89%EF%BC%88Peloponnesian%20War%EF%BC%89%2F</url>
    <content type="text"><![CDATA[伯罗奔尼撒战争（Peloponnesian War）是以雅典为首的提洛同盟与以斯巴达为首的伯罗奔尼撒联盟之间的一场战争。这场战争从前431年一直持续到前404年，期间双方曾几度停战，最终斯巴达获得胜利。这场战争结束了雅典的经典时代，也结束了希腊的民主时代，强烈地改变了希腊的国家。几乎所有希腊的城邦参加了这场战争，其战场几乎涉及了整个当时希腊语世界。在现代研究中也有人称这场战争为“古代世界大战”。这场战争不但对古代希腊而且对历史学本身有重要的意义，其本身也是第一次被科学地、历史学地记录下来的史实：希腊历史学家修昔底德（Thucydides,460 BC - 395 BC）在他的《伯罗奔尼撒战争史》中详细地记录了当时的事件，该纪录到前411年冬中止。修昔底德分析了这场战争的原因和背景，他的分析对欧洲的历史学具有先驱作用。修昔底德之后，色诺芬在他的《希腊史》中延续了修昔底德的工作，记录了前411年后的事件。值得注意的是古希腊人并不称这场战争为伯罗奔尼撒战争，这个名称是后来的人取的。修昔底德本人称之为“伯罗奔尼撒人与雅典人之间的战争”：雅典此时正处于其文化的顶峰，其政治结构是民主社会（与今天的民主社会不同，当时的雅典只允许有财产的男性公民有公民权，穷人、女性和奴隶没有公民权）。斯巴达的政治形式是一个混合宪法。外交上斯巴达传统比较喜欢寡头政治。两个联盟的同盟者在政治形式上也有这个区别。两派之间的意识形式上的区别对双方来说是非常重要的。斯巴达战胜后立刻在雅典引入了寡头政治。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>伯罗奔尼撒战争</tag>
        <tag>雅典</tag>
        <tag>斯巴达</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十字军东征]]></title>
    <url>%2F2017%2F02%2F28%2F%E5%8D%81%E5%AD%97%E5%86%9B%E4%B8%9C%E5%BE%81%2F</url>
    <content type="text"><![CDATA[十字军东征（拉丁语：Cruciata；伊斯兰世界称为法兰克人入侵；1096年－1291年）。这是一系列在罗马天主教教皇的准许下的战役，由西欧的封建领主和骑士对他们认为是异教徒的国家（地中海东岸）发动了持续近200年的宗教战争。十字军东征最初参与成员，例如：骑士、商人、农民，多数是自愿的，受拜占庭帝国之邀，参与夺回圣地战争。这些十字军也非拜占庭帝国主力部队。东正教徒也参加了其中几次十字军。参加这场战争的士兵配有十字标志，因此称为十字军。十字军主要是罗马天主教势力对穆斯林统治的西亚地区作占领并建了一些基督教国家，因而也被形象的比喻为“十字架反对弓月”；但也涉及对“基督教异端”、其他异教徒和对其他天主教会及封建领主的“敌对势力”的征服，如第四次十字军东征将矛头指向了东正教的拜占庭帝国。天主教徒相信，十字军的最初目的是收复被穆斯林统治的圣地耶路撒冷。当塞尔柱土耳其的穆斯林在安纳托利亚对基督教的拜占庭帝国取得军事胜利时，十字军的战役为响应拜占廷的求助而被点燃了。旷日持久的战役断断续续在黎凡特地区展开，战争中敌友双方界线不完全是按宗教划定，例如第五次东征时基督徒们与罗姆苏丹国结盟。十字军虽然以捍卫宗教、解放圣地为口号，但实际上是以政治、社会与经济等目的为主，伴随着一定程度上的劫掠，参加东征的各个集团都有自己的目的，甚至在1204年的第四次十字军东征劫掠了天主教兄弟东正教拜占庭首都君士坦丁堡。所以，美国学者朱迪斯·M·本内特在他的著作《欧洲中世纪史》里写道，“十字军远征聚合了当时的三大时代热潮：宗教、战争和贪欲”。 到1291年，基督教世界在叙利亚海岸最后一个桥头堡——阿卡被攻陷，十字军国家的命运告终。十字军东征对西方基督教世界造成了深远的社会、经济和政治影响，其中有些痕迹至今尚存。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>十字军</tag>
        <tag>基督教</tag>
        <tag>伊斯兰教</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[圈地运动]]></title>
    <url>%2F2017%2F02%2F28%2F%E5%9C%88%E5%9C%B0%E8%BF%90%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[在12到19世纪，在以英国为代表的欧洲出现了所谓的圈地运动。由中世纪到18世纪，整个欧洲的农业体系十分相似。封建社会的农业体系通常使用敞田制。在每个庄园领主的土地上，都会安排一片“公有地”。这片地的所有者并非广大平民的或者国家的，而是有特定领主的。只是这些地不安排耕种，而该领主属下的平民有权在其上从事有限制的放牧、采柴、摘野果等活动。最早追溯到12世纪，在英国，少数“公有地”被圈起，成为一般民众不得使用的私有田。而这一运动在十五和十六世纪迅速展开。16世纪至17世纪，圈地行为被罗马天主教会公开指责，反对圈地行为的法令也被颁布。然而18世纪欧洲农业的机械化要求宽阔、集成的农田，之前的敞田制成为了瓶颈。之后一系列的国会法案，使英国圈地运动于1801年被合法化。圈地的方式包括土地所有者买断农民的使用权的较为和平的方式，和通过立法强制终止非土地所有者对其使用的权利。其中强制的手段常常会造成冲突甚至叛乱。圈地是英国农业革命的前导。土地集中管理以及其他农业技术的革命造成农业产量大幅提高，大量失业人口涌入都市，并使工业革命成为可能。按照马克思主义的说法，在资本主义制度取代封建制的历史进步的过程中，西欧新兴资产阶级和新封建贵族使用各种手段剥夺农民土地的过程，“是明摆着的阶级掠夺”。这种情况在英国、德国、法国、荷兰、丹麦等国家都曾先后出现过，而以英国的最为典型。这是资本原始积累的最重要手段之一。一种说法是在这段时期，羊毛制品的销售量大幅增加，商人们为了增加羊毛的数量以满足市场，因此使用不同方法圈占、合并耕地，而其中的方法包括了把公地私有化、强迫小农民售出土地等，以增大牧场面积。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>圈地运动</tag>
        <tag>工业革命</tag>
        <tag>公有地</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《极简欧洲史》读书心得]]></title>
    <url>%2F2017%2F02%2F28%2F%E3%80%8A%E6%9E%81%E7%AE%80%E6%AC%A7%E6%B4%B2%E5%8F%B2%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一本宏观的简要的介绍欧洲历史的书，在看的过程中，也针对欧洲和中国的历史对应，结合网上的资料，整理了中西方历史对照表。中西方历史对照表按照本书的介绍，贯彻作者极简史的思想，其实从以下几张图基本看出本书的脉络和内容了。 文章摘要 文艺复兴和宗教改革都是向过去看齐的运动。 中国文明始终没有中断，但是却是由于中国文明没有中断，因而没有反思的机会，也就没有文艺复兴、宗教改革、科学革命的那种再生的动力。 全球化其实一直在进行中，只不过从前很慢，现在很快。 大格局看历史。 欧洲文明发端之初，组成的元素有三：1、古希腊和罗马文化；2、基督教；3、对罗马帝国进行侵略的日耳曼蛮族的战士文化； 欧洲是海洋文明，中国是大河文明。 唯有答案简单，才可能近乎正确。 凯撒的归凯撒，上帝的归上帝。 耶稣把犹太人的道德教训转化成了宇宙大爱。 有人尊保罗为基督教的鼻祖，因为耶稣死的时候，这个信仰还只是犹太人的家务事。保罗确凿的指出这是所有人的宗教，自此以后，基督教就成了一种世界性的宗教。 罗马人要求的一点是除了自己的宗教之外，还必须对皇帝敬拜。但基督徒跟犹太人一样，说自己只能崇拜唯一的真神，因为无论如何都不肯把君王当做神一般看待。 早期的基督徒拒绝服兵役，罗马人对他们心生疑忌，这就是原因之一。 君士坦丁大帝公元313年，赋予基督教合法地位。 并非所有东西都归国王所有，是欧洲政府思维的基石。个人注：中国是，普天之下莫非王土！ 文艺复兴：是重新找回古希腊罗马学术！摆脱教会教条的束缚，回归古典时期古希腊、罗马的学术及文化。传递出古典的东西是无与伦比的。 人体是完美的，这个观念是希腊的发明之一。裸体像和裸露的身体是有分别的。裸体像本身展现的是丰富的力与美，它是一种恰到好处的状态；裸露的身体就只是没穿衣服而已，而且因为没穿衣服显得自曝其短。 文艺复兴时期的米开朗琪罗所雕刻的大卫像是公认的完美人类形貌。 保罗说，你只要相信耶稣基督就能得救。马丁·路德就是从这句话中得到启发，进行了宗教改革。圣经是唯一的权威。 法国启蒙运动— 理性+教育。社会有两股非理性的强大势力：教会和国王。启蒙运动一位推动者如此归结该运动的诉求：我希望看到最后一个国王被最后一个神父的肠子给绞死。 法国启蒙运动的伟大成果，是汇整出一部百科全书。它的根本不同在于将理性用于一切事物，让知识领域里没有层级之分。上帝的条目是在D（神）和R（宗教）字首的条目下。 浪漫主义运动崇尚感受、情绪以及所有强烈的情感。 希腊验电的三大哲人：苏格拉底、柏拉图、亚里士多德，在哲学方面举足轻重。有人说过，整个西方的思想传统无非是柏拉图的注脚。 苏格拉底认为一般人的意见并不具备理性基础，他们对雅典的直接民主提出严重的质疑。他指出，认识善变和无常的、优柔寡断的、浅薄无知的、容易被操弄的，而政治是一种精细的艺术，需要智慧和良好判断，这不是每个公民都拥有的特质。 （代议式民主应该好点） 苏格拉底的问答法；亚里士多德三段论。 对一切事物充满质疑，人会迷失方向；我们不能光靠理性过日子，一定要靠风俗、习惯和宗教对个人指点迷津，才可能成就一个社会。 法国也起源与日耳曼民族。 穆斯林也承认耶稣和耶稣之前的先知，但深信穆罕默德是世上最后一位先知，能指引大家走向唯一真神安拉的怀抱。 欧洲人改采用海路，部分原因是路上的东通之路已经完全落在穆斯林的手里。 高举手臂的罗马共和国的致敬礼很像纳粹的行礼动作。 哲学家约翰·洛克的著作《政府论》，初版于1690年，提出成立政府已与签订一纸商业契约无异。 权力的分立未能得到确立的宪法根本不能称为宪法。 屋顶呈圆拱状的罗马式建筑。 最排他的民族主义，世称“法西斯主义” 到了1850年，英国已经有半数人都居住在城市里。 个人注：2015年，中国城镇化率达到56.10%！ 苏联的国旗：榔头+镰刀，分别代表城市里的劳工和乡村劳工。 1480年，中国明朝皇帝下令停止所有的海外探险和贸易。 而1492年，哥伦布初次航行到美洲。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>欧洲史</tag>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中文输入法为什么会有全角和半角的区别]]></title>
    <url>%2F2017%2F02%2F28%2F%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E5%85%A8%E8%A7%92%E5%92%8C%E5%8D%8A%E8%A7%92%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Q: 中文输入法为什么会有全角和半角的区别？全角输入，比如１２３４５６ＡＢＣＤＥ。我想了解下为什么在中文输入法中会有全角这个功能的？我好像没发现它有什么用。 A: 这些全角符号似乎是双字节中文编码的历史遗留问题。当年在纯文本的界面中，为了让西文和中日韩的方块字对齐，就让西文字母、数字和标点也占用一个汉字的视觉空间，并且使用 2 个字节存储。后来，其中的一些全角字符因为比较有用，就得到了广泛应用（比如全角的逗号「，」、问号「？」、感叹号「！」、空格「 」等），专用于中日韩文本，成为了标准的中日韩标点字符。而其它的许多全角符号失去了价值（我们现在很少需要让纯文本的中文和西文字字对齐了），就很少再用了。另外需要说明的是：现在全球文本编码的事实标准是 UTF-8 等基于 Unicode 的编码。Unicode 吸纳了许多遗留（legacy）编码，并且为了兼容性而保留了所有字符。所以这些没什么用的全角字符也留下来了。而国家标准也仍在要求字体和软件支持这些全角字符。不过，半角和全角字符的关系在 UTF-8 等编码中不再是简单的 1 字节和 2 字节的关系了。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>全角</tag>
        <tag>半角</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在雅典阵亡将士葬礼上的讲话——伯利克里]]></title>
    <url>%2F2017%2F02%2F28%2F%E5%9C%A8%E9%9B%85%E5%85%B8%E9%98%B5%E4%BA%A1%E5%B0%86%E5%A3%AB%E8%91%AC%E7%A4%BC%E4%B8%8A%E7%9A%84%E8%AE%B2%E8%AF%9D%E2%80%94%E2%80%94%E4%BC%AF%E5%88%A9%E5%85%8B%2F</url>
    <content type="text"><![CDATA[国殇演说辞 （殇（殤）shāng 未成年而死：幼子早殇。 为国战死者：国殇。殇魂。）背景：伯罗奔尼撒战争爆发的第二个年头，即在公元前４３０年的春天，一场可怕的瘟疫降临在雅典。从此，雅典深受人事和自然的双重窘迫，在这样的苦难面前，死亡是人们唯一的归宿，面对无可避免的死亡，人类所有的技艺，雄辩，谋略全都一无所用，在灾难面前，根植于人类灵魂深处的野蛮天性暴露无疑，虔敬不再，希望不再。瘟疫后的第二年，雅典伟大的政治领袖，＂第一公民＂伯利克里去世，但他在阵亡将士国葬典礼上的演说，却成为不朽的传世经典，其蕴涵的勇气和力量，深深的激励着后世。以下是演讲正文： 以前在此地发表葬礼演说的大部分人,都赞颂那位把葬礼演说作为公葬典礼一个组成部分的立法者。在他们看来，对阵亡将士发表演说，给予他们这项荣誉是很有价值的。我自己原来认为他们在行动中所展示出的价值，也应通过行动给予荣誉上的充分奖赏，就像你们刚在准备这次国葬典礼中所见到的一样。我原本希望许多勇敢的人的声誉不至于因为别人的说法而受到损害，不至于因为他对他们说三道四而有所变化。当发言者无法让其听众相信他所说的就是事实的时候，他是很难恰如其分的。一方面，熟悉死者事迹的亲友，以为这个发言还没有他自己所知道的和他所希望听到的那么多；另一方面，那些不熟悉死者的人，当他们听到他们自己的能力所不及的功绩时，会对死者感到嫉妒，会认为演讲者过分颂扬死者。颂扬他人，只有在一定的界限内才能使人容忍；这个界限就是他们相信在所列举的事迹中，他们可以做到的；一旦超出这个界限，人们就会嫉妒和怀疑了。但是，既然我们的祖先赞同制定这个制度，因此，我有义务遵守法律，尽我所能来满足你们各自的期望和要求。我首先要说到我们的祖先们：因为在现在这个场合，首先提及他们的光荣，这是公平的，也是适当的。他们世世代代生活在这块土地上，因为他们勇敢无畏，使这块土地直到如今仍保持自由。如果说我们的祖先是值得歌颂的，那么我们的父辈们受到赞扬就更加当之无愧了。因为他们还为我们留下现在我们所拥有的这个帝国，而他们能够把这个帝国传给我们这一代，不是没有付出惨痛代价的。我们今天集合在这里的人，绝大多数正当盛年，我们几乎所有方面扩大了我们的版图。我们从各个方面充实了祖国的实力，无论平时或战时，她都能够靠自己的资源加以维持。关于我们用以取得现有优势的军事成就，关于我们或我们父辈英勇地击退希腊或者希腊以外敌人的入侵的事迹，听众们太熟悉了，在此我就不再做评述了。我所要说的是我们是怎样达到今天这种地位的，我们之所以日渐壮大是在怎样一种政体下实现的，我们的民族习惯是怎样产生的。我试图解答了这几个问题之后，再来歌颂阵亡将士。因为我认为这种主题的演说，在目前的场合下式合适的，对于全体与会人员，包括公民和非公民在内都是有益的。我们的宪法没有照搬任何毗邻城邦的法律，相反地，我们的宪法却成为其它城邦模仿的范例。我们的制度之所以被称为民主制，是因为城邦是由大多数人而不是极少数人加以管理。我们看到，法律在解决私人争端的时候，为所有的人都提供了平等的公正；在公共生活中，优先承担公职所考虑的是一个人的才能，而不是社会地位，他属于那个阶级；任何人，只要他对城邦有所贡献，绝对不会湮没无闻的。我们在政治生活中享有自由，我们在日常生活中也是如此，当我们的街坊邻居为所欲为的时候，我们不致因此而生气，也不会互相猜疑，互相监视，甚至不会因此而常常给他们难看的脸色，尽管这种脸色不会对他们造成实际的伤害。我们在私人关系上宽松自在的，但作为公民，我们是遵守法律的。对当权者和法律的敬畏使我们如此。我们不但服从那些当权者，我们还遵守法律，尤其是遵守那些保护受伤害者的法律，不论这些法律是成文法还是虽未写成文字但是违反了就算是公认耻辱的法律。另外，我们安排了种种娱乐活动，以使人们从劳动中获得精神的恢复。在整个一年之中，我们都举行各种常规的竞技会和祭祀活动；在我们的家庭中，有华丽而清雅的设备，每天怡娱心目，消除心中郁闷。我们的城邦如此伟大，它把全世界的产品都带到我们的港口，因此，对雅典人而言，享受其它地方的产品，就如同享受本地的奢侈品一样。回过头来看看我们的军事政策，我们也与我们的敌人有所不同。我们的城邦对全世界是开放的，我们从未通过排外条例，以防止外人有机会探访或观察，尽管敌人的耳目时而从我们的自由开放中捞到好处。我们所依赖的主要不是制度和政策，而是我们公民的民族精神。在我们的教育制度上，我们的对手是从孩提时代就通过残酷的训练，以培养其勇敢气概，在雅典，我们的生活是完全自由自在的，但是我们也随时准备对付和他们一样的各种危险。这一点由以下的事实可以得到证实：当拉栖代梦人侵入我们的领土时,他们不是单独前来,而是带他们所有的同盟者一起来的;而我们雅典人在向一个邻邦领土进攻的时候,却是由我们自己来完成的.虽然我们在异乡作战,他们为保卫自己的家乡而战,但我们还是常常击败他们。任何敌人从未遭遇过我们的全部兵力，因为我们不得不关注我们的海军，也不得不派遣我们的公民在陆地上去完成许许多多的任务。因此，当他们与我们的一支军队交战的时候，如果他们获胜了的话，他们就自叹说他们打败了我们的全军；如果他们战败了，他们就说是被我们全体人民打败的。我们宁愿以轻松的心情而不是以艰苦的训练来应付危险；我们的勇气是从我们的风俗习惯中产生的，而不是法律强制使然。我们具有双重优点：一则我们没有花费时间来训练自己忍受那些尚未到来的痛苦 ；二则当我们真是遇到这些痛苦的时候，我们的表现和那些受到这种训练的人是一样的无畏。当然我们的城邦值得我们赞美的优点还不止这些。我们热爱高贵典雅的东西，但是没有因此而过于柔弱。我们把财富当作是可以利用的东西，而不是当作可以夸耀的东西。真正的屈辱不是贫穷这一事实本身，而是不与贫穷作斗争。我们的公职人员，在关注政治事务的同时还关注自己的私人事务；我们的普通公民，虽长年累月地忙于劳作，但是仍可以对国家大事做公平的裁断。因为我们雅典人和任何其他民族不一样，我们认为一个不关心公共事务的人不是一个没有野心的人，而是一个无用之人。我们雅典人即使不是倡议者，也可以对所有的问题进行裁判；我们不是把讨论当作绊脚石，而是把它看作是任何聪明行动所必不可少的首要前提。另外，我们在从事冒险事业之前或者冒险事业之中，能够对它深思熟虑。其他人的勇敢是由于他们的无知，当他们反思的时候，又会感到疑惧了。但是，真正勇敢的人无疑应属于那种最了解人生的灾患和幸福的不同而又勇往直前，在危险面前从不退缩的人。我们的慷慨大方同样是与众不同的。我们结交朋友旨在给他人好处，而不是从他那里得到好处。当然给予他人好处的人成为双方更为可靠的朋友，他们继续表示友善，以使受惠者永远保持感激之情。但是如果受惠者在感情上缺乏同样的热忱，他们的回报就像在偿还一笔债务，不是慷慨的赠与。只有雅典人，他们在施惠别人时从不计较利益得失，而是出于一种慷慨大度的信念，一种勇敢无畏的信念。一言以蔽之，我们的城邦是全希腊的学校。我认为世界上没有像雅典人这样，在个人生活的许多方面如此独立自主，温文尔雅而又多才多艺。这些并不是在这样的场合下的一种空自吹嘘，而是实实在在的事实，我们城邦的势力就是靠这些品质获得的，在现有的国家中，只有雅典在遇到考验时，被证明是比它的名声更伟大；只有雅典，入侵的敌人不以战败为耻辱；它的臣民不因统治者不够资格而抱怨。不但现代而且后世也将对我们表示赞叹。因为我们的强大势力虽未留下证人，但是我们所留下的纪念物是巨大的。我们绝不需要一个荷马为我们唱赞歌，也不需要任何人的歌颂，因为他们的歌颂只能使我们短暂陶醉，而他们对于事实的印象不足以反映事实的真相。我们勇敢无畏的攻入每一片海洋，进入每一片陆地；我们在各地所造成的不幸，或所布施的恩德，都为后世留下了不朽的纪念。这就是雅典，就是这些人为它慷慨而战，慷慨捐躯的一个城邦，因为他们只要想到这个城邦就会不寒而栗。他们的每位后人，为此都应当准备忍受这一切痛苦。的确，我说了这么多话来讨论我们城邦的特性，那是因为我要向你们说明，我们奋斗目标比其它不具备这些特点的人们所追求的目标更要远大一些；因此，现在我就用实证来表达对战士的怀念。现在关于歌颂阵亡将士的最重要的部分，我已经说完了。因为我已经赞颂了雅典，赞颂了使我们城邦强盛的这些人和类似他们的人的英雄气概，你们会发现，他们不像大多数其他希腊人，他们的声望是无愧于他们的功绩的。在我看来，像他们这样的死亡是衡量一个人价值的试金石，不过这是他们品质的初次表现也好，还是最后的证明也罢。公正的讲，他们为祖国而战的坚定信念，应当抵消一个人在其他方面的不足，他们的优点弥补了他们的缺点，他们作为一个公民的贡献超过他们作为个人所造成的祸害。在这些人中间，富人没为有了将来享受其财富而变成懦夫，穷人没有为了将来获得自由和富裕而逃避灾难。他们所需要的不是个人的幸福，而是向他们的敌人复仇。在他们看来，这是最光荣的冒险。他们快乐地决定参加对敌复仇，坚信能够击溃敌人，而放弃了其他的一切。他们并没有对难以确定的最后的胜利寄予厚望，而是在面临实际战斗中，勇往直前，相信他们自己。因此，他们宁愿在抵抗中牺牲，也不愿在屈服中偷生；他们没有做不光彩的事，他们在危难面前坚守阵地；霎时间，在他们命运的顶点，不是恐惧的顶点而是他们光荣的顶点，他们就离开我们而长眠了。这些人就这样牺牲了，他们无愧于他们的城邦。他们这些还活着的人们虽然可以祈求得到一个较为幸福的结局，但是在战场上你们必须有坚定的决心。你们不能满足于单单从字面上理解与保卫国家密切相关的这些优点的意义，尽管演说者在面对像现场这样活跃的观众时，仍可以就这些优点撰写出非常精彩的演说词。你们自己必须了解雅典的军事力量，并且时刻都要关注它，直到对他的热爱充满了你们的心头；然后，当你们认识到他的伟大之处时，你们必然会想到，这些人之所以能赢得这一切，是由于他们的勇敢精神，他们的责任感，他们在行动中有一种强烈的荣誉感；你们也一定会认识到，在一项冒险事业中，任何个人的失败都不会使它们觉得城邦使他们丧失勇气，他们反而会把他们最光荣的东西奉献出来。他们无一例外地把生命奉献出来，这使他们每个人都获得了永世常青的声誉。，至于坟墓，它不只是安葬他们遗骸的地方，而且是存放着他们荣誉的最崇高的圣地，它将永远铭刻于人们的，人们一有机会就将在这里缅怀他们的行为或业绩。因为英雄们把整个大地作为他们的坟墓，甚至在远离家乡的土地上，哪里的墓志铭不是铭刻于记功柱上，而是以不成文的文本铭刻于人民的心中，成为每个人心目中的圣地。这些人应当成为你们的榜样，他们认为幸福是自由的成果，而自由是勇敢的成果，他们从不在战争的危险面前有所退缩。那些毫不吝惜生命的人并不是可悲的人；这些人不指望以后会得到什么，他们保全生命说不定会带来相反的结果，对他们来说，任何意外的失败，都将导致最可怕的后果。可以肯定，对于一个人的灵魂而言，由于懦弱而引起堕落，比之在充满活力和爱国主义精神时意外死于沙场，不知要悲惨多少倍！因此，我不吊慰死者的父母（他们允许不在场），而是加以抚慰。他们知道，人生的旅程充斥着难以胜数的机遇。但是，像他们这样光荣牺牲，并引起你们的哀痛，这的确是幸运的。对他们而言，生命之旅与幸福之旅同步。我知道，这一点很难说的通，尤其是当你们看到别人快乐的时候，你们也会想起过去一些常常使你们快乐的事情来。一个人不会因为缺少他从来未曾享受过的好事而感到悲伤，而是因为丧失了他长久以来所惯于享受的东西才感到悲伤的。然而，你们中间那些适龄的人仍要生儿育女，他们必须支持他们的未竟之愿。这些心声的子女不仅可以使你们逐步忘记那些死者，他们还将立即充实城邦的力量，保证城邦的安全；如果因为一个公民不是盛年的人一定要为你们幸运地享受了生命中最美好的时光而庆幸，你们将在短暂的人生余年里为死者的美名感到快慰。只有对荣誉的热爱是永恒的，使一颗年老而不幸的心得到快慰的是荣誉，而不是像所有人所说的利益。至于你们中间那些死者的儿子和兄弟们，我看到在你们前面有一场艰巨的斗争。当一个人去世的时候，人们在颂扬他，纵或你们的功绩是卓越超群的，你们仍将发现自己的荣誉不仅很难超越他们，甚至难以接近他们。活着的人往往嫉妒那些和他们竞争的人，而对于那些不再参与竞争的死者而言，他们总是能够善意的尊敬的。另一方面，现在你们中一些人已经成为寡妇了，如果要说说它们的女性的长处的话，那么一切都包含在我这简短的忠告里：你们的伟大光荣丝毫不乏女性的本色；妇女的最伟大的光荣很少为男人们所谈及，不论他们对此持称颂观点还是持贬抑观点。现在，我的任务已经完成。我是尽全力履行职责的，至少在表面上已经满足了法律上的要求。如果说今天参加葬礼的人们都已经分享了死者的荣誉，那么对于其它的人来说，他们的子女们将由公葬抚养，直到他们成年为止。因为这是城邦拿出重金奖励那些死者和他们的遗属，就像给予在勇敢竞赛中获得优胜者的花冠一样，哪里对于勇敢的奖赏最大，那里就可以找到最优秀的公民。现在，你们对于亲友已致哀悼，你们可以解散了。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>雅典</tag>
        <tag>演说</tag>
        <tag>伯利克里</tag>
        <tag>国演说</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[凯撒的归凯撒，上帝的归上帝]]></title>
    <url>%2F2017%2F02%2F28%2F%E5%87%AF%E6%92%92%E7%9A%84%E5%BD%92%E5%87%AF%E6%92%92%EF%BC%8C%E4%B8%8A%E5%B8%9D%E7%9A%84%E5%BD%92%E4%B8%8A%E5%B8%9D%2F</url>
    <content type="text"><![CDATA[那时，法利塞人去商讨怎样在言谈上叫耶稣入圈套。他们遂派自己的门徒和黑落德党人到他跟前说：「师傅，我们知道你是真诚的，按真理教授天主的道路，不顾忌任何人，因为你不看人的情面，如今请你告诉我们：你以为如何?给凯撒纳税，可以不可以?」耶稣看破他们的恶意，就说：「假善人，你们为什么要试探我?拿一个税币给我看看!」他们便递给他一块「德纳」。耶稣对他们说：「这肖像和名号是谁的?」他们对他说：「凯撒的」。耶稣对他们说：「那么，凯撒的，就应归还凯撒；天主的，就应归还天主。」他们听了大为惊异，遂离开他走了。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>耶稣</tag>
        <tag>凯撒</tag>
        <tag>税吏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拉丁语去哪儿了]]></title>
    <url>%2F2017%2F02%2F28%2F%E6%8B%89%E4%B8%81%E8%AF%AD%E5%8E%BB%E5%93%AA%E5%84%BF%E4%BA%86%2F</url>
    <content type="text"><![CDATA[在英国留学时，一个西班牙同学告诉我：意大利人和西班牙人交流，彼此没学过对方的语言，也能猜中五六分的意思。西班牙语为什么和意大利语如此相似？为什么历史上被西班牙和葡萄牙征服的中南美洲也称为拉丁美洲？意大利、法国和西班牙足球被称为欧洲拉丁派，只是因为他们球员的技术在欧洲各国里相对细腻，更像拉美球队吗？这几个问题的源头其实可以追溯到古罗马时代。约三千年前，拉丁语就是亚平宁半岛中部西海岸拉丁部族的语言，随着罗马人的强大，在公元前五世纪初之后，拉丁语成为罗马共和国的官方语言。在罗马帝国时代，拉丁语完全取代了帝国西部各地区（包括现在的法国、西班牙和巴尔干半岛等地区）的本地语言，不过在东部的希腊化世界里，希腊语更为通用。公元四百年以后，在日耳曼蛮族持续地大规模侵蚀下，西罗马帝国灭亡了。西部帝国分裂成诸多蛮族控制下的小王国，各地区的文化和经济交流大幅衰退。在帝国时代，不同地区的拉丁语口语就有较大差别；帝国崩溃后，随着各地区的相对独立发展，西班牙、法国、意大利、葡萄牙等地口语的区别日益加大，最终在拉丁语基础上衍生出了各民族自己的语言：意大利语、西班牙语、法语、葡萄牙语和罗马尼亚语（是很奇葩，罗马尼亚在东罗马帝国）等。这几种语言都属于语言学里的罗曼语族（Romance Languages）、也称作拉丁语族。romance还有罗曼史和浪漫小说的意思，这恰恰是因为这种起源于法国的关于骑士英雄和美女的爱情故事是以写作的拉丁语变体来命名。和英语相比，很多拉丁语名言是非常简洁有力的，比如凯撒那句著名的Veni, Vidi, Vici，英语是I came, I saw, I conqured（中文意思是我来，我见，我征服），还有笛卡尔表达的Cogito, ergo sum，英语是I think, therefore I am（我思故我在），还有电影《死亡诗社》里的Carpe diem，英语Seize the day（抓住今天，可以引申为活在当下）。相对法语，西班牙语和意大利语的单词更接近它的源头拉丁语。19世纪末20世纪初，数百万意大利人移民阿根廷，多少是因为西班牙语对他们而言容易掌握。拉丁美洲之得名也是因为这块大陆的主要语言西班牙语和葡萄牙语同属于拉丁语族。有意思的是，日耳曼人占领西罗马帝国后，却没能像罗马人那样把他们的日耳曼语成功移植到意大利、西班牙和法国等地区。笔者猜测有三个原因导致这一后果：首先，入侵的日耳曼蛮族相对西罗马帝国的人口规模来说，毕竟是少数；日耳曼人没能建立一个统一稳定的政权，他们甚至都无法征税；更重要的原因也许是对于深受罗马文化影响的上述西罗马地区而言，日耳曼文化是野蛮落后的。与之相对，在公元五世纪中期，面积较小、人口较少、文化落后的英国遭到盎格鲁-撒克逊人入侵后，本地的凯尔特语被日耳曼方言取而代之。公元九、十世纪，英国人又遭到操另一种日耳曼方言的维京人侵略，然而日耳曼方言词汇相对贫乏，要表达文化和思想还是比较困难。幸好，公元1066年法国的诺曼人侵略英国，从此英语不断借用法语和拉丁语里的词汇以丰富自身，现代英语的词汇量比法语和德语词汇量之和的两倍还多。英语里很多概念都有两套词汇表达，比如手工的，有handmade，还有来自拉丁语的manual；而可以表达国家的country、state和nation都来自拉丁语。除了英国，日耳曼语族也没有仅仅保留在现今的德国和奥地利，在其周边国家里，瑞典语、丹麦语与荷兰语都是日耳曼语族，比利时北部的语言（弗拉芒语）也属于日耳曼语族，南部则说一种罗曼语（瓦隆语）。现在瑞士的大部分地区也说德语。法国北部靠近比利时的地区说弗拉芒语。实际上，罗曼语族、日耳曼语族、还有东欧和俄罗斯人的斯拉夫语是欧洲人说的最多的三大语族，再加上凯尔特语族（盖尔语支和布列塔尼亚语支）和波罗地语族（立陶宛语和拉脱维亚语），所有这些语族都属于地球上分布最广泛的一个语系即印欧语系。在欧洲的原西罗马帝国地区，拉丁语作为口语很早就消失于民间了，而作为教会、学术和文化的专用语言则一直延续了一千多年，在文艺复兴时期，由于学者们对古典文化产生兴趣，也由于中世纪以来拉丁语的品质水准下滑，拉丁语经历了一次大规模的重建。与中世纪早期基本是文盲的贵族不同，这一时期的贵族和士绅阶级普遍学习和使用拉丁文，直到二十世纪之前，拉丁文都是欧美中等及高等教育的核心课程。然而紧接着文艺复兴的宗教改革运动把《圣经》翻译成了欧洲各国的民族语言，天主教会无法掌控新教徒，与上帝的神圣交流也不再只依靠拉丁文。虽然拉丁语的词汇和名言依然见诸于众多民族语言和生活之中，也在能生物分类学、梵蒂冈的宗教仪式和学院语言课程上见到，但它已是一种死去的语言。另一种曾经的国际通用语言希腊语（也属于印欧语系），结局也好不了多少，目前只有希腊人在使用。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>拉丁语</tag>
        <tag>罗马</tag>
        <tag>教会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[波希战争]]></title>
    <url>%2F2017%2F02%2F28%2F%E6%B3%A2%E5%B8%8C%E6%88%98%E4%BA%89%2F</url>
    <content type="text"><![CDATA[波希战争是在公元前499年至前449年之间，波斯与古希腊城邦之间的一系列冲突。公元前547年，波斯的居鲁士大帝征服了爱奥尼亚，但此后爱奥尼亚的希腊语城邦一直在寻求独立。波斯人为了便于统治，遂给这些城邦委任了僭主。到了前499年，米利都和阿里斯塔格拉斯的僭主在波斯的支持下出海远征纳克索斯岛失败而被解任。阿斯司塔格拉斯人趁机鼓动整个小亚细亚的希腊语地区起来反抗波斯的统治，由此拉开了伊奥尼亚起义的序幕。随着叛乱的发展，越来越多的小亚细亚小国被卷入到这场纷争中。雅典和埃雷特里亚人则为阿里司塔哥拉斯人提供军事援助，于前498年协助后者占领并焚毁了波斯的地方首府萨第斯。前497年至前495年之间战况一时陷于胶着，但波斯人随后重组军队进击叛乱的震中米利都，在拉德海战中彻底击溃了叛军，于前493年将叛乱镇压了下去。为了确保波斯帝国日后不受叛乱的威胁，同时加大对内陆希腊人的影响，大流士一世决定先发制人征服希腊。他誓言要向雅典和埃雷特里亚报萨第斯被焚的一箭之仇。第一次入侵始于前492年，波斯将军马铎尼斯指挥下军队攻下了色雷斯和马其顿，却因征途中的小差错而功败垂成。波斯人又于前490年派去了第二支军队，在达提斯和阿塔佛涅斯的指挥下横渡爱琴海，占领了基克拉泽斯，围困了埃雷特里亚人并最终将其毁掉。他们随后挥师雅典，却在马拉松战役被雅典军队打败。波斯人的第一次入侵就此止步，大流士也在前486年死去。前480年，大流士之子薛西斯一世亲率一支古代历史上首屈一指的大军开始了对希腊的第二次入侵。波斯军队在温泉关战役击败由斯巴达和雅典领导的希腊联军后，曾一度占领了希腊的大部分土地，然而他们的海军却在接下来的萨拉米斯海战中被希腊联合海军击溃。随后希腊人转守为攻，在普拉提亚战役中再次得胜，从而结束了波斯的侵略。希腊联军乘胜追击，在米卡勒战役中扫除波斯海军残部，并在前479年和前478年分别击溃屯于塞斯托斯和拜占庭的波斯守军。在围困拜占庭期间希腊联军的帕萨尼阿斯将军的所作所为让许多希腊城邦疏远了斯巴达，他们转而接受雅典的领导，形成了提洛同盟并在随后的战斗里将波斯军队彻底驱逐出欧洲。在前466年的欧里梅敦战役中同盟军终于解放了爱奥尼亚全境。提洛同盟在前460年至454年间插手埃及叛乱时遭受灭顶之灾，被迫停止进军。在前451年他们还派出过一支海军到塞浦路斯却无功而返。此后希波战争的战火逐渐冷却。一些史料表明双方的敌对状态最终在雅典和波斯签署卡里阿斯和约后结束。 补充资料：马拉松（英语：marathon）是一项考验耐力的长跑运动。这项运动的名称来自于古希腊时代的马拉松战役。这场雅典与波斯的战役,发生于公元前490年，现代民主自由的观念在当时正在雅典萌芽，这场战役代表着民主自由与奴役专制的对抗，这场战役中，有位雅典士兵菲迪皮德斯，相传他为了传达讯息，在长跑后过世。在1896年的首届奥林匹克运动会中，将这个运动列为正式竞赛项目之一，但直到1921年，马松拉的长度才被规定下来。雅典马拉松赛事的路径，就是当年雅典士兵菲迪皮德斯由希腊马拉松战场跑到雅典的路径。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>希腊</tag>
        <tag>波希战争</tag>
        <tag>波斯</tag>
        <tag>和约</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[英国宪法--不成文宪法]]></title>
    <url>%2F2017%2F02%2F28%2F%E8%8B%B1%E5%9B%BD%E5%AE%AA%E6%B3%95--%E4%B8%8D%E6%88%90%E6%96%87%E5%AE%AA%E6%B3%95%2F</url>
    <content type="text"><![CDATA[和其他许多国家不同，英国并没有成文宪法，因此称作“不成文宪法”。所谓的英国宪法，是对一整套包含基本规范和政治体制的成文法、习惯法和惯例的统称。英国宪法实际上是对英国实际的社会政治秩序的概括，是英国几百年政治流变的产物，并非一时制定的法律文件。英国著名宪法学家布莱斯曾评论道：“英国宪法是任何作者也作不出透彻说明的智慧产物，所具备的性质于几个世纪逐渐浸染而成。”虽然英国宪法不是具体法律文本，但实际其大部分内容还是以成文法形式出现，包括由议会通过的法例、法院的判例和国际公约等等。除此之外，英国宪法的法律渊源还包括英国议会惯例和国王的特权。英国宪法的根基是“议会至上”原则。所谓“议会至上”，是指法案一旦获议会通过，便具有不可动摇的权威。宪法并没有像其他国家如美国、法国获赋予至高无上地位；相反，理论上英国议会可以以通过一项普通法案的方式对英国宪法的内容加以改变。哲学家约翰·洛克对推动英国的宪法变革起到了很关键的作用。详细可以参阅洛克的1690年著作《政府论》。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>英国宪法</tag>
        <tag>不成文宪法</tag>
        <tag>议会至上</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[神圣罗马帝国]]></title>
    <url>%2F2017%2F02%2F28%2F%E7%A5%9E%E5%9C%A3%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%2F</url>
    <content type="text"><![CDATA[其内容基本就是说东方的皇帝是个女人，而且这个女人把自己的儿子刀了，教宗表示这样不符合基本法。查理曼继承的法统不是什么所谓的西罗马法统，而是“整个罗马帝国”的法统（因为东部的女皇不合法，所以说君六死了查理曼就理应补上去）。在这种说法里面“西罗马帝国”不存在，甚至连东部皇帝的合法性也给取消了。对于教宗来讲，罗马帝国当时是处于“没有合法皇帝”Interregnum的状态。至于教宗有没有权利硬点皇帝，这个主要看屁股位置。“神圣罗马帝国既不神圣、又非罗马、更非帝国。”是伏尔泰说的。在16世纪，这个政治实体的正式名称是“德意志民族神圣罗马帝国”。可以先从这个特别的名称说起。德意志民族，指向比较明确，但神圣和罗马二字是非常独特的。神圣，意指它负有宗教拯救的使命，罗马，表明它与昔日世界帝国的延续关系——仅从地理分布而言，德意志人跟罗马毫无关系。因此它是中世纪基督教神学—历史观的产物，它不是一个现代意义上的民族国家nation-state，它的含义比后者更大，更富神秘色彩，具有基督教普世色彩。不能以现代主权国家的理念去看待中世纪的政治。基督教会和神圣帝国曾长期被视为两个普世权威，尽管它们在实践中有许多折扣。神圣罗马帝国的内部结构，属于它的宪法史。大体而言，它是从东法兰克王国发展扩张而来。从发展方向而言，它不同于西方的法国，地方分离主义严重，产生了几大选帝侯和更多较小的诸侯势力。神圣罗马帝国在很多德国人的书上被称为第一帝国，它终结于1806年拿破仑战争期间。但一般认为，1648年三十年战争结束后的威斯特法利亚体系已经从法理上结束了这个帝国的优越地位，主权国家平等的原则得以确立。此后它的存在就显得很怪异了。伏尔泰的话就是这种背景下说出来的。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>罗马帝国</tag>
        <tag>查理大帝</tag>
        <tag>基督</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[摩西十诫]]></title>
    <url>%2F2017%2F02%2F28%2F%E6%91%A9%E8%A5%BF%E5%8D%81%E8%AF%AB%2F</url>
    <content type="text"><![CDATA[《圣经》中记载，由于移居到埃及的犹太人劳动勤奋，且擅长贸易，他们积攒了许多财富。这引起了执政者的不满。再加之执政者对于以色列人的恐惧，法老下令杀死新出生的犹太男孩。摩西出生后其母亲为保其性命就取了一个蒲草箱，抹上石漆和石油，将孩子放在里面，把箱子搁在河边的芦荻中。后来被来洗澡的埃及公主发现，带回了宫中。长大后，摩西失手杀死了一名殴打犹太人的士兵，为了躲避法老的追杀，他来到了米甸并娶祭司的女儿西坡拉为妻，生有一子。一日，摩西受到了神的感召，回到埃及，并带领居住在埃及的犹太人，返回故乡。在回乡的路上，摩西得到了神所颁布的《十诫》，即《摩西十诫》。《摩西十诫》据说是上帝在西奈山的山顶亲自传达给摩西的，是上帝对以色列人的告诫。上帝本人将这些话刻在石碑上，送给摩西。但是，后来摩西看到族人根本不听从这些诫条，一怒之下就将石碑毁了。上帝又命令摩西再制作新的石碑，完成后，放在约柜（Ark of the Covenant）里。以色列人将约柜看作圣物，放在圣殿里，任何人不得擅自触摸。《圣经》里记载有人因为擅自触摸约柜而被雷击致死。而且，有外人从至圣所的帐门窥望过，发现约柜的上方经常都有云雾积聚。后世的科学家根据这些纪录，推断可能在约柜内放置了一种简单的生物电池，就像在古埃及陵墓发现的那一种。电的积聚使水汽积聚，并使触摸的人触电。到了公元前590年，新巴比伦王尼布甲尼撒二世攻打犹太国，耶路撒冷在被困３年以后，终于在公元前586年被巴比伦军队攻占，王宫和圣殿全被烧毁，从此，约柜下落不明。刻有十诫的石碑也就找不到了。摩西生活的年代大约距今3000多年，这样算来，约柜存世的历史大概也就六七百年。历史的记载可能众说纷纭，一些细节也可能经不起推敲，但是“摩西十诫”作为《圣经》中的基本行为准则，流传了下来，影响深远。它是以色列人一切立法的基础，也是西方文明道德观的核心。 The Ten Commandments(摩西十诫) First “I am The Lord your God, Who brought you out of the land of Egypt, out of the house of bondage. You shall have no other gods before Me.” (第一条：我是耶和华－你的上帝，曾将你从埃及地为奴之家领出来，除了我之外，你不可有别的神。) Second “You shall not make for yourself a graven image, or any likeness of anything that is in heaven above, or that is in the earth beneath, or that is in the water under the earth; you shall not bow down to them or serve them; for I The Lord your God am a jealous God, visiting the iniquity of the fathers upon the children to the third and the fourth generation of those who hate Me, but showing steadfast love to thousands of those who love Me and keep My Commandments.” (第二条：不可为自己雕刻偶像，也不可做什么形象仿佛上天、下地，和地底下、水中的百物。不可跪拜那些像，也不可事奉它，因为我耶和华－你的上帝是忌邪的上帝。恨我的，我必追讨他的罪，自父及子，直到三四代；爱我、守我戒命的，我必向他们发慈爱，直到千代。) Third “You shall not take The Name of The Lord your God in vain; for The Lord will not hold him guiltless who takes His Name in vain.” (第三条：不可妄称耶和华－你上帝的名；因为妄称耶和华名的，耶和华必不以他为无罪。) Fourth “Remember the Sabbath day, to keep it holy. Six days you shall labor, and do all your work; but the seventh day is a Sabbath to The Lord your God; in it you shall not do any work, you, or your son, or your daughter, your manservant, or your maidservant, or your cattle, or the sojourner who is within your gates; for in six days The Lord made heaven and earth, the sea, and all that is in them, and rested the seventh day; therefore The Lord blessed the Sabbath day and hallowed it.” (第四条：当记念安息日，守为圣日。六日要劳碌、做你的工，但第七日是向耶和华－你上帝当守的安息日。这一日你和你的儿女、仆婢、牲畜，并你城里寄居的客旅，无论何工都不可做；因为六日之内，耶和华造天、地、海，和其中的万物，第七日便安息，所以耶和华赐福与安息日，定为圣日。) Fifth “Honor your father and your mother, that your days may be long in the land which The Lord your God gives you.” (第五条：当孝敬父母，使你的日子在耶和华－你上帝所赐你的土地上得以长久。) Sixth “You shall not kill.” (第六条：不可杀人。) Seventh “You shall not commit adultery.” (第七条：不可奸淫。) Eighth “You shall not steal.” (第八条：不可偷盗。) Ninth “You shall not bear false witness against your neighbor.” (第九条：不可做假见证陷害人。) Tenth “You shall not covet your neighbor’ s house; you shall not covet your neighbor‘ s wife, or his manservant, or his maidservant, or his ox, or his ass, or anything that is your neighbor s.” (第十条：不可贪恋他人的房屋；也不可贪恋他人的妻子、仆婢、牛驴，并他一切所有的)]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>摩西</tag>
        <tag>十诫</tag>
        <tag>圣经</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[古罗马君主的头衔「凯撒」和「奥古斯都」是怎么来的]]></title>
    <url>%2F2017%2F02%2F23%2F%E5%8F%A4%E7%BD%97%E9%A9%AC%E5%90%9B%E4%B8%BB%E7%9A%84%E5%A4%B4%E8%A1%94%E3%80%8C%E5%87%AF%E6%92%92%E3%80%8D%E5%92%8C%E3%80%8C%E5%A5%A5%E5%8F%A4%E6%96%AF%E9%83%BD%E3%80%8D%E6%98%AF%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84%2F</url>
    <content type="text"><![CDATA[这要从罗马的第一位“皇帝”奥古斯都说起。奥古斯都本名叫屋大维（Gaius Octavius）。前44年，凯撒被刺，留下遗嘱把屋大维定为自己的继承人，因此屋大维的名字被改为Gaius Julius Caesar Octavianus，虽然在中文里仍译作屋大维，但实际上同时代的人已经只使用“凯撒”来称呼他了。至于为什么“凯撒”这个名字被后来的皇帝延续使用下去，并不是因为它在罗马改制之前就变成了一个荣誉性质的称号。原因其实很简单：后来的几位皇帝，直到尼禄为止，全是屋大维的亲戚。不管是血亲也好，养子也好，因为和屋大维的亲属关系，他们的姓氏有的本来就是凯撒。有的本来姓氏不是凯撒的，作为合法继承人他们通常被前任皇帝所领养，因此依据古罗马的领养惯例，其姓氏也变成了凯撒。所以，罗马帝国前几位皇帝名字中的“凯撒”是通过自然继承传承下来的。从下面的谱系就可以看出他们之间的联系：在尤里安·克劳狄王朝的最后一位皇帝尼禄死后，情况才发生了变化。因为之后的四位皇帝都是自立为王的军阀，通过武力打败了前任才做成了皇帝。但为了显示自己统治的合法性，他们几乎都在变成皇帝之后使用了“凯撒”这一姓氏，尽管他们和凯撒本人并没有一丝半点的亲属关系。从这时开始，“凯撒”才渐渐开始具有了称号的性质。而到了图拉扬皇帝的时代，“凯撒”已经不再是皇帝的姓氏，而完完全全地变成了一个头衔，加在皇帝的全名之前，跟“圣上”、“天子”之类的意思差不多了。 而奥古斯都这个头衔本身便是一个荣誉称号，其性质单纯得多，但来由相对复杂一点。前31年，屋大维在内战中获胜，成为罗马唯一的政治强人。深感多年内乱之害，他决心从制度上杜绝贵族之间的争斗。这是罗马改制的由头。但屋大维不可避免地遇到了一个极大的困难：重新把共和国变成王制已经不可能了。罗马有几百年贵族共和的传统，对王政的憎恶已经深入人心，想要重新称王的人自然要面临巨大的危险。凯撒便是前车之鉴。因此，跟凯撒不同，屋大维采取了一条“迂回路线”建立自己的权威。屋大维的做法我们可以打个比方来说明。假设奥巴马想要变成美利坚大元首，但又不能公开修改联邦宪法，怎么办呢？在合法的前提下，我们假设他在国会通过了一项法案，让奥巴马本人变成众议院院长、最高法院大法官、以及东岸与西岸所有沿海州的州长。这样，他虽然名义上还是“美利坚合众国”的总统，但已经集各种实权于一身，变成美国的君主了。屋大维的做法就是这样。他让元老院交给自己共和国一半行省的总督权、赋予自己保民官的权力、称其为元老院元首，并且用一系列手段建立自己合法的权威。“奥古斯都”的称号就是因此被元老院赠与屋大维的。换句话说，屋大维并没有公开地称自己为“皇帝”，也没有直白地改动罗马的政制（这时的罗马在名义上还是共和国），而是通过不称帝的方式合法获得了君主需要的所有权力。所以，“奥古斯都”的称号起着显示屋大维“君主”地位的关键作用，因此是罗马皇帝的身份的一部分。在帝国早期，君主制还不稳定的时候，这个头衔尤其重要。因此它被后来的皇帝传承下去也是自然。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>凯撒</tag>
        <tag>奥古斯都</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XP、SCRUM、CMM 、RUP 的比较]]></title>
    <url>%2F2017%2F02%2F23%2FXP%E3%80%81SCRUM%E3%80%81CMM%20%E3%80%81RUP%20%E7%9A%84%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[RUP是一套管理方法，用于项目从需求到发布的管理而敏捷则是一种思想，一种价值观：价值迭代交付，以人为本有一些基于敏捷思想的实践比如Scrum、XP等也都是管理方法或开发方法层面的内容RUP可以与敏捷的思想结合，可以在敏捷思想指导下进行管理，那就是敏捷的RUP 1、XP 与CMM 的比较CMM告诉组织为了系统化地建立、实施和改进软件开发过程应该做些什么，但没有说明如何去做以及采用哪些具体的技术、策略和方法。CMM 是一套通用的过程实践标准，适用面很广。实施CMM 要求组织在过程的制度化建设上付出大量努力，通常被认为是重载（heavy-weight）的模型。 XP是一个针对某种特定环境（需求变化快的小型团队）的具体过程实施模型和方法论。它其实是一种演进式的原型化方法（evolutionary prototyping）[MCNL96]，具有沟通高效、设计简单、反馈迅速等特点，因而是一种轻载（light-weight）、敏捷（agile） 的过程方法。Mark Paulk 在他的文章中把XP 的实践方法与CMM 的KPA（关键过程域）进行了对照。得出的结论是，XP部分满足或大部分满足了CMM 2-3 级KPA 的要求，而基本上没有涉及CMM 4-5 级的KPA。这说明XP 的做法基本符合了CMM 的目标和KPA，但还不完备。总体上看，XP 侧重于具体的过程和开发技术，而CMM 更关注组织和管理上的问题。XP 缺少的一个重要内容是“制度化（institutionalization）”，它不含有被CMM 认为是使良好的工程和管理实践制度化的关键基础设施和管理要件。[PALK01] 2、XP 与RUP 的比较RUP（Rational Unified Process）是一个风险驱动的基于UML 和构件式架构的迭代递增型开发过程（框架）。RUP 定义了4 个阶段（起始、细化、构造、移交）和9 个科目（业务建模、需求、分析和设计、实现、测试、部署、配置和变更管理、项目管理、环境）。这些阶段对应着关键里程碑的划分，而不同科目的工作流和活动 在生命周期的迭代中可以并发进行，具体执行的程度则可以调节。RUP 对于角色、流程、工件和活动的要求是灵活的、可配置的，所以它广泛地适用于各种类型和规模的项目。RUP 集中体现了6 个软件开发的最佳实践方法：迭代式开发、需求管理、构件式架构、基于UML 的可视化建模、持续校验质量、变更管理。RUP 是一种以架构为中心的开发过程，而这正是大、中型项目成功的关键。 XP编码和设计活动融为一体，弱化了架构的概念，这是它与强调架构设计的RUP 的最大不同。架构的内涵要远大于一些简单的隐喻，它要考虑结构、行为、环境、使用、功能、性能、可靠性、弹性、重用、可理解性、约束和权衡乃至美学等诸多 方面的因素。设计架构的目的不是为了完美地表示系统的全部细节，而是为了消除最主要和最关键的架构风险。RUP 细化阶段的主要目的就是构造出一个可运行的架构原型，作为将来添加需求功能的稳固基础。另外，XP 没有包含业务建模、部署等概念，反映了它以编程为中心、节省一切的哲学。当然两者也有不少共同点。例如，它们的基础都是面向对象方法（取代传统的结构化方法），都重视代码、文档的最小化和设计的简化，采用动态适应变化的演进式迭代周期（取代传统的瀑布型生命周期）、需求和测试驱动并鼓励用户积极参与等等。由 于RUP 提供了非常丰富的内容，所以常常被误解为一个重载的过程。通过定制RUP 这个通用的过程框架，去掉项目不必要的工件（artifacts）和中间环节，把XP 的做法（比如短小的迭代周期、结对编程、测试优先的设计和重构）吸收进来，也可以实现RUP 过程的敏捷和轻量化[SMTH01]。“Bob 大叔”（Robert Martin）甚至从RUP中裁剪出了一个酷似XP 的最小化RUP 过程——dx[MART01]。我设想，XP、RUP 乃至其他工程和管理方法可以统一起来使用，姑且成之为统一软件过程（Unified Software Process，USP）。例如，一个大项目团队在起始和细化阶段采用RUP 方法完成需求分析和架构设计，在构造和移交阶段采用XP 的做法来实现部分子系统或模块。“轻载”、“敏捷”是美丽的词汇，无人会拒之于门外。我想XP、RUP 的目标是一致的——提高团队效率、开发出高质量的软件，而区别就在于各自的侧重点不同，从而导致两者的适用情况和应用范围有差异。然而，它们是可以互补 的，无论是以架构为中心，还是以代码为中心，灵活运用的关键就在于掌握其中的最佳实践方法，实施RUP、XP 或者融合了两者的过程（比如USP）都将有助于组织更好地实现CMM 目标。 3、XP 与Scrum 的比较敏捷(Agile)作为一种开发流程， 目前为各大公司所采用, 敏捷流程的具体实践有XP 和Scrum, 两者的区别如下： 区别之一： 迭代长度的不同XP的一个Sprint的迭代长度大致为1~2周, 而Scrum的迭代长度一般为 2~ 4周. 区别之二: 在迭代中, 是否允许修改需求XP在一个迭代中，如果一个User Story(用户素材, 也就是一个需求)还没有实现， 则可以考虑用另外的需求将其替换， 替换的原则是需求实现的时间量是相等的。 而Scrum是不允许这样做的，一旦迭代开工会完毕, 任何需求都不允许添加进来，并有Scrum Master严格把关，不允许开发团队收到干扰 区别之三: 在迭代中，User Story是否严格按照优先级别来实现XP是务必要遵守优先级别的。 但Scrum在这点做得很灵活， 可以不按照优先级别来做，Scrum这样处理的理由是： 如果优先问题的解决者，由于其它事情耽搁，不能认领任务，那么整个进度就耽误了。 另外一个原因是，如果按优先级排序的User Story #6和#10，虽然#6优先级高，但是如果#6的实现要依赖于#10，则不得不优先做#10. 区别之四:软件的实施过程中，是否采用严格的工程方法，保证进度或者质量Scrum没有对软件的整个实施过程开出工程实践的处方。要求开发者自觉保证，但XP对整个流程方法定义非常严格，规定需要采用TDD, 自动测试， 结对编程，简单设计，重构等约束团队的行为。因此，原作者认为， 这点上，XP的做法值得认同的，但是却把敏捷带入了一个让人困惑的矛盾, 因为xp的理念，结合敏捷模式，表达给团队的信息是“你是一个完全自我管理的组织， 但你必须要实现TDD, 结对编程, …等等” 不难发现，这四个区别显见的是： Scrum非常突出Self-Orgnization, XP注重强有力的工程实践约束作者建议， 在管理模式上启用Scrum， 而在实践中，创造一个适合自己项目组的XP(“start with Scrum and then invent your own version of XP.”)非常不错， 文武之道，有张有弛。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>XP</tag>
        <tag>CMM</tag>
        <tag>RUP</tag>
        <tag>敏捷</tag>
        <tag>SCRUM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聚集索引与非聚集索引]]></title>
    <url>%2F2017%2F02%2F20%2F%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[SQL Server索引 (原理、存储)聚集索引、非聚集索引、堆 &lt;第一篇&gt; 引子：深入浅出理解索引结构实际上，您可以把索引理解为一种特殊的目录。微软的SQL SERVER提供了两种索引：聚集索引(clustered index，也称聚类索引、簇集索引)和非聚集索引(nonclustered index，也称非聚类索引、非簇集索引)。下面，我们举例来说明一下聚集索引和非聚集索引的区别：其实，我们的汉语字典的正文本身就是一个聚集索引。比如，我们要查“安”字，就会很自然地翻开字典的前几页，因为“安”的拼音是“an”，而按照拼音排序汉字的字典是以英文字母“a”开头并以“z”结尾的，那么“安”字就自然地排在字典的前部。如果您翻完了所有以“a”开头的部分仍然找不到这个字，那么就说明您的字典中没有这个字;同样的，如果查“张”字，那您也会将您的字典翻到最后部分，因为“张”的拼音是“zhang”。也就是说，字典的正文部分本身就是一个目录，您不需要再去查其他目录来找到您需要找的内容。 我们把这种正文内容本身就是一种按照一定规则排列的目录称为“聚集索引”。如果您认识某个字，您可以快速地从自典中查到这个字。但您也可能会遇到您不认识的字，不知道它的发音，这时候，您就不能按照刚才的方法找到您要查的字，而需要去根据“偏旁部首”查到您要找的字，然后根据这个字后的页码直接翻到某页来找到您要找的字。但您结合“部首目录”和“检字表”而查到的字的排序并不是真正的正文的排序方法，比如您查“张”字，我们可以看到在查部首之后的检字表中“张”的页码是672页，检字表中“张”的上面是“驰”字，但页码却是63页，“张”的下面是“弩”字，页面是390页。很显然，这些字并不是真正的分别位于“张”字的上下方，现在您看到的连续的“驰、张、弩”三字实际上就是他们在非聚集索引中的排序，是字典正文中的字在非聚集索引中的映射。我们可以通过这种方式来找到您所需要的字，但它需要两个过程，先找到目录中的结果，然后再翻到您所需要的页码。我们把这种目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚集索引”。 通过以上例子，我们可以理解到什么是“聚集索引”和“非聚集索引”。 另转一个： 一、引言对数据库索引的关注从未淡出我的们的讨论，那么数据库索引是什么样的？聚集索引与非聚集索引有什么不同？希望本文对各位同仁有一定的帮助。有不少存疑的地方，诚心希望各位不吝赐教指正，共同进步。[最近首页之争沸沸扬扬，也不知道这个放在这合适么，苦劳？功劳？……] 二、B-Tree我们常见的数据库系统，其索引使用的数据结构多是B-Tree或者B+Tree。例如，MsSql使用的是B+Tree，Oracle及Sysbase使用的是B-Tree。所以在最开始，简单地介绍一下B-Tree。B-Tree不同于Binary Tree（二叉树，最多有两个子树），一棵M阶的B-Tree满足以下条件：1）每个结点至多有M个孩子；2）除根结点和叶结点外，其它每个结点至少有M/2个孩子；3）根结点至少有两个孩子（ 除非该树仅包含一个结点）；4）所有叶结点在同一层，叶结点不包含任何关键字信息；5）有K个关键字的非叶结点恰好包含K+1个孩子；另外，对于一个结点，其内部的关键字是从小到大排序的。以下是B-Tree（M=4）的样例： 对于每个结点，主要包含一个关键字数组Key[]，一个指针数组（指向儿子）Son[]。在B-Tree内，查找的流程是：使用顺序查找（数组长度较短时）或折半查找方法查找Key[]数组，若找到关键字K，则返回该结点的地址及K在Key[]中的位置；否则，可确定K在某个Key[i]和Key[i+1]之间，则从Son[i]所指的子结点继续查找，直到在某结点中查找成功；或直至找到叶结点且叶结点中的查找仍不成功时，查找过程失败。 接着，我们使用以下图片演示如何生成B-Tree（M=4，依次插入1~6）：从图可见，当我们插入关键字4时，由于原结点已经满了，故进行分裂，基本按一半的原则进行分裂，然后取出中间的关键字2，升级（这里是成为根结点）。其它的依类推，就是这样一个大概的过程。 三、数据库索引1．什么是索引在数据库中，索引的含义与日常意义上的“索引”一词并无多大区别（想想小时候查字典），它是用于提高数据库表数据访问速度的数据库对象。A）索引可以避免全表扫描。多数查询可以仅扫描少量索引页及数据页，而不是遍历所有数据页。B）对于非聚集索引，有些查询甚至可以不访问数据页。C）聚集索引可以避免数据插入操作集中于表的最后一个数据页。D）一些情况下，索引还可用于避免排序操作。 数据页SQL Server 中数据存储的基本单位是页,为数据库中的数据文件（.mdf 或 .ndf）分配的磁盘空间可以从逻辑上划分成页（从 0 到 n 连续编号）。磁盘 I/O 操作在页级执行,也就是说,SQL Server 读取或写入所有数据页。 当然，众所周知，虽然索引可以提高查询速度，但是它们也会导致数据库系统更新数据的性能下降，因为大部分数据更新需要同时更新索引。 2.索引的存储一条索引记录中包含的基本信息包括：键值（即你定义索引时指定的所有字段的值）+逻辑指针（指向数据页或者另一索引页）。当你为一张空表创建索引时，数据库系统将为你分配一个索引页，该索引页在你插入数据前一直是空的。此页此时既是根结点，也是叶结点。每当你往表中插入一行数据，数据库系统即向此根结点中插入一行索引记录。当根结点满时，数据库系统大抵按以下步骤进行分裂：A）创建两个儿子结点B）将原根结点中的数据近似地拆成两半，分别写入新的两个儿子结点C）根结点中加上指向两个儿子结点的指针 通常状况下，由于索引记录仅包含索引字段值（以及4-9字节的指针），索引实体比真实的数据行要小许多，索引页相较数据页来说要密集许多。一个索引页可以存储数量更多的索引记录，这意味着在索引中查找时在I/O上占很大的优势，理解这一点有助于从本质上了解使用索引的优势。 3．索引的类型A）聚集索引，表数据按照索引的顺序来存储的。对于聚集索引，叶子结点即存储了真实的数据行，不再有另外单独的数据页。B）非聚集索引，表数据存储顺序与索引顺序无关。对于非聚集索引，叶结点包含索引字段值及指向数据页数据行的逻辑指针，该层紧邻数据页，其行数量与数据表行数据量一致。在一张表上只能创建一个聚集索引，因为真实数据的物理顺序只可能是一种。如果一张表没有聚集索引，那么它被称为“堆集”（Heap）。这样的表中的数据行没有特定的顺序，所有的新行将被添加的表的末尾位置。 非聚集索引与聚集索引相比：A）叶子结点并非数据结点B）叶子结点为每一真正的数据行存储一个“键-指针”对C）叶子结点中还存储了一个指针偏移量，根据页指针及指针偏移量可以定位到具体的数据行。D）类似的，在除叶结点外的其它索引结点，存储的也是类似的内容，只不过它是指向下一级的索引页的。聚集索引是一种稀疏索引，数据页上一级的索引页存储的是页指针，而不是行指针。而对于非聚集索引，则是密集索引，在数据页的上一级索引页它为每一个数据行存储一条索引记录。范围查找，聚集索引很有效，例如某个时间段的数据查找就很快。 4．聚集索引在聚集索引中，叶结点也即数据结点，所有数据行的存储顺序与索引的存储顺序一致。 1）聚集索引与查询操作如上图，我们在名字字段上建立聚集索引，当需要在根据此字段查找特定的记录时，数据库系统会根据特定的系统表查找的此索引的根，然后根据指针查找下一个，直到找到。例如我们要查询“Green”，由于它介于[Bennet,Karsen]，据此我们找到了索引页1007，在该页中“Green”介于[Greane, Hunter]间，据此我们找到叶结点1133（也即数据结点），并最终在此页中找以了目标数据行。 此次查询的IO包括3个索引页的查询（其中最后一次实际上是在数据页中查询）。这里的查找可能是从磁盘读取(Physical Read)或是从缓存中读取(Logical Read)，如果此表访问频率较高，那么索引树中较高层的索引很可能在缓存中被找到。所以真正的IO可能小于上面的情况。 2）聚集索引与插入操作最简单的情况下，插入操作根据索引找到对应的数据页，然后通过挪动已有的记录为新数据腾出空间，最后插入数据。如果数据页已满，则需要拆分数据页（页拆分是一种耗费资源的操作，一般数据库系统中会有相应的机制要尽量减少页拆分的次数，通常是通过为每页预留空间来实现）：A）在该使用的数据段（extent）上分配新的数据页，如果数据段已满，则需要分配新段。B）调整索引指针，这需要将相应的索引页读入内存并加锁。C）大约有一半的数据行被归入新的数据页中。D）如果表还有非聚集索引，则需要更新这些索引指向新的数据页。 特殊情况：A）如果新插入的一条记录包含很大的数据，可能会分配两个新数据页，其中之一用来存储新记录，另一存储从原页中拆分出来的数据。B）通常数据库系统中会将重复的数据记录存储于相同的页中。C）类似于自增列为聚集索引的，数据库系统可能并不拆分数据页，页只是简单的新添数据页。 3）聚集索引与删除操作删除行将导致其下方的数据行向上移动以填充删除记录造成的空白。如果删除的行是该数据页中的最后一行，那么该数据页将被回收，相应的索引页中的记录将被删除。如果回收的数据页位于跟该表的其它数据页相同的段上，那么它可能在随后的时间内被利用。如果该数据页是该段的唯一一个数据页，则该段也被回收。对于数据的删除操作，可能导致索引页中仅有一条记录，这时，该记录可能会被移至邻近的索引页中，原索引页将被回收，即所谓的“索引合并”。 5．非聚集索引非聚集索引与聚集索引相比：A）叶子结点并非数据结点B）叶子结点为每一真正的数据行存储一个“键-指针”对C）叶子结点中还存储了一个指针偏移量，根据页指针及指针偏移量可以定位到具体的数据行。D）类似的，在除叶结点外的其它索引结点，存储的也是类似的内容，只不过它是指向下一级的索引页的。 聚集索引是一种稀疏索引，数据页上一级的索引页存储的是页指针，而不是行指针。而对于非聚集索引，则是密集索引，在数据页的上一级索引页它为每一个数据行存储一条索引记录。 对于根与中间级的索引记录，它的结构包括：A）索引字段值B）RowId（即对应数据页的页指针+指针偏移量）。在高层的索引页中包含RowId是为了当索引允许重复值时，当更改数据时精确定位数据行。C）下一级索引页的指针 对于叶子层的索引对象，它的结构包括：A）索引字段值B）RowId 1）非聚集索引与查询操作针对上图，如果我们同样查找“Green”，那么一次查询操作将包含以下IO：3个索引页的读取+1个数据页的读取。同样，由于缓存的关系，真实的IO实际可能要小于上面列出的。 2）非聚集索引与插入操作如果一张表包含一个非聚集索引但没有聚集索引，则新的数据将被插入到最末一个数据页中，然后非聚集索引将被更新。如果也包含聚集索引，该聚集索引将被用于查找新行将要处于什么位置，随后，聚集索引、以及非聚集索引将被更新。 3）非聚集索引与删除操作如果在删除命令的Where子句中包含的列上，建有非聚集索引，那么该非聚集索引将被用于查找数据行的位置，数据删除之后，位于索引叶子上的对应记录也将被删除。如果该表上有其它非聚集索引，则它们叶子结点上的相应数据也要删除。如果删除的数据是该数所页中的唯一一条，则该页也被回收，同时需要更新各个索引树上的指针。由于没有自动的合并功能，如果应用程序中有频繁的随机删除操作，最后可能导致表包含多个数据页，但每个页中只有少量数据。 6．索引覆盖索引覆盖是这样一种索引策略：当某一查询中包含的所需字段皆包含于一个索引中，此时索引将大大提高查询性能。包含多个字段的索引，称为复合索引。索引最多可以包含31个字段，索引记录最大长度为600B。如果你在若干个字段上创建了一个复合的非聚集索引，且你的查询中所需Select字段及Where,Order By,Group By,Having子句中所涉及的字段都包含在索引中，则只搜索索引页即可满足查询，而不需要访问数据页。由于非聚集索引的叶结点包含所有数据行中的索引列值，使用这些结点即可返回真正的数据，这种情况称之为“索引覆盖”。在索引覆盖的情况下，包含两种索引扫描：A）匹配索引扫描B）非匹配索引扫描 1）匹配索引扫描此类索引扫描可以让我们省去访问数据页的步骤，当查询仅返回一行数据时，性能提高是有限的，但在范围查询的情况下，性能提高将随结果集数量的增长而增长。针对此类扫描，索引必须包含查询中涉及的的所有字段，另外，还需要满足：Where子句中包含索引中的“引导列”（Leading Column），例如一个复合索引包含A,B,C,D四列，则A为“引导列”。如果Where子句中所包含列是BCD或者BD等情况，则只能使用非匹配索引扫描。 2）非配置索引扫描正如上述，如果Where子句中不包含索引的导引列，那么将使用非配置索引扫描。这最终导致扫描索引树上的所有叶子结点，当然，它的性能通常仍强于扫描所有的数据页。 转自：http://blog.csdn.net/destina/article/details/4890275]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>索引</tag>
        <tag>聚集索引</tag>
        <tag>非聚集索性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对企业软件开发能力衡量的理解(CMM)]]></title>
    <url>%2F2017%2F02%2F20%2F%E5%AF%B9%E4%BC%81%E4%B8%9A%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%83%BD%E5%8A%9B%E8%A1%A1%E9%87%8F%E7%9A%84%E7%90%86%E8%A7%A3(CMM)%2F</url>
    <content type="text"><![CDATA[个人理解：CMM 1级是无序状态；CMM 2级是有知识沉淀（文档话、模板化），达到可重用；CMM3级是标准化，有标准指导；CMM4 是管理级，是定量化的管理；CMM5 是进化级，能够反思。 大型软件的开发需要很好的管理与组织能力，来保证软件开发的质量。从软件工程的角度来说，不存在没有Bug的软件，但尽量减少致命性的Bug是所有软件开发组织者所追求的。那么如何衡量一个组织具备了大型软件的开发能力呢？CMM提供了一种衡量的方法，尤其是CMM的认证已经成为国际上认可的软件能力标签，所以很多大的企业都组织通过该认证，提供自己的知名度，提升自己在客户心目重点形象。 一、组织能力在于团队的“战斗力”CMM模型注重的是软件开发组织对软件开发过程的管理，是从团队的角度，对软件最终质量的保障。软件的质量就是在完成客户需求的同时，尽量少的留下Bug，减少业务服务的中断与故障。既然是团队能力的衡量，就不是个人天才的展现，所以CMM对一个软件组织的意义远不只认证这么简单。1、团队开发能力的保障，就象工厂的流水线一样，每个环节都有严格的输入与输出，并且配置有效的测试检验，软件的开发就象流水线上的汽车，走下流水线的就应该是成品。所以制度、操作流程定义、成套的检测手段都是流水线上必备的。2、个人的能力强，往往体现在经验而不是文档，而团队的能力就很大程度地体现了文档的管理，因为在一个“加工”过程中，较为头痛的首先就是人员的流动，组织的能力就是在任何职位的人员调动，都不影响整个项目的进行，能很好地衔接开发的继续，一般只有两种方法：言传身教的师傅带徒弟，完整的文档让新人可以彻底了解过去的经过。所以CMM模型注重的是组织的内部协调，组织执行力对软件开发过程的控制，确保开发过程中的每个环节都得到测试与规划。软件开发组织目前使用最多的是瀑布开发模型与极限编程管理，无论采用那种方式，其目标都是保证开发的软件高质量。CMM衡量的是整个组织的开发能力，用什么管理方式并不重要。 二、瀑布模式与极限编程对组织的影响瀑布模型非常适合流水线的管理，把软件设计变成软件工厂。瀑布模型管理方式：注重开发过程的文档，保证规划的功能的高质量实现，但忽视了客户应用的经常变化，瀑布模型的缺点是开发周期长，要实现迭代非常困难。但瀑布模型能很好地保证设计的功能的实现，尤其是初期设计非常充分，程序重用、类提取都非常精练，所以都年来，瀑布模型一直是主要的开发方式。极限编程更加注重客户需求的变化，采取快速看到结果的开发方式，有些象早期的快速模型开发方式，能看到结果，客户就可以尽早感觉系统，提出最切合的改革建议，避免开发后期的更改。极限编程还有一个程序员喜欢的地方，就是以编码为主，文档次之。极限编程关注程序员的感觉，把编程变成一种乐趣，与瀑布模型的大量烦琐文档相比更有吸引力，大大提供了开发人员的积极性。但是，极限编程设计部分相对较弱，先测试再编程的思想是否可以消除这些缺陷还有待于进一步实践。采用那种开发模式，是组织根据自己团队的侧重与开发产品的特点选择的，对于方式的选择有下面的建议：1、软件产品比较程式化，也就是说客户需求比较明确，开发重复性强，好比流水线的生产，每个汽车的工序与工艺要求一致。建议采用瀑布模型方式，文档的完备特别适合重复性的开发。2、软件产品创新性强，客户需求不明确，甚至要在开发的过程中不断重新确认，同时要求开发人员有足够的敏捷思维，发挥开发者的想象思维，建议采用极限编程。极限编程中的结对编程非常适合能力差不多的开发人员发挥创造性思维。开发模式的选择，直接影响团队的组织与管理，对CMM的评定也息息相关。CMM更关心软件产品的质量，对组织来说，还要注意对团队人员工作积极性的调动，人在心情舒畅的情况下往往能发挥的能力是通常状态下的数倍。很多团队领导都强调队员的无障碍沟通，但要实现无障碍沟通不是靠领导的命令，而是发自队员的内心。团队的能力与个人天才的本质不同应该是：1+1&gt;2。也许这才是CMM评价的真实意图吧。 三、CMM等级下面介绍一下CMM的衡量标准。能力成熟度模型(Capability Maturity Model, CMM)是美国卡内基.梅隆大学的软件工程研究所(Software Engineering Institute, SEI)提出的一套软件开发过程管理、评估的模型，并很快成为公认的标准，建立了CMM认证体系，用来衡量软件组织或企业的成熟度或软件过程能力。CMM把软件开发能力分为五个等级，主要是从对开发活动的组织、管理、技术等方面评估。 第一级：初始级。组织对软件开发过程没有进行清楚的计划，开发中的一些问题依靠开发者自己处理，内部也缺乏沟通。软件开发主要依靠主管的个人才干或几个有经验的骨干，开发过程没有系统的规划，过程是无序的，进度、预算、质量都不可以客观地评估，项目的结果是不预测的。初始级能力更象个人的开发，积累项目的经验，而不是团队，CMM是对团队的开发能力成熟度的度量，个人能力强可以影响最终的软件质量，但团队开发能力为初级。 第二级：可重复级。可重复就是对开发成功的案例可以重复操作，也就是开发的过程与质量可以复制。可重复级一般采用项目管理方式，建立管理软件项目方针，制定实施这些方针的规程。组织通过项目管理有效控制成本，把经验应用到类似的项目开发中；同时通过项目管理使软件开发过程制度化、开发过程文档化。重复级中，项目规划与跟踪是参照以往类似项目的成功经验，不在单纯依靠管理者的特殊才能，团队的开发能力依托成功经验的管理。 第三级：定义级。对开发和维护的标准过程定义并文档化，包括软件过程的工程和管理，即软件过程的标准化，使得组织中的每个成员都清楚并执行同一个标准。定义级让软件过程是可预测的，软件的质量是可控的，让管理者对整个过程是可以提前预测并合理安排的。在可重复级中有了项目管理和跟踪的经验，定义级明确定义了规范与过程，形成标准软件过程，使软件开发可视、可控。当然标准化不意味就是不变的，根据测试和效益的分析，修改规范、调整计划，但修改要经过规范的修改程序，并使所有项目参与者一致执行。 第四级：管理级。管理级的关键是开始量化软件质量的指标，不仅能管理，而且能管理好。组织衡量软件过程和产品而拟定质量和改进的目标，要量化，就要用具体的数据来衡量软件过程的生产率和质量。管理级建立在定义级之上，若不把过程标准化，也没有办法对整个软件过程进行量化，也不可能提炼衡量的技术指标。管理级的组织的软件能力是可预测的，整个过程在可测量的范围之内，软件产品是可预测的，是高质量的。 第五级：优化级。人的发展是在不断学习中进步，组织也同样要不断地更新自己，不断优化，吸取新的技术，吐故纳新，螺旋式上升。CMM4前是管理技术的完善提高组织的软件过程能力，CMM5是组织有能力识别自己的弱点，并不断更新自己，适应组织自身的变化与竞争的需求。 软件开发过程可以划分成不同的关键过程域(Key Process Area, KPA)，每个KPA定义了要改进的内容范围。CMM的五个等级中分别关注不同的KPA。 本文出自 “Jack zhai” 博客，请务必保留此出处http://zhaisj.blog.51cto.com/219066/45487]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>CMM</tag>
        <tag>能力成熟度模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件测试基础知识]]></title>
    <url>%2F2017%2F02%2F20%2F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[静态测试和动态测试—两个重要的测试技术之间的差异 测试用例设计白皮书使用allpairs自动设计组合测试用例软件测试缺陷密度的计算方法 一、软件测试概念什么是软件测试？百度百科上，软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。其实说直白一点，就是找bug。 二、软件测试目的软件测试的目的，就是基于概念而言的。其目的大概分为以下几种：1.发现软件的缺陷2.提高软件质量3.软件开发，测试过程改进4.评估软件质量5.降低公司对软件的维护成本6.降低软件发布后，对公司负面影响的风险 三、软件测试模型常见的软件测试模型包括V模型、W模型、H模型、X模型和前置模型。这里暂且介绍常用的V模型及W模型。 1.V模型V模型是最具有代表意义的测试模型。V模型是软件开发瀑布模型的变种，它反映了测试活动与分析和设计的关系 。1）从左到右，描述了基本的开发过程和测试行为，非常明确地标明了测试过程中存在的不同级别，并且清楚地描述了这些测试阶段和开发过程期间各阶段的对应关系 。2）左边依次下降的是开发过程各阶段，与此相对应的是右边依次上升的部分，即各测试过程的各个阶段。优点：V模型的价值在于它非常明确地标明了测试过程中存在的不同级别，并且清楚地描述了这些测试阶段和开发过程期间各阶段的对应关系。缺点：仅仅把测试过程作为在需求分析、系统设计及编码之后的一个阶段；忽视了测试对需求分析，系统设计的验证，一直到后期的验收测试才被发现。 通俗的讲，一个产品从研发到出厂的工程中，测试分为三个阶段：单元测试、集成测试、系统测试； 单元测试：一个模块的功能及常规错误测试； 集成测试：完成单元测试后，各模块联调测试；集中在各模块的接口是否一致、各模块间的数据流和控制硫是否按照设计实现其功能、以及结果的正确性验证等等；可以使整个产品的集成测试，也可以使大模块的集成测试； 系统测试：针对整个产品的全面测试，既包含各模块的验证性测试（验证前两个阶段测试的正确性）和功能性（产品提交个用户的功能）测试，又包括对整个产品的健壮性、安全性、可维护性及各种性能参数的测试. 系统测试和集成测试的区别: 一般的小系统区分不是很大的，通常小公司是不做集成测试，直接做系统测试了。 系统测试用例相对很接近用户接受测试用例系统测试这个称呼往往被用于压力测试、容量测试、性能测试、安全测试等方面。 而集成测试这个称呼往往被用于细节化的功能测试的超集——从用户需求来设计和组织较大颗粒度的功能测试。 系统测试最主要的就是功能测试，测试软件《需求规格说明书》中提到的功能是否有遗漏，是否正确的实现。做系统测试要严格按照《需求规格说明书》，以它为标准。测试方法一般都使用黑盒测试法； 集成测试在系统测试之前，单元测试完成之后系统集成的时候进行测试。集成测试主要是针对程序内部结构进行测试，特别是对程序之间的接口进行测试。集成测试对测试人员的编写脚本能力要求比较高。测试方法一般选用黑盒测试和白盒测试相结合。 2.W模型W模型由Evolutif公司公司提出，相对于V模型，W模型增加了软件各开发阶段中应同步进行的验证和确认活动。W模型由两个V字型模型组成，分别代表测试与开发过程，明确表示出了测试与开发的并行关系。W模型中测试与开发对应关系如下：开发：需求分析、概要设计、 详细设计、 编码、 软件集成、系统集成、部署 ↑ ↑ ↑ ↑ ↑ ↑ ↑测试：需求评审、概要设计评审、详细设计评审、单元测试、集成测试、系统测试、验收测试优点：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、设计等同样要测试，也就是说，测试与开发是同步进行的。W模型有利于尽早地全面的发现问题。 例如，需求分析完成后，测试人员就应该参与到对需求的验证和确认活动中，以尽早地找出缺陷所在。同时，对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，这将显著减少总体测试时间，加快项目进度。局限性：在W模型中，需求、设计、编码等活动被视为串行的，同时，测试和开发活动也保持着一种线性的前后关系，上一阶段完全结束，才可正式开始下一个阶段工作。这样就无法支持迭代的开发模型。对于当前软件开发复杂多变的情况，W模型并不能解除测试管理面临着困惑。 四、软件测试基本流程根据上述的W模型，软件测试基本流程包括如下：1.测试需求分析2.测试计划3.测试设计（测试策略、测试用例）4.测试执行（手工测试、测试工具）5.缺陷跟踪6.回归测试7.编写测试报告 这里要注意，一般产品有需求之后，会有需求评审会，测试会一并参加，并需要在会议上积极发言，提出自己不清楚或有疑问的需求点。这样更有利于后期测试用例的编写。测试流程是这样，但是，还是要真正动手测试，才能更加深刻的理解软件测试流程中的每个阶段含义。 五、软件测试的基本方法1.测试技术原理1）黑盒测试，主要有等价类划分法、场景法等2）灰盒测试3）白盒测试，主要有静态测试、动态测试4）探索性测试2.测试策略测试策略大概分为以下几种：数据和数据库完整性测试、接口测试、集成测试（业务流程测试）、功能测试、用户界面测试（用户友好性测试）、性能测试、浏览器兼容性测试、负载测试、强度测试、安全性和访问控制测试、故障转移和恢复测试、配置测试、安装测试。我们要根据测试处于开发、测试的对应阶段，分析测试需求，合理的去应用测试技术原理和测试策略。要具体情况具体分析。 六、软件测试工具1.功能测试工具1）WinRunner（Mercury公司）2）Robot、XDE tester（IBM公司）3）TestComplete4）Ruby+watir（开源） 2.单元测试工具1）DUnit（Delphi）2）JTest、Junit（java）3）NUnit（.NET） 3.性能测试工具1）LoadRunner（Mercury公司）2）Apache Jmeter（开源）3）Siege（开源）4）Robot（IBM公司）5）eHealth 4.缺陷跟踪管理工具（开源）1）Bugzilla2）禅道3）redmine4）Bugfree5）Mantis 5.用例管理工具1）TestLink2）TestManager（Rational测试解决方案中，推荐的测试用例管理工具）3）禅道 6.自动化测试工具（app）1）monkeyrunner2）appium3）Robotium4）UI Automator 七、软件测试经验分享文章中大概介绍了测试理论、测试策略及测试工具等，是比较入门级的，没有深入介绍。这里要说一下，测试理论要结合实际情况，进行正确有效的应用，才能发挥它的作用，因此要多实践，实践出真知。对于测试工具而言，它不是万能的，但是没有工具是万万不能的，所以要学会什么情况下，使用什么样的测试工具，进行什么样的测试，这才是最重要的，不要为了使用工具而使用。最后，对于测试而言，要善于总结测试工作，从总结中积累自己的测试经验和特长。并且要积极主动，学会提问题，要让别人知道你想问的信息是什么。当对测试工作有了一定的了解之后，就要对自己以后的测试工作进行规划，有计划的朝自己的目标努力。过程虽然比较辛苦，当收获成长的时候，就会非常欣慰，感觉一切都值得。我们一定要趁着年轻，多学习，多积累，不要以后让自己后悔。 其它1、Quality Center （QC）是Mercury Interactive 公司推出的一个基于 Web 且支持测试管理的所有必要方面的应用程序。该软件提供统一、可重复的流程，用于收集需求、计划和安排测试、分析结果并管理缺陷和问题。组织可使用该软件在较大的应用程序生命周期中实现特定质量流程和过程的数字化。该软件还支持在 IT 团队间进行高水平沟通和协调。 2、QTP是quicktest Professional的简称，是一种自动测试工具。使用QTP的目的是想用它来执行重复的自动化测试，主要是用于回归测试和测试同一软件的新版本。因此你在测试前要考虑好如何对应用程序进行测试，例如要测试哪些功能、操作步骤、输入数据和期望的输出数据等12.0以后改名为united function testing简称为UFT。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>V字模型</tag>
        <tag>W模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[领域模型与E-R模型区别（转载）]]></title>
    <url>%2F2017%2F02%2F20%2F%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E4%B8%8EE-R%E6%A8%A1%E5%9E%8B%E5%8C%BA%E5%88%AB%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[最流行的六大数据模型工具Model confusion : Domain Model &amp; E-R Model 领域模型与E-R模型区别（转载）转自：http://www.cnblogs.com/evanyuan/archive/2005/10/27/263366.html前段时间看了DDD,最近在做一个项目的时候Leader要求先出E-R Model，我不是很清楚Domain Model和E-R Model具体的关系和区别。E-R Model关注的是对象的实体和关系，是Data Modeling的一种方式，建模时并不考虑Entity的行为，在E-R概念模型的基础上可以建立relational data model及physical data model，我不太确认E-R model driven是否就是数据驱动的一种设计流程。而Domain model driven同样是分析抽象实体并建立实体的关系的过程，同时需要建模实体的职责（对象的行为）,以面向对象的手法建立领域层的模型。我有些迷糊，E-R model driven和Domain model driven 是否是冲突的，或者说可以柔和在一起，比如先建立conceptual e-r model,然后在这个模型的基础上再分别建立relational data model和domain model。但是跟随DDD的分析过程，我实在看不出有建立e-r model的必要，是否可以说，使用了domain driven design就可以不需要e-r model了呢（至少在建立domain model之前）？ evan 发表于2005-04-06 11:37 AM花了点时间去了解了E-R model,domainmodel,conceptual model，data modeling的关系与区别，收获颇丰。反过来看，自己之前对这些概念的理解还是比较肤浅的。首先，需要了解“数据建模”和“对象建模”的概念、关系及区别。在某种层度上两者是具有一定的对立性的，孰幼孰劣即使是专家也众口不一。这里有一篇难得的好贴进行了大量的讨论 数据建模VS对象建模(http://www.hibernate.org.cn/viewtopic.php?t=1464&amp;postdays=0&amp;postorder=asc&amp;start=0)我们之前两周的工作，大家在概念上的不统一我想很大层度上是因为在这两者的理解上完全还是混淆的而造成的。我们之前要求设计的E-R Model是属于数据建模的范畴，E-R Model是数据模型的一种表现形式(数据建模不只是E-R Model一种表现形式) ，E-R Model以数据为中心，关注的是对象的实体和关系，建模时并不考虑Entity的行为。在E-R概念模型的基础上可以建立“关系数据模型”进而推导出“物理数据模型”，这是一条以E-R Model为起始的数据建模的路线。 E-R Model的介绍请参看附件 “E-R Model(R).ppt ”。值得注意的是，在扩展的E-R模型里面具有继承结构，同时以UML的形式也可以表现E-R模型，具体的介绍请参看附件“用UML表示的ER图.pdf”。不过在该领域内的专家Scott.W.Ambler提到”Unfortunately data modeling is not yet covered by the Unified Modeling Language (UML), even though persistence-related issues are clearly an important aspect of object-oriented software project. For several years I have argued that the UML needs a data model (Ambler 1997, Ambler 1997b, Ambler 2001a, Ambler 2002a) and have vacillated between various ways that it should be done.”(详见 A UML Profile for Data Modeling http://www.agiledata.org/essays/umlDataModelingProfile.html ）这个给我带来了些迷糊，以UML表示的ER图属于数据建模还是对象建模？而这好像正是我们之前两周工作中所面临的问题。为什么要强调以UML表示的ER图属于数据建模还是对象建模，因为我们之前希望在UML表现的E-R图的基础上建立Domain Model和Relational Data Model，这是否是一条合理的路，或者说在什么情况下合理，我还很难判断。不过Domain Model是属于对象建模的范畴，它和E-R Model的分析具有很大的相似性，最大的区别我认为对象建模需要为对象建立职责（对象的行为），而正因为行为的存在衍生出时序、多态等等对象模型比之数据模型所特有的东西。 从《DDD》的建模分析推导过程，我实在看不出在建立Domain Model之前有建立E-R Model的必要性。但是正如上面帖子里所讨论的，数据建模优先还是对象建模优先，对专家级别的人来说也是由其经验和偏好所决定的。在CMS项目里面，我觉得数据模型上的复杂度并不是很高，我想Domain Model优先可能合适一点。Domain Model到什么地步才会有数据模型或者是关系数据表能确定？我想还是在对象和其属性大致确定的时候比较合适。最后，我们还提到了概念模型（conceptual model)，容易让人混淆的是不管是数据模型还是对象模型都会有 概念的层面。在数据建模中通常将E-R Model就称之为概念数据模型（接下来的层面是关系数据模型和物理数据模型）；在对象模型中，对象图通常是从粗到细具有不同的level，可以将只考虑对象实体的划分和关系的建立的层面称之为概念模型（可参考《Analysis Pattern》)希望若干时间以后我会觉得上面的理解还是很肤浅。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>区别</tag>
        <tag>领域模型</tag>
        <tag>ER图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle索引原理【转】]]></title>
    <url>%2F2017%2F02%2F20%2Foracle%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E3%80%90%E8%BD%AC%E3%80%91%2F</url>
    <content type="text"><![CDATA[B树索引一个B树索引只有一个根节点，它实际就是位于树的最顶端的分支节点。可以用下图一来描述B树索引的结构。其中，B表示分支节点，而L表示叶子节点。对于分支节点块（包括根节点块）来说，其所包含的索引条目都是按照顺序排列的（缺省是升序排列，也可以在创建索引时指定为降序排列）。每个索引条目（也可以叫做每条记录）都具有两个字段。第一个字段表示当前该分支节点块下面所链接的索引块中所包含的最小键值；第二个字段为四个字节，表示所链接的索引块的地址，该地址指向下面一个索引块。在一个分支节点块中所能容纳的记录行数由数据块大小以及索引键值的长度决定。比如从上图一可以看到，对于根节点块来说，包含三条记录，分别为（0 B1）、（500 B2）、（1000 B3），它们指向三个分支节点块。其中的0、500和1000分别表示这三个分支节点块所链接的键值的最小值。而B1、B2和B3则表示所指向的三个分支节点块的地址。对于叶子节点块来说，其所包含的索引条目与分支节点一样，都是按照顺序排列的（缺省是升序排列，也可以在创建索引时指定为降序排列）。每个索引条目（也可以叫做每条记录）也具有两个字段。第一个字段表示索引的键值，对于单列索引来说是一个值；而对于多列索引来说则是多个值组合在一起的。第二个字段表示键值所对应的记录行的ROWID，该ROWID是记录行在表里的物理地址。如果索引是创建在非分区表上或者索引是分区表上的本地索引的话，则该ROWID占用6个字节；如果索引是创建在分区表上的全局索引的话，则该ROWID占用10个字节。 bitmap索引位图（bitmap）索引是另外一种索引类型，它的组织形式与B树索引相同，也是一棵平衡树。与B树索引的区别在于叶子节点里存放索引条目的方式不同。从前面我们知道，B树索引的叶子节点里，对于表里的每个数据行，如果被索引列的值不为空的，则会为该记录行在叶子节点里维护一个对应的索引条目。而位图索引则不是这样，其叶子节点里存放的索引条目如下图所示。假设某个表T里所有的记录在列C1上只具有三个值：01、02和03。在表T的C1列上创建位图索引以后，则叶子节点的内容如图9-14所示。可以看到，位图索引只有三个索引条目，也就是每个C1列的值对应一个索引条目。位图索引条目上还包含表里第一条记录所对应的ROWID以及最后一条记录所对应的ROWID。索引条目的最后一部分则是由多个bit位所组成的bitmap，每个bit位就对应一条记录。当发出where c1=’01’这样的SQL语句时，oracle会去搜索01所在的索引条目，然后扫描该索引条目中的bitmap里所有的bit位。第一个bit位为1，则说明第一条记录上的C1值为01，于是返回第一条记录所在的ROWID（根据该索引条目里记录的start ROWID加上行号得到该记录所在的ROWID）。第二个bit位为0，则说明第二条记录上的C1值不为01，依此类推。另外，如果索引列为空，也会在位图索引里记录，也就是将对应的bit位设置为0即可。如果索引列上不同值的个数比较少的时候，比如对于性别列（男或女）等，则使用位图索引会比较好，因为它对空间的占用非常少（因为都是用bit位来表示表里的数据行），从而在扫描索引的时候，扫描的索引块的个数也比较少。可以试想一下，如果在列的不同值非常多的列上，比如主键列上，创建位图索引，则产生的索引条目就等于表里记录的条数，同时每个索引条目里的bitmap里，只有一个1，其它都是0。这样还不如B树索引的效率高。如果被索引的列经常被更新的话，则不适合使用位图索引。因为当更新位图所在的列时，由于要在不同的索引条目之间修改bit位，比如将第一条记录从01变为02，则必须将01所在的索引条目的第一个bit位改为0，再将02所在的索引条目的第一个bit位改为1。因此，在更新索引条目的过程中，会锁定位图索引里多个索引条目。也就是同时只能有一个用户能够更新表T，从而降低了并发性。位图索引比较适合用在数据仓库系统里，不适合用在OLTP系统里。 HASH索引使用HASH索引必须要使用HASH集群。建立一个集群或HASH集群的同时，也就定义了一个集群键。这个键告诉Oracle如何在集群上存储表。在存储数据时，所有与这个集群键相关的行都被存储在一个数据库块上。如果数据都存储在同一个数据库块上，并且将HASH索引作为WHERE子句中的确切匹配，Oracle就可以通过执行一个HASH函数和I/O来访问数据— 而通过使用一个二元高度为4的B树索引来访问数据，则需要在检索数据时使用4个I/O。如图2-5所示，其中的查询是一个等价查询，用于匹配HASH列和确切的值。Oracle可以快速使用该值，基于HASH函数确定行的物理存储位置。HASH索引可能是访问数据库中数据的最快方法，但它也有自身的缺点。集群键上不同值的数目必须在创建HASH集群之前就要知道。需要在创建HASH集群的时候指定这个值。低估了集群键的不同值的数字可能会造成集群的冲突(两个集群的键值拥有相同的HASH值)。这种冲突是非常消耗资源的。冲突会造成用来存储额外行的缓冲溢出，然后造成额外的I/O。如果不同HASH值的数目已经被低估，您就必须在重建这个集群之后改变这个值。ALTER CLUSTER命令不能改变HASH键的数目。HASH集群还可能浪费空间。如果无法确定需要多少空间来维护某个集群键上的所有行，就可能造成空间的浪费。如果不能为集群的未来增长分配好附加的空间，HASH集群可能就不是最好的选择。如果应用程序经常在集群表上进行全表扫描，HASH集群可能也不是最好的选择。由于需要为未来的增长分配好集群的剩余空间量，全表扫描可能非常消耗资源。在实现HASH集群之前一定要小心。您需要全面地观察应用程序，保证在实现这个选项之前已经了解关于表和数据的大量信息。通常，HASH对于一些包含有序值的静态数据非常有效。技巧：HASH索引在有限制条件(需要指定一个确定的值而不是一个值范围)的情况下非常有用。 聚族索引在这里还是用字典来进行类比，一般来说汉语字典中有几种索引，如拼音、偏旁、笔画等。字典本身的组织也是排序的，我记得一般是按照拼音排序的。这里的拼音就是聚族索引。也就是说聚族索引的组织顺序和数据本身的组织顺序是一致的 ，这也解释了数据库中只能定义一个聚族索引的原因，因为数据本身只能按一种方式进行排序。那聚族索引有什么特别的好处呢，这个好处就是在数据库中执行查找一批数据的语句会比较快，因为数据已经按照聚族索引排好序了，很少的io操作就可以将数据从库中取出。好比你在字典中查找发音从从a到c的汉字，只需要查到a的开始页和c的结束页，中间的所有页都符合查询要求，不用再一页一页地查找。 非聚族索引非聚族索引就好比字典里的偏旁、笔画索引，其 索引组织顺序和数据组织顺序不一致 ，因此非聚族索引可以创建多个。当查找一条数据时，非聚族索引和聚族索引的效率相差不大，但查找一批数据(n)时，非聚族索引需要的io可能是聚族索引的n倍，因为非聚族索引需要一条一条地进行查找。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>索引</tag>
        <tag>聚集索引</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《软件是这样炼成的--从软件需求分析到软件架构设计》 读书笔记]]></title>
    <url>%2F2017%2F02%2F20%2F%E3%80%8A%E8%BD%AF%E4%BB%B6%E6%98%AF%E8%BF%99%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84--%E4%BB%8E%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%88%B0%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E3%80%8B%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一块大部头，是关于软件工程的一本理论联系实际的指导性质的书，本书最特别的地方是从头到尾都是以一个项目来作为案例，让读者容易理解各个环节之间的来龙去脉。还是不错的一本书，适合有一定基础的读者，相当于从实际案例出发，梳理了一遍整个知识体系。按照作者的说法，需求开发告诉客户想干什么，架构设计阶段从软件的视角出发，架构了软件对象（或类之间的关系），详细架构设计阶段是根据某个类设计了其具体的设计实现，比如说：每个类的方法体、输入和输出、数据结构和算法、对数据表的操作以及状态改变。读书笔记脑图下载 一、需求调研 需求关注的是客户的业务流程以及客户处理的数据信息。 调研方式：问卷调查、面谈（到现场调研，不要开大会；收集业务资料；考虑异常）、组织讨论（跨职能部门的流程的确认）资料：组织机构、岗位职责、流程、表单（授权）、报表。 静态结构：组织架构、部门职责、岗位职责动态结构：流程、运营节点描述、数据表单（如果是合计的项，需要说明数据项的处理逻辑） 二、需求分析 需求分析：动态—用例，考虑人机交互；静态—领域分析，考虑用例操作的对象实体 需求告诉我们做什么，至于怎么做事由架构决定的。 业务流程图作为系统分析需求功能和程序流程的基础，业务对象作为编写领域类图和数据字典的基础；客户调研报告中的组织结构作为子系统划分的依据；岗位职责描述部分作为系统中参与者的设计依据。 用例图，使得客户在大脑中形成了一个系统的运行蓝图，让客户明白能够在将来的系统中扮演的角色以及在这个角色中要承当的责任和客户将运行哪些行为动作完成自己的工作。 用例：业务流程图（分顶层业务流程图、底层业务流程图）中的节点，（运行节点的描述）。 对于复杂的用例，可以考虑适当的使用用例运行流程图补充描述。（基本事件描述流） 用例补充：系统自动处理的用例、系统维护方面的功能。 用例参与者关系分析；分类后作为确认的资料依据；录入的部分一般都是用例的角色。 用例关系的确认最好不在业务报告中获取，最好的方法是在用例描述中获得。 用例的参与者：1、谁使用该系统的主要功能；2、谁将需要该系统支持以完成其工作；3、谁讲维护、管理该系统以及保持该系统处于工作状态；4、系统需要哪些硬件设备才能有效运行；5、与该系统交互的系统有哪些；6、谁或什么系统对本系统产生的结果感兴趣； 用例图描述的是系统该有哪些功能。一般抽取业务调研报告中的动词或者动词词组。领域模型来自业务描述中的名词以及对名词的抽象。领域模型是一个分析模型。领域模型只考虑业务描述中涉及的实体以及实体之间的关系。反映的是系统结构的关系图！ 领域类图依赖：1、原始数据表格；2、用例分析报告中用例用到的对象。然后归纳整理。 用例描述的粒度把我是所要描述的用例至少有一个实体对象存在。领域类图描述是，所有的描述语言都采取中文描述法，数据属性采取的是中文描述方法，不允许使用计算机专业的语言描述数据属性，是用户能够方便理解的中文描述法。 用例图和类图是两个无法独立的UML图，用例描述提供什么样的服务，而服务的核心（载体）是以领域类的形式表现的。 数据字典的作用：保持一致性、共享性；例如用户和需求分析师、需求分析师与设计人员、不同的系统之间。*面向对象的分析方法中，我们在需求分析阶段没有明确说明要定义数据字典，大部分用领域图来替代。 三、概要设计 建模就是从不同的视角来反映系统的不同侧面，各种视图是互补，以达到完整体现软件系统的目的。UML可以通过不同的视角完成软件的建模工作！ 架构是蓝图，蓝图采用4+1模型来分不同角度体现，用UML工具来生成对应的视图。 1、软件架构 软件体系结构本质上讨论的是系统中不同的独立构建存放的位置问题，以及这些构建之间的通信方式。软件体系结构中一般包括通信构件、处理构件和数据构件。UML时序图、活动图、状态图属于逻辑视图，描述的是对象关系，但是，这些UML视图的目标是辅助代码的实现。代码最终以构件的形式存在于具体的物理设备上，这就是我们所说的体系结构。 软件设计系统风格是描述某一特定应用领域中系统的组织方式的惯用模式。 设计模式关注的是类与类之间的关系，是类关系层面上的设计。设计模式是一种思想，有些框架是建立在某种模式之上的，是为了完成设计模式而开发的中间件，可以降低开发成本提高开发效率。例如，MVC是一种设计模式，而Struts则是为了实现MVC模式而开发的框架。 Struts关注点在表示层，Spring关注点在业务逻辑部分，而Hibernate关注点是数据存储部分。 体系结构比分层设计更为高层一些。 分层是表示将功能进行有序的分组。通过分层，可以限制之系统间的依赖关系，使系统可以更松散的方式耦合，从而更易于维护。 层数越多，可以将每层分布在不同的机器上。 蓝图— 概要设计；施工图—详细设计 设计模式的核心原则是“开闭原则”，对扩展是开放的，对修改是关闭的。一个好的系统是在不修改源代码的情况下，可以扩展功能。实现开闭原则的关键就是抽象化，在开闭原则中，不允许修改的是抽象的类或接口，允许扩展的是具体的实现类，抽象类和接口在开闭原则中扮演着极其重要的角色。即要预知可能变化的需求，有预见所有可能已知的扩展。针对接口编程，而不是针对实现编程。 一般狭义上的业务逻辑不包括数据持久化。 框架：就是半成品，开发人员做填空题。 时序图针对某一用例中对象之间的活动顺序关系，但是有时时序图自身特点决定了系统分析的不完整性，特别是无法满足条件转换、分支和分叉等，活动图刚刚好满足了这样的要求。 活动图能够在类设计层面起到指导编码就足够了。 包可以直接理解为命名空间、文件夹。 组件图应该是用户手册的一部分，知道系统实施人员完成系统的软件部署。 在我们现实开发过程中，如果做到概要设计这详细程度已经足够了。 按照正常情况，程序员应该将70%左右的时间花在程序异常处理中。一个没有考虑异常的系统，就如同没有消防通道的大楼一样。 程序异常包括：1、编译错误；2、运行时发生错误（可以预料，但不能避免）；3、业务逻辑错误（例如出生日期不能大于当前日期） 异常的处理很大程度上揭示了其所基于架构的强度。 输出数据不完整：对于某些系统来说，数据不完整可能比系统停止运行带来更大的损失。较为理想的方法是向输出设备写一些信息，声明数据的不完整性；另一种方法是先缓冲要输出的数据，准备好全部数据之后再一次性输出。 所有异常都未必是用一个简单的弹出窗口或者一个小动作来处理，而是需要比较复杂的流程来完成，这是，就出现了另外一个概念“其它事件流” 2、数据架构 实体关系建模是在解读需求分析报告中领域类图和数据集以及数据字典的基础上，分析并确定实体名称和具体内容，剔除冗余实体、冗余数据项、冗余元组、冗余属性和冗余属性值。结合数据库之设计理念，创建实体卡片，分析其实体关系，绘制实体关系图（ER图）。领域类图的元素中包括了对这个领域类的操作，而实体关系图中不包含操作。实体关系图中的对象是建立在领域类的基础上，但是要要对领域类中的数据属性等进行优化，尽量做到减少数据冗余。领域类图是架构设计中时序图、活动图、状态设计图的基础。而实体关系图是数据库设计的基础。 冗余分析：1、表冗余2、记录冗余3、属性冗余4、属性值冗余 实体关系图（E-R图）编制一般分两步走，第一步只考虑实体以及他们之间的联系；第二步考虑给定实体的属性，不同时考虑两者是为了让设计工作变得单纯一点。 用建筑设计来比喻的话，实体关系图其实就是建筑材料的挑选过程，也就是说根据用户需求，我们决定需要哪些材料以及这些材料配比关系，争取做到一点都不浪费不冗余。在实体关系建模过程中，我们其实就是对领域类和数据集以及数据项的优化过程，并且确定了他们之间的关系。 在逻辑设计阶段，需要考虑主键、外键、考虑是否为空、是否符合业务规则，数据库范式的分析。1、创建表 映射E-R实体为表、表关系描述、数据完整性（实体完整性—主键约束、参照完整性—外键、用户定义完整性—业务规则）2、范式检查表结构3、是否满足所有的业务4、检查按业务规则 派生数据的设计，在修改源数据的时候很容易导致不一致的情况出现；提取表（统计表）：修改源数据的时候，需要考虑冲账的方式，把修改的差异体现在下一个统计周期中！ 存储过程出发点：少量输入参数、大量输出数据的情况下，减少数据库服务器为其它应用程序提供服务而带来的网络负荷，提高数据库操作性能。 数据库安全：1、管理制度2、数据授权3、数据库技术：存储过程、视图、加密等。 四、详细设计 领域类图，用例图都是从系统功能和结构的视角来分析系统。但是，这些视图都是围绕着系统的外部结构进行描述的。那么，要使得这个系统能够做好设计，能够为系统开发者提供足够的指导性设计，就必须从系统的本质开始描述，从一个用例的内部结构开始描述，时序图所描述的就是用例内部的对象之间的关系。 用户与系统的交互点是界面。 详细的时序图能够全面表达用例对象交互的顺序额关系，还能够反映出参与者与用例之间的交互过程，而这些过程都反映数据元素的变化过程，从业务的角度考虑，数据元素表现最为完整的部分应该是时序图。 数据结构：一个数据结构是由数据元素依据某种逻辑联系组织起来的。讨论一个数据结构必须同时讨论该类数据上执行的运算才有意义。通常，确定了数据结构之后，算法就容易实现了。 数据，而不是算法，是系统构造的关键因素。这种洞见导致了许多种软件设计方法和程序设计语言的出现，面向对象的程序设计语言就是其中之一。 算法主要的应用场景分为：算法密集型（搜索）、业务逻辑密集型（ERP）、体验密集型（游戏） 优化：1、多表之间的关联关系通过视图的方式生成单表视图，这样避免将大量无用数据读到内存中，占用内存资源。2、数据库排序后再加载到内存3、索引4、尽量减少从数据库中提取数据记录数量，为了降低空间复杂度，在数据检索过程中，做到对数据提取的准确定位。5、对于方法体返回的数组严格按照实际列宽数据元素数量长度进行定义，保证了开辟内存一点都没有浪费。 详细设计文档要设计到每个类的具体方法！设计单位是类。设计内容是方法体。 衡量索引效率的 95/5 规则：如果查询的结果返回的行数少于表中所有行的5%，则索引是检索数据的最快方法，如果查询的结果超过5%，那么通常使用索引就不是最快的方式。 文章摘录 小软件企业的通病：工期延误，成本增加，质量无保证，员工斗志下降，不断加班却没有效率，员工怨声载道，客户叫苦连天。 QS：质量保证，就是软件过程的控制、管理规范及执行监控。 一个公司需要考虑管理架构+技术架构；经营+财务； UML：类似AutoCAD，一种软件设计、建模的工具。 世界的本质其实和类相似，就是对象，对象本身的属性、动作；以及之间的相关关系。 软件设计思想：变与不变分离（可重用），分层思想（降低耦合），抽象（降低复杂度） 面向对象的方法是以认识论为基础，用对象来理解和分析问题空间，并设计和开发出由对象构成的软件系统（解空间）的方法。由于问题空间和解空间都是由对象组成的，这样可以消除由于问题空间和解空间结构上的不一致带来的问题。 聋哑对话老虎吃天 —— 无从下口 继承的主要目的是为了抽象而不是重用和功能扩展]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>软件工程</tag>
        <tag>需求分析</tag>
        <tag>软件架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用JSP+Servlet+JavaBean实现MVC设计模式的流程]]></title>
    <url>%2F2017%2F02%2F17%2F%E7%94%A8JSP%2BServlet%2BJavaBean%E5%AE%9E%E7%8E%B0MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[设计模式ServletJSPMVCWeb前端时间学习了 MVC 模式，现在来谈谈自己对MVC的认识：MVC是三个单词的缩写：M，Model（模型）；V,View( 视图 )，C，Control（控制）。MVC模式的目的就是实现Web系统的职能分工， Model层：实现系统的业务逻辑，即javaBean部分 View层：负责与用户交互，即在界面上展示数据对象给用户，即html，jsp Control层：Model与View之间沟通的桥梁，它可以分派用户的请求并选择恰当的视图以用于显示，同时它也可以解释用户的输入并将它们映射为模型层可执行的操作，当然就是Servlet的职责了 下面我们用MVC设计模式来实现 简单的用户登录过程 1、控制器Servlet的实现系统中只有一个servlet即ControlServlet,所有页面发起的以” *.do “的请求，都被web.xml配置给ControlServlet进行处理，在ControlServlet中根据‘ * ’的字符串(即解析用户请求的路径)，调用ActionFactory生成的制定Action对象，在将处理后的URL转发给用户。12345678910111213141516171819202122232425262728293031323334353637383940package cn.netjava.servlet; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import cn.netjava.action.Action; import cn.netjava.action.ActionFactory; /** * Servlet implementation class ControlServlet */ public class ControlServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //得到当前Servlet的请求路径 String pathName =request.getServletPath(); // request.getContextPath();得到项目名字 System.out.println("pathName:"+pathName); //得到请求的Action名字 int index = pathName.indexOf("."); String ActionName = pathName.substring(1, index); System.out.println(ActionName); //获取运行时参数 String ActionClassName = this.getInitParameter(ActionName); //得到Action对象 Action action = ActionFactory.getActionFactory().getAction(ActionClassName); //执行Action的execute得到要返回的URL路径 String url = action.execute(request, response); if(url==null)&#123; request.getRequestDispatcher("error.jsp").forward(request, response); &#125;else&#123; request.getRequestDispatcher(url).forward(request, response); &#125; &#125; &#125; 2、Action对象工厂类实现：ActionFactory是一个单实例类（整个系统只需要使用其一个对象），它只提供一个Action对象，通过getAction（String ActionClassName） 的方法调用创建一个Action对象。这个方法在Control中被调用。代码如下：12345678910111213141516171819202122232425262728293031323334353637package cn.netjava.action; /** * 根据Action名字，创建Action对象 * @author Administrator * */ public class ActionFactory &#123; //单例模式：不需要创建对象 private ActionFactory()&#123; &#125; //单实例访问方法，得到ActionFactory对象 public static ActionFactory getActionFactory()&#123; if(af == null)&#123; af = new ActionFactory(); &#125; return af; &#125; /** * 根据具体的Action类名字创建Action对象 * @param ActionClassName ：具体的Action类全名 * @return：Action类型对象 */ public Action getAction(String ActionClassName)&#123; Action action = null; try&#123; action = (Action) Class.forName(ActionClassName).newInstance(); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; return action; &#125; private static ActionFactory af; &#125; 3、Action接口类定义：所有的事件处理（即Action）类都必须实现这个接口1234567891011package cn.netjava.action; public interface Action &#123; /** * 所有的具体Action实现这个接口 * @param request 请求对象 * @param response 应答对象 * @return ：结果页面 */ public String execute(javax.servlet.http.HttpServletRequest request,javax.servlet.http.HttpServletResponse response); &#125; 4、web.xml中配置请求发送给控制器Servlet最后，我们只需要在wex.xml中对MVC结构的配置：视图页面中的请求都是以&lt;动作名字&gt;.do结尾，当这个请求到达web服务器后，会被服务器转向给控制器处理，控制器在根据解析出的动作名，调用对应的Action对象，处理结果，并输出结果页面，所以web.xml中必须有如下配置：12345678910111213141516171819202122232425262728293031323334&lt;servlet&gt; &lt;servlet-name&gt;controlServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;cn.netjava.servlet.ControlServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;loginAction&lt;/param-name&gt; &lt;param-value&gt;cn.netjava.action.LoginAction&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;controlServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt; # 4、具体的Action类实现（即对登录动作进行处理的类）``` javapackage cn.netjava.action; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class LoginAction implements Action &#123; public String execute(HttpServletRequest request, HttpServletResponse response) &#123; // 得到用户名和密码 String userName = request.getParameter("userName"); String userPwd = request.getParameter("userPwd"); if (userName.equals("netjava") &amp;&amp; userPwd.equals("netjava")) &#123; request.setAttribute("userName", userName); return "main.jsp"; &#125; else &#123; return "login.jsp"; &#125; &#125; &#125; 如果登录成功，跳转到 main.jsp页面，否则，返回login,jsp页面 以下是main.jsp和login.jsp页面：main.jsp123456789101112&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 style="color:red"&gt;&lt;%=request.getAttribute("userName") %&gt;登录成功&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; login.jsp &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;用户登录&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;loginAction.do&quot; method=&quot;post&quot;&gt; 用户名：&lt;input type=&quot;text&quot; name=&quot;userName&quot; id=&quot;userName&quot;&gt;&lt;br&gt; 密码：&lt;input type=&quot;password&quot; name=&quot;userPwd&quot; id=&quot;userPwd&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 最后做个总结吧：以前我们与服务器进行交互，可能jsp页面和servlet中都将html和java代码参杂在一起，这会导致系统的系统维护困难、分工不清；例如在加有jsp代码段的网页中，程序员与美工之间的配合就非常困难！MVC结构的系统会从根本上强制我们将web系统中的数据对象、业务逻辑、用户界面三者分离，使得程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>MVC</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4+1视图分析]]></title>
    <url>%2F2017%2F02%2F17%2F4%2B1%E8%A7%86%E5%9B%BE%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[一、4+1视图来历1995年，Philippe Kruchten在《IEEE Software》上发表了题为《The 4+1 View Model of Architecture》的论文，引起了业界的极大关注。后来，Philippe Kruchten加入Rational，他的4+1视图方法演变为著名的、为许多架构师所熟知的“RUP 4+1视图方法”（如下图所示）。RUP 4+1视图的说法是：逻辑架构、实现架构、进程架构、部署架构。概括而言：逻辑视图（Logical View），设计的对象模型。进程视图（Process View），捕捉设计的并发和同步特征。部署视图（Deployment View），描述了软件到硬件的映射，反映了分布式特性。实现视图（Implementation View），描述了在开发环境中软件的静态组织结构。用例视图（Use-Case View），该视图是其他视图的冗余（因此”＋1”）。Philippe Kruchten 4+1视图最初的“+1”，指场景视图（如下图）。RUP 4+1视图的“+1”，指用例视图（参考上图）。 二、4+1视图之父谈视图那么，什么是软件架构视图呢？Philippe Kruchten在其著作《Rational统一过程引论》中写道：一个架构视图是对于从某一视角或某一点上看到的系统所做的简化描述，描述中涵盖了系统的某一特定方面，而省略了于此方面无关的实体。软件架构的每个视图分别关注不同的方面，针对不同的目标和用途。也就是说，架构要涵盖的内容和决策太多了，超过了人脑“一蹴而就”的能力范围，因此采用“分而治之”的办法从不同视角分别设计；同时，也为软件架构的理解、交流和归档提供了方便。 三、视图的另眼解读来看一个生活中视图的例子。我们只有一个地球，但不同的时候我们会关心世界的不同问题：例如下图（世界人口分布图）是社会学家关心的，而气候学家则更关心下下图（世界年降水量分布图）。 其实上面就运用了“视图”作为手段，用不同的视图来刻画我们这个世界的不同方面。如果你喜欢，你完全可以将“世界人口分布图”称为“世界的人口分布视图”。这里引入视图的作用在于：世界地图的绘制者很难将不同的信息都绘制到同一幅图中；而看地图的人也希望有一幅地图是专门针对他的需要的。而且，更进一步而言，同一事物的不同视图之间是有联系的。对比上面两幅图，除了南美洲之外基本都是降水量足的地方人口较密集——多好的例子呀！于是不难理解：软件架构的不同视图之间也存在相互影响。 四、4+1视图如何指导架构设计因为实践需要，所以多视图必要。正如“纯理论曰架构设计即切分&lt;——&gt;多视图&lt;——&gt;现实是架构设计涉及面广”所总结的那样，4+1视图方法告诉我们【通过哪些视角、每个视角关注什么】，以此指导架构设计实践。RUP 4+1视图的说法是：逻辑架构、实现架构、进程架构、部署架构。Philippe Kruchten 4+1视图的说法是：逻辑架构、开发架构、进程架构、物理架构。本“4+1视图剖析系列”沿用更普遍的说法：逻辑架构、开发架构、运行架构、物理架构。 逻辑架构。逻辑架构关注功能，不仅包括用户可见的功能，还包括为实现用户功能而必须提供的“辅助功能模块”；它们可能是逻辑层、功能模块、类等。 开发架构。开发架构关注程序包，不仅包括要编写的源程序，还包括可以直接使用的第三方SDK和现成框架、类库，以及开发的系统将运行于其上的系统软件或中间件。开发架构和逻辑架构之间可能存在一定的映射关系：比如逻辑架构中的逻辑层一般会映射到开发架构中的多个程序包；再比如开发架构中的源码文件可以包含逻辑架构中的一到多个类（在C++里一个源码文件可以包含多个类，即使在Java里一个源码文件也可以同时包含一个类和几个内部类）。 运行架构。运行架构关注进程、线程、对象等运行时概念，以及相关的并发、同步、通信等问题。运行架构和开发架构的关系：开发架构一般偏重程序包在编译时期的静态依赖关系，而这些程序运行起来之后会表现为对象、线程、进程，运行架构比较关注的是这些运行时单元的交互问题。 物理架构。物理架构关注“目标程序及其依赖的运行库和系统软件”最终如何安装或部署到物理机器，以及如何部署机器和网络来配合软件系统的可靠性、可伸缩性等要求。物理架构和运行架构的关系：运行架构特别关注目标程序的动态执行情况，而物理架构重视目标程序的静态位置问题；物理架构还要考虑软件系统和包括硬件在内的整个IT系统之间是如何相互影响的。 总结：一物看不清，就多角度看；多角度看一物，不同视角会相互影响。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>视图</tag>
        <tag>4+1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解析UML中的组件图与部署图]]></title>
    <url>%2F2017%2F02%2F17%2F%E8%A7%A3%E6%9E%90UML%E4%B8%AD%E7%9A%84%E7%BB%84%E4%BB%B6%E5%9B%BE%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[组件图组件图提供系统的物理视图，它的用途是显示系统中的软件与其他软件组件(例如，库函数)的依赖关系。组件图可以在一个非常高的层次上显示，从而仅显示粗粒度的组件，也可以在组件包层次上显示。下图中的组件图显示了四个组件：Reporting Tool、Billboard Service、ASP .NET和ADO .NET。从Reporting Tool组件指向Billboard Service、ASP .NET API和ADO .NET组件的带箭头的线段，表示Reporting Tool依赖于那三个组件。 部署图部署图表示该软件系统如何部署到硬件环境中。它的用途是显示该系统不同的组件将在何处物理地运行，以及它们将如何彼此通信。因为部署图是对物理运行情况进行建模，系统的生产人员就可以很好地利用这种图。部署图中的符号包括组件图中所使用的符号元素，另外还增加了几个符号，包括节点的概念。一个节点可以代表一台物理机器，或代表一个虚拟机器节点(例如，一个大型机节点)。用三维立方体来表示节点，节点的名称位于立方体的顶部。所使用的命名约定与序列图中相同：[实例名称] : [实例类型] 例如，”w3.reporting.myco.com : Application Server”。下图中的部署图表明，用户使用运行在本地机器上的浏览器访问Reporting Tool，并通过公司intranet上的HTTP协议连接到Reporting Tool组件。这个工具实际运行在名为w3.reporting.myco.com的服务器上。Reporting Tool通过ADO .NET与数据库相连。除了与报告数据库通信外，Report Tool组件还通过HTTPS上的SOAP与Billboard Service进行通信。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>组件图</tag>
        <tag>部署图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jsp+servlet+javabean实现ssh的mvc模式]]></title>
    <url>%2F2017%2F02%2F17%2Fjsp%2Bservlet%2Bjavabean%E5%AE%9E%E7%8E%B0ssh%E7%9A%84mvc%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[干了很久的项目都是使用SSH框架的，现在团队有位搞美工的美女突然想要搞java了，让我做下指导并打个基本的框架，需要使用最基本的架构，这样说来那SSH只能滚得远远的了；最基本的架构也就jsp+servlet+javabean，但心里感觉还是不爽，搞这个不是纯属浪费时间啊。后来一想，对了我自己可以不用框架来设计出一个简单的mvc架构来实现框架带来的分层效果：这里我就以登录为例子来讲解下，讲解的顺序为v—-&gt;c——&gt;m页面端:login.html1234567891011121314&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;amdinLogin.html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action="../AdminLogin.action" method="post"&gt; &lt;input type = "text" name = "username"/&gt; &lt;input type = "password" name = "password"/&gt; &lt;input type = "submit" name = "login" value = "注册"/&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 配置文件web.xml1234567891011121314151617181920212223 &lt;servlet&gt; &lt;servlet-name&gt;controlServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;xidian.sl.equipment.Servlet.ControlServlet&lt;/servlet-class&gt;&lt;!-- 这里的配置与一般的servlet一样，但由于整个项目只会有一个servlet，所有的访问都将访问这个servlet，因此不同的访问只需要添加下面的参数即可--&gt; &lt;init-param&gt; &lt;!-- 页面请求的地址--&gt; &lt;param-name&gt;AdminLogin&lt;/param-name&gt; &lt;!-- 处理action的后台Action地址--&gt; &lt;param-value&gt;xidian.sl.equipment.action.LoginAction&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;picListAction&lt;/param-name&gt; &lt;param-value&gt;xidian.sl.equipment.action.PicListAction&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;newListAction&lt;/param-name&gt; &lt;param-value&gt;xidian.sl.equipment.action.NewListAction&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;controlServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;*.action&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 充当控制层的servlet：xidian.sl.equipment.Servlet.ControlServlet（很重要）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package xidian.sl.equipment.Servlet;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import xidian.sl.equipment.action.interfaces.Action;import xidian.sl.equipment.actionfactory.ActionFactory;public class ControlServlet extends HttpServlet&#123; /** * 任何请求都会到这个servlet中，这个servlet就是充当MVC模式中的C（控制层） */ private static final long serialVersionUID = 1L; @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doPost(request, response); &#125; @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; /** * 得到当前Servlet的请求路径 * */ String pathName = request.getServletPath(); //System.out.println("pathName:"+pathName); /** * 得到请求的Action名字 * */ int index = pathName.indexOf("."); String ActionName = pathName.substring(1, index); //System.out.println(ActionName); /** * 获取运行时参数 * */ String ActionClassName = this.getInitParameter(ActionName); //System.out.println("actionclassName "+ ActionClassName); /** * 得到Action对象 * */ Action action = ActionFactory.getActionFactory().getAction(ActionClassName); //System.out.println("action "+action); /** * 执行Action的execute得到要返回的URL路径 * */ String url = action.execute(request, response); if(url == null)&#123; request.getRequestDispatcher("error.jsp").forward(request, response); &#125;else&#123; request.getRequestDispatcher(url).forward(request, response); &#125; &#125;&#125; Action:面向接口编程，提供一个统一的Action接口，里面就一个方法execute()；模拟struts1.x 123456789101112131415package xidian.sl.equipment.action.interfaces;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public interface Action &#123; /** * 所有的具体Action实现这个接口 * @param request 请求对象 * @param response 应答对象 * @return ：结果页面 */ public String execute(HttpServletRequest request, HttpServletResponse response); &#125; LoginAction:123456789101112131415161718192021222324252627282930313233343536package xidian.sl.equipment.action;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import xidian.sl.equipment.action.interfaces.Action;import xidian.sl.equipment.dao.impl.AdminDAOImpl;import xidian.sl.equipment.dao.interfaces.AdminDAO;public class LoginAction implements Action &#123; @Override public String execute(HttpServletRequest request, HttpServletResponse response) &#123; /** * 从request中得到相应的值 * */ String username = request.getParameter("username"); String password = request.getParameter("password"); /** * 实例化DAO层，但其实这样做还是不完美的，最好自己写一个依赖注入的类 * */ AdminDAO adminDAO = new AdminDAOImpl(); /** * 返回查找后的二维数组 * */ String[][] data = adminDAO.findAdmin(username, password); if(data == null|| (data != null&amp;&amp; data.length == 0))&#123; //数组为空，表示无此账号存在 return "admin/login.html"; &#125; else &#123; return "admin/index.html"; &#125; &#125;&#125; 在实现类LoginAction中实例化了AdminDAO进行持久化操作，这里为了方便起见是直接使用new进行实例化，但这样硬编码带来耦合，如需要改进可以参考模拟spring的iochttp://www.cnblogs.com/shenliang123/archive/2012/05/10/2494412.html 讨论简单工厂模式时有简单的实现，大家可以进行改进使其更加完美 AdminDAO:12345678package xidian.sl.equipment.dao.interfaces;public interface AdminDAO &#123; /** * 根据用户名与密码来查找相应用户 * */ public String[][] findAdmin(String username, String password);&#125; AdminDAOImpl: 123456789101112131415package xidian.sl.equipment.dao.impl;import xidian.sl.equipment.dao.interfaces.AdminDAO;import xidian.sl.equipment.util.DbConn;public class AdminDAOImpl implements AdminDAO&#123; @Override public String[][] findAdmin(String username, String password) &#123; String sql = "select * from admin as ad where ad.aId = '"+username+"' and ad.aPassword = '"+password+"'"; String[][] data = DbConn.query(sql); return data; &#125;&#125; 该实现类中使用了已封装好的数据库操作类，详细见：http://www.cnblogs.com/shenliang123/archive/2012/05/10/2494874.html数据库的设计比较简单：只需要主键id, 用户账号：username, 账号密码：password这样就基本实现了mvc的效果，你还可以根据项目的复杂程度向DAO与Action之间再插入一层Service]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>SSH</tag>
        <tag>javabean</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工厂方法模式]]></title>
    <url>%2F2017%2F02%2F17%2F%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[定义：定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。类型：创建类模式类图：工厂方法模式代码123456789101112131415161718192021222324252627interface IProduct &#123; public void productMethod(); &#125; class Product implements IProduct &#123; public void productMethod() &#123; System.out.println("产品"); &#125; &#125; interface IFactory &#123; public IProduct createProduct(); &#125; class Factory implements IFactory &#123; public IProduct createProduct() &#123; return new Product(); &#125; &#125; public class Client &#123; public static void main(String[] args) &#123; IFactory factory = new Factory(); IProduct prodect = factory.createProduct(); prodect.productMethod(); &#125; &#125; 工厂模式：首先需要说一下工厂模式。工厂模式根据抽象程度的不同分为三种：简单工厂模式（也叫静态工厂模式）、本文所讲述的工厂方法模式、以及抽象工厂模式。工厂模式是编程中经常用到的一种模式。它的主要优点有：可以使代码结构清晰，有效地封装变化。在编程中，产品类的实例化有时候是比较复杂和多变的，通过工厂模式，将产品的实例化封装起来，使得调用者根本无需关心产品的实例化过程，只需依赖工厂即可得到自己想要的产品。对调用者屏蔽具体的产品类。如果使用工厂模式，调用者只关心产品的接口就可以了，至于具体的实现，调用者根本无需关心。即使变更了具体的实现，对调用者来说没有任何影响。降低耦合度。产品类的实例化通常来说是很复杂的，它需要依赖很多的类，而这些类对于调用者来说根本无需知道，如果使用了工厂方法，我们需要做的仅仅是实例化好产品类，然后交给调用者使用。对调用者来说，产品所依赖的类都是透明的。 工厂方法模式：通过工厂方法模式的类图可以看到，工厂方法模式有四个要素：工厂接口。工厂接口是工厂方法模式的核心，与调用者直接交互用来提供产品。在实际编程中，有时候也会使用一个抽象类来作为与调用者交互的接口，其本质上是一样的。工厂实现。在编程中，工厂实现决定如何实例化产品，是实现扩展的途径，需要有多少种产品，就需要有多少个具体的工厂实现。产品接口。产品接口的主要目的是定义产品的规范，所有的产品实现都必须遵循产品接口定义的规范。产品接口是调用者最为关心的，产品接口定义的优劣直接决定了调用者代码的稳定性。同样，产品接口也可以用抽象类来代替，但要注意最好不要违反里氏替换原则。产品实现。实现产品接口的具体类，决定了产品在客户端中的具体行为。前文提到的简单工厂模式跟工厂方法模式极为相似，区别是：简单工厂只有三个要素，他没有工厂接口，并且得到产品的方法一般是静态的。因为没有工厂接口，所以在工厂实现的扩展性方面稍弱，可以算所工厂方法模式的简化版，关于简单工厂模式，在此一笔带过。 适用场景：不管是简单工厂模式，工厂方法模式还是抽象工厂模式，他们具有类似的特性，所以他们的适用场景也是类似的。首先，作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过new就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。其次，工厂模式是一种典型的解耦模式，迪米特法则在工厂模式中表现的尤为明显。假如调用者自己组装产品需要增加依赖关系时，可以考虑使用工厂模式。将会大大降低对象之间的耦合度。再次，由于工厂模式是依靠抽象架构的，它把实例化产品的任务交由实现类完成，扩展性比较好。也就是说，当需要系统有比较好的扩展性时，可以考虑工厂模式，不同的产品用不同的实现工厂来组装。 典型应用要说明工厂模式的优点，可能没有比组装汽车更合适的例子了。场景是这样的：汽车由发动机、轮、底盘组成，现在需要组装一辆车交给调用者。假如不使用工厂模式，代码如下： class Engine { public void getStyle(){ System.out.println(&quot;这是汽车的发动机&quot;); } } class Underpan { public void getStyle(){ System.out.println(&quot;这是汽车的底盘&quot;); } } class Wheel { public void getStyle(){ System.out.println(&quot;这是汽车的轮胎&quot;); } } public class Client { public static void main(String[] args) { Engine engine = new Engine(); Underpan underpan = new Underpan(); Wheel wheel = new Wheel(); ICar car = new Car(underpan, wheel, engine); car.show(); } } 可以看到，调用者为了组装汽车还需要另外实例化发动机、底盘和轮胎，而这些汽车的组件是与调用者无关的，严重违反了迪米特法则，耦合度太高。并且非常不利于扩展。另外，本例中发动机、底盘和轮胎还是比较具体的，在实际应用中，可能这些产品的组件也都是抽象的，调用者根本不知道怎样组装产品。假如使用工厂方法的话，整个架构就显得清晰了许多。 interface IFactory { public ICar createCar(); } class Factory implements IFactory { public ICar createCar() { Engine engine = new Engine(); Underpan underpan = new Underpan(); Wheel wheel = new Wheel(); ICar car = new Car(underpan, wheel, engine); return car; } } public class Client { public static void main(String[] args) { IFactory factory = new Factory(); ICar car = factory.createCar(); car.show(); } } 使用工厂方法后，调用端的耦合度大大降低了。并且对于工厂来说，是可以扩展的，以后如果想组装其他的汽车，只需要再增加一个工厂类的实现就可以。无论是灵活性还是稳定性都得到了极大的提高。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>工厂模式</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Facade外观模式]]></title>
    <url>%2F2017%2F02%2F17%2FFacade%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Facade外观模式，是一种结构型模式，它主要解决的问题是：组件的客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。在这里我想举一个例子：比如，现在有一辆汽车，我们（客户程序）要启动它，那我们就要发动引擎（子系统1），使四个车轮（子系统2）转动。但是实际中我们并不需要用手推动车轮使其转动，我们踩下油门，此时汽车再根据一些其他的操作使车轮转动。油门就好比系统给我们留下的接口，不论汽车是以何种方式转动车轮，车轮变化成什么牌子的，我们要开走汽车所要做的还是踩下油门。GoF《设计模式》中说道：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。Façade外观模式的结构大概是这样的：这个图是我对Facade模式的理解，如果大家觉得有什么不对的地方欢迎给我指出。我就上面说的那个情形写一下实现代码，首先我们要实现三个子系统（Wheel、Engine、Body）：1234567891011121314151617181920212223242526272829303132333435363738 internal class Engine &#123; public string EngineWork() &#123; return "BMW's Engine is Working"; &#125; public string EngineStop() &#123; return "BMW's Engine is stoped"; &#125; &#125; internal class Wheel &#123; public string WheelCircumrotate() &#123; return "BMW's Wheel is Circumrotating"; &#125; public string WheelStop() &#123; return "BMW's Wheel is stoped"; &#125; &#125; internal class Body &#123; public Wheel[] wheels = new Wheel[4]; public Engine engine = new Engine(); public Body() &#123; for (int i = 0; i &lt; wheels.Length; i++) &#123; wheels[i] = new Wheel(); &#125; &#125;&#125; 然后，我们再来实现汽车的Facade12345678910111213141516171819202122class CarFacade&#123; Body body = new Body(); public void Run() &#123; Console.WriteLine(body.engine.EngineWork()); for(int i = 0; i &lt; body.wheels.Length; i++) &#123; Console.WriteLine(body.wheels[i].WheelCircumrotate()); &#125; &#125; public void Stop() &#123; Console.WriteLine(body.engine.EngineStop()); for (int i = 0; i &lt; body.wheels.Length; i++) &#123; Console.WriteLine(body.wheels[i].WheelStop()); &#125; &#125;&#125; 现在我们来使用客户端程序验证一下，代码如下：12345678910class Program&#123; static void Main(string[] args) &#123; CarFacade car = new CarFacade(); car.Run(); car.Stop(); Console.Read(); &#125;&#125; 执行结果如下；BMW’s Engine is WorkingBMW’s Wheel is CircumrotatingBMW’s Wheel is CircumrotatingBMW’s Wheel is CircumrotatingBMW’s Wheel is CircumrotatingBMW’s Engine is stopedBMW’s Wheel is stopedBMW’s Wheel is stopedBMW’s Wheel is stopedBMW’s Wheel is stoped 正如上面所说：客户端代码（Program）不需要关心子系统，它只需要关心CarFacade所留下来的和外部交互的接口，而子系统是在CarFacade中聚合。 Façade模式的几个要点：1、从客户程序的角度看，Facade模式不仅简化了整个组件系统的接口，同时对于组件内部与外部客户程序来说，从某种程度上也达到了一种“解耦”的效果——内部子系统的任何变化不会影响到Facade接口的变化。2、Facade设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade很多时候更是一种架构设计模式。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>外观模式</tag>
        <tag>Facade</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[轻量级框架与重量级框架]]></title>
    <url>%2F2017%2F02%2F16%2F%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6%E4%B8%8E%E9%87%8D%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[事实上“轻量级”与“重量级”并没有确切的定义。轻重量级之分应当考虑如下几个方面： 1、加载的资源Spring相对于EJB是轻量级的，但这就好像说大象比鲸轻。如果你想要运行一个Java EE应用程序，你不能够简单地创建一个应用并直接运行它本身。需要一个JavaEE服务器来运行应用，例如Glassfish，WebLogic或WebSphere。多数应用服务器都是非常巨大并且复杂的，并不容易安装和配置。EJB应用启动时要消耗大量的资源，内存、CPU等，把所有的服务都加载进来；Spring则是可定制服务，需要什么加载什么。 2、侵入性（或曰框架依赖性，耦合性）重量级框架（如EJB2.0和Struts1.2）侵入性较高。它强制开发者写一些与框架绑定的类。这使得这些类很难被测试。Spring将侵入性降到最低，它允许使用POJO进行开发。Spring并不强制实现Spring API接口或扩展Spring API类。这使得这些类方便测试。这使得把类迁移到其他轻量级容器更加容易。 3、开发的方便程度如上条所述，使用重量级框架要写一些框架绑定的类，部署、运行及测试过程都较为复杂，开发起来并不方便。而轻量级框架反之。 4、解决问题的侧重点不同：轻量级框架侧重于减小开发的复杂度，相应它的处理能力较弱（事务功能弱，不具备分布式处理能力），适用于开发中小型企业应用。 重量级框架则强调高可伸缩性，适合于开发大型企业应用。 5、轻量级框架的特点一般是非侵入性的、依赖的东西非常少，占用资源非常少，部署简单，比较容易使用。 6、为何说Spring是轻量级框架 Spring以集中的、自动化的方式进行应用程序对象创建和装配，管理对象生命周期，组合成复杂的应用程序。 Spring提供了不同的模块，基于需求可以灵活选择。Spring jar的大小通常在几MB。 相比较EJB，Spring需要写更少的代码和更少的配置。使得开发人员能够更关注业务逻辑。 Spring容器是非侵入性的，完全采用POJO进行开发，方便测试。 Spring方便与其他框架与第三方类库无缝集成。 Spring与其他基于POJO的容器相比，例如Guice和Plexus，仍然称得上是“重量级”。因为完整的Spring技术栈包含了POJO之上的层次，它的MVC框架需要Servlets基础设施。 Spring相比EJB2.x确实是轻量级，最主要的卖点是POJO的使用。 7、为何说EJB是重量级框架？首先这是Rod Johnson说的，Spring狂热者奉之为圭臬的论断。2004年以前EJB2.x确实是重量级，它需要EJB容器来运行，需要加载较多的资源，代码侵入性较高–需要实现特定的EJB接口，相对来说开发并不方便。 8、总结轻重量级是相对的，主要从加载资源、代码侵入性和开发便捷性等方面去考虑和比较。类似地，使用volatile变量可以用来确保变量的更新操作被同步到其他线程，这种同步机制相对于同步容器就是轻量级的（当然更具可伸缩性和实用性的是并发容器而非上述二者）；而jetty相对于tomcat而言，由于其加载资源更少，也可以称之为轻量级的。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>框架</tag>
        <tag>spring</tag>
        <tag>EJB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[活动图概述]]></title>
    <url>%2F2017%2F02%2F16%2F%E6%B4%BB%E5%8A%A8%E5%9B%BE%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[1、活动图概述 活动图和交互图(时序图、协作图)是UML中对系统动态方面建模的两种主要形式 交互图强调的是对象到对象的控制流，而活动图则强调的是从活动到活动的控制流 活动图是一种表述过程基理、业务过程以及工作流的技术。它可以用来对业务过程、工作流建模，也可以对用例实现甚至是程序实现来建模 UML 2.0而言，去除了“活动图是状态图的一种特例”这一规定 2、如何绘制活动图 “活动图” 比较直观易懂；与传统的流程图十分的相近，只要能够读懂活动图，就不难画出活动图 绘制时首先决定是否采用泳道：主要根据活动图中是否要体现出活动的不同实施者 然后尽量使用分支、分岔和汇合等基本的建模元素来描述活动控制流程 如果需要，加入对象流以及对象的状态变化，利用一些高级的建模元素（如辅助活动图、汇合描述、发送信号与接收信号、引脚、扩展区）来表示更多的信息 活动图的建模关键是表示出控制流，其它的建模元素都是围绕这一宗旨所进行的补充]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>活动图</tag>
        <tag>交互图</tag>
        <tag>泳道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UML活动图与流程图的区别]]></title>
    <url>%2F2017%2F02%2F16%2FUML%E6%B4%BB%E5%8A%A8%E5%9B%BE%E4%B8%8E%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[一、区别(1) 流程图着重描述处理过程，它的主要控制结构是顺序、分支和循环，各个处理过程之间有严格的顺序和时间关系。UML活动图描述的是对象活动的顺序关系所遵循的规则，它着重表现的是系统的（对参与者的反应）行为，而非系统的处理过程。(2)UML活动图能够表示并发活动的情形，而流程图不行。(3)UML活动图是面向对象的，而流程图是面向过程的。 二、UML活动图1、基本概述活动图(Activity Diagram)是用来表达流程的常用的一种UML。它与流程图很相似，比较容易掌握。PS：这里先引出一个概念，那就是行为建模的三大利器，活动图(Activity Diagram)、状态机图(State Machine Diagram)、顺序图(Sequence Diagram)。使用者三种UML图，可以详尽互补的表示出项目的动态模型。 2、流程图流程图是很早就接触的一类图，中学时就用它来表示某件事情的流程。其基本结构如下。 3、活动图 １）基本语法解释： 每个活动图都有一个开始状态、一个或多个结束状态。 圆角矩形表示活动，该活动应当能一个持续一定时间，也就是说是一个持续动作。在不使用泳道的情况下，其中文字应该是主谓宾形式，使用泳道，应该是动宾形式。 流程方向，代表该活动往什么方向进行。 菱形用作判定和合并，也就是说用户条件分支和合并。 同步栅代表的是一个并行活动，同步栅应当分叉、合并配对使用 流程方向上的中括号表示条件，其中的文字叫做监护，简单的理解就是，该文字用于表示流程中所发生的分叉，比如是、否这样的分叉。 2)判断的三种处理方法 3)泳道PS：泳道也叫作分区，在泳道中表示活动的发起者谁。这时，活动中所填文字，只要采用动宾形式就行了。 4)并行活动PS：并行活动是由同步栅来控制的，同步栅必须分叉和汇合成对出现。 5)对象流当活动图中出现了工作产品时，活动流就变成了对象流。基本语法PS：矩形表示的是工作产品，是某个类的实例或者是某些活动输出的结果。矩形里面的文字要用名词表示。案例：PS：对象流的输入输出是以活动为中心的，从工作产品输入到活动是输入对象流，从活动输出到工作产品是输出对象流。 6)注释PS：当某些时候UML不足以表达或者是表达起来很麻烦时可以采用注释的方式进行补充说明，该方法适用于任意UML图。 7)小结 明确该流程要达到怎样的业务目的。 该流程有什么角色参与？哪些是主要角色？ 先画出流程主干，再考虑分支。 明确流程主干中活动涉及到的角色。 当不注意表达或者表达起来很麻烦时，要使用注释。 适当的控制活动的粒度。 先画出反映当前情况的流程，再想办法优化，画出优化后的流程。 对比前后差异，整理出改动部分。案例1：案例2：]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>活动图</tag>
        <tag>流程图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是POJO]]></title>
    <url>%2F2017%2F02%2F16%2F%E4%BB%80%E4%B9%88%E6%98%AFPOJO%2F</url>
    <content type="text"><![CDATA[POJO是一个简单的、正规Java对象，它包含业务逻辑处理或持久化逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>框架</tag>
        <tag>POJO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WEB服务器、应用程序服务器区别]]></title>
    <url>%2F2017%2F02%2F16%2FWEB%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8C%BA%E5%88%AB%E8%8C%83%2F</url>
    <content type="text"><![CDATA[WEB服务器、应用程序服务器有何区别？IIS、Apache、Tomcat、Weblogic、WebSphere都各属于哪种服务器，这些问题困惑了很久，今天终于梳理清楚了：Web服务器的基本功能就是提供Web信息浏览服务。它只需支持HTTP协议、HTML文档格式及URL。与客户端的网络浏览器配合。因为Web服务器主要支持的协议就是HTTP，所以通常情况下HTTP服务器和WEB服务器是相等的(有没有支持除HTTP之外的协议的web服务器，作者没有考证过)，说的是一回事。应用程序服务器(简称应用服务器)，我们先看一下微软对它的定义：”我们把应用程序服务器定义为“作为服务器执行共享业务应用程序的底层的系统软件”。 就像文件服务器为很多用户提供文件一样，应用程序服务器让多个用户可以同时使用应用程序（通常是客户创建的应用程序）”通俗的讲，Web服务器传送(serves)页面使浏览器可以浏览，然而应用程序服务器提供的是客户端应用程序可以调用(call)的方法(methods)。确切一点，你可以说:Web服务器专门处理HTTP请求(request)，但是应用程序服务器是通过很多协议来为应用程序提供(serves)商业逻辑 (business logic)。以Java EE为例，Web服务器主要是处理静态页面处理和作为 Servlet容器，解释和执行servlet/JSP，而应用服务器是运行业务逻辑的，主要是EJB、 JNDI和JMX API等J2EE API方面的，还包含事务处理、数据库连接等功能，所以在企业级应用中，应用服务器提供的功能比WEB服务器强大的多。以这样的定义，IIS、Apache、Tomcat都可以属于Web服务器，Weblogic、WebSphere都属于应用服务器。 Apache:在Web服务器中，Apache是纯粹的Web服务器，经常与Tomcat配对使用。它对HTML页面具有强大的解释能力，但是不能解释嵌入页面内的服务器端脚本代码（JSP/Servlet）。 Tomcat:早期的Tomcat是一个嵌入Apache内的JSP/Servlet解释引擎Apache+Tomcat就相当于IIS+ASP。后来的Tomcat已不再嵌入Apache内，Tomcat进程独立于Apache进程运行。 而且，Tomcat已经是一个独立的Servlet和JSP容器，业务逻辑层代码和界面交互层代码可以分离了。因此，有人把Tomcat叫做轻量级应用服务器。 IIS:微软早期的IIS，就是一个纯粹的Web服务器。后来，它嵌入了ASP引擎，可以解释VBScript和JScript服务器端代码了，这时，它就可以兼作应用服务器。当然，它与J2EE应用服务器根本无法相比，但是，从功能上说，从原理上说，它勉强可以称之为应用服务器。确切地说，IIS是兼有一点应用服务器功能的Web服务器。 综上：Apache是纯粹的web服务器，而Tomcat和IIS因为具有了解释执行服务器端代码的能力，可以称作为轻量级应用服务器或带有服务器功能的Web服务器。Weblogic、WebSphere因为能提供强大的J2EE功能，毫无疑问是绝对的应用服务器。对于处于中间位置的Tomcat，它可以配合纯Web服务器Apache一起使用，也可以作为应用服务器的辅助与应用服务器一起部署.]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>web服务器</tag>
        <tag>应用服务器</tag>
        <tag>区别</tag>
        <tag>tomcat</tag>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据元和元数据（转）]]></title>
    <url>%2F2017%2F02%2F14%2F%E6%95%B0%E6%8D%AE%E5%85%83%E5%92%8C%E5%85%83%E6%95%B0%E6%8D%AE%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[数据元是数据单元，是行业领域数据的最小单元元数据是描述数据的数据，描述数据元如果有10个属性，那么这10个属性就是这个数据元的元数据。数据元是相对固定的，而元数据则依赖于其描述的数据实体，是相对的，当数据元用来描述它的上级组合实体时，就成为实体的元数据。核心元数据，是一组同类实体都具有相同值的元数据。扩展元数据，是一组同类实体具有不同值的元数据。表，是一组同类实体的存储这个同类就是类，实体就是对象以一个学生登记表单为例，表单上面是学生基本信息，姓名、学号、班级，表单下面是一个列表，存放学生的选课信息，课程编号、名称、学分。对于这个表单，数据库设计成2个表，一个是学生基本信息表，一个是学生选课信息表。姓名、学号、班级、课程、学分都是数据元，这些数据元有自己的元数据，即描述数据，分别是长度、类型、值域等等。对于学生基础信息表而言，姓名、学号、班级是描述学生基础信息的数据，是它的元数据。对于学生选课信息表而言，课程编号、名称、学分是描述学生选课信息表的数据，是它的元数据。表中的每一条记录就是一个实体，表的抽象就是一个类。无论是学生信息表还是选课信息表，都有存储位置的描述，且一个表中的所有数据的存储位置都是一致的，即是类的基本属性，这个基本属性我们成为核心元数据。核心元数据是一个行业所有类都共有的，且一个类的所有实体都同值的数据元。扩展元数据是相对于核心元数据的，每个类所特有的属性。前面的姓名、学号、班级、课程编号、名称、学分都是扩展元数据。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>元数据</tag>
        <tag>数据元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[领域建模（转）]]></title>
    <url>%2F2017%2F02%2F14%2F%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[昨天在和一个同事讨论新平台中我们是如何开始一个项目的时候，都同意要从业务建模开始。业务建模－Business Modeling 是以软件模型方式描述企业管理和业务所涉及的对象和要素、以及它们的属性、行为和彼此关系，业务建模强调以体系的方式来理解、设计和构架企业信息系统。这方面的工作可能包括了对业务流程建模，对业务组织建模，改进业务流程，领域建模等方面。但在讨论如何进行领域建模时，我们出现了分歧。我建议采用UML图的方式进行领域建模，而同事却提议按照金蝶EAS的做法，以绘制表单界面的方式进行领域建模。 确实，咋一看，以绘制表单界面方式进行领域建模有一个非常大的好处，就是在进行领域建模时，就能看到表单界面，能给人一种非常直观的感觉。但仔细一想，却发现这种方式的缺点。下面我就对这两种领域建模方式作一个比较。 采用UML图进行领域建模，能够非常清晰的表现出整个系统中各个领域之间的关系（关联、包含、继承，1…1，1….n 等等）。而采用绘制界面进行领域建模，则无法清晰的表达出这种关系。这对用户、架构师、开发者理解该企业的业务关系造成不利影响。同时并不是所有的业务信息都会在界面上展现出来，反而是那些隐藏的属性体现了一些关键的业务信息。采用绘制界面进行领域建模时，架构师会将注意力集中在比较底层的实现细节，而很难将注意力集中在最具意义的业务关系上。这对深刻理解并挖掘用户需求也造成不利。[*]绘制界面领域建模能适应一些小的项目，但对集成现有系统来说，就无能为力了。 对于以绘制表单界面进行领域建模的优点，UML领域建模也能够实现。绘制好UML图后，就可以通过模板来生成相应的代码，包括了领域对象、服务接口、UI，以及所谓了Controller，这样也能实现快速开发的需求。同时这种实现方法对集成开发环境的要求并不很高，因为它可以不一定需要一个所见即所得的界面绘制工具。开发者在生成代码后，可以将其部署到内置的运行环境中去，立即就可以看到相应的界面效果。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>领域建模</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用例图中的关系]]></title>
    <url>%2F2017%2F02%2F13%2F%E7%94%A8%E4%BE%8B%E5%9B%BE%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[UML类图符号各种关系说明以及举例[转] 包图及其关系图组件及其关系图 一、用例图概述用例图，是一种客户与开发者之间可以沟通、理解的表现形式。可以认为用例图是开发者与客户之间的可视化契约。我认为最主要的一点就是，在这个用例模型中，一直是以用户的角度为主的，做为开发人员也要时刻站在用户的角度来看待整个系统。从原则上来讲，用例之间都是独立、并列的，它们之间并不存在着包含从属关系。但是为了体现一些用例之间的业务关系，提高可维护性和一致性，用例之间可以抽象出包含(include)、扩展(extend)和泛(generalization)几种关系。共性：都是从现有的用例中抽取出公共的那部分信息，作为一个单独的用例，然后通后过不同的方法来重用这个公共的用例，以减少模型维护的工作量。 二、用例图中的四个基本组件用例图包括：参与者或角色（actor）、用例（use case)、关系、系统。 1、 参与者：是系统外的一个实体，它以某种方式参与用例我执行过程。参与者通过向系统输入或请求系统输入某些事件来触发系统的执行，所以参与者可以是人，可以是事物，可以是时间、气压等环境因素或者其他系统等。它在系统之外，与系统直接交互。用一个群体概念给参与者命名，反映该参与者的身份与行为（如客户、管理员等）。 2、 用例：用例代表系统的某项完整的功能，是动作步骤的集合。系统的功能是通过参与者使用用例来实现的。在这里，我们把用例看做是一个“黑盒”，只反映的是系统的一项功能，不涉及实现细节。用例的命名：用例是从用户的角度来描述系统的功能，也就是从参与者的角度出发进行命名（如，使用“登录”，而不用“身份验证“）。还有，用例最好使用行业专业术语。 3、关系：除了参与者与用例之间的关联关系外，还可以定义参与者之间的泛化关系，用例之间的包含、泛化与扩展关系。应用这些关系的目的是从系统中抽取出公共行为及其变体。 4、 系统：系统指一个软件系统、一项业务、一个商务活动、一台机器等等。系统的功能通过用例来表现，换句话说，就是所有的用例构成了整个系统。从这个角度来说，用例（use case)也可以称为系统的子功能。系统用矩形表示，也可以省略。 三、用例图中的关系1、包含关系在包含关系中，基本用例吸收了被包含用例的行为，如果没有后者它将是不完整的。包含关系的划分有两个好处：一是被包含用例被抽取出来，基本用例得以简化；二是可以抽象出公共事件流，实现代码复用。有时当某用例的事件流过于复杂时，为了简化用例的描述，我们也可以把某一段事件流抽象成为一个被包含的用例；相反，用例划分太细时，也可以抽象出一个基用例，来包含这些细颗粒的用例。如: 2、扩展将基用例中一段相对独立并且可选的动作，用扩展（Extension）用例加以封装，再让它从基用例中声明的扩展点（Extension Point）上进行扩展，从而使基用例行为更简练和目标更集中。扩展用例为基用例添加新的行为。扩展用例可以访问基用例的属性，因此它能根据基用例中扩展点的当前状态来判断是否执行自己。但是扩展用例对基用例不可见。对于一个扩展用例，可以在基用例上有几个扩展点。例如，系统中允许用户对查询的结果进行导出、打印。对于查询而言，能不能导出、打印查询都是一样的，导出、打印是不可见的。导入、打印和查询相对独立，而且为查询添加了新行为。因此可以采用扩展关系来描述： 3、泛化关系1）参与者之间的泛化关系例如，一个网上订购系统，可以有网上客户、电话客户、直接客户等。可以看出，他们有共同的行为特征，这就是可以用到面向对象的抽象，抽象出更为一般的化的参与者——客户。通过泛化来描述多个参与者之间的共同行为，不同的参与者以独特的方式来使用系统。 2）用例与用例之间的关系用例与用例之间也存在着泛化关系，通常用于表示同一业务目的（父用例）的不同技术实现（各个子用例）。例如某购物系统为用户提供不同的支付方式，那么”支付”这个复杂用例就可以用泛化关系表示。 四、包含关系与扩展关系共同点扩展用例与包含用例都是基用例的一部分.基本用例不执行，扩展用例与包含用例都不会执行扩展用例可以扩展多个基本用例，包含用例可以被多个基本用例包含区别：扩展关系中基本用例的基本流执行时，扩展用例不一定执行，即扩展用例只有在基本用例满足某种条件的时候才会执行。包含关系中基本用例的基本流执行时，包含用例一定会执行。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>关系</tag>
        <tag>用例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UML九种图]]></title>
    <url>%2F2017%2F02%2F13%2FUML%E4%B9%9D%E7%A7%8D%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[UML类图符号各种关系说明以及举例[转] 包图及其关系图组件及其关系图用例图中的关系 通常我们选择UML来表现各种视图，以下列出了UML和各视图的对应关系4+1视图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UML场景视图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use case逻辑视图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 类图开发视图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 类图，组件图进程视图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 无完全对应部署视图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 部署图对于逻辑视图和开发视图所应包含的内容常常会觉得很难区分两者间的明显界限。逻辑视图包含更多的分析模型与实现技术本身相关性应该较少，如业务对象模型及其扩展。而开发视图则会与实现技术紧密相关。 一．九种图UML中的图不止九种，甚至相同的图会有不同名称，这里的九种图是被普遍认可的基础图。UML的九种图分别为：用例图、类图、对象图、状态图、构件图、部署图、协作图、交互序列图、活动图。1） 用例图（use casediagrams）：在软工需求分析阶段用来描述用户需求，从用户角度描述系统的功能， 并指出各功能的执行者，强调谁在使用系统，系统完成什么功能。2） 类图（classdiagrams）：定义系统中的类，描述类的内部结构和类与类的关系。主要用于描述系统静态结构。3） 对象图（objectdiagrams）：对象图是类图的一个实例，描述了系统在具体时间点上所包含的对象以及对象之间的关系。4） 组件图（componentdiagrams）：描述代码构件的物理结构以及各构件之间的依赖关系。5） 部署图（deploymentdiagrams）：定义系统中硬件的物理体系结构。6） 状态图（statechartdiagrams）:描述类的对象所有可能的状态以及事件发生时的状态的转移条件。通常为类图的补充。7） 活动图（activitydiagrams）描述用例活动以及活动间的约束关系。8） 序列图（sequencediagrams）描述对象之间的交互顺序，着重体现对象间消息传递的时间顺序。9） 协作图（collaborationdiagrams）：描述对象之间的合作关系，侧重说明对象之间有消息传递。 二．对于九种图的划分方式 三、 UML与软件工程对应关系如果把软件开发比作学校建一座高楼，那么软件工程就是知道我们怎么盖，不至于在构建一座大楼的时候，最后不知不觉变成四不像。而UML图正是对大楼主体架构的设计。软件工程是软件开发设计的灵魂，是我们前进的思想性指导。它使我们的设计有法可依，有章可循。比如我们学校现在盖的大楼，必须要有蓝图来规划哪块哪块盖什么楼，什么类别的都是前期需要用例建模来具体协商的。具体步骤：1.前期的需求分析描述需要用例图，用例图的使用者是学校，了解这栋大楼的主体结构，功能是什么，教学楼还是宿舍。学校最关心的是楼质量问题和安全性，是否能够满足学生的基本使用。2.进一步需要设计楼内部的具体结构，此时就需要类图，对象图，组件图和部署图来制定标准化的结构，详细的描述内部需求和具体设施的安排，为具体施工指明工作点。3.接下来就需要安排具体的人员开工，活动图安排各个工种在自己的岗位工作；状态图安排施工设备的使用情况，表明设备的忙碌和空闲状态；而具体施工步骤需要工程安排每一块的开始，不能先上后下，从基地开始。此外还需要各个施工队的协作，连接性是这个工程的最后标志，各个团队之间必须密切协作才能完成整体的。【详解】 1、需求分析用例图用来建模客户的需求。角色以及系统功能建模是用例建模来画的。它们之间的关系建模被用于角色和用例。每个用例都代表了客户的需求。需求分析不仅适用于软件系统进行而且适用于建筑工程行业。 2、系统分析此阶段是寻找问题 -就是找刺的，需要考虑系统可能遇到的问题是主要的工作。借助于逻辑视图和动态视图实现。系统的静态由类图来建模，系统的动态则是协作图、序列图、活动图和状态图建模。只是列出系列的问题和稍微一点解决思路，不作出详细的解决方案。只是大方向上的做出引导，提纲，具体细节需要下一阶段结合实际分析。 3、系统设计将分析阶段列出的问题进行汇总，根据提纲作出具体、细节办法。进而把分析结果扩展为技术层次的解决依据，不在停留在文字方面，需要依靠用户接口提供技术基础结构。数据库在这个技术基础结构中，分析阶段的领域问题类被嵌入在其中。构造阶段的详细的规格说明是设计阶段的结果。 4、系统实现（构造）把设计阶段的类转换成某种面向对象程序设计语言的代码。只能在构造阶段实现代码的转变，其他阶段不能！在对UML表述的分析和设计模型进行转换时，最好不要直接把模型转化成代码。在早期阶段，模型是理解系统并对系统进行结构化的手段。 5、系统测试根据测试的先后顺序排序：单元测试、集成测试、系统测试和接受测试。不同的测试采用不同的UML图作为工作的基础。类图和类的规格说明是单元测试；组件图和协作图的是集成测试；系统测试实现用例图来确认系统的行为符合这些图中的定义。在系统测试阶段，UML模型还可以作为测试阶段的依据。如单元测试使用类图和类规格说明；集成测试使用组件图和协作图；系统测试用例图来验证系统的行为；验收测试由用户进行，以验证系统测试的结果是否满足在分析阶段确定的需求。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>图</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时序图、活动图、状态图、协作图的区别]]></title>
    <url>%2F2017%2F02%2F13%2F%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B4%BB%E5%8A%A8%E5%9B%BE%E3%80%81%E7%8A%B6%E6%80%81%E5%9B%BE%E3%80%81%E5%8D%8F%E4%BD%9C%E5%9B%BE%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1、时序图时序图用于描述对象之间的传递消息的时间顺序, 即用例中的行为顺序。当执行一个用例时, 时序图中的每条消息对应了一个类操作或者引起转换的触发事件.在 UML 中, 时序图表示为一个二维的关系图, 其中, 纵轴是时间轴, 时间延竖线向下延伸. 横轴代表在协作中各个独立的对象. 当对象存在时, 生命线用一条虚线表示, 消息用从一个对象的生命线到另一个对象的生命线的箭头表示. 箭头以时间的顺序在图中上下排列.时序图中的基本概念 对象: 时序图中对象使用矩形表示, 并且对象名称下有下划线. 将对象置于时序图的顶部说明在交互开始时对象就已经存在了. 如果对象的位置不在顶部, 表示对象是在交互的过程中被创建的. 生命线: 生命线是一条垂直的虚线. 表示时序图中的对象在一段生命周期内存在. 每个对象底部中心的位置都带有生命线. 消息: 两个对象之间的单路通信. 从发送方指向接收方. 在时序图中很少使用返回消息. 激活: 时序图可以描述对象的激活和钝化. 激活表示该对象被占用以完成某个任务. 钝化指对象处于空闲状态, 等待消息. 在 UML 中, 对象激活时将对象的生命线拓宽为矩形来表示的. 矩形称为计划条或控制期. 对象就是在激活条的顶部被激活的. 对象在完成自己的工作后被钝化. 对象的创建和销毁: 在时序图中, 对象的默认位置是在图的顶部. 这说明对象在交互开始之前就已经存在了. 如果对象是在交互过程中创建的, 那么就应该将对象放到中间部分. 如果要撤销一个对象, 在其生命线终止点处放置 “ X” 符号. 2、活动图在 UML 中, 活动图本质上就是流程图. 它用于描述系统的活动, 判定点和分支等.活动图中的基本概念 动作状态: 原子的, 不可中断的动作, 并在此动作完成之后向另一个动作转变. 在 UML 中动作状态用圆角矩形 表示, 动作状态所表示的动作写在圆角矩形内部. 分支与合并: 分支在软件系统中很常见. 一般用于表示对象类所具有的条件行为. 用一个布尔型表达式的真假来判定动作的流向. 条件行为用分支和合并表达.在活动图中, 分支用空心小菱形 表示. 分支包括一个入转换和两个带条件的出转换, 出转换的条件应该是互斥的, 须保证只有一条出转换能够被触发. 合并包含两个带条件的入转换和一个出转换. 3、状态图状态图: 通过建立对象的生存周期模型来描述对象随时间变化的动态行为.状态图中的基本概念 状态: 用圆角矩形表示. 状态名称表示状态的名字, 通常用字符串表示. 一个状态的名称在状态图所在的上下文中应该是唯一的. 转换: 用带箭头的直线表示. 一端连着源状态, 一端连着目标状态. 初始状态: 每个状态图都有一个初始状态. 此状态代表状态图的起始位置. 初始状态只能作为转换的源, 不能作为转换的目标, 并且在状态图中只能有一个. 初始状态用一个实心圆表示. 终止状态: 模型元素的最后状态, 是一个状态图的终止点. 终止状态在一个状态图中可以有多个. 4、协作图协作图(也叫合作图)是一种交互图.时序图主要侧重于对象间消息传递在时间上的先后关系, 而协作图表达对象间的交互过程及对象间的关联关系。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>活动图</tag>
        <tag>时序图</tag>
        <tag>状态图</tag>
        <tag>协作图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多态]]></title>
    <url>%2F2017%2F02%2F13%2F%E5%A4%9A%E6%80%81%2F</url>
    <content type="text"><![CDATA[1、多态的定义所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。 2、多态的例子比如你是一个酒神，对酒情有独钟。某日回家发现桌上有几个杯子里面都装了白酒，从外面看我们是不可能知道这是些什么酒，只有喝了之后才能够猜出来是何种酒。你一喝，这是剑南春、再喝这是五粮液、再喝这是酒鬼酒….在这里我们可以描述成如下： 酒 a = 剑南春 酒 b = 五粮液 酒 c = 酒鬼酒 …这里所表现的的就是多态。剑南春、五粮液、酒鬼酒都是酒的子类，我们只是通过酒这一个父类就能够引用不同的子类，这就是多态——我们只有在运行的时候才会知道引用变量所指向的具体实例对象。诚然，要理解多态我们就必须要明白什么是“向上转型”。在继承中我们简单介绍了向上转型，这里就在啰嗦下：在上面的喝酒例子中，酒（Wine）是父类，剑南春（JNC）、五粮液（WLY）、酒鬼酒（JGJ）是子类。我们定义如下代码： JNC a = new JNC(); 对于这个代码我们非常容易理解无非就是实例化了一个剑南春的对象嘛！但是这样呢？ Wine a = new JNC();在这里我们这样理解，这里定义了一个Wine 类型的a，它指向JNC对象实例。由于JNC是继承与Wine，所以JNC可以自动向上转型为Wine，所以a是可以指向JNC实例对象的。这样做存在一个非常大的好处，在继承中我们知道子类是父类的扩展，它可以提供比父类更加强大的功能，如果我们定义了一个指向子类的父类引用类型，那么它除了能够引用父类的共性外，还可以使用子类强大的功能。但是向上转型存在一些缺憾，那就是它必定会导致一些方法和属性的丢失，而导致我们不能够获取它们。所以父类类型的引用可以调用父类中定义的所有属性和方法，对于只存在与子类中的方法和属性它就望尘莫及了—-1。所以对于多态我们可以总结如下：指向子类的父类引用由于向上转型了，它只能访问父类中拥有的方法和属性，而对于子类中存在而父类中不存在的方法，该引用是不能使用的，尽管是重载该方法。若子类重写了父类中的某些方法，在调用该些方法的时候，必定是使用子类中定义的这些方法（动态连接、动态调用）。对于面向对象而已，多态分为编译时多态和运行时多态。其中编辑时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。 3、多态的实现Java实现多态有三个必要条件：继承、重写、向上转型。 继承：在多态中必须存在有继承关系的子类和父类。 重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。 向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。 只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。 4、基于接口实现的多态继承是通过重写父类的同一方法的几个不同子类来体现的，那么就可就是通过实现接口并覆盖接口中同一方法的几不同的类体现的。在接口的多态中，指向接口的引用必须是指定这实现了该接口的一个类的实例程序，在运行时，根据对象引用的实际类型来执行对应的方法。继承都是单继承，只能为一组相关的类提供一致的服务接口。但是接口可以是多继承多实现，它能够利用一组相关或者不相关的接口进行组合与扩充，能够对外提供一致的服务接口。所以它相对于继承来说有更好的灵活性。 时序图和协作图]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多态</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入浅出的理解框架（Struts2、Hibernate、Spring）与 MVC 设计模式]]></title>
    <url>%2F2017%2F02%2F09%2F%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9A%84%E7%90%86%E8%A7%A3%E6%A1%86%E6%9E%B6%EF%BC%88Struts2%E3%80%81Hibernate%E3%80%81Spring%EF%BC%89%E4%B8%8E%20MVC%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[转自：https://www.zhihu.com/question/30525693/answer/119873899现在许许多多的初学者和程序员，都在趋之若鹜地学习Web开发的宝典级框架：Struts2，Spring，Hibernate。似乎这些框架成为了一个人是否精通Java，是否会写J2EE程序的唯一事实标准和找工作的必备基础。然而，如果在面试的时候问这些程序员，你们为什么要学习这些框架？这些框架的本质到底是什么？似乎很少很少有人能够给我非常满意的答复。因为他们都在为了学习而学习，为了工作而学习，而不是在真正去深入了解一个框架。其实所有的人都应该思考这样的问题：为什么要学习框架？框架到底给我带来了什么？接下来，我们以登录作为一个最简单的例子，来看看不同的年代，我们是怎么写Web程序的。 在很多年前，我们这么写程序的。很多年前，那是一个贫苦的年代，如果我们要使用Java在网页上做一些动态的交互功能。很多人会告诉你一个技术，叫做JSP。在我还对Java非常困惑的时候，就有人告诉我，JSP是个好东西，它可以在HTML代码里面写Java代码来完成逻辑。1234567891011121314&lt;%String name = request.getParameter("name");String password = request.getParameter("password");UserHandler userHandler = new UserHandler();if(userHandler.authenticate(name, password)) &#123;%&gt;&lt;p&gt;恭喜你，登录成功&lt;/p&gt;&lt;%&#125; else &#123;%&gt;&lt;p&gt;对不起，登录失败&lt;/p&gt;&lt;%&#125;%&gt; 作为一张JSP，它可以接收从别的JSP发送过来的登录请求，并进行处理。这样，我们不需要任何额外的配置文件，也不需要任何框架的帮忙，就能完成逻辑。 后来，我们放弃了在页面上写逻辑程序写得越来越多，我们发现，这种在HTML代码中编写Java代码来完成逻辑的方式存在着不少问题: Java代码由于混杂在一个HTML环境中而显得混乱不堪，可读性非常差。JSP文件有时候会变成几十K，甚至上百K。要找一段逻辑，经常无法定位 编写代码时非常困惑，不知道代码到底应该写在哪里，也不知道别人是不是已经曾经实现过类似的功能，到哪里去引用。 突然之间，某个需求发生了变化。于是，每个人蒙头开始全程替换，还要小心翼翼的，生怕把别人的逻辑改了。 逻辑处理程序需要自己来维护生命周期，对于类似数据库事务、日志等众多模块无法统一支持。 在这个时候，如果有一个产品，它能够将页面上的那些Java代码抽取出来，让页面上尽量少出现Java代码，该有多好。于是许多人开始使用servlet来处理那些业务逻辑。1234567891011121314151617181920public class LoginServlet extends HttpServlet &#123;/* (non-Javadoc)* @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)*/@Overrideprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;String message = null;RequestDispatcher dispatcher = req.getRequestDispatcher("/result.jsp");String name = req.getParameter("name");String password = req.getParameter("password");UserHandler userHandler = new UserHandler();if(userHandler.authenticate(name, password)) &#123;message = "恭喜你，登录成功";&#125; else &#123;message = "对不起，登录失败";&#125;req.setAttribute("message", message);dispatcher.forward(req, resp);&#125;&#125; 在这里，我们需要在web.xml中为这个servlet配置url的请求关系。123456789101112&lt;servlet&gt;&lt;servlet-name&gt;Login&lt;/servlet-name&gt;&lt;servlet-class&gt;com.demo2do.servlet.LoginServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;servlet-name&gt;Login&lt;/servlet-name&gt;&lt;url-pattern&gt;/Login&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 代码重构到这里，我们发现，其实我们的工作量本身并没有减少，只是代码从JSP移动到了Servlet，使得整个流程看上去稍微清楚了一些。然而，为了这么点干净，我们付出的代价是什么？为每个servlet都在web.xml里面去做一个url的请求配置！ 再后来，出现框架。时代进一步发展，人们发现简单的JSP和Servlet已经很难满足人们懒惰的要求了。于是，&nbsp;人们开始试图总结一些公用的Java类，来解决Web开发过程中碰到的问题。这时，横空出世了一个框架，叫做struts。它非常先进地实现了MVC模式，成为了广大程序员的福音。struts的代码示例我就不贴了，网上随便搜搜你可以发现一堆一堆的。在一定程度上，struts能够解决web开发中的职责分配问题，使得显示与逻辑分开。不过在很长一段时间内，使用struts的程序员往往无法分别我们到底需要web框架帮我们做什么，我们到底需要它完成点什么功能？ 我们到底要什么？在回顾了我们写代码的历史之后，我们回过头来看看，我们到底要什么？无论是使用JSP，还是使用Struts1，或是Struts2，我们至少都需要一些必须的元素（如果没有这些元素，或许我还真不知道这个程序会写成什么样子）： 数据在这个例子中，就是name和password。他们共同构成了程序的核心载体。事实上，我们往往会有一个User类来封装name和password，这样会使得我们的程序更加OO。无论怎么说，数据会穿插在这个程序的各处，成为程序运行的核心。 页面展示在这个例子中，就是login.jsp。没有这个页面，一切的请求、验证和错误展示也无从谈起。在页面上，我们需要利用HTML，把我们需要展现的数据都呈现出来。同时我们也需要完成一定的页面逻辑，例如，错误展示，分支判断等等。 处理具体业务的场所 在这里，不同阶段，处理具体业务的场所就不太一样。原来用JSP和Servlet，后来用Struts1或者Struts2的Action。 上面的这些必须出现的元素，在不同的年代，被赋予了不同的表现形式，有的受到时代的束缚，其表现形式非常落后，有的已经不再使用。但是拨开这些外在的表现形式，我们就可以发现，这不就是我们已经熟门熟路的MVC嘛？ 数据 —— Model 页面展示 —— View 处理具体业务的场所 —— Control 所以，框架不重要，概念是王道。只要能够深刻理解MVC的概念，框架对你来说，只是一个jar包而已。 MVC的概念其实就那么简单，这些概念其实早已深入我们的内心，而我们所缺乏的是将其本质挖掘出来。我们来看看下面这幅图，这是一副流行了很多年的讲述MVC模型的图：在这幅图中，MVC三个框框各司其职，结构清晰明朗。不过我觉得这幅图忽略了一个问题，就是数据是动的，数据在View和Control层一旦动起来，就会产生许多的问题： 数据从View层传递到Control层，如何使得一个个扁平的字符串，转化成一个个生龙活虎的Java对象。 数据从View层传递到Control层，如何方便的进行数据格式和内容的校验？ 数据从Control层传递到View层，一个个生龙活虎的Java对象，又如何在页面上以各种各样的形式展现出来。 果你试图将数据请求从View层发送到Control层，你如何才能知道你要调用的究竟是哪个类，哪个方法？一个Http的请求，又如何与Control层的Java代码建立起关系来？ 除此之外，Control层似乎也没有想象中的那么简单，因为它作为一个控制器，至少还需要处理以下的问题： 作为调用逻辑处理程序的facade门面，如果逻辑处理程序发生了异常，我们该如何处理？ 对于逻辑处理的结果，我们需要做怎么样的处理才能满足丰富的前台展示需要？ 这一个又一个问题的提出，都基于对MVC的基本概念的挖掘。所以，这些问题都需要我们在写程序的时候去一一解决。说到这里，这篇文章开头所提的问题应该可以有答案了：框架是为了解决一个又一个在Web开发中所遇到的问题而诞生的。不同的框架，都是为了解决不同的问题，但是对于程序员而言，他们只是jar包而已。框架的优缺点的评论，也完全取决于其对问题解决程度和解决方式的优雅性的评论。所以，千万不要为了学习框架而学习框架，而是要为了解决问题而学习框架，这才是一个程序员的正确学习之道。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>框架</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何理解 ssh 三大框架？]]></title>
    <url>%2F2017%2F02%2F09%2F%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%20ssh%20%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[框架的两个作用（例如Spring框架）： 提高程序的可读性和维护性框架的核心思想是按照关注点分离，按照MVC的框架进行分离。 实现了很多公共的组件很多以前需要我们开发的琐碎的，负责的功能，例如日志等功能，框架已经放在jar包中了。 SSH框架一般指的是Struts、Spring、Hibernate，后来Struts2代替了Struts。最近5年，Struts2已经被Spring MVC代替，而Hibernate基本也被iBatis/MyBatis代替。 所以你真正需要了解的是Spring，Spring你需要了解两个概念AOP和IOC，更进一步就是Spring的核心技术“动态代理”。 持久层框架看看Hibernate/iBatis/MyBatis，研究一下Spring的数据库事务管理，各个持久层框架式如何实现ORM的，了解至少一种缓存框架，知道什么是数据库连接池。和数据库的交互最核心的不是ORM，而是掌握和数据库相关的能力，比如数据库编程、SQL优化、对范式的理解。 MVC框架Struts2和Spring MVC，你需要知道他们在web.xml文件里配置了一些什么，Struts2/Spring MVC接到前台请求之后经过哪些步骤之后转到Action/Controller，return之后Struts2/Spring MVC又作了些什么。还有就是Filter、Listener和Struts2/Spring MVC的拦截器各有什么特点，适合处理什么样的问题。 注：Spring是IOC和AOP的容器框架，SpringMVC是基于Spring功能之上添加的Web框架，想用SpringMVC必须先依赖Spring；简单的说：spring framework中的Web部分叫 spring mvc 注：我觉得现在框架就spring,其他都是工具！ Struts只是一个MVC框架（Framework）,用于快速开发Java Web应用。Struts实现的重点在C(Controller)，包括ActionServlet/RequestProcessor和我们定制的Action,也为V(View)提供了一系列定制标签（Custom Tag）。但Struts几乎没有涉及M(Model),所以Struts可以采用JAVA实现的任何形式的商业逻辑。Spring是一个轻型容器(light-weight container)，其核心是Bean工厂(Bean Factory)，用以构造我们所需要的M(Model)。在此基础之上，Spring提供了AOP（Aspect-Oriented Programming, 面向层面的编程）的实现，用它来提供非管理环境下申明方式的事务、安全等服务；对Bean工厂的扩展ApplicationContext更加方便我们实现J2EE的应用；DAO/ORM的实现方便我们进行数据库的开发；Web MVC和Spring Web提供了Java Web应用的框架或与其他流行的Web框架进行集成。就是说可将两者一起使用，达到将两者自身的特点进行互补。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>框架</tag>
        <tag>SSH</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《君主论》读书心得]]></title>
    <url>%2F2017%2F02%2F07%2F%E3%80%8A%E5%90%9B%E4%B8%BB%E8%AE%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[这本书在购书中心买的，在众多版本中，因为这本的纸质特别好，并且其中的插图很不错，所以下手了;-)《君主论》就像是意大利版的厚黑学，作者的主要目的是把本书作为君主镜鉴（类似中国古代的《资治通鉴》），探究君主如果统治和维持自己的国家。“君主必须武装起来，因为有武装的人服从没有武装的人是非常不合理的。”简单的一句话，颠覆了古典政治学中智者统治这一根本原则。这句话，和毛主席说的，枪杆子里出政权是一个道理，侧面说明了军队，或者说实力是一个君主的基础，而仁政并不是，就像三国最终获胜的是魏国而不是蜀国一样。在历史上，总是宣扬德政的君主，但是，作者指出“作为君主，关于道德的确切地位是一个沉重的话题”，俗话说，仁不带兵，义不行贾，所以，对于君主来说，为了维持自己的国家，道德往往居于次要的地位。政治是险恶的，所以一个“想要在一切事情上都发誓许愿以良善自持”的人，终将在恶人环伺中走向灭亡。君主必须学会能够为恶，并依据必然性使用或者不使用这种能力。只要达到目标，总的来说成功者是不应该受责难的。就像作者说的“必须理解：一位君主，尤其是一位新君主，不可能遵守所有那些被认为是良善之人应该拥有的品性；因为为了维持他的国家，迫于必然性，他常常不得不背信弃义、毫无仁慈、不讲人道、违反神道。”关于君主的品性问题，马基雅维利认为，君主最好是既受人爱戴又被人畏惧，但是如果为必然性所迫有所选择的话，还是被畏惧好一些。因为人们是否爱戴君主是自己做主，而他们是否畏惧君主则是君主做主。再说关于人类，一般的可以说：他们是忘恩负义、容易变心的。但是同时，君主还是要避免自己受人憎恨，所以君主必须做到不能剥夺他人的财产，就像作者说的“因为人们忘记父亲之死比忘记遗产的丧失来得还要快”，所以，君主能够仅凭不祸害臣民而非给予他们利益便能赢得他们的忠诚。关于君主守信的问题，作者认为，那些完成了伟大事业的君主们都很少考虑守信，都深谙如果以他们的诡诈把人们搞得晕头转向，并最终征服了那些立足于诚实守信的人们。因此，作为君主必须懂得，世界上有两种斗争方式：一种是运用法律，另一种是运用武力。第一种方式为人类特有，第二种方式则为野兽所持有；但是，因为前者常常有所不足，所以必须求助于后者…君主应当同时效法狐狸与狮子。狐狸能识别陷进，狮子能使财狼惊骇。但是，为了达到更好的治国目的，君主必须深知如何掩饰这种兽性，必须做一个伟大的伪装者和假好人。以上的两点，马基雅维利认为是作为君主最重要的两个品性。同时，作者也提到在治理国家中，面临的各种问题的处理，简要摘录如下： 1、关于军队作者提出，君主应该有他自己的武装力量，不依赖雇佣军或援军…并且君主应当亲自出马，担任统帅之职。如果需要委派将领，通过法律加以制约，并且做到纪律严明、奖惩分明、公正。在作者看来，世上最虚弱、最不牢靠的东西，莫不过于不以自己的力量为基础的关于权力的名望了。所以一位君主除了战争及其规章制度和训练之外，不应该有其他的目标、其他任何的想法，也不应该把其他任何事情作为他的技艺，因为这是发号施令者应当关心的唯一技艺…他永远不要让自己的事项离开军事训练问题，并且在和平时期他应该比在战争时期更加关注。就如：养兵千日，用兵一时。 2、君主处事 能给一个新进崛起的人带来巨大荣誉的，莫过于由他发现的新的法律和新的制度。 当一位新君主上台，他应当感激那些曾经帮助他掌权的人并依赖他们吗？实际上不需要。一位新君主在他的朋友和同盟那里只有“半心半意的拥护者”，因为他们指望从他那里得到好处；正如我们已经看到的，安抚他先前的敌人——那些害怕失去一切的人——其实更好。 只要可能的话，还是不要背离良善之道；但如果为必然性所迫，就要懂得如何走上为非作恶之途。 我们可以得出另外一个值得注意的结论：君主应当把担待责任的事情委诸他人，而把施恩布惠的事情留给自己。 君主需要处理好大人物、人民、士兵的平衡关系。有时候这三者的利益是冲突的。存在两种对立的脾性：渴望不受大人物支配和压迫的人民、渴望支配和压迫人民的大人物。…君主应当与人民结盟反对贵族。（个人注：借由人民的力量来限制、打击贵族）君主需要通过打压大人物来讨得人民欢心。（个人注：有点类似中国现在的反腐的效果。） 当一位君主是真正的朋友或者敌人时，也就是说，他毫不犹豫地公开表示自己支持某个人而反对另一个人，他也会受到尊敬。这种方法总是比保持中立更有用。因为胜利者不需要在逆境中没有援助自己的可疑朋友；失败者也不会庇护你，因为你不愿意拿起武器来分担他的机运。 一位君主必须注意，绝不要为了进攻他人而同某个比自己强大的人结盟，除非如上所说，迫于必然性。 如何面对阿谀奉承：当每个人都能对你讲真话的时候，他们就会缺乏对你的尊敬。因此，一个谨慎的君主必须采取第三种方法：在他的国家里选择一些明智的人，单独让他们享有对他讲真话的自由，但只就那些他询问的事情，而不是其他事情。君主可以开始在一定范围内征求意见，但是必须自己决策，决策之后坚定不移的执行。 尽管一个人应该学着既大胆果敢又小心谨慎，但总体上，还是应该大胆果敢一些。机运之神是一个女人，她“宁愿让果敢的人而不是冷漠行事的人征服”；因此，她是年轻人的朋友。但是果敢与鲁莽往往也只是一线之隔，成功了就是果敢，失败了就是鲁莽。 关于机运：某些机会使这些人走了运，但是是他们卓越的德能使他们能够洞察到这种机会（机会只会垂青那些有准备的人）…并且能够察微知著的人只是少数人，所谓的识时务者为俊杰，难就难在识时务、洞察时势，例如诸葛亮在隆中就洞察到三分天下的大局。所以在机运之外，德能才是更为关键的，因为上帝并不包办一切，这样就不至于把我们的自由意志和属于我们的那部分荣耀夺去。 文章摘录 政府的分类取决于获取的方式，而不是像柏拉图和亚里士多德设想的那样，取决于政府的目的或者结构。 任何人的祖国都是由一次原始的占有和征服来界定，因此也总是可以做同样的重新界定。 佛罗伦萨马基雅维利的墓志铭：如此伟人无以铭之（to so great a name no praise in equal）。 词语：僭 jiàn： 超越本分，古代指地位在下的冒用在上的名义或礼仪、器物：僭越。僭妄。僭伪（封建王朝称割据对立的王朝）。僭盗。以邻为壑 hè：拿邻国当做大水坑，把本国的洪水排泄到那里去。比喻只图自己一方的利益，把困难或祸害转嫁给别人。《孟子·告子下》：“是故禹以四海为壑。今吾子以邻国为壑。”未雨绸缪：chóu móu 绸缪：紧密缠缚。天还没有下雨，先把门窗绑牢。比喻事先做好准备工作。覆巢之下，安有完卵 上有所好，下必甚（更厉害）焉 在和平时期大胆果敢的人不能取得成功，在暴乱时期小心谨慎的人不能取得成功。 深刻认识人民性质的人应该是君主，而深刻认识君主的人应该属于人民。 对人们要么加以安抚，要么加以剪除；因为他们可以报复收到的轻微的伤害，却无力报复收到的沉重的侵害；所以，对一个人的侵害应当时无需害怕他实施报复的那种伤害。（个人注：避免走中间路线）。 罗马人在他们夺得的那些地区，很好的遵循了这些策略：他们派遣移民，安抚弱国但不让其势力增长，镇压强大的势力，不让强大的外国势力在那里赢得声誉。 在患病之初，是治疗容易而诊断困难；但随着时间的流逝…它就会变成诊断容易而治疗困难了。 大自然创造了人类，使其能够欲求每个事物，却不能得到每个事物，如此一来，由于欲求总是大于获取的能力，结果就是对现在所拥有的不满意。（个人注：有多大的头戴多大的帽） 人们绝对不应当为了避免一场战争而听任混乱继续，因为那非但不能避免战争，反而只能拖延战争而对你不利。（个人注：战略不能让位于战术） 我们可以得出一条永远没错或者罕有错误的一般性规律：谁是促使他人强大的原因，谁就是自取灭亡。 如果那些被征服的国家，如前所说，习惯于生活在他们自己的法律之下、生活在自由之中，那么想要保有这种国家有三种方式：其一是毁灭它们，其二是亲自前往生活在那里，其三是允许他们生活在自己的法律之下，要求他们进贡并在那里建立一个对你友好的寡头国家。 人们几乎总是走在他人走过的道路上，效法他人的行动，尽管并不能完全沿着别人的道路或者或得你所效法的那些人的德能；然而，一个审慎的人总是应该追随伟大人物的足迹，效法那些最卓越的人，因此，即使他自己的德能到不到那样的程度，但至少有几分相像。（个人注：站在巨人的肩膀上。） 摩西是《旧约》中希伯来的先知和主法者，居鲁士是波斯帝国的奠基人，罗穆卢斯（Romulus）是传说中罗马的奠基人和第一位国王，提修斯是传说中雅典的国王和雅典国家的奠基人。 发现新的方式和制度总是与寻找未知的水源和土地一样危险。（个人注:变更的阻力）。 如果他们依靠自己并且能够使用武力，那么他们就罕有危险。由此观之，所有武装的先知都获得了胜利，而没有武装的先知都毁灭了。 人民的天性是容易变化的（个人注：见风使舵是人民的本性）。 这些人完全依赖他人给予他们一个国家的意愿和机运，而这两者都是变化无常、极不稳定的。（个人注：靠山山会倒，靠人人会跑） 任何人如果相信给予新的恩惠会使大人物忘却往日的损害，他就是自欺欺人。 如何使用残酷：“妥善的使用”是指，出于维护自身安全的必然性，一次性地使用残酷手段；其后，除非为臣民谋取更大可能的利益，绝不继续使用；“恶劣的使用”是指，尽管一开始很少使用残酷手段，但其后与日俱增，而非日渐减少。 所有的损害必须一下干完，所以，他们感受的越少，积怨就会越少；而恩惠应该点滴赐予，以便他们能够更好的品尝承恩受惠的滋味。（降低预期） 对于那些完全依赖你机运的人，主要不是贪得无厌，你就应该赐予名誉并加以宠爱。 人们如果从原来他们相信要受到他损害的那个人那里得到好处的话，他们一定会更加感激他们的施惠者。 当远离死亡之境的时候，每个人都准备为他赴死（个人补充：但面对死亡的时候，个个都做鸟兽散） 既要让他的臣民产生祸患不会长久的希望，也要让他们对敌人的残酷赶到恐惧。 这位教皇（西克斯图斯四世）在向世人展示了一个教皇究竟能肆意妄为到何种程度方面可谓前无古人。 &nbsp;转注：西方领导科学认为领导力的形成依赖三大要素：一曰恐惧，二曰利益，三曰信仰。恐惧迫使人们服从，利益引导人们服从，信仰则产生发自内心的服从。 后来亚历山大六世继位，在历代教皇中，他最充分地说明了一位教皇可以利用金钱与武力使自己的气焰达到何等程度之盛。 “创造亚当”是米开朗琪罗创作的西斯廷教堂天顶画“创世纪”的一部分。 人们进行判断，一般依靠他们的眼睛甚于他们的双手，因为每个人都能看到你，却很少有人能接触到你。 这里有伟大的正义：“对于那些迫不得已进行战争的人来说，战争是正义的；当除了拿起武器之外就毫无希望的时候，武器是神圣的”。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>君主</tag>
        <tag>马基雅维利</tag>
        <tag>古罗马</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大卫和歌利亚的战斗]]></title>
    <url>%2F2017%2F02%2F06%2F%E5%A4%A7%E5%8D%AB%E5%92%8C%E6%AD%8C%E5%88%A9%E4%BA%9A%E7%9A%84%E6%88%98%E6%96%97%2F</url>
    <content type="text"><![CDATA[扫罗和以色列人犹大的梭哥迎战非利士人。歌利亚（巨人）连续四十天，每天两次向以色列人讨战，进行一对一的决斗，来决定战役的胜负。扫罗和全体以色列人都极其害怕。年轻的大卫为跟随扫罗出征的三个哥哥送饭，听见歌利亚的骂阵，和扫罗允诺的重金赏赐，无所畏惧，要击败歌利亚。大卫拒绝了扫罗提供的战衣，手中拿杖和甩石的机弦，和从溪中挑选的五块光滑的石子；和歌利亚对阵，歌利亚头戴铜盔，身穿铠甲。“那非利士人就指着自己的神咒诅大卫。” 大卫回答说：“今日耶和华必将你交在我手里；我必杀你，取下你的头。我又要将非利士军兵的尸首给空中的飞鸟、地上的野兽吃。全地就必知道以色列中有神；聚集在这里的众人也必知道耶和华施行拯救，不是用刀用枪，因为争战的胜败于耶和华。祂必将你们交在我们手里。 ”大卫用机弦将石子击中歌利亚的额，歌利亚就仆倒，面伏于地。大卫将歌利亚的刀从鞘中拔出来，用刀割了他的头，将他杀死。非利士人逃避以色列人的追赶，“直到迦特和以革伦”。大卫将歌利亚的军装放在他自己的帐棚里，却将他的头拿到耶路撒冷。扫罗问元帅押尼珥，是谁的儿子迎战那非利士人。押尼珥领大卫到扫罗面前，扫罗问大卫是谁的儿子，“大卫说，我是你仆人伯利恒人耶西的儿子”。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>大卫</tag>
        <tag>歌利亚</tag>
        <tag>巨人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[斯巴达]]></title>
    <url>%2F2017%2F02%2F06%2F%E6%96%AF%E5%B7%B4%E8%BE%BE%2F</url>
    <content type="text"><![CDATA[斯巴达（希腊语：Σπάρτη），又称拉刻代蒙（古希腊语：Λακεδαίμων, Lakedaímōn）是古代希腊城邦之一，斯巴达城位于中拉哥尼亚平原的南部，埃夫罗塔斯河的西岸。斯巴达城是个战略要冲，三面环山，扼守着塔伊耶托斯山脉，塔伊耶托斯山脉上的隘口是进入拉科尼亚和南部伯罗奔尼撒半岛的必经之路，斯巴达城并不靠海，离她的海港吉雄有27英里的距离。斯巴达以其名。斯巴达是寡头政治，和当时雅典的民主制度形成鲜明对比。斯巴达规定所有男人必须从军。斯巴达拥有众多国有奴隶，称为黑劳士，因此“斯巴达式”也成为艰苦地进行的代名词。在伯罗奔尼撒战争中，斯巴达及其同盟者战胜雅典军队并霸权整个希腊。但斯巴达在称霸希腊不久后便被新兴的底比斯打败，在北方的马其顿崛起后，斯巴达失去了在希腊的影响力。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>斯巴达</tag>
        <tag>希腊</tag>
        <tag>从军</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个唱红脸一个唱白脸]]></title>
    <url>%2F2017%2F02%2F06%2F%E4%B8%80%E4%B8%AA%E5%94%B1%E7%BA%A2%E8%84%B8%E4%B8%80%E4%B8%AA%E5%94%B1%E7%99%BD%E8%84%B8%2F</url>
    <content type="text"><![CDATA[在中国传统戏剧中，一般把忠臣（好人）扮成红脸，而把奸臣或者坏人扮成白脸。 后来人们就用红脸代表好人，用白脸代表坏人。但是，更多的时候，是表示在做一件事情的时候，有的说好话、有的说坏话，“红脸”、“白脸”一起戏弄或欺骗当事人，这种情况被说成：“有唱红脸的，有唱白脸的”。 来自京剧脸谱，红脸——正直的象征。白脸——奸邪的象征。一个唱红脸一个唱白脸（有的说好话、有的说坏话），就是两人合作，一个做坏人，一个做好人，目的是让做好人的那个得人心，指一个是正面，一个是反面。红脸：红脸代表好人，说好话，正直的形象。白脸：白脸代表坏人，说坏话，反面角色，奸邪的形象]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>红脸</tag>
        <tag>白脸</tag>
        <tag>京剧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谢赫？哈里发？埃米尔？苏丹？ 阿拉伯君主称谓有什么不同？]]></title>
    <url>%2F2017%2F02%2F06%2F%E8%B0%A2%E8%B5%AB%EF%BC%9F%E5%93%88%E9%87%8C%E5%8F%91%EF%BC%9F%E5%9F%83%E7%B1%B3%E5%B0%94%EF%BC%9F%E8%8B%8F%E4%B8%B9%EF%BC%9F%20%E9%98%BF%E6%8B%89%E4%BC%AF%E5%90%9B%E4%B8%BB%E7%A7%B0%E8%B0%93%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[网上看到了一篇讲阿拉伯君主称号的文章，原文虽短也有很多未讲明白的地方，但我觉得格外有意思。于是网上对这几个关键词一顿猛搜，并结合自己的理解，整理了这样一篇比较通俗的文字。文中内容大多也不是自己的学识，纯属泊来，大家看看就好，如有说不对的也莫责怪到我头上。对这个文化知识有兴趣的就看下去，没兴趣的也不要勉强，大家猎个奇而已。 1、谢赫(Sheikh)xiehe我先挑这个迪拜人应该最熟悉的词儿讲——谢赫(Sheikh)。大名鼎鼎的迪拜现任酋长叫啥——谢赫默罕默德。我之前曾一度以为“谢赫”就是迪拜酋长名字的一部分，后来才知道谢赫其实是一种称谓，迪拜现任酋长的真名叫穆罕默德·本·拉希德，“谢赫”是前缀称号，意为“酋长”。所以阿联酋七个酋长国，每一个酋长国都有一个在任的谢赫，所以这个称谓在阿联酋可不是随便谁都能被这么叫的，一旦叫上，那就是在任酋长或历史上当过酋长的人。虽然迪拜的谢赫非常有名，但谢赫一词真的不仅仅代表他一个人。 其实“谢赫”是阿拉伯语中的一个常见尊称，意思很多，比如“伊斯兰教教长”啊，“部落长老”啊，甚至还有“智慧的男子”的意思。在海湾地区，谢赫指的是部落的首领。而在一些南亚国家和东南亚国家，谢赫往往还是阿拉伯后裔男子的称号，当然这和前者的地位意义就完全不同了。 历史上呢，“谢赫”这个称谓，往往被用作较小部落的首领，大部落的领袖往往被叫做“埃米尔”，这个后面我们会讲到。所以阿联酋虽然是一个国家，但其实是由七个力量有限，不足以独立成国的小城邦所构成的，这七个城邦分属七个不同的部族，他们本来都没有独立建国的力量，所以他们抱团组成了联合政府。 因此“谢赫”这个称谓，虽然在我们老百姓看来已经很牛了，是皇室里的老大呀，但仅从字面意思，它在我今天要介绍的四个称谓里，算是地位最小的一个，估计也就阿联酋还在用了。这是因为阿联酋的七个酋长国各自是没有独立主权的，每一个酋长国依然还是小城邦，是联邦的加盟国，因此还沿用“谢赫”，也就是“部落的酋长”这个称谓。 2、哈里发（Khalifah）哈里发这个词儿其实迪拜人也有所耳闻吧。如今世界上最高的建筑，名字好像就叫哈利法塔嘛。再了解深一点的人，这个阿布扎比的谢赫（活学前文知识），就是资助迪拜度过金融危机的那个人，他的名字就叫哈利法嘛。可是此“哈利法”不是彼“哈里发”噢，意义可是差老远呢。无论是迪拜的“哈利法塔”还是阿布扎比的酋长“哈利法”，英文都译为“Khalifa”，而本文要说明的“哈里发”，英文译为“Khalifah”，末尾就差了一个“h”而已。细心的读者一定也发现了，就算是中文翻译，这两个名字也一定要是不同的。这是因为“哈利法Khalifa”其实就是一个名字而已，而“哈里发Khalifah”可是一个相当神圣的称谓。甚至逊尼派和什叶派为什么有分歧，都和这个“哈里发”有关。 哈里发 (Khalifah) 字面意义上，代表了伊斯兰政治及宗教领袖的称谓。原意为“代治者”、“代理人”或“继承者”。伊斯兰教第一人，大先知穆罕默德，即被认为是安拉在大地上的代理人、代治者。在穆罕默德去世后，“哈里发”被用于指称穆罕默德的继承人，即穆斯林社群组织的最高领袖。换个说法，正统哈里发在阿拉伯世界的权力，相当于东方所谓的“皇帝”和西方所谓的“教皇”加起来那么大，政治和宗教一把抓，权力极大。光从字面上理解，是本文介绍的四个称谓里地位最高的。 可惜啊，除了最早的四位正统哈里发，后来出的很多自封的哈里发，其内涵已经大不如前了，甚至还有同一时代出现了多个哈里发，一些哈里发还沦为了他人的政治傀儡和统治工具。虽然都叫哈里发，但其实已经没有什么实质权力了。然后哈里发制度在1924年被土耳其共和国下令废除。 现在这个哈里发的含义，其实更多地在于精神层面，意味“伊斯兰世界最高精神领袖”，但这个位置一直是空置的，因为举目伊斯兰世界，没有一个领袖是世界上所有穆斯林们一致认同的。你不服我，我不服你，谁上都不合适。有趣的是，就在2014年6月29日，最近到处在惹事的恐怖组织“伊斯兰国（ISIS）”领袖阿布·贝克尔·巴格达迪自立为哈里发，当然大部分穆斯林都不承认啦。 3、埃米尔(Emir)aimier埃米尔(Emir)的阿拉伯语原意为“统帅”、“长官”或 “总督”。现在也意为某些君主世袭制国家元首的称谓。总之其意义比较笼统和广泛。就连突厥在历史上亦曾使用过这个封号。 现在还有一些地区领袖沿用这个称谓，中东比较熟悉的国家如科威特和卡塔尔，他们的领袖依然自称为“埃米尔”。另外约旦和巴林的领袖也曾用过“埃米尔”，直至1950年和2002年才前后改称为“国王”。 我看了些资料，我个人理解早期这个“埃米尔”的称谓，有点类似于中国的“诸侯”或“军阀”。是被哈里发册封和封地的地方领导，算是属臣。但随着阿拉伯帝国的内乱，各地埃米尔与哈里发之间的从属关系逐渐疏离，最后不少地方的埃米尔只是象征性地承认哈里发的统治权，埃米尔往往取得地区的独立的军政大权，并逐渐成为当地的君王。 这些埃米尔们有点像三国时期曹操干的事儿，挟天子以令诸侯，表面上还是你的臣子，其实天子早就拿这些诸侯没办法了，到最后诸侯们索性一脚踹掉天子，自立为王了，只是埃米尔们当了大王后还依然沿用这个称谓。 从字面上看，酋长国（Emirates）与埃米尔(Emir)这两个单词应该同出自一样的词根，但是这两个代表的意思是不同的。前者的字面意义是指那些“权力有限的分封国家”，而后者指的是“管事之人”。在伊斯兰教之前的阿拉伯历史上，埃米尔确实也曾经作为酋长被使用过，但是那个时期也仅仅局限于一些大部族。那些大部族的领袖，被叫做“埃米尔”。而那些小部落的酋长，则叫做“谢赫”。在阿拉伯语的外交辞令中，对“谢赫”和对“埃米尔”使用的是两套完全不一样的外交辞令，一旦混用就可能会引发麻烦和抗议。 科威特在奥斯曼时期就是一个半独立的自治省，当时的科威特首脑就被叫做埃米尔。而卡塔尔则在1961年宣布了彻底的独立，建立了独立国家，这两个国家都是独立行使权力的埃米尔国。 4、苏丹（Sultan）这里所指的称谓“苏丹”（Sultan）与北非阿拉伯国家苏丹（Sudan）其实没有什么关系。它和前文提到的埃米尔倒有点类似，在伊斯兰教历史上指的是一个类似总督的官职，阿拉伯语意为抽象的“力量”和“权威”，后来演变为权力和统治。最后，它变为一个统治者的特殊称号，且不同地方的苏丹称呼也有所不同，叫法很是复杂。反正苏丹后来就基本等同于君王了。被苏丹统治的地方，无论是王朝还是国家都可以被称为“苏丹国”。 苏丹不会自称是哈里发，与埃米尔有些不同，苏丹不会表示他受到哈里发的统治，就算有也对外表示没有从属关系。被苏丹统治的地方，一般都对外号称拥有独立主权或完全主权。另外苏丹主要出现在中亚和西亚地区的苏丹，埃米尔更多的出现在北非和中东地区。 历史上最有名的苏丹是奥斯曼土耳其帝国的苏丹。他们同时身兼了哈里发的职位，是政教合一的领袖。土耳其的继承制度和其他穆斯林国家不同，他们不分封王子到各地镇守，而是集中在国都，新苏丹登基之后往往杀死自己的兄弟们，以免遭到挑战。虽然很残忍，但这也使得土耳其避免了像历史上其他穆斯林国家，如塞尔柱苏丹国一样，因为王子们争夺权力而互相攻杀，导致国家分裂衰败。 目前世界上只剩下四个国家还拥有苏丹这个称谓，如阿曼，文莱，印尼的部分地区和马来西亚的部分州。迪拜人非常熟悉的阿曼，其实全称就叫阿曼苏丹国（Sultanate of Oman），阿曼只是简称罢了。沙特阿拉伯过去也是苏丹国，但于1932年，沙特阿拉伯将国家元首称谓从苏丹改为国王。好了，总算讲完谢赫、哈里发、埃米尔和苏丹这几个君王称谓的区别了，擦擦汗…… 话说这篇涨知识的文章会对我们的生活产生什么样的影响呢？]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>哈里发</tag>
        <tag>苏丹</tag>
        <tag>称谓</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《当下的力量》读书心得]]></title>
    <url>%2F2017%2F02%2F04%2F%E3%80%8A%E5%BD%93%E4%B8%8B%E7%9A%84%E5%8A%9B%E9%87%8F%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一本灵修方面的书，主体思想有点像佛教。告诉人们通过活在当下，来避免痛苦和恐惧。这本书好的地方是在阐述的同时，间或插进一些提问进行回答，这些问题往往是读者在读书过程中也会碰到或者想到的问题。概括这本书来说，就是阐述了以下三点：1、活在当下！关于时间，作者认为，时间是过去的痛苦、未来的恐惧之载体。接纳当下，活在当下，就是忘记过去的不幸，摒弃对未来的恐惧，从时间中跳出来，摆脱时间的束缚。就像作者说的，时刻提醒自己，注意，此时此地。注意，此时此地！2、停止思维！思维和对应体现出来的情绪是一个小我，但是我们真正的本体是意识。在作者观念中，思维是有罪的，所以要把这两者分离，让意识占主导地位，而不是受思维的控制。3、知足常乐！喜悦是你内在宁静状态的关键部分，我们要学会接受万物无常的本质，只有这样才能找到宁静。下面是具体各章节的摘录。 一、痛苦的来源活在当下：人无远虑必有近忧，活在当下只能是一种心态，摒弃过去的痛苦，放下对未来的恐惧，针对当下做理性的长远的思考。作者认为，我们身上又两个我：‘我’和‘自己’。其中总只有一个是真实的。我们的大脑就是其中的一个小我，大脑通过思维来控制这我们，而另外一个我就是我们的本体，是我们的意思，是观察者。这两者需要分离，需要我们控制大脑的思考、控制情绪，回归到我们的本体。小我是一个虚假的自我，它是我们无意识地认同于思维而产生的。对于小我来说，当下的时刻几乎不存在，只有过去和外来才是最重要的。思维只是意识的一小部分。创造性的突破来自于无念状态。（灵感就是在思维停止的那一刻获取力量。）情绪在思维和身体的相遇处产生，它是身体对思维的反应。现在人们看书往往是想从书中找到成功的钥匙而不是真理，这就是舍本逐末。欢乐总是衍生于你之外的事物，而喜悦是由内而生的。佛陀说，人类的痛苦源于欲望或贪婪，如果你要摆脱痛苦，你就必须摆脱欲望。求不得是痛苦的根源！ 二、摆脱痛苦的途径知足常乐，把你的生活重心完全放到当下这一刻。接纳，然后才去行动。不管当下时刻的情况怎样，心甘情愿的接受它，就像它是你的选择一样。有能力改变能改变的，有勇气接受不能改变的，有智慧区分两者。恐惧其实和任何具体的、真正迫在眉睫的危险无关。心理上的恐惧总是源于“可能会发生的事件”，而非“当下正在发生的事件”。 三、深深地进入当下时间造就了过去和未来，而过去是痛苦的源泉、未来是恐惧的依赖。从思维中去除时间，思维就会停止。当下才真正的珍贵，它是唯一真正存在的东西。有些人喜欢参加冒险性的活动，如爬山、赛车等，原因是这些活动迫使他们进入当下时刻，在这些高度紧张的时刻里，他们能从时间、从问题、从思维中解放出来。苦难只有在时间中才能存在，在当下他无法存活。把意识（本土）激发出来，作为观察者，导师般的存在。俗话说，当局者迷旁观者清，思维情绪就是当局者，而临在就是旁观者了。当你的脑子里充满问题时，新的事物或问题的解决方案就无法进入你的大脑。船到桥头自然直，所以，当下只需要考虑当下能处理的问题，问题转化成你当下需要处理的事情，而不是背负问题的压力，问题其实是事情而已。在真正的紧急情况下，思维停止了，你完全临在与当下，被一种更为有利的东西接管了。这就是许多普通人突然能够做出令人难以置信的事的原因。集中在做事的过程而不是结果。当你的注意力转下当下的那一刻，你会感觉到临在，宁静而平和。身体形式有生有死，但是你意识到了处于该形式之下的永恒的东西。人生意义、目的：心灵的平静、愉悦，这些完全可以通过精神层面获得，而不是寄托于物质。例如颜回，一箪食，一瓢饮，在陋巷。人不堪其忧，回也不改其乐 四、思维逃避当下的策略衡量你意识水平的最好指标是：你如何应付生活中的挑战。其实也就是情绪管理，停止思维，活在当下，就相当于管理、控制了自己的情绪。当你在抱怨时，你就使自己变成了一个受害者。由深刻观察而采取行动比消极心态引发的行动更为有效。树立目标，享受过程，而不是老想着达到目标。直面现在的问题，然后行动。问问你自己，你此刻有什么问题，而不是明年、明天或5分钟后，而是现在这一刻，你有什么问题？你可以应付当下发生的事，但是你却无法应付未来还没有发生的事情——也没有这个必要。在应付当下发生的事情时，你需要的答案、力量、正确的行动或者资源都会在那里，不是在现在之前或之后。 五、临在状态本体、意识和生命是同义词。意识是上帝的本质通过生命形式的显现。当意识从身体和心理形式的认同中解放出来时，它就变成了我们所谓的纯意识或受过精神启蒙的意识。当然，永恒不是指无止境的时间，而是指无时间。因此，耶稣成了救世主，一个纯意识的工具。 六、内在身体被称为身体的这个密集的物质结构，受限于生、老、病、死，但这不是最终的真理——这不是真正的你。这是对你本质的误解，你的本质是超越生和死的。就像太阳永远比烛光光明一样，本体中的智慧远比你的大脑来得丰富。通过消除负面情绪来阻断它们对你能量场的破坏。 七、进入未显化状态的大门八、开悟的爱情关系真正的拯救就是了解到，你是那个滋生万物的无时间、无形式的至一生命的不可分割的而一部分。人是宇宙全体的一部分，就像某一个细胞在身体中的地位一样。只是说后来这个细胞有了独立意识。爱情最伟大的催化剂就是完全接受你伴侣的一切，而不是去批判或以任何方式改变他或她。你不是与黑暗作战，而是将光亮带进黑暗之中。不是对幻像做出反应，而是在发现幻像的同事洞察它。跟一个开悟的人相处并不容易。跟开悟的伴侣在一起，为开悟的那一方的思维会深深受挫，因为没有东西来抵抗它们，也就是说它们会变得脆弱，并且还有全部瓦解的风险，从而导致了小我的丧失。 九、超越幸福和不幸生长通常被看成是积极的，但是没有东西会永远生长。如果任何形式的生长不断向前发展，最终都会变成怪物或变得具有毁灭性。有衰退才会有新的成长。生长与衰老两者相互依赖。对于灵性开悟来说，向下的周期是绝对关键的。你必须遭受一定深度的痛苦或损失才能被灵性世界吸引。起伏是常态，失败是成功之母。喜悦是你内在宁静状态的关键部分。学会了接受万物无常的本质，因为找到了宁静。鸭子也教过我重要的心灵课程，你会发现他们是何等宁静，何等安逸，何等完全地进入当下时刻。他们是如此的完美，这只有无思维的生物才能做到。 十、臣服的意义在臣服的状态中，你会清楚地看到你需要做什么，然后才去行动，一次只做一件事，一次将注意力集中在一件事上。东方武术中深藏的智慧：因势利导，以柔克刚 文章摘录 ABC理论，A是引发你情绪的事件，B是你的信念或你对事情的诠释，C就是结果，即你的负面情绪…B是你唯一可以完全航空和改变的因素。 佛陀将开悟简单定义为“受苦的终结（the end of suffering)” 笛卡尔：我思故我在。I think, therefore I am。 顿悟（satori)这个词描述短暂的开悟或短暂的无思维、完全临在的状态。 你是否倾听过，真正地倾听过森林中的山泉的声音？或者你是否真正地倾听过在寂静的夏夜鸟儿的歌唱？当你的思维宁静时，你才会关注到这些。 教学相长 字句本身并不是真理，它们只是指向真理…蜂蜜这个词并不是蜂蜜，除非你尝试过蜂蜜，你才会知道它的味道。在你尝过它之后，蜂蜜这个词就变得对你不再重要了。（个人注：字句变成了沟通、交流的工具而已） 惊鸿一瞥（piē）：鸿，即鸿雁，也叫大雁。惊鸿：轻捷飞起的鸿雁。“惊鸿”一词多形容女性轻盈如雁之身姿，惊鸿一瞥意思是人只是匆匆看了一眼，却给人留下极深的印象。 马克思说过，宗教是人民的精神鸦片。 个人注：哲学就是教会人们如何去面对生死及对未来的恐惧。 色即是空，空即是色。色：指一切有形的物质。 即使天空乌云密布，太阳也不会消失，它仍然在云层的另一边。 耶稣说：去爱你的敌人！]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>灵修</tag>
        <tag>活在当下</tag>
        <tag>修行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《基于全生命周期的主数据管理MDM详解与实践》读书心得]]></title>
    <url>%2F2017%2F01%2F20%2F%E3%80%8A%E5%9F%BA%E4%BA%8E%E5%85%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E4%B8%BB%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86MDM%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一本纯粹堆积概念的书，没什么干货，就不具体写心得了。下面简单的就主数据进行一些整理。 1、产生的背景其实主数据因为是IT系统在发展过程当中，缺乏整体的规划（包括业务和技术），导致各部门自产自销，只关心本部门本系统的数据，导致各系统中重用的关键的基础信息编码及口径都不一致。 2、处理流程所以目前主数据管理首先要做的是各源系统的主数据合并和清理问题。主要的流程是“合并-&gt;清洗-&gt;审核-&gt;分发”；然后在实际运行过程当中，对新增、变更的部分进行管理，其中新增和变更可以在各个源系统维护，然后提交到MDM系统审核、分发，也可以在MDM系统统一维护，然后分发。 3、分发技术分发可以采用同步WebService接口，也可以采用JMS消息的异步机制。 4、特殊说明有一些主数据，例如组织架构，虽然是主数据，但是变化频率还是很高。针对组织架构、项目的架构（期区、单位工程、楼栋）经常发生变化的情况，关键是业务数据必须绑定到原子层面上，如果在原子层面上没有变化，那么业务数据不需要重新绑定。但是，如果原子层面都发生了变化，那就需要调整了。如果原子层面的变化，前后是有映射关系，也可以通过系统来处理。下面是SAP针对组织架构数据的单独分类。 数据类型的定义：企业应用中较为通用的数据划分方式，是将数据定义为三种类型：系统数据 system data、主数据 master data、业务数据 biz data。而SAP在其系统上，将组织机构的数据(Organization data)分离出来，做为一个较为独立的概念，是不无道理的。而业务数据，也提出业务主数据的概念，进行中也区别对待。系统数据系统数据是指用于系统自身正常运行所需要的数据，缺少这部分的数据、或者这部分数据的不完整都将造成系统不能运行、或运行不正常，并且这部分数据在开发的最初阶段就被基本确定下来，在以后的阶段中基本不会变化。（R/3中定义为 System data:It is the data which R/3 system needs for itself.）最为常见的就是系统的配置文件（例如系统菜单结构的数据，一般认为流程的配置也属于系统数据），对于Java、dotNet平台，通常倾向于使用的xml数据做为系统数据。系统数据与业务在逻辑上，没有必然的关联性，是完全分离的。在很多业务系统中，容易混淆的是将人员数据、权限数据，还有所谓的“代码数据”（如：亲友的类型配置），认为是系统数据。组织机构数据组织机构数据，从字面上就可以完全理解了。它是指业务系统中，组织机构的配置的数据；它是在系统配置阶段，同时由客户进行定义而进入系统的，进入系统后，这部分数据就很少发生改变。( It is a customizing data which is entered in the system when the system is configured and is then rarely changed. )从系统数据中划分出组织机构数据，有非常重要的意义。组织机构从本源上来说，同时具有主数据和系统数据的性质。但是组织机构数据有别于一般的主数据之处在于，“极少变化”组织机构数据，一旦发生变化（特别是层次关系的变化），对于整个系统中的业务关系，业务角色的指责分配，就会产生相应的变化。其变动的影响范围的大小，因一个系统的规模的大小，即系统应用到的业务范围的大小（是单独的物料系统，还是有关联的MIS，还是业务更紧密的ERP），的不同而不同。其中常见的影响较大的，将会是人员、角色、权限、流程的数据，而反映到系统业务层。在当前很多系统中流程与核心业务的掺杂的模式，还有权限与核心业务胶浊的情况下，这种影响都将是毁灭性的。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>主数据</tag>
        <tag>MDM</tag>
        <tag>组织机构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一组图详解元数据、主数据与参考数据]]></title>
    <url>%2F2017%2F01%2F20%2F%E4%B8%80%E7%BB%84%E5%9B%BE%E8%AF%A6%E8%A7%A3%E5%85%83%E6%95%B0%E6%8D%AE%E3%80%81%E4%B8%BB%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%8F%82%E8%80%83%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[转自 一组图详解元数据、主数据与参考数据 在数据资产管理领域，有着许多相似的概念和词汇。譬如说“数据管理”和“数据治理”，像孪生兄弟一样让人纠结不已。上周，与一个朋友聊起元数据、主数据和参考数据的关系是什么。这个话题我们足足聊了二十分钟。这三个概念我在一开始做数据管理相关工作的时候也纠结了挺久，于是我根据聊起来的内容稍稍总结了一下，就有了这篇文章，希望能给读者减少些许疑惑。 1、假设场景我们的假设场景先是这样的，现在正在为中国地理协会设计一个中国地理信息系统（当然真实的地理信息系统不会是这样，都说只是假设一下）。我现在正设计到“地市”这个对象。常说“千言万语不及一图”，这三者的关系咱们先上图。 2、元数据—数据的数据元数据（meta-data）是描述企业数据的相关数据，指在IT系统建设过程中所产生的有关数据定义，目标定义，转换规则等相关的关键数据，包括对数据的业务、结构、定义、存储、安全等各方面对数据的描述。例如在假设场景中，我们设计了地市表的数据模型（如上图红色框里面表示），地市表这个实体的数据模型如何进行定义正是元数据所关心的范畴。元数据可以说是企业的数据地图，它直接反映了企业中有什么样的数据，数据是如何存放的，例如，数据结构是什么样子，数据与业务之间的关系是怎么样，数据与数据之间的关系是怎么样，数据有什么样的安全需求，数据有什么样的存储需求。针对元数据的管理，对于传统企业数据而言是非常重要的一项管理挑战。因为传统企业技术和管理观念上有所缺失，从而导致了许多问题。因此，我们在进行许多传统企业数据治理或者数据管理项目，也就是元数据管理方面时，常常会先从数据模型梳理着手。 3、主数据—企业黄金数据记录主数据（main data）主要是指经实例化的企业关键数据。还是回到我们的假设场景，我们在上面设计完成数据模型设计的“城市表”中填写了相应的城市数据，例如，北京、上海、广州、南宁等等。这些在城市表中填充的数据，正是组织中国地理协会的主数据，因为这些数据是中国地理协会这个组织的关键业务实体，它为组织的业务开展提供关联环境，而且它可能在企业业务开展过程中被反复引用。针对这些核心关键数据，组织和企业无论从数据的质量、一致性、可用性、管理规范等方面都应该有着最严格的数据要求。那么一般而言，以下涉及企业经营的人、财、物的数据最有可能纳入企业主数据管理的范畴，例如 企业产品及其相关信息：包括企业相关产品、服务、版本、价格、标准操作等等 企业财务信息：包括业务、预算、利润、合同、财务科目等等 企业相关利益相关者：如客户、供应商、合作伙伴、竞争对手等 企业组织架构：如员工、部门等 可见，主数据就是企业被不同运营场合反复引用关键的状态数据，它需要在企业范围内保持高度一致。它可以随着企业的经营活动而改变，例如，客户的增加，组织架构的调整，产品下线等；但是，主数据的变化频率应该是较低的。所以，企业运营过程产生过程数据，如生产过程产生各种如订购记录、消费记录等，一般不会纳入主数据的范围。当然，在不同行业，不同企业对主数据有不同的看法和做法，正如我们与国内大型航空企业的实施相关数据项目时，也在为航班动态是不是主数据而纠结不已。因此，有鉴于主数据对于企业的重要性，企业和组织需要对其主数据进行有效的管理：包括理解主数据应用需求，识别主数据来源及源头，梳理主数据上下游关系，数据整合和发布，提升主数据的数据质量等。 4、参考数据—数据的字典在本文引用的假设案例中，我们将会注意到刚才填写的地市这类数据有些列，如省份、城市类型等。如果没有缺少上下文的环境，我们是无法理解其具体含义，这时候我们往往引入参考数据（reference data）加以解释和理解，如下图红色标注所示。参考数据是增加数据可读性、可维护性以及后续应用的重要数据。例如，你看到“性别”的这个字段，很可能是1代表男性、2代表女性。在许多企业中有这样的约定俗成，而更多的参考数据可能记录在开发人员和运营人员的大脑当中。但问题是一旦这些人离开，您系统里面的数据就成了一堆没有注释的天书。大家可能觉得，这所谓参考数据不就是数据字典吗？对，我们在很多系统里面都会有这样和那样的数据字典。但是正是由于这些数据字典局仅限于个别系统而没有统一标准，从一个侧面间接造就了大量的数据孤岛。企业为了进行更有效率的数据整合、数据共享和数据分析应用，开始尝试对参考数据进行企业或者部门层面的整合和管理，利用参考数据集记录系统尝试为范围内的IT系统中的数据库提供统一的参考数据。 5、小结主数据则是真实的企业业务数据，是企业的关键业务数据。参考数据则是对数据的解释，针对一些数据范围和取值的数据解释，让人们容易读取相关的数据。元数据是对数据的描述，用于描述企业数据的所有信息和数据，如结构、关系、安全需求等，除增加数据可读性外，也是后续数据管理的基础。一般而言，企业中这三类数据与其它数据的数据量、质量需求，更新频率、数据生命周期的关系大致如下图：]]></content>
  </entry>
  <entry>
    <title><![CDATA[元数据]]></title>
    <url>%2F2017%2F01%2F19%2F%E5%85%83%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[MetaData意思是元数据，也称之为数据的数据。数据的数据？一个数据存储在共享卷里时，我们可以直接看到它是一个文档、或图片、或视频、或数据库文件，这些都是数据本身。然而在存储该数据时，文件系统还会产生很多无法直接看到的，与该数据有关的数据，如文件系统中文件检索表，路径信息、地址信息等，而这些数据就称之为文档、图片、视频等在共享卷中的元数据。SAN网络存储共享软件管理的主要内容就是元数据，控制元数据在多主机之间的传输。我们可以在很多地方看到元数据的存储，网上DOWN下来的电影本身一个视频文件数据，而点击右键查到看的视频文件属性，如存储路径、码率、文件大小、及导演、演员、制作单位等就是视频文件的元数据。在地理空间信息中用于描述地理数据集的内容、质量、表示方式、空间参考、管理方式以及数据集的其他特征，它是实 现地理空间信息共享的核心标准之一。 1、什么是元数据？元数据（Meta Date），关于数据的数据或者叫做用来描述数据的数据或者叫做信息的信息。这些定义都很是抽象，我们可以把元数据简单的理解成，最小的数据单位。元数据可以为数据说明其元素或属性（名称、大小、数据类型、等），或其结构（长度、字段、数据列），或其相关数据（位于何处、如何联系、拥有者）。举几个简单的例子：使用过数码相机的同学都应该知道，每张数码照片都会存在一个EXIF信息。它就是一种用来描述数码图片的元数据。根据EXIF标准，这些元数据包括：Image Description(图像描述、来源. 指生成图像的工具 )、Artist(作者)、Make( 生产者)、Model (型号)、….、等等。(数码图片本身是一个数据文件，这些EXIF就是它的元数据)生活中我们填写的《个人信息登记表》，包括姓名、性别、民族、政治面貌、一寸照片、学历、职称等等这些就是锁定kent.zhu这个人的元数据。通常情况下元数据可以分为以下三类：固有性元数据、管理性元数据、描述性元数据。 固有性元数据；与事物构成有关的元数据。 管理性元数据；与事物处理方式有关的元数据。 描述性元数据；与事物本质有关的元数据。 当然，并不是说所数据总能清晰的划分在以上3类中。比如：一张由kent拍摄的大小为20K的JPG格式的印着一只小狗的圣诞卡照片。它的固有性元数据包括：20K、JPG；管理性元数据：kent拍摄、圣诞卡；描述性元数据：狗、小狗、圣诞、照片、圣诞节、…但是，圣诞卡则可以放在以上任何一个分类中。与事物构成有关（说明这个东东是什么）、与事物处理方式有关（说明这个东东的用途是什么）、与事物本质有关（可以直接用来描述这个东东）。 2、元数据之于信息架构的意义元数据是一种很有效的方法，用以确保网站上各种形式的内容确实都能被查找到。比如我们常常为搜索很久之前看到的一张美女图片犯愁，而如果一个图片网站如果信息架构足够好，我们就能凭借我们回忆到的元数据（关于武藤兰的？2000年拍摄的？）清晰的找到。元数据之于信息架构就像是房子的砖瓦，它可以根据需要摆放成不同的信息检索系统。元数据是所有组织系统的基础，从搜索到电子商务网站上的导航系统都强烈的依赖于元数据。前面提到，元数据实际上是为产品的可查找性（Findability）服务的。而用户在查找信息的时候不会按照机器思维去找（不会输入该照片的ID），而是直接输入关于信息的描述性信息如：“小狗 圣诞卡”。也就意味着在创建关于描述性元数据的时候要尽量的提取出任官关于这个对象所讲述的故事，这些才是人们能记住的和习惯搜索的细节。我们会发现，机械生成的元数据常常是不靠谱的，如在UCH系统下发布日志的时候系统会自动根据标题进行机械分析生成的一些元数据。而充分利用手工元数据（handcrafted metadate）是提高可查找性的一个好方法。最常见的例子就是我们见到的Tag。Tag就是一种用户自创的元数据，其特点是无层次结构、自定义。比如这张Flickr照片下的手工元数据就为在Flickr上查找提供了更多的方便。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>元数据</tag>
        <tag>MetaData</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生产成本、库存商品、主营业务成本的关系]]></title>
    <url>%2F2017%2F01%2F18%2F%E7%94%9F%E4%BA%A7%E6%88%90%E6%9C%AC%E3%80%81%E5%BA%93%E5%AD%98%E5%95%86%E5%93%81%E3%80%81%E4%B8%BB%E8%90%A5%E4%B8%9A%E5%8A%A1%E6%88%90%E6%9C%AC%E7%9A%84%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[1、生产过程借：生产成本(成本类科目-5001)贷：原材料(资产类科目-1403) 2、生产完成借：库存商品(资产类科目-1405)贷：生产成本(成本类科目-5001) 3、销售（一般纳税人）借：现金/银行存款/应收账款贷：主营业务收入应交税费-增值税-销项税额 4、结转成本借：主营业务成本（损益类科目-6401）贷：库存商品(资产类科目-1405) 5、一级会计科目表 最新会计科目表及详细解释 2015 6、会计要素与会计科目对比 7、问题Q：会计科目生产成本期末有余额，余额转到那个科目？A1:1）“生产成本”科目期末有余额，表示在产品的成本，不需要结转。留在账户中作为下一会计期间的期初余额，继续加工完成。2）解释：a、《企业会计准则——应用指南》附录设置了5001号生产成本科目。属于成本类科目。该科目核算企业进行工业性生产发生的各项生产成本，包括生产各种产品（产成品、自制半成品等）、自制设备等。b、该科目借方反映所发生的各项生产费用，贷方反映完工转出的产品成本，本期加工的产品尚未全部完工，就会有余额，所以期末借方余额反映尚未加工完成的各项在产品的成本。c、由于生产成本账户的期末借方余额表示在产品成本，其金额在资产负债表中应列入“存货”项目反映。 A2:账本上的如有余额不用结转，只是期末将金额填入在到资产负债表中的“存货”资产负债表期末“存货”=原材料+周转材料+库存商品+发出商品+生产成本-存货跌价准备的贷方余额-商品进销差价贷方余额-材料成本差异的贷方余额（+材料成本差异的借方余额）]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>财务</tag>
        <tag>成本</tag>
        <tag>会计科目</tag>
        <tag>会计要素</tag>
        <tag>库存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《大型网站技术架构--核心原理与案例分析》读书心得]]></title>
    <url>%2F2017%2F01%2F12%2F%E3%80%8A%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84--%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一、大型网站架构演化初始阶段的网站架构（单台服务器）-&gt; 应用服务器和数据服务分离（数据库和文件服务器都单独成一个服务器） -&gt; 使用缓存改善网站性能（本地缓存、分布式缓存） -&gt; 使用应用服务器集群改善网站的并发处理能力 -&gt; 数据库读写分离 -&gt; 使用反向代理（网站中心机房）和CDN（网络运营商那里）加速网站响应（缓存静态、热点内容）-&gt;使用分布式文件系统和分布式数据库系统（更常用的是业务分库） -&gt;使用NoSQL和搜索引擎 -&gt; 业务拆分 -&gt;分布式服务 二、大型网站架构模式1、分层软件在横向方面进行切分 2、分割软件在纵向方面进行分割。业务拆分：大型网站为了应对日益复杂的业务场景，通过使用分而治之的手段将整个网站业务分成不同的产品线，分归不同的业务团队负责。具体到技术上，也会根据产品线划分，将一个网站拆分成许多不同的应用，每个应用独立部署。应用之间可以通过一个超链接建立关系，也可以通过消息队列进行数据分发，当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统。 3、分布式分层和分割的一个主要目的就是为了切分后的模块便于分布式部署，即将不同模块部署在不同的服务器上，通过远程调用协同工作。1） 分布式应用和服务将分层和分割后的应用和服务模块分布式部署。2）分布式静态资源3）分布式数据和存储4）分布式计算Haddoop的MapReduce分布式计算框架。 4、集群5、缓存1）CDN：Content Distribute Network，内容分发网络。2）反向代理3）本地缓存使用缓存的前提：一是数据访问热点不均衡；二是数据在某个时间段内有效，不会很快过期。4）分布式缓存网站数据库几乎都是按照有缓存的前提进行负载能力设计的，所以缓存的可用性至关重要。避免缓存雪崩这种故障 6、异步在分布式系统中，多个服务器集群通过分布式消息队列实现异步，分布式消息队列可以看做内存队列的分布式部署。异步架构的典型是生产者消费者模式，两者不存在直接调用，只要保持数据结构不变，彼此功能实现可以随意变化而不受影响。特性：提高系统可用性；加快网站响应速度；消除并发访问高峰。 7、冗余冗余包括冷备份、热备份、灾备数据中心，另外其实集群也简介实现了应用的冗余。 8、自动化发布过程自动化：自动化代码管理、自动化测试、自动化安全检查、自动化部署。自动化监控：自动化报警、自动化失效转移、自动化失效恢复、自动化降级、自动化分配资源。 9、安全通过密码和手机校验码进行身份验证；Https对网络通讯进行加密；对存储的敏感数据加密（例如用户密码）；对敏感信息、垃圾信息进行过滤；对交易转账等重要操作进行风险控制。 三、大型网站核心架构要素架构：最高层次的规划，难以改变的决定。这些规划和决定奠定了事物未来发展的方向和最终的蓝图。软件架构：有关软件整体结构和组件的抽象描述，用于指导大型软件系统各个方面的设计。性能、可用性、伸缩性、扩展性、安全是网站架构最核心的五个要素。 1、性能衡量性能的指标：响应时间、TPS、系统性能计数器等。性能优化的方法： 浏览器端：可以通过浏览器缓存、页面压缩、合理布局页面、较少Cookie传输等手段优化；CDN、反向代理服务器等缓存热点文件； 应用服务器端：本地缓存、分布式缓存；异步操作；集群等； 代码层面：通过多线程、内存管理等手段优化； 数据库服务器端：索引、缓存、SQL优化等。而NoSQL通过优化数据模型、存储结构、伸缩性等更有优势。 2、可用性网站高可用的主要手段是冗余，所以衡量一个系统架构设计是否满足高可用的目标，就是假设系统中任何一台或多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用。 3、伸缩性所谓伸缩性是指通过不断向集群中加入服务器的手段来缓解不断上升的用户并发访问压力和不断增长的数据存储需求。 4、扩展性网站的扩展性架构直接关注网站的功能性需求，快速响应需求变化。核心是不同产品之间要解耦。网站可扩展架构的主要手段是事件驱动架构（主要实现是消息队列）和分布式服务（业务和可复用服务分离开，通过分布式服务框架调用）。 5、安全性四、瞬时响应：网站的高性能架构1、性能测试网站性能测试的主要指标：响应时间、并发数、吞吐量、性能计数器等。性能测试是一个总称，具体可以细分为：性能测试、负载测试、压力测试、稳定性测试性能测试：以系统初期规划的性能指标为预期目标，对系统不断施加压力，验证系统在资源可接受范围内，是否能达到性能预期。稳定性测试：被测试系统在特定硬件、软件、网络环境下，给系统加载一定业务压力，是系统运行一段较长时间，以此检测系统是否稳定。 2、性能优化1）性能分析 检查日志：检查请求处理的各个环节的额日志，分析哪个环节响应时间不合理、超过预期； 检查监控数据：检查监控数据，分析影响性能的主要要素是内存、磁盘、网络还是CPU，是代码问题还是架构设计不合理，或者系统资源确实不足。 2）性能优化（1） Web前端性能优化浏览器访问优化 减少http请求：http是无状态的应用层协议，减少http请求数目可有效提高访问性能。可以通过合并CSS、合并JavaScript、合并图片来减少http请求。 使用浏览器缓存：将CSS、JavaScript、Logo、图标这些更新频率较低的静态资源缓存在浏览器中，可以极好的改善性能。为了及时更新，可以修改该文件名字，然后在更新HTML中的引用。 启用压缩：会对服务器和浏览器产生一定的压力。 CSS放在页面最上面、JavaScript放在页面最下面：CSS放上面，方便页面渲染的时候，CSS能提前下载，JavaScript要看是否影响页面的解析情况而定。 减少Cookie传输：太大的Cookie会影响数据传输。 CDN加速CDN本质仍然是一个缓存，而且将数据缓存在离用户最近的地方。所以CDN是部署在网络运营商的机房。CDN一般缓存一些静态资源：图片、文件、CSS、Script脚本、静态网页等。 反向代理 （2）应用服务器性能优化分布式缓存&nbsp;网站优化第一定律：优先考虑使用缓存优化性能。缓存主要存放那些读写比很高、变化很少的数据。一般第缓存设置时效时间，但会导致一定时间的数据不一致。缓存本质是一个内存Hash表，网站应用中，数据缓存以一对Key、Value的形式存储在内存Hash表中。Hash表的数据读写时间复杂度是O(1)。Hash表是软件开发中常用的一种数据结构，期设计思想在很多场景下都可以应用。分布式缓存案例1—JBoss Cache：通常将应用程序和缓存部署在同一台服务器上，并且分布的缓存之间同步更新。分布式缓存案例2—Memcached：优点是分布缓存之间互不通信（结合一致性Hash算法），使用简单的通信协议（TCP或UDP）和通信序列化协议（XML或JSON）。内存管理采用LRU算法。 异步操作使用消息队列将调用异步化。消息队列服务器处理速度远快于数据库，并且比数据库有更好的伸缩性。&nbsp;高并发时，任何可以晚点做的事情都应该晚点再做！ 使用集群 代码优化 多线程：充分利用CPU在磁盘IO或网络IO堵塞时候的效率。 资源复用：包括单例（Singleton）和对象池（Object Pool），例如数据库的连接池、Web请求的线程池（Thread Pool）; 数据结构：采用Hash表。字符串Hash散列算法有Time33算法。 垃圾回收： 存储性能优化 机械硬盘 VS. 固态硬盘 B+树 VS. LSM树：数据的索引存储结构；关系型数据库主要使用B+树，NoSQL采用LSM树。 RAID VS. HDFS：RAID技术在传统关系型数据库及文件系统中使用比较广发，但在大型网站采用的NoSQL及分布式文件系统中，相当于间接实现了RAID的相关功能。HDFS以块（Block）为单位管理文件内容，默认是64M（操作系统默认是512字节）。 五、万无一失：网站的高可用架构1、网站可用性度量与考核1) 网站不可访问原因DNS会被劫持、CDN服务器可能会挂掉、网站服务器可能会宕机、网络交换机可能会失效、硬盘会损坏、网卡会松掉、甚至机房会停电、空调会失灵、程序会有BUG、黑客会攻击、促销会引来大量访问、第三方合作伙伴的服务会不可用…… 2)网站可用量度量4个9 99.99%可用 一年大约最多53分钟不可用；3个9 99.9%可用 一年大约最多9个小时不可用；2个9 99%可用 一年大约最多88个小时不可用； 3)网站可用性考核可用性指标对外是承诺，对内是考核。 2、高可用的网站架构主要手段是数据和服务的冗余备份及失效转移。 3、高可用的应用 通过负载均衡进行无状态服务的失效转移 应用服务器集群的Session管理Web应用中将这些多次请求修改使用的上下文对象称作为会话（Session）有Session复制、Session绑定（通过Hash算法）、利用Cookie记录Session、Session服务器（实际上是将应用服务器的状态分离）。 4、高可用的服务可服用的服务模块为业务产品提供基础公共服务。高可用的服务策略： 分级管理 超时设置 异步调用 服务降级 幂等性设计必须在服务层保证服务重复调用和调用一次的结果相同，即服务具有幂等性。有些服务天然具有幂等性，例如将性别设置为男，不管设置多少次，结果都一样。但是对于转账交易等操作，问题就比较复杂，需要通过交易编号信息进行服务调用有效性校验，只有有效的操作才能继续进行。 5、高可用的数据CAP原理，数据的一致性可以分为如下几点： 数据强一致 数据用户一致：在各个副本可能不一样，但是终端用户访问时，通过纠错和校验机制，可以确定一个一致且正确的数据返回给用户。 数据最终一致：系统经过一段时间（通常是一个比较短的是时间段）的自我恢复和修正，数据最终会达到一致。 数据备份：数据异步热备（就是通常所说的Master-Slave同步机制、读写分离） 失效转移：如果存储不对等，那么就需要重新计算路由，选择存储服务器。 6、高可用网站的软件质量保证1）代码控制分支开发、主干发布：目前在开源技术社区，Git作为版本控制工具，正逐步取代SVN的地位。2）预发布验证预发布服务器是一种特殊用途的服务器，它和线上的正式服务器唯一的不同就是没有配置在负载均衡服务器上，外部用户无法访问。单预发布验证操作的是真实的数据，可能会出现不可预测的问题。3）灰度发布每天只发布一部分服务器，观察运行稳定没有故障，再逐步发布完毕。这种手段也被称为AB测试 7、网站运行监控&nbsp;不允许没有监控的系统上线，运维没有监控的网站，犹如驾驶没有仪表的飞机。 1）监控数据采集1） 用户行为日志收集 服务器端日志收集 客户端浏览器日志收集2）服务器性能监控3）运行数据报告 2）监控管理 系统报警 失效转移 自动优雅降级 六、永无止境：网站的伸缩性架构1、网站架构的伸缩性设计网站的伸缩性设计可分为两类，一类是根据功能进行物理分离实现伸缩，一类是单一功能通过集群实现伸缩。前者是不同的服务器部署不同的服务，提供不同的功能；后者是集群内的多台服务器部署相同的服务，提供相同的功能。 1）不同功能进行物理分离实现伸缩纵向分离（分层后分离）横向分离（业务分割后分离） 2）单一功能通过集群规模实现伸缩&nbsp;当一头牛拉不动的时候，不要去寻找一头更强壮的牛，而是用两头牛来拉。 2、应用服务器集群的伸缩性设计 HTTP重定向负载均衡 DNS域名解析负载均衡：许多DNS支持基于地理位置的域名解析，可将域名解析成距离用户地理最近的一个服务器地址。但因为DNS是多级解析，变化生效的时间较长。 反向代理负载均衡 IP负载均衡：在网络层通过修改请求目标地址进行负载均衡。 数据链路层负载均衡：在通信协议的数据链路层修改mac地址进行负载均衡。也称直接路由方式（DR）。集群素有服务器虚拟IP地址都和负载均衡服务器的IP相同。在Linux平台上最好的链路层负载均衡开源产品是LVS（Linux Virtual Server） 负载均衡算法：轮询、加权轮询、随机、最少连接、源地址散列。 3、分布式缓存集群的伸缩性设计Memcached分布式缓存集群。&nbsp;计算机的任何问题都可以通过增加一个虚拟层来解决。计算机网络的7层协议，每一层协议都可以看做是下一层协议的虚拟层；计算机操作系统可以看做是计算机硬件的虚拟层；Java虚拟机可以看做是操作系统的虚拟层；分层的计算机软甲架构事实上也是利用虚拟层的概念。 4、数据存储服务器集群的伸缩性设计缓存+读写分离+业务分库 1） 关系数据库集群的伸缩性设计除了数据库主从读写分离，前面提到的业务分割模式也可以用在数据库，不同业务数据表部署在不同的数据库集群上，即俗称的数据分库。这种方式的制约条件是跨库的表不能进行Join操作。数据分片：将一张表拆分分别存储到多个数据库中。主要的工具有Amoeba和Cobar。 2）NoSQL数据库的伸缩性设计NoSQL放弃了关系数据库的两大重要基础：以关系代数为基础的结构化查询语言（SQL）和事务一致性保证（ACID）。而强化其它一些大型网站更关注的特性：高可用和可伸缩性。主要的产品有Apache HBase。 七、随需应变：网站的可扩展架构减低软件系统耦合性是最关键的思考方式。&nbsp;软件架构师最大的价值不在于掌握了多少先进技术，而在于具有将一个大系统分成N个低耦合的子模块的能力，这些子模块包含横向的业务模块，也包含纵向的基础技术模块。这种能力一部分原子专业的技术和经验，还有一部分原子架构师对业务场景的理解、对人性的把握、甚至对世界的认知。模块分布式部署以后具体聚合方式主要有分布式消息队列和分布式服务。 1、利用分布式消息队列降低系统耦合性事件驱动架构：通过在低耦合的模块之间传输时间消息，以保持模块的松散耦合，并借助时间消息的通信完成模块间的合作。生产者消费者模式，分布式消息队列等。开源的分布式消息队列产品有Apache ActiveMQ 2、利用分布式服务打造可服用的业务平台纵向拆分相对比较简单，通过梳理业务，将较少相关的业务剥离，使其成为独立的Web应用。而对于横向拆分，不但需要识别可复用的业务，设计服务接口，规范服务依赖关系，还需要一个完善的分布式服务管理框架。 1）Web Service与企业级分布式服务Web Service 用以整合易购系统及构建分布式系统，通过SOAP（Simple Object Access Protocol，简单对象访问协议）和服务提供者通信，使用相关的服务。 2）分布式服务框架设计目前国内的开源分布服务框架是阿里巴巴的Dubbo 3、可扩展的数据结构NoSQL的ColumnFamily（列族） 八、固若金汤：网站的安全架构网站安全主要包括各种Web攻击和信息泄露（被黑客拖库）。 全球大约70%的Web应用攻击都来自XSS攻击和SQL注入攻击。 Referer Check：HTTP请求头的Referer域中记录着请求来源，可以通过检查来源，验证其是否合法。很多网站使用这个功能实现图片防盗链（如果图片访问的页面不是来自自己的网页就拒绝） Web应用防火墙： ModSecurity 信息加密：单向散列加密（MD5、SHA）、对称加密（DES、RC算法）、非对称加密（RSA算法） 信息过滤和反垃圾：文本匹配、分类算法（贝叶斯分类算法）黑名单 电子商务风险控制：规则引擎、统计模型统计模型：目前主要使用，根据历史交易中的欺诈交易信息训练分类算法，然后将经过采集加工后的交易信息输入分类算法，及可得到交易风险分值。由于统计模型采用模糊识别，并不精确匹配欺诈类型规则，因为对新出现的交易欺诈有一定的预测性。 九、案例分析秒杀系统架构图为了保证系统的安全，保持适度的公平公正即可。即使系统出了故障，也不应该给用户显示出错页面，而是显示秒杀活动结束页面，避免不必要的困扰。 十、典型故障案例分析软件设计有两种风格，一种是将软件设计得很复杂，以使其缺陷没有那么明显；一种是将软件设计得很简单，以使其没有明显的缺陷。 写日志也会引发故障：硬盘空间的问题 高并发访问数据库引发的故障：使用率高的查询数据进行缓存 高并发情况下锁引发的故障：使用锁要谨慎； 缓存引发故障：对缓存的管理要严格 应用启动不同步引发故障：后台服务都要准备好，前台应用才能启动。 大文件读写独占磁盘引发的故障：按照不同文件类型和用途进行管理和存放。 滥用生产环境引发的故障：访问线上生产环境要规范。 不规范流程引发的故障：代发提交前要用Diff命令进行代码比较（Code review） 不好饿编程习惯引发的故障：对Null进行检查。 文章摘录 我们永远无法想传统行业一样，去精确估算，并按预先精确设计好的图纸去完成我们的产品。 传统的企业应用系统主要面对的技术挑战是处理复杂凌乱、千变万化的所谓业务逻辑，而大型网站主要面对的技术挑战是处理超大量的而用户访问和海量的数据处理；前者的挑战来自功能性需求，后者的挑战来自非功能性的需求。 过渡承诺 NoSQL 和搜索引擎都是源自互联网的技术手段，对可伸缩的分布式特性具有更好的支持。应用服务器通过一个统一数据访问模块访问各种数据，减轻应用程序管理诸多数据源的麻烦。 LAMP技术：Linux+Apache+MySQL+PHP。 是业务成就了技术，是事业成就了人，而不会相反。 不能企图用技术解决所有问题，有时候需要从业务优化的角度来考虑。业务退后一小步，技术前进一大步。 模式：“每一个模式描述了一个我们周围不断重复发生的问题及该问题解决方案的核心。这样，你就能一次又一次地使用该方案而不比做重复工作。”模式的关键在于模式的可重复性，问题与场景的可重复性带来解决方案的可重复使用。 产品设计之初就需要一个明确的定位：什么是产品要实现的功能，什么不是产品提供的特征。在漫长的生命周期中，会有形形色色的困难和诱惑来改变产品的发展方向，左右摇摆、什么都想做的产品，最后有可能成为一个失去生命力的四不像。个人注：人生也是一样，对自己必须有正确的定位，有所为，有所不为。 通信要考虑两方面，一是通信协议，是选择TCP还是UDP，抑或Http；二是通信序列化协议，数据传输的两段，必须使用彼此可识别的数据序列化方式才能是通信得以完成，例如XML、JSON等文本序列化协议。类比：不同国家的人通信，意思要选择某种语言（例如英语），二是要选择载体，是通过电话（音频），还是书信（文本），还是视频（视频）等。 Lucence:由Apache出品，Java开发的开源全文搜索引擎。 一定要坚信：一群优秀的人做一件他们热爱的事，一定能取得成功。 寻找一个值得共同奋斗的目标，营造一个让大家都能最大限度发挥自我价值的工作氛围。 大多数人，都比自己以为的更优秀，有些优秀需要在合适的环境中才能被激发出来，比如做一些有挑战的事，和更优秀的人合作，抑或拥有了超越自我的勇气。 蓝图应该写在软件架构设计文档的扉页、写在邮件的签名档，写在内部即时通信的公告上。 对于技术细节的争论应该立即验证而不是继续讨论。 要想成就自己，就必须首先成就他人。 “鱼是最后一个看见水的”，天天面对这些问题，反而不觉得有什么问题。 对于大多数应用来说，开源的MySQL数据库已经绰绰有余了，而我们还在使用昂贵的Oracle。 如何提出问题： 把“我的问题”表述成“我们的问题” 给上司提封闭式问题，给下属提开放式问题； 指出问题而不是批评人； 用赞同的方式提出问题：我非常赞同你的方案，不过我有一个小小的建议……]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>高性能</tag>
        <tag>高可用</tag>
        <tag>易伸缩</tag>
        <tag>可扩展</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hash算法-time33]]></title>
    <url>%2F2017%2F01%2F12%2FHash%E7%AE%97%E6%B3%95-time33%2F</url>
    <content type="text"><![CDATA[散列表的应用 涉及到数据查找比对，首先考虑到使用HashSet。HashSet最大的好处就是实现查找时间复杂度为O（1）。使用HashSet需要解决一个重要问题：冲突问题。对比研究了网上一些字符串哈希函数，发现几乎所有的流行的HashMap都采用了DJB Hash Function，俗称“Times33”算法。Times33的算法很简单，就是对字符串逐字符迭代乘以33，见下面算法原型:hash(i)=33*hash(i-1)+str[i]12345678uint32_t time33(char const *str, int len) &#123; unsigned long hash = 0; for (int i = 0; i &lt; len; i++) &#123; hash = hash *33 + (unsigned long) str[i]; &#125; return hash; &#125; 把乘法操作换成位操作(Java版)12345678910public String time33(String skey) &#123; if (skey == null) return null; int hash = 5381; for (int i = 0, len = skey.length(); i &lt; len; ++i) &#123; int cc = skey.charAt(i); hash += (hash &lt;&lt; 5) + cc; &#125; hash &amp;= 0x7fffffff; return String.valueOf(hash); &#125; Time33在效率和随机性两方面上俱佳。对于一个Hash函数，评价其优劣的标准应为随机性，即对任意一组标本，进入Hash表每一个单元（cell）之概率的平均程度，因为这个概率越平均，数据在表中的分布就越平均，表的空间利用率就越高。 为什么初始值是5381？5381（001 010 100 000 101），据说hash后的分布更好一些。 如何实现乘除运算和位运算之间的转化： a&lt;&gt;n 在数值上等同于 a/2^n比如 a*33 (33=2^5+1)用位运算可以写成 ((a&lt;&lt;5)+a) 其它倍数Ngix使用的是 time31Tokyo Cabinet使用的是 time37Bob在他的文章说，小写英文词汇适合33, 大小写混合使用65。time33比较适合的是英文词汇的hash.]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Hash</tag>
        <tag>time33</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏捷开发之Scrum扫盲篇]]></title>
    <url>%2F2017%2F01%2F12%2F%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B9%8BScrum%E6%89%AB%E7%9B%B2%E7%AF%87%2F</url>
    <content type="text"><![CDATA[现在敏捷开发是越来越火了，人人都在谈敏捷，人人都在学习Scrum和XP…为了不落后他人，于是我也开始学习Scrum，今天主要是对我最近阅读的相关资料，根据自己的理解，用自己的话来讲述Scrum中的各个环节，主要目的有两个，一个是进行知识的总结，另外一个是觉得网上很多学习资料的讲述方式让初学者不太容易理解；所以我决定写一篇扫盲性的博文，同时试着也与园内的朋友一起分享交流一下，希望对初学者有帮助。 一、什么是敏捷开发？敏捷开发(Agile Development)是一种以人为核心、迭代、循序渐进的开发方法。怎么理解呢？首先，我们要理解它不是一门技术，它是一种开发方法，也就是一种软件开发的流程，它会指导我们用规定的环节去一步一步完成项目的开发；而这种开发方式的主要驱动核心是人；它采用的是迭代式开发；为什么说是以人为核心？我们大部分人都学过瀑布开发模型，它是以文档为驱动的，为什么呢？因为在瀑布的整个开发过程中，要写大量的文档，把需求文档写出来后，开发人员都是根据文档进行开发的，一切以文档为依据；而敏捷开发它只写有必要的文档，或尽量少写文档，敏捷开发注重的是人与人之间，面对面的交流，所以它强调以人为核心。什么是迭代？迭代是指把一个复杂且开发周期很长的开发任务，分解为很多小周期可完成的任务，这样的一个周期就是一次迭代的过程；同时每一次迭代都可以生产或开发出一个可以交付的软件产品。 二、关于Scrum和XP前面说了敏捷它是一种指导思想或开发方式，但是它没有明确告诉我们到底采用什么样的流程进行开发，而Scrum和XP就是敏捷开发的具体方式了，你可以采用Scrum方式也可以采用XP方式；Scrum和XP的区别是，Scrum偏重于过程，XP则偏重于实践，但是实际中，两者是结合一起应用的，这里我主要讲Scrum。 三、什么是Scrum？Scrum的英文意思是橄榄球运动的一个专业术语，表示“争球”的动作；把一个开发流程的名字取名为Scrum，我想你一定能想象出你的开发团队在开发一个项目时，大家像打橄榄球一样迅速、富有战斗激情、人人你争我抢地完成它，你一定会感到非常兴奋的。而Scrum就是这样的一个开发流程，运用该流程，你就能看到你团队高效的工作。【Scrum开发流程中的三大角色】 产品负责人（Product Owner）主要负责确定产品的功能和达到要求的标准，指定软件的发布日期和交付的内容，同时有权力接受或拒绝开发团队的工作成果。 流程管理员（Scrum Master）主要负责整个Scrum流程在项目中的顺利实施和进行，以及清除挡在客户和开发工作之间的沟通障碍，使得客户可以直接驱动开发。 开发团队（Scrum Team）主要负责软件产品在Scrum规定流程下进行开发工作，人数控制在5~10人左右，每个成员可能负责不同的技术方面，但要求每成员必须要有很强的自我管理能力，同时具有一定的表达能力；成员可以采用任何工作方式，只要能达到Sprint的目标。 Scrum流程图 //————————————下面，我们开始讲具体实施流程，但是在讲之前，我还要对一个英文单词进行讲解。什么是Sprint？Sprint是短距离赛跑的意思，这里面指的是一次迭代，而一次迭代的周期是1个月时间（即4个星期），也就是我们要把一次迭代的开发内容以最快的速度完成它，这个过程我们称它为Sprint。 如何进行Scrum开发？1、我们首先需要确定一个Product Backlog（按优先顺序排列的一个产品需求列表），这个是由Product Owner 负责的；2、Scrum Team根据Product Backlog列表，做工作量的预估和安排；3、有了Product Backlog列表，我们需要通过 Sprint Planning Meeting（Sprint计划会议） 来从中挑选出一个Story作为本次迭代完成的目标，这个目标的时间周期是1~4个星期，然后把这个Story进行细化，形成一个Sprint Backlog；4、Sprint Backlog是由Scrum Team去完成的，每个成员根据Sprint Backlog再细化成更小的任务（细到每个任务的工作量在2天内能完成）；5、在Scrum Team完成计划会议上选出的Sprint Backlog过程中，需要进行 Daily Scrum Meeting（每日站立会议），每次会议控制在15分钟左右，每个人都必须发言，并且要向所有成员当面汇报你昨天完成了什么，并且向所有成员承诺你今天要完成什么，同时遇到不能解决的问题也可以提出，每个人回答完成后，要走到黑板前更新自己的 Sprint burn down（Sprint燃尽图）；6、做到每日集成，也就是每天都要有一个可以成功编译、并且可以演示的版本；很多人可能还没有用过自动化的每日集成，其实TFS就有这个功能，它可以支持每次有成员进行签入操作的时候，在服务器上自动获取最新版本，然后在服务器中编译，如果通过则马上再执行单元测试代码，如果也全部通过，则将该版本发布，这时一次正式的签入操作才保存到TFS中，中间有任何失败，都会用邮件通知项目管理人员；7、当一个Story完成，也就是Sprint Backlog被完成，也就表示一次Sprint完成，这时，我们要进行 Srpint Review Meeting（演示会议），也称为评审会议，产品负责人和客户都要参加（最好本公司老板也参加），每一个Scrum Team的成员都要向他们演示自己完成的软件产品（这个会议非常重要，一定不能取消）；8、最后就是 Sprint Retrospective Meeting（回顾会议），也称为总结会议，以轮流发言方式进行，每个人都要发言，总结并讨论改进的地方，放入下一轮Sprint的产品需求中； 下面是运用Scrum开发流程中的一些场景图：上图是一个 Product Backlog 的示例。上图就是每日的站立会议了，参会人员可以随意姿势站立，任务看板要保证让每个人看到，当每个人发言完后，要走到任务版前更新自己的燃尽图。任务看版包含 未完成、正在做、已完成 的工作状态，假设你今天把一个未完成的工作已经完成，那么你要把小卡片从未完成区域贴到已完成区域。每个人的工作进度和完成情况都是公开的，如果有一个人的工作任务在某一个位置放了好几天，大家都能发现他的工作进度出现了什么问题（成员人数最好是5~7个，这样每人可以使用一种专用颜色的标签纸，一眼就可以从任务版看出谁的工作进度快，谁的工作进度慢）上图可不是扑克牌，它是计划纸牌，它的作用是防止项目在开发过程中，被某些人所领导。 怎么用的呢？比如A程序员开发一个功能，需要5个小时，B程序员认为只需要半小时，那他们各自取相应的牌，藏在手中，最后摊牌，如果时间差距很大，那么A和B就可以讨论A为什么要5个小时…]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>敏捷开发</tag>
        <tag>sprint</tag>
        <tag>scrum</tag>
        <tag>燃尽图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[燃尽图（sprint brun down）介绍]]></title>
    <url>%2F2017%2F01%2F12%2F%E7%87%83%E5%B0%BD%E5%9B%BE%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[一、燃尽图介绍Burn down chart翻译为燃尽图或燃烧图，很形象，是Scrum中展示项目进展的一个指示器。我一直认为用户故事、每日站立会议、燃尽图、sprint review、sprint retrospective真是越琢磨越有味道的好东西，也因此很喜欢scrum这种方法，这些实践简单有效、经典！燃尽图的样例如下：横坐标为工作日期，纵坐标估计剩余的工作量，每个点代表了在那一天估计剩余的工作量，通过折线依次连接起所有的点形成为估计剩余工作量的趋势线。另外还有一条控制线，为最初的估计工作量到结束日期的连线，一般用不同的颜色画上边的两根线。对此图的研判规则如下：（1）如果趋势线在控制线以下，说明进展顺利，有比较大的概率按期或提前完工；（2）如果趋势线在控制线以上，说明有比较大的概率延期，此时需要关注进度了。注意，趋势线并非一直下行，也有可能上行，即发生了错误的估计或遗漏的任务时，估计剩余的工作量也有可能在某天上升了。每天开完15分钟站立会议后，由scrum master根据进展更新燃尽图。第1个点是项目最初的工作量估计值，第2个点是第最初的估计工作量减去第1天已经完成的任务的工作量，依次类推计算后续的点。任务完成的标志是什么呢？准则如下：（1）开发人员检测：所有的单元测试用例都通过；（2）Product owner检测：Product owner通过了所有的功能测试；燃尽图最好是张贴在白板上，让每个人项目组成员抬头就能看见，这样给大家一个明确的视觉效果，每个人随时都能看到我们离目标有多远。燃尽图可以每天画，表示完成某个迭代的进展趋势，也可以某次迭代结束的时候画，表示完成整个项目的进展趋势，此时横坐标就是迭代的顺序号。燃尽图和传统项目管理理论中的挣值图比较起来更加简单、直观，这种设计深得管理的精髓！度量的精髓！ 二、解读燃尽图对于敏捷团队来讲，燃尽图可以说的上是最有用的一种信息发射源（Information Radiator）。它以图形化的方式展现了剩余的工作量（y轴）与时间（x轴）的关系。让我们感兴趣的地方在于对燃尽图的分析可以揭示很多问题，比如团队的表现如何、如何进一步改进等等；它有助于把握团队的进展情况。Hiren Doshi说燃尽图有助于回答如下这些问题： 团队的计划制订情况如何？ 在一个Sprint中，团队对计划的故事的执行情况如何？ 团队是自我管理的么？作为“团队”来说，大家的工作步调一致么？ 团队能进行哪些改进？ Hiren向我们展示了如下这张图表：对于图表中的蓝线，Hiren给出了自己的看法：该团队的计划并不好，因为线根本就没有触到零点，这其中的原因可能有很多。团队的一致性上也出现了问题，他们需要教练。因此，对于该团队来说，计划与自我管理方面亟需改进。图中的紫线表明该团队已经达成了目标，但并没有主动去更新数字，原因可能有二：要么他们太懒了，没有更新剩余的工作量；要么是在该Sprint的最后舍弃了很多用户故事。图中的绿线表明对于一个计划良好的成熟团队工作量的燃尽情况，该团队是自我管理并且在整个Sprint中拥有足够的故事要去实现。这条线接近于理想情况，表明了软件开发的复杂性。Kane Mar将燃尽图分为如下七种情况： Fakey-Fakey：表面完美而已。软件项目过于复杂以致于难以界定直观的目标。大多数情况下，这种图来自于充满了命令与控制的环境，在这种环境下，开放的交流变得难以进行。 Late-Learner：燃尽图中会有一个顶峰。通常出现在沟通高效且正在学习Scrum的团队中。 Middle-Learner：要比late-learner更加成熟。团队在Sprint的中期会探寻出大多数的任务与复杂性。 Early-Learner：开始有一个顶峰，然后是平缓的衰退。团队认识到早期探寻的重要性，然后高效工作以实现目标。 Plateau：团队在一开始取得了很大的进展，但却在Sprint的后半部分丧失了方向。 Never-Never：燃尽图在Sprint的后期突然开始上扬并且不会再下降。需要尽快找到这些迟来的变化并进行自省。 Scope-Increase：Sprint中的工作量突然增加。通常这表明团队在Sprint计划会议上没有完全认清工作范围。 George Dinwiddie也谈到了常见的燃尽图问题与属性。 综上所述，我们可以从燃尽图中得到很多信息。关键在于对其进行迭代分析并根据分析结果持续改进。]]></content>
  </entry>
  <entry>
    <title><![CDATA[偏向锁，轻量级锁，重量级锁（Java）]]></title>
    <url>%2F2017%2F01%2F12%2FJava%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%2F</url>
    <content type="text"><![CDATA[在多线程并发编程中Synchronized一直是元老级角色，很多人都会称呼它为重量级锁，但是随着Java SE1.6对Synchronized进行了各种优化之后，有些情况下它并不那么重了，SE1.6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>锁</tag>
        <tag>Synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 Token 的身份验证]]></title>
    <url>%2F2017%2F01%2F12%2F%E5%9F%BA%E4%BA%8E%20Token%20%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[最近了解下基于 Token 的身份验证，跟大伙分享下。很多大型网站也都在用，比如 Facebook，Twitter，Google+，Github 等等，比起传统的身份验证方法，Token 扩展性更强，也更安全点，非常适合用在 Web 应用或者移动应用上。Token 的中文有人翻译成 “令牌”，我觉得挺好，意思就是，你拿着这个令牌，才能过一些关卡。 一、传统身份验证的方法HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。 二、基于 Token 的身份验证方法使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的： 客户端使用用户名跟密码请求登录 服务端收到请求，去验证用户名与密码 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里 客户端每次向服务端请求资源的时候需要带着服务端签发的 Token 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据 三、JWT实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分： header payload signature 中间用点分隔开，并且都会使用 Base64 编码，所以真正的 Token 看起来像这样：1&lt;pre&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc&lt;/pre&gt; 1、Headerheader 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法，比如下面类型就是 JWT，使用的算法是 HS256。1234&#123; "typ": "JWT", "alg": "HS256"&#125; 上面的内容要用 Base64 的形式编码一下，所以就变成这样：1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 2、PayloadPayload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段： iss：Issuer，发行者 sub：Subject，主题 aud：Audience，观众 exp：Expiration time，过期时间 nbf：Not before iat：Issued at，发行时间 jti：JWT ID 比如下面这个 Payload ，用到了 iss 发行人，还有 exp 过期时间。另外还有两个自定义的字段，一个是 name ，还有一个是 admin 。123456&#123; "iss": "ninghao.net", "exp": "1438955445", "name": "wanghao", "admin": true&#125; 使用 Base64 编码以后就变成了这个样子：1eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ 3、SignatureJWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。 header payload secret 12var encodedString = base64UrlEncode(header) + "." + base64UrlEncode(payload); HMACSHA256(encodedString, 'secret'); 处理完成以后看起来像这样：1SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc 最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc 客户端收到这个 Token 以后把它存储下来，下回向服务端发送请求的时候就带着这个 Token 。服务端收到这个 Token ，然后进行验证，通过以后就会返回给客户端想要的资源。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Token</tag>
        <tag>Session</tag>
        <tag>身份认证</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CAS实现SSO单点登录原理]]></title>
    <url>%2F2017%2F01%2F12%2FCAS%E5%AE%9E%E7%8E%B0SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[1. CAS简介1.1. What is CAS？CAS（Central Authentication Service） 是 Yale大学发起的一个企业级的、开源的项目，旨在为 Web 应用系统提供一种可靠的单点登录解决方法（属于Web SSO）。CAS开始于2001年， 并在 2004年 12月正式成为JA-SIG的一个项目。 1.2. 主要特性1、 开源的、多协议的SSO解决方案；Protocols：Custom Protocol、CAS、OAuth、OpenID、RESTful API、SAML1.1、SAML2.0等。2、 支持多种认证机制：Active Directory、JAAS、JDBC、LDAP、X.509 Certificates等；3、 安全策略：使用票据（Ticket）来实现支持的认证协议；4、 支持授权：可以决定哪些服务可以请求和验证服务票据（Service Ticket）；5、 提供高可用性：通过把认证过的状态数据存储在TicketRegistry组件中，这些组件有很多支持分布式环境的实现，如：BerkleyDB、Default 、EhcacheTicketRegistry、JDBCTicketRegistry、JBOSS TreeCache、JpaTicketRegistry、MemcacheTicketRegistry等；6、 支持多种客户端： Java、 .Net、 PHP、 Perl、 Apache, uPortal等。 2. SSO单点登录原理本文内容主要针对Web SSO。 2.1. 什么是SSO单点登录（Single Sign-On ,简称SSO）是目前比较流行的服务于企业业务整合的解决方案之一，SSO 使得在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。 2.2. SSO原理2.2.1. SSO体系中的角色一般SSO体系主要角色有三种：1、 User（多个）2、 Web应用（多个）3、 SSO认证中心（1个） 2.2.2. SSO实现模式的原则SSO实现模式一般包括以下三个原则：1、 所有的认证登录都在SSO认证中心进行；2、 SSO认证中心通过一些方法来告诉 Web 应用当前访问用户究竟是不是已通过认证的用户；3、 SSO 认证中心和所有的 Web 应用建立一种信任关系，也就是说web应用必须信任认证中心。（单点信任） 2.2.3. SSO主要实现方式SSO的主要实现方式有：1、 共享cookies基于共享同域的cookie是Web刚开始阶段时使用的一种方式，它利用浏览同域名之间自动传递cookies机制，实现两个域名之间系统令牌传递问题；另外，关于跨域问题，虽然cookies本身不跨域，但可以利用它实现跨域的SSO。如：代理、暴露SSO令牌值等。缺点：不灵活而且有不少安全隐患，已经被抛弃。2、 Broker-based(基于经纪人)这种技术的特点就是，有一个集中的认证和用户帐号管理的服务器。经纪人给被用于进一步请求的电子身份存取。中央数据库的使用减少了管理的代价，并为认证提供一个公共和独立的”第三方”。例如Kerberos、Sesame、IBM KryptoKnight（凭证库思想)等。Kerberos是由麻省理工大学发明的安全认证服务，已经被UNIX和Windows作为默认的安全认证服务集成进操作系统。3、 Agent-based（基于代理人）在这种解决方案中，有一个自动地为不同的应用程序认证用户身份的代理程序。这个代理程序需要设计有不同的功能。比如，它可以使用口令表或加密密钥来自动地将认证的负担从用户移开。代理人被放在服务器上面，在服务器的认证系统和客户端认证方法之间充当一个”翻译”。例如SSH等。4、 Token-based例如SecureID,WebID，现在被广泛使用的口令认证，比如FTP、邮件服务器的登录认证，这是一种简单易用的方式，实现一个口令在多种应用当中使用。5、 基于网关6、 基于SAMLSAML(Security Assertion Markup Language，安全断言标记语言）的出现大大简化了SSO，并被OASIS批准为SSO的执行标准。开源组织OpenSAML 实现了 SAML 规范。 3. CAS的基本原理3.1. 结构体系从结构体系看，CAS包括两部分：CAS Server和CAS Client。 3.1.1. CAS ServerCAS Server负责完成对用户的认证工作, 需要独立部署, CAS Server 会处理用户名 / 密码等凭证 (Credentials)。 3.1.2. CAS Client负责处理对客户端受保护资源的访问请求，需要对请求方进行身份认证时，重定向到CAS Server进行认证。（原则上，客户端应用不再接受任何的用户名密码等 Credentials）。CAS Client 与受保护的客户端应用部署在一起，以 Filter 方式保护受保护的资源。 3.2. CAS原理和协议3.2.1. 基础模式基础模式SSO访问流程主要有以下步骤： 访问服务：SSO客户端发送请求访问应用系统提供的服务资源。 定向认证：SSO客户端会重定向用户请求到SSO服务器。 用户认证：用户身份认证。 发放票据：SSO服务器会产生一个随机的Service Ticket。 验证票据：SSO服务器验证票据Service Ticket的合法性，验证通过后，允许客户端访问服务。 传输用户信息：SSO服务器验证票据通过后，传输用户认证结果信息给客户端。下面是CAS 最基本的协议过程：cas基础协议图基础协议图如上图：CAS Client 与受保护的客户端应用部署在一起，以Filter方式保护Web应用的受保护资源，过滤从客户端过来的每一个Web请求，同时，CAS Client 会分析HTTP请求中是否包含请求Service Ticket( ST上图中的Ticket) ，如果没有，则说明该用户是没有经过认证的；于是CAS Client 会重定向用户请求到 CAS Server（Step 2），并传递Service（要访问的目的资源地址）。 Step 3是用户认证过程，如果用户提供了正确的Credentials， CAS Server随机产生一个相当长度、唯一、不可伪造的Service Ticket，并缓存以待将来验证，并且重定向用户到Service 所在地址（附带刚才产生的Service Ticket ）, 并为客户端浏览器设置一个Ticket Granted Cookie（TGC）；CAS Client 在拿到Service和新产生的 Ticket过后，在Step 5和Step6中与CAS Server进行身份核实，以确保 Service Ticket 的合法性。在该协议中，所有与CAS Server的交互均采用SSL协议，以确保ST和TGC的安全性。协议工作过程中会有2次重定向的过程。但是 CAS Client与CAS Server之间进行Ticket验证的过程对于用户是透明的（使用HttpsURLConnection）。CAS请求认证时序图如下：cas认证时序图 3.2.1. CAS 如何实现 SSO当用户访问另一个应用的服务再次被重定向到CAS Server的时候，CAS Server会主动获到这个TGC cookie，然后做下面的事情：1) 如果User持有TGC且其还没失效，那么就走基础协议图的Step4，达到了 SSO 的效果；2) 如果TGC失效，那么用户还是要重新认证 (走基础协议图的Step3)。 3.2.2. CAS代理模式该模式形式为用户访问App1，App1又依赖于App2来获取一些信息，如：User —&gt;App1 —&gt;App2 。这种情况下，假设App2也是需要对User进行身份验证才能访问，那么，为了不影响用户体验（过多的重定向导致User的IE窗口不停地闪动)，CAS引入了一种Proxy认证机制，即CAS Client可以代理用户去访问其它Web应用。代理的前提是需要CAS Client拥有用户的身份信息(类似凭据)。之前我们提到的TGC是用户持有对自己身份信息的一种凭据，这里的PGT就是CAS Client端持有的对用户身份信息的一种凭据。凭借TGC，User可以免去输入密码以获取访问其它服务的Service Ticket，所以，这里凭借PGT，Web应用可以代理用户去实现后端的认证，而无需前端用户的参与。下面为代理应用（helloService）获取PGT的过程：（注：PGTURL用于表示一个Proxy服务，是一个回调链接；PGT相当于代理证；PGTIOU为取代理证的钥匙，用来与PGT做关联关系；）cas代理PGT获取如上面的CAS Proxy图所示，CAS Client 在基础协议之上，在验证ST时提供了一个额外的PGT URL(而且是 SSL 的入口)给CAS Server，使得CAS Server可以通过PGT URL提供一个PGT给CAS Client。CAS Client拿到了PGT(PGTIOU-85…..ti2td)，就可以通过PGT向后端Web应用进行认证。下面是代理认证和提供服务的过程：如上图所示，Proxy认证与普通的认证其实差别不大，Step1，2与基础模式的Step1,2几乎一样，唯一不同的是，Proxy模式用的是PGT而不是TGC，是Proxy Ticket（PT）而不是Service Ticket。 3.2.3. 辅助说明&nbsp;CAS的SSO实现方式可简化理解为：1个Cookie和N个Session。CAS Server创建cookie，在所有应用认证时使用，各应用通过创建各自的Session来标识用户是否已登录。用户在一个应用验证通过后，以后用户在同一浏览器里访问此应用时，客户端应用中的过滤器会在session里读取到用户信息，所以就不会去CAS Server认证。如果在此浏览器里访问别的web应用时，客户端应用中的过滤器在session里读取不到用户信息，就会去CAS Server的login接口认证，但这时CAS Server会读取到浏览器传来的cookie（TGC），所以CAS Server不会要求用户去登录页面登录，只是会根据service参数生成一个Ticket，然后再和web应用做一个验证ticket的交互而已。个人注：Token是ticket的一种实现方式！ 3.3. 术语解释CAS系统中设计了5中票据：TGC、ST、PGT、PGTIOU、PT。Ø Ticket-granting cookie(TGC)：存放用户身份认证凭证的cookie，在浏览器和CAS Server间通讯时使用，并且只能基于安全通道传输（Https），是CAS Server用来明确用户身份的凭证；Ø Service ticket(ST)：服务票据，服务的惟一标识码,由CAS Server发出（Http传送），通过客户端浏览器到达业务服务器端；一个特定的服务只能有一个惟一的ST；Ø Proxy-Granting ticket（PGT）：由CAS Server颁发给拥有ST凭证的服务，PGT绑定一个用户的特定服务，使其拥有向CAS Server申请，获得PT的能力；Ø Proxy-Granting Ticket I Owe You（PGTIOU）:作用是将通过凭证校验时的应答信息由CAS Server 返回给CAS Client，同时，与该PGTIOU对应的PGT将通过回调链接传给Web应用。Web应用负责维护PGTIOU与PGT之间映射关系的内容表；Ø Proxy Ticket (PT)：是应用程序代理用户身份对目标程序进行访问的凭证； 其它说明如下：Ø Ticket Granting ticket(TGT)：票据授权票据，由KDC的AS发放。即获取这样一张票据后，以后申请各种其他服务票据(ST)便不必再向KDC提交身份认证信息(Credentials)；Ø Authentication service(AS) ————-认证用服务，索取Credentials，发放TGT；Ø Ticket-granting service (TGS) ————-票据授权服务，索取TGT，发放ST；Ø KDC( Key Distribution Center ) —————密钥发放中心； 4. CAS安全性CAS的安全性仅仅依赖于SSL。使用的是secure cookie。 4.1. TGC/PGT安全性对于一个 CAS 用户来说，最重要是要保护它的TGC，如果TGC不慎被CAS Server以外的实体获得，Hacker能够找到该TGC，然后冒充CAS用户访问所有授权资源。PGT的角色跟TGC是一样的。从基础模式可以看出， TGC是CAS Server通过SSL方式发送给终端用户，因此，要截取TGC难度非常大，从而确保CAS的安全性。TGT的存活周期默认为120分钟。 4.2. ST/PT安全性ST（Service Ticket）是通过Http传送的，因此网络中的其他人可以Sniffer到其他人的Ticket。CAS通过以下几方面来使ST变得更加安全（事实上都是可以配置的）：1、 ST只能使用一次CAS协议规定，无论 Service Ticket验证是否成功， CAS Server都会清除服务端缓存中的该Ticket，从而可以确保一个Service Ticket不被使用两次。2、 ST在一段时间内失效CAS规定ST只能存活一定的时间，然后CAS Server会让它失效。默认有效时间为5分钟。3、 ST是基于随机数生成的ST必须足够随机，如果ST生成规则被猜出，Hacker就等于绕过CAS认证，直接访问对应的服务。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>SSO</tag>
        <tag>CAS</tag>
        <tag>单点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MVC与三层结构区别]]></title>
    <url>%2F2017%2F01%2F12%2Fmvc%E4%B8%8E%E4%B8%89%E5%B1%82%E7%BB%93%E6%9E%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1、三层是三层，MVC是MVC，它们毫无关系的。1） 三层结构三层是从整个应用程序架构的角度来分的三层（如果程序需要，还可以分多层）。三层是为了解决整个应用程序中各个业务操作过程中不同阶段的代码封装的问题，为了使程序员更加专注的处理某阶段的业务逻辑。比如将数据库操作代码封装到一层中，提供一些方法根据参数直接返回用户需要的相应数据，这样在处理具体的业务逻辑的时候，就不用关心数据的存储问题了。2）MVCMVC是在应用程序（BS结构）的视图层划分出来的不同功能的几个模块。MVC主要是为了解决应用程序用户界面的样式替换问题，把展示数据的 HTML 页面尽可能的和业务代码分离。MVC把纯净的界面展示逻辑（用户界面）独立到一些文件中（Views），把一些和用户交互的程序逻辑（Controller）单独放在一些文件中，在 Views 和 Controller 中传递数据使用一些专门封装数据的实体对象，这些对象，统称为Models。3）小结所以说MVC和三层毫无关系，是因为它们二者使用范围不同：三层可以应用于任何语言、任何技术的应用程序；而MVC只是为了解决BS应用程序视图层各部分的耦合关系。它们互不冲突，可以同时存在，也可根据情况使用其中一种。2、三层架构绝不是MVC后来学习了J2EE之后发现老师说的好像不对，MVC和三层架构不是一个东西。三层架构是界面层（UI）业务逻辑层（BLL）和数据访问层（DAL）构成的，而MVC是模型层（M）界面层（View）和控制层（Controller）构成的，而且他们之间也不对应。如果硬要给他们对应的话，那么三层架构中的UI对应MVC中的view（jsp），都是用于显示以及获取界面的数据；三层架构中的BLL层和DAL层对应MVC中的Model（javabean）层都是用于处理上层传递来的数据以及从数据库获取的数据的；MVC中的Controller（Servlet）最多算是三层架构中的UI的一部分，也就我们常说的是Servlet。如下图所示： 3、他们相同的设计理念就是：把视图设计与数据持久化进行分离，从而降低耦合性，易于扩展，提高团队开发效率。 三层是基于业务逻辑来分的，而mvc是基于页面来分的； 三层模式是体系结构模式，MVC是设计模式 三层模式又可归于部署模式，MVC可归于表示模式 4、差别没有什么取舍的，说的根本不是一回事。在所谓的“三层”中，它要求你将BLL层独立出来，它只是告诉你表示层和业务逻辑层之间的静态关系。而MVC则告诉你在这个具体的地方如何处理其动态驱动流程，尽管mvc仍然粗糙（甚至mvp也是粗糙的），但是已经比所谓三层更细致一些了。 5、MVCMVC分别代表的是什么意思.M 即Model(模型层)，主要负责出来业务逻辑以及数据库的交互V 即View(视图层)，主要用于显示数据和提交数据C 即Controller(控制器)，主要是用作捕获请求并控制请求转发]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>区别</tag>
        <tag>三层结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运用四色建模法进行领域分析（Domain Analysis）]]></title>
    <url>%2F2017%2F01%2F11%2F%E8%BF%90%E7%94%A8%E5%9B%9B%E8%89%B2%E5%BB%BA%E6%A8%A1%E6%B3%95%E8%BF%9B%E8%A1%8C%E9%A2%86%E5%9F%9F%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[领域建模有很多种方法，对于同样的问题域使用不同的建模手段得到的模型可能也不尽相同。于是我经常听到这样一个问题：怎么才能保证建模的正确性？这听起来是个合理的质疑，但实际上却不是那么有道理。首先我们需要明白建模的目的是什么？如果仅仅是为了描画问题，那么并没有什么对错之分——仅仅是立场和角度的差别；而如果是为了企业业务系统而进行建模，那么这个问题应该变为：如何保证模型能够支撑企业的运营？我想用下面这个例子来简要的回答一下这个问题。在开始分析和建模之前，我们需要知道企业业务系统的目的是什么；而企业业务系统的目的往往跟决策者或者管理的诉求相关。我们现在需要移情到一位管理者身上，看看他的诉求到底是什么。现在假想你是一家在线电子书店的COO。突然有一天，有一位顾客向你投诉，说他订购的书少了一本，并且价钱算错了，他多给了钱。在你承诺理赔之前，你需要核对一下这位顾客说的是否属实。那么这个时候你需要知道什么样的信息才能做出准确的判断呢？简单来说，你需要知道这位顾客订购了那些书籍，付了多少钱以及书店到底为这个顾客递送了那些书籍。不幸的是，由于科技不够发达，你无法直接驾驶时间机器回到从前去亲眼看看发生了那些事。但幸运的是，你并不需要这么做，你只需要看看这位顾客的订单，和网银的支付记录以及你们书店交给EMS的快递单存根，就应该知道这些信息了。你找到了订单和EMS快递存根。发现这位顾客是在三天前订购的书，而你们在前天就已经将书邮寄出去了。并在订单上看到这位顾客一共订购了7本书，但是在EMS的快递存根上，并没有任何书籍的信息，只有地址，包裹号，邮费和重量什么的信息。这时候你觉得应该去询问一下配送部门，看看他们做了什么。在配送部门你根据包裹号查到了那个包裹的信息，果然里面只有6本书。同时你在包裹部门发现了一张延期交货单。上面说明由于缺货，这位顾客另外一本书正在等待发货。那么剩下的问题就是支付问题了，从网银的记录上看，客户不含邮费一共支付了132.5。订单上显示的价钱也是132.5，显然这位顾客并没有多付钱。为了保证准确，你重新从网站上选了这7本书，想看看是否也会是这个价钱。但你却意外的发现，一共只需要128.3。仔细辨认后，你发现有一本图书现在是促销。那么现在的问题是，促销到底是什么时候开始的？你到了市场部，市场部给了你一份近期促销计划。你发现那本书是昨天才开始促销的，也就是说在那位顾客在下订单的时候，促销还没有开始。这个时候，你觉得应该给你的顾客打一个电话致歉，商讨如何后续邮寄的问题，并向他说明促销的事情。你是否觉得这个COO当得有点累呢？这当然是虚构的。但是从这故事里面我们看到什么呢？任何的业务事件都会以某种数据的形式留下足迹。我们对于事件的追溯可以通过对数据的追溯来完成。正如上面这个故事里，你无法回到从前去看看到底发生了什么，但是却可以在单据的基础上，一定程度的还原当时事情发生的场景。当我们把这些数据的足迹按照时间顺序排列起来，我们几乎可以清晰的推测出这个在过往的一段时间内到底发生了那些事情。那么为什么这些数据形成的链条能够成帮助我们追溯业务的营运呢？因为这些数据并不是随便挑选的。如果我们回顾一下你作为COO检查这个疏漏的过程，你首先选择了订单和EMS快递存根，换句话说，如果订单出现差错，或者EMS快递存根上说明你的确邮寄了7本书，那么这个疏漏的责任并不在你。所以这两个订单实际上这个你这个企业法律责任的起点和终点。当你确定这个疏漏的责任在你之后，你选择审查一些流程执行的结果，比如包裹存根。从而验证一些主要的业务流程执行的结果是否正确。换句话讲，这些数据是支撑你运营体系的关键流程的执行结果。正是由于这些数据是流程执行的结果，它们才使我们可以在不了解流程细节的前提下，对某些突发事件进行追述和分析。除了上面那个极端的例子（投诉），对于任何一笔正常的经济往来，我们都需要知道： 如果我付出一笔资金，那么我的权益是什么？ 如果我收到一笔资金，那么我的义务是什么？ 而这些问题都需要业务系统捕捉到相应的足迹才能够回答。所以企业的业务系统主要的目的之一，就是记录这些足迹，并将这些足迹形成一条有效的追溯链。而作为业务分析师的你，则应该知道那些事件在运营上是需要追溯的，这些事件都留下了什么足迹。这些足迹通常都具有一个有意思的特性，即它们都是时标性对象（moment-interval）。发现这些时标性对象就是建模的起点。对于这些时标性对象稍加整理，我们就得到了整个领域模型的骨干：在得到骨干之后，我们需要丰富这个模型，使它可以更好的描述业务概念。这时候，我们需要补充一些实体对象。通常实体对象有三类：人，地点， 物（party/place/thing）。在这个基础上，我们可以进一步抽象这些实体事如果参与到各种不同的流程中去的，这时候，我们就需要用到角色（role）：最后再把一些需要描述的信息放入描述对象（description）。我们就得了应用四色建模方法（color modeling）建立的一套领域模型。简要回顾一下上面的过程，不难发现我们建模的次序和重点： 首先以满足管理和运营的需要为前提，寻找需要追溯的事件。 根据这些需要追溯，寻找足迹以及相应的时标性对象。 寻找时标对象周围的人／事／物 从中抽象角色 把一些信息用描述对象补足。 由于在第一步中，我们就将管理和运营目标做为建模的出发点。因此，整套模型实际上是围绕这些“如何有效地追踪这些目标”而建立的，这样的模型可以保证模型支撑企业的运营。 附言几位同事帮我审校这篇文章的时候，有人问了一个很有意思的问题：为什么你会以一个看上去像极端情况的例子来说明这个建模方法？ 以我的经验来看，对于业务系统有两个东西是很重要的：可追溯性（traceability）和执行效率（efficiency）。这里的可追溯性是指责任的可追溯性（traceability of liability），而通常都是在一些不太好的事情发生之后，才需要对责任进行追溯。所以想一个相对负面的例子更容易帮助我们找到建模所需要解决的问题。另外还有位同事说，你的四色方法与Peter Coad的四色法并不完全相同。是的，我所介绍的并不是Peter Coad的四色法， 我不敢说是发展， 仅仅是对于Peter Coad四色的一种变化吧。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>需求</tag>
        <tag>领域分析</tag>
        <tag>四色建模</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[需求分析与设计阶段的区别]]></title>
    <url>%2F2017%2F01%2F11%2F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[一、需求分析需求分析是指开发人员要进行细致的调查分析，准确理解用户的要求。将用户非形式的需求陈述转化为完整的需求定义，再由需求定义转换到相应的形式功能的过程 1、需求分析的基本原则 可以把一个复杂问题按功能进行分解并可逐层细化。 必须能够表达和理解问题的数据领域和功能领域。 建立模型。 2、需求分析的基本任务是要准确地理解旧系统，定义新系统的目标。回答系统必须“做什么”的问题。 问题明确定义； 导出软件的逻辑模型； 编写文档； 3、需求分析方法1）结构化分析 建立现行系统的物理模型； 抽象出现行系统的逻辑模型； 建立 目标系统的逻辑模型； 进一步补充和优化； 2）数据流图（数据流、加工、数据流原点和终点）、数据字典、加工逻辑的描述（结构化语言、判定表、判定树） 二、需求阶段1）找出领域模型2）在需求分析阶段，先找出用例，画出用例图，一开始，用例的粒度不宜太细，以免看不清主线。3）需求分析先要确定业务上的需求，业务规则，有哪些约束条件。4）描述“为什么”5）抓住主线，列出用例。6）对用例进行扩展。7）列出可能的扩展需求 三、设计阶段1）画出用例图2）画出状态图3）画出实体类图4）画出序列图5）定义数据字典和ER图6）对照用例，每个用例都走一遍，看是否能走通，有没有什么问题7）设计要做到什么程度：自己心中非常有底，非常有信心，而不能自己心里都是虚的，没什么底。 四、需求分析学习笔记在可行性分析阶段，主要是对新系统的基本思想和过程进行初步的分析和论证，对系统的基本功能，性能，开发时间的限制，人员安排，投资情况做一个客观的分析。在需求分析阶段，要对在可行性分析阶段确定的系统目标和功能作进一步详细的描述，确定系统“做什么”的问题。 1、需求分析一般的实现步骤（1）获得当前系统的物理模型。物理模型是对当前系统的真实写照。首先要对现行系统进行分析，理解，了解它的组织情况，数据流向，输入输出，资源利用情况等，在分析的基础上画出它的物理模型。（2）抽象出当前系统的逻辑模型。逻辑模型是在物理模型的基础上，去掉次要的东西，建立起反映系统本质的逻辑模型。（3）建立目标系统的逻辑模型。分析目标系统和当前系统逻辑上的区别，建立符合用户需求的目标系统的逻辑模型。（4）补充目标系统的逻辑模型。对目标系统进行补充完善，加上一些次要的因素，例如出错处理。 2、需求分析的具体任务1）确定系统的综合要求（1）确定系统功能要求。这是最主要的需求，确定系统必须实现的所有功能。（2）确定系统性能要求。应就具体系统而言。例如可靠性，联机系统的响应时间，存储容量，安全性能等。（3）确定系统运行要求。主要是系统运行时要求，如系统软件，数据库管理系统，外存，数据通信接口等。（4）将来可能扩展的要求。对将来可能的扩充作预准备。 2）分析系统的数据要求软件系统本质上是信息处理系统，因此，必须考虑：（1）数据（需要哪些数据，数据间联系，数据性质，数据结构等）（2）数据处理（处理的类型，处理的逻辑功能等）（3）导出系统的逻辑模型。通常系统的逻辑模型用DFD（Data Flow Diagram）图描述。（4）修正系统的开发计划。通过需求分析对系统的进度和成本有了更精确的估算，因此可以进一步修改开发计划。 2、需求分析的过程（1）问题识别：双方确定系统的综合需求。包括功能需求，性能需求，运行时需求，扩张需求，用户界面需求，安全需求，可靠性，保密性，可维护性，可移植性等需求。（2）分析与综合：导出系统的逻辑模型。（3）编写文档： 。需求说明书 。初步用户使用手册 。确认测试计划 。修改完善项目开发计划（4）分析评审：对功能的正确性，完整性，清晰性和其它需求进行复查和评审。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>需求分析</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 监控性能状态 QPS/TPS]]></title>
    <url>%2F2017%2F01%2F11%2FMysql%20%E7%9B%91%E6%8E%A7%E6%80%A7%E8%83%BD%E7%8A%B6%E6%80%81%20QPS%E3%80%81TPS%2F</url>
    <content type="text"><![CDATA[&nbsp;QPS（Query per second） 每秒查询量&nbsp;TPS（Transaction per second）每秒事务量这是Mysql的两个重要性能指标，需要经常查看，和Mysql基准测试的结果对比，如果值过高，就要尽快处理了 一、计算方法1、QPSQPS = Queries / SecondsQueries 是系统状态值—总查询次数，可以通过 show status 查询得出Seconds 是监控的时间区间，单位为秒例如采样10秒内的查询次数，那么先查询一次Queries值（Q1），等待10秒，再查询一次Queries值（Q2）QPS = (Q2 - Q1) / 10 2、TPSmysql中没有直接的事务计数器，需要通过事务提交数和事务回滚数来计算TPS = (Com_commit + Com_rollback) / SecondsCom_commit、Com_rollback 的值通过 show status 查询得出计算思路与 QPS 相似 二、统计脚本上面是QPS/TPS的统计思路，实际操作中如果用手动方式计算很不方便，最好用程序实现mysqladmin 的 extended-status 指令和 show status 差不多，可以查看mysql的状态值，如1# mysqladmin -uroot -p'密码' extended-status 其中含有我们需要的状态值，那么就可以分析extended-status的结果信息，然后计算，最后显示出来 1、统计目标每隔一秒统计一次 QPS、TPSmysql 还有两个信息比较重要：Threads_connected 当前连接的线程的个数Threads_running 运行状态的线程的个数这两个值也在extended-status的结果中，所以可以一道显示出来最后统计结果信息包括：QPS、TPS、Threads_connected、Threads_running先看下统计结果的展现形式 2、基本思路每秒钟运行一次extended-status，使用awk分析结果值，从中筛选出我们需要的值：Queries、Com_commit、Com_rollback、Threads_connected、Threads_runningQPS = Queries值 - 上一次的值TPS = (Com_commit值 - 上一次的值) + (Com_rollback值 - 上一次的值)因为是1秒钟统计一次，所以计算QPS/TPS时就不用除以秒数了 3、脚本代码 4、代码分析awk是代码中的重点，mysqladmin 的执行结果通过管道传给 awk 进行分析1234'BEGIN&#123;flag=0;print "";print "QPS TPS Threads_con Threads_run ";print "------------------------------------- "&#125; 这部分是初始设置，打印出表头flag=0 是设置一个标识位，后面用到12$2 ~ /Queries$/ &#123;q=$4-lq;lq=$4;&#125;其中 $2 $4代表某列的内容 awk是按行分析并按空格分割的，例如行信息为：| Queries | 213263713 |按空格分割后得到5列：‘|’, ‘Queries’, ‘|’, ‘213263713’, ‘|’12$2 : Queries$4 : 213263713 那么这句的意思就是：当第2列的值匹配‘Queries’时，变量q = 第4列的值 - 变量lq的值，变量lq = 第4列的值变量q 就是 QPS值，用这一次的 Queries值 减去 上一次的值1234$2 ~ /Com_commit$/ &#123;c=$4-lc;lc=$4;&#125;$2 ~ /Com_rollback$/ &#123;r=$4-lr;lr=$4;&#125;$2 ~ /Threads_connected$/ &#123;tc=$4;&#125;$2 ~ /Threads_running$/ &#123;tr=$4; 这几句的意思与上一句类似123if(flag==0)&#123; flag=1; &#125; 这里用到了flag这个标识位，意思是对第一次的分析结果什么都不做，因为这句{q=$4-lq;lq=$4;}q=$4-lq; 中的 lq 在第一次分析中还没有值123else &#123; printf "%-6d %-8d %-10d %d \n", q,c+r,tc,tr;&#125; 这部分就是打印统计结果信息下面是脚本代码下载地址，有兴趣的话可以下来实验一下http://devdd.oss-cn-beijing.aliyuncs.com/mysql_QPS_TPS.txtawk详细说明：快速理解linux文本分析利器awk]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>性能监控</tag>
        <tag>QPS</tag>
        <tag>TPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[业务领域分析介绍]]></title>
    <url>%2F2017%2F01%2F11%2F%E4%B8%9A%E5%8A%A1%E9%A2%86%E5%9F%9F%E5%88%86%E6%9E%90%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[在需求分析工作中，最后一项分析工作就是业务领域分析啦。业务领域分析，就是对需求分析中涉及到的业务实体，以及它们相互之间关联关系的分析。前面我们谈到了功能角色分析，或者说用例分析，它是从整体的角度对整个系统人机交互的分析与整理。随后我们谈到了业务流程分析，它是在对系统人机交互的分析与整理的基础上，更加细致的去分析和整理那些业务流程，以及组成这些流程的一个个业务操作。业务流程分析是对系统进行的一种动态的分析，分析的是那些行为，那些操作。但是，所有的行为，所有的操作，最终施与的对象都是那些实体。这句话怎么理解呢？比如，我们执行填写操作，施与的对象必然是那些表单，最终产生的结果必然是形成一份完整的表单，表单就是那个行为施与的对象。再比如，我们执行查询操作，施与的对象必然是一个报表，最终产生的结果必然是查看到了这个报表的结果。这里的表单、报表，都是存在于系统的静态实体，它们中的大多数也最终以数据结构的形式持久化保存于系统的数据库中。因此，系统中应当有哪些实体，这些实体都有哪些属性，被赋予了哪些行为，它们之间的相互关系是怎样的，就成为了业务领域分析的重要内容，而业务领域分析也就成为了对系统进行的一种静态分析。 我们的软件系统，毫不夸张地说，就是对现实世界的真实模拟。现实世界中的事物，在软件世界中就被模拟成一个对象。该事物在现实世界中赋予什么职责，在软件世界中就赋予什么职责；在现实世界中拥有什么特性，在软件世界中就拥有什么属性；在现实世界中拥有什么行为，在软件世界中就拥有什么函数；在现实世界中与哪些事物存在怎样的关系，在软件世界中就应当与它们发生怎样的关联。这正是面向对象编程的核心思想。我们进行业务领域分析，就是基于这样一个思想进行的。什么叫业务领域，就是客户所在的知识领域，譬如财务人员所在的是财务领域，税务人员所在的是税务领域，营销人员所在的是销售领域。不同的知识领域拥有各自不同的领域知识，需求分析人员就应该通过客户中的领域专家去学习这些知识、掌握这些要点，并最终体现在我们的需求分析中。然而，这必然是一个长期的过程。从这个角度说，业务领域分析不仅出现在需求分析阶段，还应当贯穿与设计阶段、开发阶段、测试阶段，甚至延续到后期的维护与升级。从另一个角度讲，现在的软件研发概念，已经不再是一锤子的买卖，而是延续到数年的不断升级完善中了。而软件的升级完善，从本质上说就是对业务领域不断深入的认识。我们对业务领域的认识深入一点儿，我们的软件系统就完善一分，再深入一点儿，就再完善一分。这就是世界级软件分析大师Eric Evans提出的领域驱动设计的核心思想。因此，我们进行业务领域分析，就是通过与用户进行交流，掌握领域知识，然后绘制成业务领域模型，去指导我们软件开发的过程。日后我们去设计开发系统时，应当设计哪些类，类中都应当有什么属性和行为，以及怎样去设计数据库，都是以这个领域模型为基础的，虽然有时并不完全与领域模型完全一致。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>需求</tag>
        <tag>业务领域分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MVC]]></title>
    <url>%2F2017%2F01%2F11%2FMVC%2F</url>
    <content type="text"><![CDATA[一、MVCMVC模式的意思是，软件可以分成三个部分。视图（View）：用户界面。控制器（Controller）：业务逻辑模型（Model）：数据保存各部分之间的通信方式如下。MVC模式的意思是，软件可以分成三个部分。View 传送指令到 ControllerController 完成业务逻辑后，要求 Model 改变状态Model 将新的数据发送到 View，用户得到反馈所有通信都是单向的。 二、互动模式接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。MVC模式的意思是，软件可以分成三个部分。另一种是直接通过controller接受指令。MVC模式的意思是，软件可以分成三个部分。 三、实例：Backbone实际项目往往采用更灵活的方式，以 Backbone.js 为例。MVC模式的意思是，软件可以分成三个部分。 用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。 用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。 Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ModSecurity]]></title>
    <url>%2F2017%2F01%2F10%2FModSecurity%2F</url>
    <content type="text"><![CDATA[ModSecurity是一个免费、开源的Web（apache、nginx、IIS）模块，可以充当Web应用防火墙（WAF:Web Application Firewall）。ModSecurity是一个入侵探测与阻止的引擎.它主要是用于Web应用程序所以也可以叫做Web应用程序防火墙.ModSecurity的目的是为增强Web应用程序的安全性和保护Web应用程序避免遭受来自已知与未知的攻击OWASP是一个安全社区，开发和维护着一套免费的应用程序保护规则，这就是所谓OWASP的ModSecurity的核心规则集（即CRS）。ModSecurity之所以强大就在于OWASP提供的规则，可以根据自己的需求选择不同的规则，当然ModSecurity还有商用的规则目前ModSecurity正在测试环境测试使用，以下操作是在nginx下添加modsecurity模块来实现WAF的安装配置步骤,]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>WAF</tag>
        <tag>ModSecurity</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于密码的加密【转载】]]></title>
    <url>%2F2017%2F01%2F10%2F%E5%85%B3%E4%BA%8E%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[1、加盐生成一个随机数，我们称之为salt，然后在数据库中记录salt和h=hash(pwd + salt)，查询的时候，得到用户的口令p，然后从数据库中查出salt，计算hash(p+salt)，看是不是等于h，等于就是对的，不等于就是不对的。单纯使用MD5之所以不好，并不是说MD5这种方法容易遭到破解，而事实上对于MD5求原象或者第二原象，也就是“逆计算”这种破解，没有什么很好的方法。只能通过预先计算知道许多MD5的对应关系，存在数据库中，然后使用的时候反查，例如我知道’password’的MD5值是5f4dcc3b5aa765d61d8327deb882cf99，那么我就用一个数据库存起来，只要我看到5f4dcc3b5aa765d61d8327deb882cf99，我就知道这个是口令’password‘使用MD5处理之后的值，原来的口令就是’password’。MD5在身份鉴别系统中用于口令保护已经是很久了事情了，大部分黑客也有针对这种Hash方式准备相应的数据库进行反查，这种数据库称为彩虹表。所以，为了对抗彩虹表，我们要做的工作是避免预先计算，让攻击者无法（或者非常困难）提前计算好彩虹表。为了反映为何彩虹表计算是可行的，我们再来算一下。我们假设用户可能输入的口令是键盘上的小写字母和数字，共26+10=36种，之所以这样假设是因为 一个用户比较多的系统中总是会有一些弱口令用户的，我们假设输入的口令至少5个字符，至多12个字符，那么用户可能的输入一共有： \sum_{i=5}^{12}{36^i} = 4873763662271935488 \approx 2^{64}而12个字节可能的组合应有 2^{8 \times 12} = 2^{96}种。如果再考虑到用户为了方便记忆，输入的口令是一些已经存在的单词或是词组，可能的输入将会远远少于2^{64}。用户可能的输入少了，就给了我们枚举的空间。为了阻止这种枚举，加salt的方法是扩大用户输入的一种简单有效的途径，随机生成一个16字节的随机数，加上用户本身输入的至多12个字符的口令，可能的输入就有2^{64} \times 2^{16 \times 8}=2^{160}种，这么多种可能性，任何一个机构和组织都没有办法存储规模如此庞大的彩虹表。 2、提高复杂度另外一种方法是通过提升Hash的复杂度，延长攻击者进行暴力破解时所消耗的时间。现在显卡用于并行计算实在太容易，6位纯数字的口令在显卡看来就是秒破。Hash算法的多次迭代就是最简单的延长计算时间的方法，Apache的htpasswd就使用了MD5的1000次迭代，不过只是使得这些口令稍微难破解一些。另外，题中使用了SHA1和MD5两种算法的方法，除了稍微提升一点计算的难度以外，并没有多好，这种组合方法不能增加用户输入的可能性，另外虽然SHA1生成的是160位的Hash，但是由于输入是一个128位的MD5，所以输出也至多只可能有2^{128}种可能，猜测的范围也没有缩小。所以这是原来回答我建议你使用更多次数（如1000次）MD5迭代的原因，至少应当有一个方面有稍微大一些的加强。另外此文（暴力密码破解器 ocl-Hashcat-plus 支持每秒猜测最多 80 亿个密码，意味着什么？）中有数据可以供参考，bcrypt是一种有效对抗口令Hash破解的算法，建议使用。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>彩虹表</tag>
        <tag>加盐</tag>
        <tag>MD5</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[缓存算法（页面置换算法）-FIFO、LFU、LRU]]></title>
    <url>%2F2017%2F01%2F10%2F%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%EF%BC%88%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95%EF%BC%89-FIFO%E3%80%81LFU%E3%80%81LRU%2F</url>
    <content type="text"><![CDATA[1.FIFO算法 FIFO（First in First out），先进先出。其实在操作系统的设计理念中很多地方都利用到了先进先出的思想，比如作业调度（先来先服务），为什么这个原则在很多地方都会用到呢？因为这个原则简单、且符合人们的惯性思维，具备公平性，并且实现起来简单，直接使用数据结构中的队列即可实现。 在FIFO Cache设计中，核心原则就是：如果一个数据最先进入缓存中，则应该最早淘汰掉。也就是说，当缓存满的时候，应当把最先进入缓存的数据给淘汰掉。在FIFO Cache中应该支持以下操作; get(key)：如果Cache中存在该key，则返回对应的value值，否则，返回-1； set(key,value)：如果Cache中存在该key，则重置value值；如果不存在该key，则将该key插入到到Cache中，若Cache已满，则淘汰最早进入Cache的数据。 举个例子：假如Cache大小为3，访问数据序列为set(1,1),set(2,2),set(3,3),set(4,4),get(2),set(5,5) 则Cache中的数据变化为： (1,1) set(1,1) (1,1) (2,2) set(2,2) (1,1) (2,2) (3,3) set(3,3) (2,2) (3,3) (4,4) set(4,4) (2,2) (3,3) (4,4) get(2) (3,3) (4,4) (5,5) set(5,5) 那么利用什么数据结构来实现呢？ 下面提供一种实现思路： 利用一个双向链表保存数据，当来了新的数据之后便添加到链表末尾，如果Cache存满数据，则把链表头部数据删除，然后把新的数据添加到链表末尾。在访问数据的时候，如果在Cache中存在该数据的话，则返回对应的value值；否则返回-1。如果想提高访问效率，可以利用hashmap来保存每个key在链表中对应的位置。 2.LFU算法 LFU（Least Frequently Used）最近最少使用算法。它是基于“如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小”的思路。 注意LFU和LRU算法的不同之处，LRU的淘汰规则是基于访问时间，而LFU是基于访问次数的。举个简单的例子： 假设缓存大小为3，数据访问序列为set(2,2),set(1,1),get(2),get(1),get(2),set(3,3),set(4,4)， 则在set(4,4)时对于LFU算法应该淘汰(3,3)，而LRU应该淘汰(1,1)。 那么LFU Cache应该支持的操作为： get(key)：如果Cache中存在该key，则返回对应的value值，否则，返回-1； set(key,value)：如果Cache中存在该key，则重置value值；如果不存在该key，则将该key插入到到Cache中，若Cache已满，则淘汰最少访问的数据。 为了能够淘汰最少使用的数据，因此LFU算法最简单的一种设计思路就是 利用一个数组存储 数据项，用hashmap存储每个数据项在数组中对应的位置，然后为每个数据项设计一个访问频次，当数据项被命中时，访问频次自增，在淘汰的时候淘汰访问频次最少的数据。这样一来的话，在插入数据和访问数据的时候都能达到O(1)的时间复杂度，在淘汰数据的时候，通过选择算法得到应该淘汰的数据项在数组中的索引，并将该索引位置的内容替换为新来的数据内容即可，这样的话，淘汰数据的操作时间复杂度为O(n)。 另外还有一种实现思路就是利用 小顶堆+hashmap，小顶堆插入、删除操作都能达到O(logn)时间复杂度，因此效率相比第一种实现方法更加高效。 3.LRU算法 LRU算法的原理以及实现在前一篇博文中已经谈到，在此不进行赘述：]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>缓存算法</tag>
        <tag>FIFO</tag>
        <tag>LFU</tag>
        <tag>LRU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云计算监控平台：Nagios、Ganglia和Splunk]]></title>
    <url>%2F2017%2F01%2F10%2F%E4%BA%91%E8%AE%A1%E7%AE%97%E7%AE%A1%E7%90%86%E4%B8%89%E5%A4%A7%E5%88%A9%E5%99%A8%EF%BC%9ANagios%E3%80%81Ganglia%E5%92%8CSplunk%2F</url>
    <content type="text"><![CDATA[综合利用Nagios、Ganglia和Splunk搭建起的云计算平台监控体系，具备错误报警、性能调优、问题追踪和自动生成运维报表的功能。有了这套系统，就可轻松管理Hadoop/HBase云计算平台。云计算早已不是停留在概念阶段了，各大公司都购买了大量的机器，开始正式的部署和运营。而动辄上百台的性能强劲的服务器，为运营管理带来了巨大的挑战。 如果没有方便的监控报警平台，对于管理员而言犹如噩梦，每天都将如救火队员一样，飞快地敲击键盘，用原始的Unix命令在多台机器中疲于奔命。 如果没有好的日志管理平台，对于开发者Troubleshooting更是一件泪流满面的事情。而如果你是运维团队的总负责人，简洁清晰的Report则非常重要。Stakeholder们动不动就可能问起系统的SLA、机器的利用率等诸多问题，毕竟，公司为此投入了巨大的资金和人力。朋友们，当我们管理起公司寄予厚望的云计算平台时，当我们面对如此多充满挑战的实际问题时，该怎么办？ 一、概述我们在搭建趋势云计算平台时，遇到了很多的问题和挑战。开始搭建时，第一次来了那么多性能强劲的机器，我们在感到兴奋的同时，也不免有些顾虑。大家坐在一起讨论，问题就列了满满一白板。 出了问题怎么办，有没有预警机制？ 有没有可视化的管理界面？ 管理平台需要自己开发吗？开发难度有多大？ 有没有开源的管理工具？ 那么多日志分布在各个机器上，有没有更有效的方法管理？ 能否生成好的报表？ 机器宕机，管理员能否收到短信通知？ 如何做性能调优？ 扩容升级时，能否给出依据？ 带着这些问题，我们开始了自己的云计算平台管理和运营之旅，一路走来，收获颇丰。现在基本上形成了如图1所示的一整套云计算平台监控体系。在这个系统中，我们综合利用了Nagios、Ganglia和Splunk，搭建起云计算平台监控体系，使其具备错误报警、性能调优、问题追踪和自动生成运维报表的功能。有了这套系统，我们终于能够轻松管理Hadoop/HBase云计算平台了。接下来将简单介绍它们的特点和功能。 二、Nagios：云计算平台的智能报警器总不能天天盯着机器看吧，因此我们首先关心的是机器的监控与报警。最理想的境界是：如果机器出故障了，我能第一时间处理；如果机器没有问题（最好永远没有问题），我能去喝茶、钓鱼和睡大觉。发现机器有没有问题，对我们而言不是什么难事。写个脚本，Ping一下IP，Telnet每台机器的Service端口，如果增加了新机器就改改配置即可。但这样也太原始了吧，可视化效果差，不好维护，没有层次，不好管理，出不来报表，总不能老是用Excel人工写报表吧。有没有更好的方法呢？有，你可以用Nagios。Nagios是一个可运行在Linux/Unix平台之上的开源监视系统，可以用来监视系统运行状态和网络信息。Nagios可以监视所指定的本地或远程主机以及服务，同时提供异常通知功能。Nagios可以提供以下几种监控功能。 监控网络服务（SMTP、POP3、HTTP、NNTP、Ping等）。 监控主机资源（处理器负荷、磁盘利用率等）。 简单的插件设计使得用户可以方便地扩展自己服务的检测方法。 并行服务检查机制。 具备定义网络分层结构的能力，并使用“parent”主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态。 当服务或主机问题产生与解决时将告警发送给联系人（通过电子邮件、短信、用户定义方式）。 具备定义事件处理功能，可以在主机或服务的事件发生时获取更多问题定位。 自动的日志回滚。 可以支持并实现对主机的冗余监控。 可选的Web界面用于查看当前的网络状态、通知和故障历史、日志文件等。 Nagios最好用的地方就是它将这些每天管理员做的工作自动化，你只需设定好要监听的端口即可，它会默默地工作，帮忙定时地去检测服务端口的状态，一旦发现问题，会及时发出报警。报警可以是电子邮件也可以是手机，从而使得管理员第一时间就能收到系统的状况。Nagios的报表功能也很强大。管理员可以很容易地得到每天、每周和每月的Service运行状况。如图2所示，红色部分清楚地标注有问题的机器，点开链接，就可以得到有问题机器的情况。虽然在HBase中，几台Region Server宕机不会对整体服务产生大的影响，但多少会影响到系统的Performance。而且，如果某几台Region Server频繁宕机，对整个系统的稳定性也会产生不好的影响。有了Nagios，我们可以快速定位有问题的机器，及时地将一些机器移除出HBase系统，待调整好了再上线运行，以保证系统的稳定性。现在，Nagios已经成为了很多公司必备的监控工具。只需要简单地配置，就可以实现强大的功能，将管理员从日常烦琐的工作中解放出来。有了Nagios，哪怕就是管理上千台机器，也不会手忙脚乱，而是有一种统领千军、运筹帷幄的感觉。 三、Ganglia：看到云计算平台的方方面面Nagios的确不错，但你是不是真的可以喝茶、钓鱼、睡大觉呢？显然还不行。有了Nagios，你基本上可以做个优秀的救火队员，能在事发第一时间到达现场、处理事故。但如何防患于未然，真正做到运筹帷幄、游刃有余呢？我们需要更加精确的数据，能够看到云计算平台的方方面面，能根据这些数据，做出性能调整、升级、扩容等的决策，从而保证Service能够满足不断增长的业务需求。这时候，你需要Ganglia。Ganglia是UC Berkeley发起的一个开源实时监视项目，用于测量数以千计的节点，为云计算系统提供系统静态数据以及重要的性能度量数据。Ganglia系统基本包含以下三大部分。Gmond：Gmond运行在每台计算机上，它主要监控每台机器上收集和发送度量数据（如处理器速度、内存使用量等）。Gmetad：Gmetad运行在Cluster的一台主机上，作为Web Server，或者用于与Web Server进行沟通。Ganglia Web前端：Web前端用于显示Ganglia的Metrics图表。Hadoop和HBase本身对于Ganglia的支持非常好。通过简单的配置，我们可以将Hadoop和HBase的一些关键参数以图表的形式展现在Ganglia的Web Console上。这些对于我们洞悉Hadoop和HBase的内部系统状态有很大的帮助。在Hadoop的conf文件夹下面，找到hadoop-metrics.properties，配置好Ganglia的Server即可。这里要注意，Ganglia 3.0和Ganglia 3.1的区别，它们使用了不同的class。123dfs.class=org.apache.hadoop.metrics.ganglia.GangliaContext31 dfs.period=10 dfs.servers=&#123;Ganglia_Server&#125;:8649 有了这些图表，Hadoop和HBase就不再是一个黑盒。无论是Hadoop的Namenode、Datanode，还是HBase的MasterServer、RegionServer任何时刻的情况，都会一目了然。由于图标的跨度可以是小时、天、月甚至是年，这样，就可以非常方便地定期生成周报、月报和年报。同时，根据图中Metrics的状况，我们可以通过调整参数、增加内存和硬盘、增加机器等的方法调整单个机器或者整个Service的性能。 Nagios 最大的问题在于不能洞悉到Service内部的状况。像Hadoop、HBase这样的分布式系统，一个节点的故障并不等于整个Service的故障，影响的只是Service的性能。所以，在测定Service的SLA时，我们不能以某一台机器的故障作为Service故障的评判标准。比如在我们的HBase SLA的设定上，我们定义了HBase Service完全不能工作的评判标准如下。 Master Server 联系不上。 所有RegionServer 都无法联系上。 -ROOT- 表无法访问。 .META. 表无法访问。 那么，我们就可以根据这个规则定义SLA，通过定期调用HBaseAdmin相应API ，将测试的结果发给Ganglia。采用同样的方法，我们还可以自定义一些规则，监视HBase Master、Zookeeper等的情况。通过这些方法，我们完全能够针对Hadoop/HBase使用的实际情况，做出Service级别而不是机器级别的监控系统并生成报表。此外，Ganglia还可以通过Server反馈回来的Load信息，给出各个机器的Load情况，给我们做升级和扩容提供依据。如图5所示，Ganglia分别会用不同颜色，标注出当前时刻的机器Load分布情况。如果Load过重，就应该检查机器的具体使用情况。 Ganglia的安装配置，可以参考这里。 四、Splunk：像查Google一样查日志有了Nagios和Ganglia，算是成功了一大半。作为一名优秀的管理员，我们需要具备一定的Troubleshooting能力，对一些常见的问题能给出解决方案。那么，对日志的分析就必不可少。但Hadoop/HBase的日志分布在各个机器上面，而日志之间关联性强。Client端的错误有可能是Region Server引起，而Region Server的错误有可能是Zookeeper导致。有没有一个统一的日志管理平台呢？众里寻它千百度，蓦然回首，我们找到了Splunk——日志界的Google。很遗憾，Splunk不是开源的，但它的免费版本提供每天500MB日志索引。如果数据量较小，通过定义好Log的级别，基本上也能满足需求。但对于数据量较大的公司，就有些捉襟见肘。Splunk支持AdHoc的日志搜索，而且可以与Nagios配合使用。比如Nagios报警某台RegionServer端口不可达，我们收到Notification后，登录Splunk，直接搜索shutdown和host名称，找到RegionServer退出的日志。点击详细信息，分析日志，就能快速定位问题。如图6所示。 对Hadoop和HBase有了进一步了解后，我们可以利用Splunk实时检测日志中的关键字，定义关键字规则，如监控“shutdown”、“quit”、“ERROR”、“Zookeeper Session Expired”等，一旦出现，利用Splunk的Notification功能，发出邮件通知管理员，管理员通过Splunk定位问题，就可以在系统真正出现问题之前，对系统进行调整，防患于未然。具体Splunk的设置，可以参考这里。 五、总结搭建一套云计算平台，强大的监控管理系统是必不可少的。当然，任何工具都不是万能的，在实际维护过程中，我们也发现，Nagios和Splunk经常出现误报，如果规则定义得不好，大量的警报邮件如潮水一样涌来，反而掩盖了真正的问题。可以说，在云计算平台的运维管理上，没有一劳永逸的事情，随着规模的不断增大和应用的不断多样化，需要大家不断地实践和总结。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>故障分析</tag>
        <tag>日志</tag>
        <tag>Nagios</tag>
        <tag>Ganglia</tag>
        <tag>Splunk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解Linux系统负荷[转]]]></title>
    <url>%2F2017%2F01%2F10%2F%E7%90%86%E8%A7%A3Linux%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%8D%B7%5B%E8%BD%AC%5D%2F</url>
    <content type="text"><![CDATA[一、查看系统负荷如果你的电脑很慢，你或许想查看一下，它的工作量是否太大了。在Linux系统中，我们一般使用uptime命令查看（w命令和top命令也行）。（另外，它们在苹果公司的Mac电脑上也适用。）你在终端窗口键入uptime，系统会返回一行信息。这行信息的后半部分，显示”load average”，它的意思是”系统的平均负荷”，里面有三个数字，我们可以从中判断系统负荷是大还是小。为什么会有三个数字呢？你从手册中查到，它们的意思分别是1分钟、5分钟、15分钟内系统的平均负荷。如果你继续看手册，它还会告诉你，当CPU完全空闲的时候，平均负荷为0；当CPU工作量饱和的时候，平均负荷为1。那么很显然，”load average”的值越低，比如等于0.2或0.3，就说明电脑的工作量越小，系统负荷比较轻。但是，什么时候能看出系统负荷比较重呢？等于1的时候，还是等于0.5或等于1.5的时候？如果1分钟、5分钟、15分钟三个值不一样，怎么办？ 二、一个类比判断系统负荷是否过重，必须理解load average的真正含义。下面，我根据”Understanding Linux CPU Load”这篇文章，尝试用最通俗的语言，解释这个问题。首先，假设最简单的情况，你的电脑只有一个CPU，所有的运算都必须由这个CPU来完成。那么，我们不妨把这个CPU想象成一座大桥，桥上只有一根车道，所有车辆都必须从这根车道上通过。（很显然，这座桥只能单向通行。）系统负荷为0，意味着大桥上一辆车也没有。系统负荷为0.5，意味着大桥一半的路段有车。系统负荷为1.0，意味着大桥的所有路段都有车，也就是说大桥已经”满”了。但是必须注意的是，直到此时大桥还是能顺畅通行的。系统负荷为1.7，意味着车辆太多了，大桥已经被占满了（100%），后面等着上桥的车辆为桥面车辆的70%。以此类推，系统负荷2.0，意味着等待上桥的车辆与桥面的车辆一样多；系统负荷3.0，意味着等待上桥的车辆是桥面车辆的2倍。总之，当系统负荷大于1，后面的车辆就必须等待了；系统负荷越大，过桥就必须等得越久。CPU的系统负荷，基本上等同于上面的类比。大桥的通行能力，就是CPU的最大工作量；桥梁上的车辆，就是一个个等待CPU处理的进程（process）。如果CPU每分钟最多处理100个进程，那么系统负荷0.2，意味着CPU在这1分钟里只处理20个进程；系统负荷1.0，意味着CPU在这1分钟里正好处理100个进程；系统负荷1.7，意味着除了CPU正在处理的100个进程以外，还有70个进程正排队等着CPU处理。为了电脑顺畅运行，系统负荷最好不要超过1.0，这样就没有进程需要等待了，所有进程都能第一时间得到处理。很显然，1.0是一个关键值，超过这个值，系统就不在最佳状态了，你要动手干预了。 三、系统负荷的经验法则1.0是系统负荷的理想值吗？不一定，系统管理员往往会留一点余地，当这个值达到0.7，就应当引起注意了。经验法则是这样的：当系统负荷持续大于0.7，你必须开始调查了，问题出在哪里，防止情况恶化。当系统负荷持续大于1.0，你必须动手寻找解决办法，把这个值降下来。当系统负荷达到5.0，就表明你的系统有很严重的问题，长时间没有响应，或者接近死机了。你不应该让系统达到这个值。 四、多处理器上面，我们假设你的电脑只有1个CPU。如果你的电脑装了2个CPU，会发生什么情况呢？2个CPU，意味着电脑的处理能力翻了一倍，能够同时处理的进程数量也翻了一倍。还是用大桥来类比，两个CPU就意味着大桥有两根车道了，通车能力翻倍了。所以，2个CPU表明系统负荷可以达到2.0，此时每个CPU都达到100%的工作量。推广开来，n个CPU的电脑，可接受的系统负荷最大为n.0。 五、多核处理器芯片厂商往往在一个CPU内部，包含多个CPU核心，这被称为多核CPU。在系统负荷方面，多核CPU与多CPU效果类似，所以考虑系统负荷的时候，必须考虑这台电脑有几个CPU、每个CPU有几个核心。然后，把系统负荷除以总的核心数，只要每个核心的负荷不超过1.0，就表明电脑正常运行。怎么知道电脑有多少个CPU核心呢？“cat /proc/cpuinfo”命令，可以查看CPU信息。”grep -c ‘model name’ /proc/cpuinfo”命令，直接返回CPU的总核心数。 六、最佳观察时长最后一个问题，”load average”一共返回三个平均值——1分钟系统负荷、5分钟系统负荷，15分钟系统负荷，——应该参考哪个值？如果只有1分钟的系统负荷大于1.0，其他两个时间段都小于1.0，这表明只是暂时现象，问题不大。如果15分钟内，平均系统负荷大于1.0（调整CPU核心数之后），表明问题持续存在，不是暂时现象。所以，你应该主要观察”15分钟系统负荷”，将它作为电脑正常运行的指标。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>top</tag>
        <tag>Load</tag>
        <tag>系统负荷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沉没成本(Sunk Cost)]]></title>
    <url>%2F2017%2F01%2F10%2F%E6%B2%89%E6%B2%A1%E6%88%90%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[在经济学和商业决策制定过程中，会用到“沉没成本（Sunk Cost）”（或称沉淀成本或既定成本）的概念，代指已经付出且不可收回的成本。沉没成本常用来和可变成本作比较，可变成本可以被改变，而沉没成本则不能被改变。在微观经济学理论中，做决策时仅需要考虑可变成本。如果同时考虑到沉没成本（这被微观经济学理论认为是错误的），那结论就不是纯粹基于事物的价值作出的。举例来说，如果你预订了一张电影票，已经付了票款且假设不能退票。此时你付的价钱已经不能收回，就算你不看电影钱也收不回来，电影票的价钱算作你的沉没成本。当然有时候沉没成本只是价格的一部分。比方说你买了一辆自行车，然后骑了几天低价在二手市场卖出。此时原价和你的卖出价中间的差价就是你的沉没成本。而且这种情况下，沉没成本随时间而改变，你留着那辆自行车骑的时间越长，一般来说你的卖出价会越低（折旧）。多数经济学家们认为，如果你是理性的，那就不该在做决策时考虑沉没成本。比如在前面提到的看电影的例子中，会有两种可能结果：1、付钱后发觉电影不好看，但忍受着看完；2、付钱后发觉电影不好看，退场去做别的事情。两种情况下你都已经付钱，所以应该不考虑这件事情。如果你后悔买票了，那么你当前的决定应该是基于你是否想继续看这部电影，而不是你为这部电影付了多少钱。此时的决定不应该考虑到买票的事，而应该以看免费电影的心态来作判断。经济学家们往往建议选择后者，这样你只是花了点冤枉钱，还可以通过腾出时间来做其他更有意义的事来降低机会成本，而选择前者你还要继续受冤枉罪。这就是生活或者投资的智慧！]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>沉没成本</tag>
        <tag>决策</tag>
        <tag>智慧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章置顶]]></title>
    <url>%2F2017%2F01%2F06%2FHexo%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%2F</url>
    <content type="text"><![CDATA[在hexo github 的issue里找到了解决办法,解决Hexo置顶问题，只需两步：1、用文章中的js代码替换node_modules/hexo-generator-index/lib/generator.js (见下文代码段)2、在需要置顶的文章的front-matter中添加top值，值越大越置顶。12345title: 某某文章date: tags:categories: top: 1000 以下是最终的node_modules/hexo-generator-index/lib/generator.js12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;;]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>置顶</tag>
        <tag>top</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LSM树]]></title>
    <url>%2F2017%2F01%2F05%2FLSM%E6%A0%91%2F</url>
    <content type="text"><![CDATA[讲LSM树之前，需要提下三种基本的存储引擎，这样才能清楚LSM树的由来： 1、哈希存储引擎是哈希表的持久化实现，支持增、删、改以及随机读取操作，但不支持顺序扫描，对应的存储系统为key-value存储系统。对于key-value的插入以及查询，哈希表的复杂度都是O(1)，明显比树的操作O(n)快,如果不需要有序的遍历数据，哈希表就是your Mr.Right 2、B树存储引擎是B树的持久化实现，不仅支持单条记录的增、删、读、改操作，还支持顺序扫描（B+树的叶子节点之间的指针），对应的存储系统就是关系数据库（Mysql等）。 3、LSM树（Log-Structured Merge Tree）存储引擎和B树存储引擎一样，同样支持增、删、读、改、顺序扫描操作。而且通过批量存储技术规避磁盘随机写入问题。当然凡事有利有弊，LSM树和B+树相比，LSM树牺牲了部分读性能，用来大幅提高写性能。通过以上的分析，应该知道LSM树的由来了，LSM树的设计思想非常朴素：将对数据的修改增量保持在内存中，达到指定的大小限制后将这些修改操作批量写入磁盘，不过读取的时候稍微麻烦，需要合并磁盘中历史数据和内存中最近修改操作，所以写入性能大大提升，读取时可能需要先看是否命中内存，否则需要访问较多的磁盘文件。极端的说，基于LSM树实现的HBase的写性能比Mysql高了一个数量级，读性能低了一个数量级。LSM树原理把一棵大树拆分成N棵小树，它首先写入内存中，随着小树越来越大，内存中的小树会flush到磁盘中，磁盘中的树定期可以做merge操作，合并成一棵大树，以优化读性能。 4、HBase存储的设计主要思想因为小树先写到内存中，为了防止内存数据丢失，写内存的同时需要暂时持久化到磁盘，对应了HBase的MemStore和HLogMemStore上的树达到一定大小之后，需要flush到HRegion磁盘中（一般是Hadoop DataNode），这样MemStore就变成了DataNode上的磁盘文件StoreFile，定期HRegionServer对DataNode的数据做merge操作，彻底删除无效空间，多棵小树在这个时机合并成大树，来增强读性能。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>LSM树</tag>
        <tag>B+树</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[进程、线程的区别]]></title>
    <url>%2F2017%2F01%2F05%2F%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1、进程进程的出现是为了更好的利用CPU资源使到并发成为可能。 假设有两个任务A和B，当A遇到IO操作，CPU默默的等待任务A读取完操作再去执行任务B，这样无疑是对CPU资源的极大的浪费。聪明的老大们就在想若在任务A读取数据时，让任务B执行，当任务A读取完数据后，再切换到任务A执行。注意关键字切换，自然是切换，那么这就涉及到了状态的保存，状态的恢复，加上任务A与任务B所需要的系统资源（内存，硬盘，键盘等等）是不一样的。自然而然的就需要有一个东西去记录任务A和任务B分别需要什么资源，怎样去识别任务A和任务B等等。登登登，进程就被发明出来了。通过进程来分配系统资源，标识任务。如何分配CPU去执行进程称之为调度，进程状态的记录，恢复，切换称之为上下文切换。进程是系统资源分配的最小单位，进程占用的资源有：地址空间，全局变量，文件描述符，各种硬件等等资源。 2、线程线程的出现是为了降低上下文切换的消耗，提高系统的并发性，并突破一个进程只能干一样事的缺陷，使到进程内并发成为可能。假设，一个文本程序，需要接受键盘输入，将内容显示在屏幕上，还需要保存信息到硬盘中。若只有一个进程，势必造成同一时间只能干一样事的尴尬（当保存时，就不能通过键盘输入内容）。若有多个进程，每个进程负责一个任务，进程A负责接收键盘输入的任务，进程B负责将内容显示在屏幕上的任务，进程C负责保存内容到硬盘中的任务。这里进程A，B，C间的协作涉及到了进程通信问题，而且有共同都需要拥有的东西———-文本内容，不停的切换造成性能上的损失。若有一种机制，可以使任务A，B，C共享资源，这样上下文切换所需要保存和恢复的内容就少了，同时又可以减少通信所带来的性能损耗，那就好了。是的，这种机制就是线程。线程共享进程的大部分资源，并参与CPU的调度, 当然线程自己也是拥有自己的资源的，例如，栈，寄存器等等。 此时，进程同时也是线程的容器。线程也是有着自己的缺陷的，例如健壮性差，若一个线程挂掉了，整一个进程也挂掉了，这意味着其它线程也挂掉了，进程却没有这个问题，一个进程挂掉，另外的进程还是活着。 3、并发与并行1)并行并发就是指同一时刻有两个或两个以上的“工作单位”在同时执行，从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。所以，多核是并行的前提，单线程永远无法达到并行状态。可以利用多线程和度进程到达并行状态。另外的，Python的多线程由于GIL的存在，对于Python来说无法通过多线程到达并行状态。 2)并发对于并发的理解，要从两方面去理解，1.并发设计 2.并发执行。先说并发设计，当说一个程序是并发的，更多的是指这个程序采取了并发设计。 并发设计的标准：使多个操作可以在重叠的时间段内进行 ，这里的重点在于重叠的时间内， 重叠时间可以理解为一段时间内。例如：在时间1s秒内, 具有IO操作的task1和task2都完成，这就可以说是并发执行。所以呢，单线程也是可以做到并发运行的。当然啦，并行肯定是并发的。一个程序能否并发执行，取决于设计，也取决于部署方式。例如, 当给程序开一个线程（协程是不开的），它不可能是并发的，因为在重叠时间内根本就没有两个task在运行。当一个程序被设计成完成一个任务再去完成下一个任务的时候，即便部署是多线程多协程的也是无法达到并发运行的。 并行与并发的关系: 并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>进程</tag>
        <tag>线程</tag>
        <tag>CPU</tag>
        <tag>并发</tag>
        <tag>并行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[索引原理及B树索引]]></title>
    <url>%2F2017%2F01%2F05%2F%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%8F%8AB%E6%A0%91%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[一、索引的原理说白了，索引问题就是一个查找问题。数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用B树及其变种B+树。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。上图展示了一种可能的索引方式。左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在O(\log _{2}n)的复杂度内获取到相应数据。 二、索引的优劣性创建索引可以大大提高系统的性能。 第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。 第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。 第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。 第四，在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。 第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。 也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？因为，增加索引也有许多不利的方面。 第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。 第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。 第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。 三、索引的原则索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。一般来说，应该在这些列上创建索引： 在经常需要搜索的列上，可以加快搜索的速度； 在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构； 在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度； 在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的； 在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间； 在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。 同样，对于有些列不应该创建索引。一般来说，不应该创建索引的的这些列具有下列特点： 第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。 第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。 第三，对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。 第四，当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。 四、索引的分类根据数据库的功能，可以在数据库设计器中创建三种索引：唯一索引、主键索引和聚集索引。 1、唯一索引唯一索引是不允许其中任何两行具有相同索引值的索引。当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。 2、主键索引数据库表经常有一列或列组合，其值唯一标识表中的每一行。该列称为表的主键。在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。 3、聚集索引在聚集索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快的数据访问速度。聚集索引对于任意给定的表而言是唯一的，一个表只能有一个聚集索引。不一定非要有聚集索引。聚集索引特殊的方面是：聚集索引的叶级是实际的数据-也就是说，数据重新排序，按照和聚集索引排序条件声明的相同物理顺序存储。这意味着，一旦到达索引的叶级，就到达了数据。而非聚集索引，到达了叶级只是找到了数据的引用。 五、索引的效率一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。 1、B TreeB树（Balance Tree）又叫做B- 树（其实B-是由B-tree翻译过来，所以B-树和B树是一个概念） ，它就是一种平衡多路查找树。下图就是一个典型的B树：从上图中我们可以大致看到B树的一些特点，为了更好的描述B树，我们定义记录为一个二元组[key, data]，key为记录的键值，data表示其它数据（上图中只有key，没有画出data数据 ）。下面是对B树的一个详细定义： 有一个根节点，根节点只有一个记录和两个孩子或者根节点为空； 每个节点记录中的key和指针相互间隔，指针指向孩子节点； d是表示树的宽度，除叶子节点之外，其它每个节点有[d/2,d-1]条记录，并且些记录中的key都是从左到右按大小排列的，有[d/2+1,d]个孩子； 在一个节点中，第n个子树中的所有key，小于这个节点中第n个key，大于第n-1个key，比如上图中B节点的第2个子节点E中的所有key都小于B中的第2个key 9，大于第1个key 3; 所有的叶子节点必须在同一层次，也就是它们具有相同的深度；由于B-Tree的特性，在B-Tree中按key检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到null指针，前者查找成功，后者查找失败。 关于B-Tree有一系列有趣的性质，例如一个度为d的B-Tree，设其索引N个key，则其树高h的上限为\log _{d}(N/2)，检索一个key，其查找节点个数的渐进复杂度为O(\log _{d}((N+1)/2))。从这点可以看出，B-Tree是一个非常有效率的索引数据结构。 另外，由于插入删除新的数据记录会破坏B-Tree的性质，因此在插入删除时，需要对树进行一个分裂、合并、转移等操作以保持B-Tree性质，本文不打算完整讨论B-Tree这些内容，因为已经有许多资料详细说明了B-Tree的数学性质及插入删除算法，有兴趣的朋友可以查阅其它文献进行详细研究。 2、B+Tree其实B-Tree有许多变种，其中最常见的是B+Tree，比如MySQL就普遍使用B+Tree实现其索引结构。B-Tree相比，B+Tree有以下不同点： 每个节点的指针上限为2d而不是2d+1； 内节点不存储data，只存储key； 叶子节点不存储指针； 下面是一个简单的B+Tree示意。由于并不是所有节点都具有相同的域，因此B+Tree中叶节点和内节点一般大小不同。这点与B-Tree不同，虽然B-Tree中不同节点存放的key和指针可能数量不一致，但是每个节点的域和上限是一致的，所以在实现中B-Tree往往对每个节点申请同等大小的空间。一般来说，B+Tree比B-Tree更适合实现外存储索引结构，具体原因与外存储器原理及计算机存取原理有关，将在下面讨论。 带有顺序访问指针的B+Tree：一般在数据库系统或文件系统中使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针。如图所示，在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。 2、B-树和B+树的比较如图所示，区别有以下两点： B+树中只有叶子节点会带有指向记录的指针（ROWID），而B树则所有节点都带有，在内部节点出现的索引项不会再出现在叶子节点中。 B+树中所有叶子节点都是通过指针连接在一起，而B树不会。 B+树的优点： 非叶子节点不会带上ROWID，这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。 叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。 B树的优点： 对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。 六、B-树和B+树的效率分析1、局部性原理与磁盘预读由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。程序运行期间所需要的数据通常比较集中。由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。 2、B+树性能分析从上面介绍我们知道，B树的搜索复杂度为O(h)=O(\log _{d}N)，所以树的出度d越大，深度h就越小，I/O的次数就越少。B+Tree恰恰可以增加出度d的宽度，因为每个节点大小为一个页大小，所以出度的上限取决于节点内key和data的大小：dmax=floor(pagesize/(keysize+datasize+pointsize))//floor表示向下取整由于B+Tree内节点去掉了data域，因此可以拥有更大的出度，从而拥有更好的性能。 B+树查找过程B-树和B+树查找过程基本一致。如上图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>B+树</tag>
        <tag>索引</tag>
        <tag>B树</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内存数据库]]></title>
    <url>%2F2017%2F01%2F04%2F%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[1.您在工作过程中是否使用过内存数据库？您对内存数据库有哪些使用心得和印象？答：有了解过SAP HANA，还没有使用过。不过未来应该是趋势了，迟早用得上。 2.SAP HANA和OracleTimesTen是内存数据库的两大巨头，您认为它们各自都有哪些优缺点，两者哪个更胜一筹？TimesTen优势 ·能够和Oracle后台数据库做无缝集成，数据可以在TimesTen和Oracle直接双向流动，可以做到实时; ·TimesTen可以做成多节点并行提供服务的模式，数据在多个TimesTen之间直接实现实时或者非实时的传输， 进一步提高了系统的扩展性和可靠性; ·符合RDBMS标准的独立内存数据库服务; ·支持SQL92; ·支持 ODBC &amp; JDBC; ·高性能; ·可以作为Oracle数据库的前端Cache，目前不支持其他数据库; ·支持本地的高速访问和网络访问方式可靠性高。支持完整日志，支持镜像复制功能。TimesTen劣势 ·不是开源代码，需要较高费用; ·目前不支持存储过程和触发器。 SAP HANA优势 ·秒级处理实时决策：行、列存储，完全存于内存 - 快 ·大规模数据运算：内存排序，无需考虑优化- 易 ·并行处理：低成本运行，普通PC服务器 - 省 SAP HANA劣势 SAP HANA只能运行在Suse Linux企业版(SLES)上，软件硬件平台较贵。 两者各有优势，在选择的时候除了要考虑性价比之外，最重要的还是要看是否适合自己业务场景。 3.现在，内存计算的势头不错，您是否看好内存数据库的未来？内存数据库会碾压传统数据库吗？答：非常看好。内存数据库是一个不可逆转的趋势，它不仅能够大幅提升数据库的性能，还能够减轻数据库开发和管理人员的调优工作。目前，硬盘数据库仍然是无法取代的，但在不久的将来，相信内存数据库能够取代硬盘数据库，成为市场上的主流。 4.如果要您推荐几款内存数据库，您会推荐什么？SAP HANA、IBM SolidDB、Oracle TimesTen或者其他。SAP HANA。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSON与XML的区别比较]]></title>
    <url>%2F2017%2F01%2F04%2FJSON%E4%B8%8EXML%E7%9A%84%E5%8C%BA%E5%88%AB%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[1.定义介绍(1).XML定义扩展标记语言 (Extensible Markup Language, XML) ，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 XML使用DTD(document type definition)文档类型定义来组织数据;格式统一，跨平台和语言，早已成为业界公认的标准。XML是标准通用标记语言 (SGML) 的子集，非常适合 Web 传输。XML 提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。 (2).JSON定义JSON(JavaScript Object Notation)一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。JSON采用兼容性很高的、完全独立于语言文本格式，同时也具备类似于C语言的习惯(包括C, C++, C#, Java, JavaScript, Perl, Python等)体系的行为。这些特性使JSON成为理想的数据交换语言。JSON基于JavaScript Programming Language , Standard ECMA-262 3rd Edition - December 1999 的一个子集。 2.XML和JSON优缺点(1).XML的优缺点.XML的优点 A.格式统一，符合标准； B.容易与其他系统进行远程交互，数据共享比较方便。 .XML的缺点 A.XML文件庞大，文件格式复杂，传输占带宽； B.服务器端和客户端都需要花费大量代码来解析XML，导致服务器端和客户端代码变得异常复杂且不易维护； C.客户端不同浏览器之间解析XML的方式不一致，需要重复编写很多代码； D.服务器端和客户端解析XML花费较多的资源和时间。 (2).JSON的优缺点.JSON的优点： A.数据格式比较简单，易于读写，格式都是压缩的，占用带宽小； B.易于解析，客户端JavaScript可以简单的通过eval()进行JSON数据的读取； C.支持多种语言，包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等服务器端语言，便于服务器端的解析； D.在PHP世界，已经有PHP-JSON和JSON-PHP出现了，偏于PHP序列化后的程序直接调用，PHP服务器端的对象、数组等能直接生成JSON格式，便于客户端的访问提取； E.因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。 .JSON的缺点 A.没有XML格式这么推广的深入人心和喜用广泛，没有XML那么通用性； B.JSON格式目前在Web Service中推广还属于初级阶段。 3.XML和JSON的优缺点对比(1).可读性方面。JSON和XML的数据可读性基本相同，JSON和XML的可读性可谓不相上下，一边是建议的语法，一边是规范的标签形式，XML可读性较好些。(2).可扩展性方面。XML天生有很好的扩展性，JSON当然也有，没有什么是XML能扩展，JSON不能的。(3).编码难度方面。XML有丰富的编码工具，比如Dom4j、JDom等，JSON也有json.org提供的工具，但是JSON的编码明显比XML容易许多，即使不借助工具也能写出JSON的代码，可是要写好XML就不太容易了。(4).解码难度方面。XML的解析得考虑子节点父节点，让人头昏眼花，而JSON的解析难度几乎为0。这一点XML输的真是没话说。(5).流行度方面。XML已经被业界广泛的使用，而JSON才刚刚开始，但是在Ajax这个特定的领域，未来的发展一定是XML让位于JSON。到时Ajax应该变成Ajaj(Asynchronous Javascript and JSON)了。(6).解析手段方面。JSON和XML同样拥有丰富的解析手段。(7).数据体积方面。JSON相对于XML来讲，数据的体积小，传递的速度更快些。(8).数据交互方面。JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。(9).数据描述方面。JSON对数据的描述性比XML较差。(10).传输速度方面。JSON的速度要远远快于XML。 4.XML与JSON数据格式比较(1).关于轻量级和重量级轻量级和重量级是相对来说的，那么XML相对于JSON的重量级体现在哪呢?应该体现在解析上，XML目前设计了两种解析方式：DOM和 SAX。 .DOMDOM是把一个数据交换格式XML看成一个DOM对象，需要把XML文件整个读入内存，这一点上JSON和XML的原理是一样的，但是XML要考虑父节点和子节点，这一点上JSON的解析难度要小很多，因为JSON构建于两种结构：key/value，键值对的集合;值的有序集合，可理解为数组； .SAXSAX不需要整个读入文档就可以对解析出的内容进行处理，是一种逐步解析的方法。程序也可以随时终止解析。这样，一个大的文档就可以逐步的、一点一点的展现出来，所以SAX适合于大规模的解析。这一点，JSON目前是做不到得。所以，JSON和XML的轻/重量级的区别在于：JSON只提供整体解析方案，而这种方法只在解析较少的数据时才能起到良好的效果；XML提供了对大规模数据的逐步解析方案，这种方案很适合于对大量数据的处理。 (2).关于数据格式编码及解析难度.在编码方面。虽然XML和JSON都有各自的编码工具，但是JSON的编码要比XML简单，即使不借助工具，也可以写出JSON代码，但要写出好的XML代码就有点困难;与XML一样，JSON也是基于文本的，且它们都使用Unicode编码，且其与数据交换格式XML一样具有可读性。主观上来看，JSON更为清晰且冗余更少些。JSON网站提供了对JSON语法的严格描述，只是描述较简短。从总体来看，XML比较适合于标记文档，而JSON却更适于进行数据交换处理。 .在解析方面。在普通的web应用领域，开发者经常为XML的解析伤脑筋，无论是服务器端生成或处理XML，还是客户端用 JavaScript 解析XML，都常常导致复杂的代码，极低的开发效率。实际上，对于大多数Web应用来说，他们根本不需要复杂的XML来传输数据，XML宣称的扩展性在此就很少具有优势,许多Ajax应用甚至直接返回HTML片段来构建动态Web页面。和返回XML并解析它相比，返回HTML片段大大降低了系统的复杂性，但同时缺少了一定的灵活性。同XML或 HTML片段相比，数据交换格式JSON 提供了更好的简单性和灵活性。在Web Serivice应用中，至少就目前来说XML仍有不可动摇的地位。 5、实例比较下面是一个简单的JSON数据片段（140个字符）：123456789&#123; "id": 123, "title": "Object Thinking", "author": "David West", "published": &#123; "by": "Microsoft Press", "year": 2004 &#125;&#125; 在XML中可能就是这样的（167个字符）：123456789&lt;?xml version="1.0"?&gt;&lt;book id="123"&gt; &lt;title&gt;Object Thinking&lt;/title&gt; &lt;author&gt;David West&lt;/author&gt; &lt;published&gt; &lt;by&gt;Microsoft Press&lt;/by&gt; &lt;year&gt;2004&lt;/year&gt; &lt;/published&gt;&lt;/book&gt; 编码的可读性来说，XML有明显的优势，毕竟人类的语言更贴近这样的说明结构。JSON读起来更像一个数据块，读起来就比较费解了。不过，我们读起来费解的语言，恰恰是适合机器阅读。编码的手写难度来说，XML还是舒服一些，好读当然就好写。不过写出来的字符JSON就明显少很多。去掉空白制表以及换行的话，JSON就是密密麻麻的有用数据，而XML却包含很多重复的标记字符。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>xml</tag>
        <tag>javascipt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KV-存储 之 Hash算法]]></title>
    <url>%2F2017%2F01%2F04%2FKV-%E5%AD%98%E5%82%A8%20%E4%B9%8B%20Hash%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[KV-存储 之 Hash算法 散列函数（或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。好的散列函数在输入域中很少出现散列冲突。在散列表和数据处理中，不抑制冲突来区别数据，会使得数据库记录更难找到。 常见hash算法的原理：散列表,它是基于高速存取的角度设计的，也是一种典型的“空间换时间”的做法。顾名思义，该数据结构能够理解为一个线性表，可是当中的元素不是紧密排列的，而是可能存在空隙。散列表（Hash table，也叫哈希表），是依据关键码值(Key value)而直接进行訪问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来訪问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。 比方我们存储70个元素，但我们可能为这70个元素申请了100个元素的空间。70/100=0.7，这个数字称为负载因子。我们之所以这样做，也是为了“高速存取”的目的。我们基于一种结果尽可能随机平均分布的固定函数H为每一个元素安排存储位置，这样就能够避免遍历性质的线性搜索，以达到高速存取。可是因为此随机性，也必定导致一个问题就是冲突。所谓冲突，即两个元素通过散列函数H得到的地址同样，那么这两个元素称为“同义词”。这类似于70个人去一个有100个椅子的饭店吃饭。散列函数的计算结果是一个存储单位地址，每一个存储单位称为“桶”。设一个散列表有m个桶，则散列函数的值域应为[0,m-1]。 解决冲突是一个复杂问题。冲突主要取决于： （1）散列函数，一个好的散列函数的值应尽可能平均分布。（2）处理冲突方法。（3）负载因子的大小。太大不一定就好，并且浪费空间严重，负载因子和散列函数是联动的。 解决冲突的办法： （1）线性探查法：冲突后，线性向前试探，找到近期的一个空位置。缺点是会出现堆积现象。存取时，可能不是同义词的词也位于探查序列，影响效率。（2）双散列函数法：在位置d冲突后，再次使用还有一个散列函数产生一个与散列表桶容量m互质的数c，依次试探(d+n*c)%m，使探查序列跳跃式分布。 经常使用的构造散列函数的方法 散列函数能使对一个数据序列的訪问过程更加迅速有效，通过散列函数，数据元素将被更快地定位： 直接寻址法：取keyword或keyword的某个线性函数值为散列地址。即H(key)=key或H(key) = a•key + b，当中a和b为常数（这样的散列函数叫做自身函数） 数字分析法：分析一组数据，比方一组员工的出生年月日，这时我们发现出生年月日的前几位数字大体同样，这种话，出现冲突的几率就会非常大，可是我们发现年月日的后几位表示月份和详细日期的数字区别非常大，假设用后面的数字来构成散列地址，则冲突的几率会明显减少。因此数字分析法就是找出数字的规律，尽可能利用这些数据来构造冲突几率较低的散列地址。 平方取中法：取keyword平方后的中间几位作为散列地址。 折叠法：将keyword切割成位数同样的几部分，最后一部分位数能够不同，然后取这几部分的叠加和（去除进位）作为散列地址。 随机数法：选择一随机函数，取keyword的随机值作为散列地址，通经常使用于keyword长度不同的场合。 除留余数法：取keyword被某个不大于散列表表长m的数p除后所得的余数为散列地址。即 H(key) = key MOD p, p&lt;=m。不仅能够对keyword直接取模，也可在折叠、平方取中等运算之后取模。对p的选择非常重要，一般取素数或m，若p选的不好，easy产生同义词。 查找的性能分析 散列表的查找过程基本上和造表过程同样。一些关键码可通过散列函数转换的地址直接找到，还有一些关键码在散列函数得到的地址上产生了冲突，须要按处理冲突的方法进行查找。在介绍的三种处理冲突的方法中，产生冲突后的查找仍然是给定值与关键码进行比較的过程。所以，对散列表查找效率的量度，依旧用平均查找长度来衡量。 查找过程中，关键码的比較次数，取决于产生冲突的多少，产生的冲突少，查找效率就高，产生的冲突多，查找效率就低。因此，影响产生冲突多少的因素，也就是影响查找效率的因素。影响产生冲突多少有下面三个因素： 散列函数是否均匀； 处理冲突的方法； 散列表的装填因子。 散列表的装填因子定义为：α= 填入表中的元素个数 / 散列表的长度 α是散列表装满程度的标志因子。因为表长是定值，α与“填入表中的元素个数”成正比，所以，α越大，填入表中的元素较多，产生冲突的可能性就越大；α越小，填入表中的元素较少，产生冲突的可能性就越小。 实际上，散列表的平均查找长度是装填因子α的函数，仅仅是不同处理冲突的方法有不同的函数。 了解了hash基本定义，就不能不提到一些著名的hash算法，MD5 和 SHA-1 能够说是眼下应用最广泛的Hash算法，而它们都是以 MD4 为基础设计的。那么他们都是什么意思呢? 这里简单说一下： （1) MD4 MD4(RFC 1320)是 MIT 的 Ronald L. Rivest 在 1990 年设计的，MD 是 Message Digest 的缩写。它适用在32位字长的处理器上用快速软件实现–它是基于 32 位操作数的位操作来实现的。 （2) MD5 MD5(RFC 1321)是 Rivest 于1991年对MD4的改进版本号。它对输入仍以512位分组，其输出是4个32位字的级联，与 MD4 同样。MD5比MD4来得复杂，而且速度较之要慢一点，但更安全，在抗分析和抗差分方面表现更好 （3) SHA-1 及其它 SHA1是由NIST NSA设计为同DSA一起使用的，它对长度小于264的输入，产生长度为160bit的散列值，因此抗穷举(brute-force)性更好。SHA-1 设计时基于和MD4同样原理,而且模仿了该算法。 哈希表不可避免冲突(collision)现象：对不同的keyword可能得到同一哈希地址 即key1≠key2，而hash(key1)=hash(key2)。因此，在建造哈希表时不仅要设定一个好的哈希函数，并且要设定一种处理冲突的方法。可例如以下描写叙述哈希表：依据设定的哈希函数H(key)和所选中的处理冲突的方法，将一组keyword映象到一个有限的、地址连续的地址集(区间)上并以keyword在地址集中的“象”作为对应记录在表中的存储位置，这样的表被称为哈希表。 对于动态查找表而言，1) 表长不确定；2)在设计查找表时，仅仅知道keyword所属范围，而不知道确切的keyword。因此，普通情况需建立一个函数关系，以f(key)作为keyword为key的录在表中的位置，通常称这个函数f(key)为哈希函数。(注意：这个函数并不一定是数学函数) 哈希函数是一个映象，即：将keyword的集合映射到某个地址集合上，它的设置非常灵活，仅仅要这个地址集合的大小不超出同意范围就可以。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Hash</tag>
        <tag>哈希</tag>
        <tag>KV</tag>
        <tag>键值对</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis内存数据库及其应用]]></title>
    <url>%2F2017%2F01%2F04%2FRedis%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[少量数据存储，高速读写访问。此类产品通过数据全部in-momery 的方式来保证高速访问，同时提供数据落地的功能，实际这正是Redis最主要的适用场景。详细资料请参考以下网页链接： Redis应用场景 排行榜的一种常见变体模式就像Reddit或Hacker News用的那样，新闻按照类似下面的公式根据得分来排序：score = points / time^alpha ；因此用户的投票会相应的把新闻挖出来，但时间会按照一定的指数将新闻埋下去。下面是我们的模式，当然算法由你决定。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>内存</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据取对数的意义]]></title>
    <url>%2F2017%2F01%2F04%2F%E6%95%B0%E6%8D%AE%E5%8F%96%E5%AF%B9%E6%95%B0%E7%9A%84%E6%84%8F%E4%B9%89%2F</url>
    <content type="text"><![CDATA[平时在一些数据处理中(特别是统计学中)，经常会把原始数据取对数后进一步处理。之所以这样做是基于对数函数在其定义域内是单调增函数，取对数后不会改变数据的相对关系，取对数作用主要有：1. 缩小数据的绝对数值，方便计算。例如，每个数据项的值都很大，许多这样的值进行计算可能对超过常用数据类型的取值范围，这时取对数，就把数值缩小了，例如TF-IDF计算时，由于在大规模语料库中，很多词的频率是非常大的数字。2. 取对数后，可以将乘法计算转换称加法计算。3. 某些情况下，在数据的整个值域中的在不同区间的差异带来的影响不同。例如，中文分词的mmseg算法，计算语素自由度时候就取了对数，这是因为，如果某两个字的频率分别都是500，频率和为1000，另外两个字的频率分别为200和800，如果单纯比较频率和都是相等的，但是取对数后，log500=2.69897, log200=2.30103, log800=2.90308 这时候前者为2log500=5.39794, 后者为log200+log800=5.20411，这时前者的和更大，取前者。因为前面两个词频率都是500,可见都比较常见。后面有个词频是200,说明不太常见，所以选择前者。从log函数的图像可以看到，自变量x的值越小，函数值y的变化越快，还是前面的例子，同样是相差了300,但log500-log200&gt;log800-log500，因为前面一对的比后面一对更小。也就是说，对数值小的部分差异的敏感程度比数值大的部分的差异敏感程度更高。这也是符合生活常识的，例如对于价格，买个家电，如果价格相差几百元能够很大程度影响你决策，但是你买汽车时相差几百元你会忽略不计了。4. 取对数之后不会改变数据的性质和相关关系，但压缩了变量的尺度例如800/200=4, 但log800/log200=1.2616，数据更加平稳，也消弱了模型的共线性、异方差性等。5. 且所得到的数据易消除异方差问题。6. 在经济学中，常取自然对数再做回归这时回归方程为 lnY=a lnX+b ，两边同时对X求导，1/Y(DY/DX)=a1/X, b=(DY/DX)(X/Y)=(DYX)/(DX*Y)=(DY/Y)/(DX/X) 这正好是弹性的定义。当然，如果数据集中有负数当然就不能取对数了。实践中，取对数的一般是水平量，而不是比例数据，例如变化率等。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>对数</tag>
        <tag>敏感度</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器加载、解析、渲染页面原理]]></title>
    <url>%2F2017%2F01%2F04%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD%E3%80%81%E8%A7%A3%E6%9E%90%E3%80%81%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[画个图解释清晰一点：1、首先，开源浏览器一般以8k每块下载html页面。2、然后解析页面生成DOM树，遇到css标签或JS脚本标签就新起线程去下载他们，并继续构建DOM。3、下载完后解析CSS为CSS规则树，浏览器结合CSS规则树和DOM树生成Render Tree。注意：构建CSS Object Model（CSSOM)会阻塞JavaScript的执行。JavaScript的执行也会阻塞DOM的构建。JavaScript下载后可以通过DOM API修改DOM，通过CSSOM API修改样式作用域Render Tree。每次修改会造成Render Tree的重新布局和重绘。只要修改DOM或修改了元素的形状或大小，就会触发Reflow，单纯修改元素的颜色只需Repaint一下（调用操作系统Native GUI的API绘制）。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>网页</tag>
        <tag>解析</tag>
        <tag>渲染</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用的算法的时间复杂度和空间复杂度]]></title>
    <url>%2F2017%2F01%2F04%2F%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[另外的参考资料可以点击：算法的时间复杂度和空间复杂度-总结 排序法 1、时间复杂度（1）时间频度一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。 （2）时间复杂度在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。在各种不同算法中，&nbsp;若算法中语句执行次数为一个常数，则时间复杂度为O(1),另外，在时间频度不相同时，时间复杂度有可能相同，如T(n)=n²+3n+4与T(n)=4n²+2n+1它们的频度不同，但时间复杂度相同，都为O(n²)。 按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(\log _{2}n),线性阶O(n), 线性对数阶O(n\log _{2}n),平方阶O(n²)，立方阶O(n^{3}),…， k次方阶O(n^{k}),指数阶O(2^{n})。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。 （3）渐进时间复杂度评价算法时间性能 主要用算法时间复杂度的数量级(即算法的渐近时间复杂度)评价一个算法的时间性能。 2、空间复杂度与时间复杂度类似，空间复杂度是指算法在计算机内执行时所需存储空间的度量。记作: S(n)=O(f(n)) 我们一般所讨论的是除正常占用内存开销外的辅助存储单元规模。讨论方法与时间复杂度类似，不再赘述。类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。渐近空间复杂度也常常简称为空间复杂度。空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地\”进行的，是节省存储的算法，如这一节介绍过的几个算法都是如此；有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如将在第九章介绍的快速排序和归并排序算法就属于这种情况。&nbsp;如当一个算法的空间复杂度为一个常量，即不随被处理数据量n的大小而改变时，可表示为O(1);当一个算法的空间复杂度与以2为底的n的对数成正比时，可表示为0(\log _{2}n)；当一个算法的空I司复杂度与n成线性比例关系时，可表示为0(n).若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间；若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变量。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>时间</tag>
        <tag>排序</tag>
        <tag>算法</tag>
        <tag>复杂度</tag>
        <tag>空间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[马斯洛的需求层次理论]]></title>
    <url>%2F2017%2F01%2F03%2F%E9%A9%AC%E6%96%AF%E6%B4%9B%E7%9A%84%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[马斯洛的需求层次理论（英语：Maslow’s hierarchy of needs）是亚伯拉罕·马斯洛于1943年《心理学评论》的论文〈人类动机的理论〉（A Theory of Human Motivation）中所提出的理论。马斯洛随后延伸了这个想法，包含了他对人类天生好奇心的观察。他的理论与其他人类发展心理学的理论可以并行，尤其是针对人类成长阶段的描述。马斯洛使用了“生理”、“安全”、“隶属”与“爱”、“自尊”、“自我实现”与“自我超越”等术语，描述人类动机推移的脉络。马斯洛研究了他所谓的模范人物，包含了阿尔伯特·爱因斯坦、简·亚当斯、埃莉诺·罗斯福与弗雷德里克·道格拉斯，不研究有精神病或神经症的人，写下“对于残废、发育不良、不成熟与不健康的个案研究，将只会产生一种残缺的心理学与哲学。”马斯洛研究了大学学生人口中前1%的最健康个案。马斯洛的理论在他于1954年的书籍著作《动机与个性》（Motivation and Personality）当中完整阐述。这种分层结构仍然是社会学研究、管理培训以及中等与高等教育心理课程的流行架构。中国的管仲在西方的马斯洛之前两千多年提出类似主张。他说：“仓廪实而知礼节，衣食足而知荣辱。”马斯洛的需求层次理论，以金字塔图像呈现，基本需求最强的在最底部。 理论内容1、生理需要（physiological needs）也称级别最低、最急迫的需要，如：食物、水、空气、性欲。未满足生理需要的特征：什么都不想，只想让自己活下去，思考能力、道德观明显变得脆弱。例如：当一个人极需要食物时，会不择手段的抢夺食物。人民在战乱时，是不会排队领面包的。假设人为报酬而工作，以生理的需要来激励下属。激励措施：增加工资、改善劳动条件、给予更多的业余时间和空间休息、提高福利待遇。 2、安全需要（safety needs）同样属于较低层的需要，其中包括对人身安全、生活稳定以及免遭痛苦、威胁或疾病、拥有家庭、身体健康以及有自己的财产。缺乏安全感的特征：感到自己对身边的事物受到威胁，觉得这世界是不公平或是危险的。认为一切事物都是危险的、而变的紧张、徬徨不安、认为一切事物都是“恶”的。例如：一个孩子，在学校被同学欺负、受到老师不公平的对待，而开始变得不相信这社会，变得不敢表现自己、不敢拥有社交生活（因为他认为社交是危险的），而借此来保护自身安全。一个成人，工作不顺利，薪水微薄，养不起家人，而变的自暴自弃，每天利用喝酒，吸烟来寻找短暂的安逸感。激励措施：强调规章制度、职业保障、福利待遇，并保护员工不致失业，提供医疗保险、失业保险和退休福利、避免员工收到双重的指令而混乱。 3、社交需要（Love and belonging needs）属于较高层的需要，如：对友谊、爱情以及隶属关系的需求。缺乏社交需要的特征：因为没有感受到身边人的关怀，而认为自己没有价值活在这世界上。例如：一个没有受到父母关怀的青少年，认为自己在家庭中没有价值，所以在学校交朋友，无视道德观和理性地积极地寻找朋友或是同类。譬如说：青少年为了让自己融入社交圈中，为别人做牛做马，甚至吸烟，恶作剧等。激励措施：提供同事间社交往来机会，支持与赞许员工寻找及建立和谐温馨的人际关系，开展有组织的体育比赛和集体聚会。 4、尊重需要（esteem needs）属于较高层的需要，如：成就、名声、地位和晋升机会等。尊重需求既包括对成就或自我价值的个人感觉，也包括他人对自己的认可与尊重。无法满足尊重需要的特征：变得很爱面子，或是很积极地用行动来让别人认同自己，也很容易被虚荣所吸引。例如：利用暴力来证明自己的强悍。激励措施：公开奖励和表扬，强调工作任务的艰钜性以及成功所需要的高超技巧，颁发荣誉奖章、在公司刊物发表文章表扬、优秀员工光荣榜。 5、自我实现需要（need for self-actualization）是最高层的需要，包括针对于真善美至高人生境界获得的需求，因此前面四项需要都能满足，最高层的需要方能相继产生，是一种衍生性需要，如：自我实现，发挥潜能等。激励措施：设计工作时运用复杂情况的适应策略，给有特长的人委派特别任务，在设计工作和执行计划时为下级留有余地。]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>马斯洛需求</tag>
        <tag>管仲</tag>
        <tag>需求层次</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《长尾理论：为什么商业的未来是小众市场》读书心得]]></title>
    <url>%2F2017%2F01%2F03%2F%E3%80%8A%E9%95%BF%E5%B0%BE%E7%90%86%E8%AE%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E5%95%86%E4%B8%9A%E7%9A%84%E6%9C%AA%E6%9D%A5%E6%98%AF%E5%B0%8F%E4%BC%97%E5%B8%82%E5%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一、长尾市场的产生在传统经济学中，80/20原则占了主导地位，那是因为现实世界中的货架是有限的，所以，能进到消费者视角的仅仅是销量最好的那20%的产品。在工业化及互联网时代，在一个无限货架空间限制和其它供应商瓶颈的时代，面向特定小群体的产品和服务可以和主流热点具有同样的经济吸引力。这时候，传统经济学中两个重要的稀缺性函数—边际生产成本、边际销售成本，正在趋近于零，为长尾市场奠定了基础。从更广的角度来看，我们明显可见，长尾理论阐释的实际上是丰饶经济学。当我们文化中的供需瓶颈开始消失，所有产品都能被人取得的时候，长尾便会自然发生。按照数学集合论的原理：一个极大的数（长尾中的产品）乘以一个相对较小的数（每一种长尾产品的销量），仍然等于一个极大极大的数。并且，通过互联网手段，企业可以方便的将大规模市场转化成无数的利基市场。从而，利基市场也能给企业带来大的利润，并而打破了传统经济学中的80/20原则。现在，长尾市场有有形产品，也有数字产品。有形产品只是把集中化的供给和分散化的需求联络在一起。目前有形产品到数字产品（也是从原子到字节的过程）的范围还比较小，但纯数字的零售，边际成本和销售成本几乎为零，这个的发展是无可限量的。不过随着现在3D打印技术的进步，有形产品也会慢慢的转化到无形产品来的。同时，在长尾市场，因为产品的无限，所以，帮助用户找到自己需要的货品就是一个很重要的工作。而网络上天然的集合器功能，加上目前发展迅猛的搜索及推荐系统，让这一切成了可能。所以说，长尾市场，概括为两句话：1、提供所有产品；2、帮我找到它 二、长尾市场的三要素 1、生产普及（内容）根据幂律分布图，幂律曲线的值域无限接近但永远不会下降至零，它也被称为“长尾”曲线。在统计学中，这种形状的曲线被称为“长尾分布”，因为相对头部来说，它的尾巴特别长。我们把注意力集中在这条长尾上，把它转化成一个专有名词，就是“长尾理论”的来历。 2、传播普及（平台）产品的无限话，需要有一个相对集中的展示地方，让消费者知道去哪里找到这些产品，需要让消费者了解到这些产品及相关的产品信息。成功长尾集合器的法则：存货：虚拟存货（提供平台，货物在其它合作伙伴那里）例如亚马逊、淘宝，数字存货：iTune总包（Crowdsoucing）：企业原本需要花钱雇人做的事，用户却很高兴免费去做。维基百科，豆瓣的电影评论传播途径：跨时空，多种方式多产品：产品不同的组合、定制多价格体系：不同的套餐、消费方式。分享信息：产品详实的信息。完整的内容：提供完整版，例如网络上不限于电影院的版本。市场反馈：评测，形成正反馈免费的力量：首先用免费或者低价吸引大批用户，然后说服其中的某些人升级为付费的高级用户。 3、供需相连（工具）在一个无限选择的时代，统治一切的不是内容，而是寻找内容的方式。为什么过滤器对长尾来说如此重要？原因很简单：如果没有过滤器，长尾有可能只是一个恼人的噪声源而已。搜索引擎应运而生，帮助人们从噪声中分离出来了一些有价值的信号。在网上，存货是“非排他性”的，换句话说，噪声依然存在，但Google允许你有效地忽略噪声。 1） 集合器目前的集合器，从之前的统一化集合器，慢慢也发展出很多主体化集合器（垂直搜索） 2） 过滤器传统的商业采用的是事前过滤器，通过人工预测判断那些产品畅销，然后进行订购，但这些往往不可靠，所以商店里面出现了滞销品，占用了宝贵的货架空间。而信息化时代是事后过滤器，只负责统计，例如搜索、推荐系统等，反映的是实际市场的心声，但他们也会疏导和放大消费者的行为。会出现反馈环，出现马太效应，赢者通吃的局面。 三、长尾市场的特点1、头部尾部的关系虽然尾部很重要，但是，头部产品一般是作为尾部的起点，如果消费者找不到他们熟悉的条目，自然也就找不到搜索长尾的起点了。 2、价格的考虑思考：畅销品、滞销品谁的折扣多点？1）对于需求市场实体店应该是滞销品折扣多，因为占用货架、有存货成本，所以需要尽快卖出。畅销品因为买的人多，物以稀为贵，所以涨价。但是在网上，因为存货成本几乎为0，所以不需要清理滞销产品，反而这些产品是利基市场，需要的人，往往对价格不敏感，所以也不需要降价。而畅销品，因为生产力是无限的，从走货的角度来说，可以通过折扣，来走量，获得更大的利益。例如亚马逊的策略就是如此。2）对于愿望市场需求越大，价格就越高。例如老歌，许多唱片公司开始尝试着用折扣的方式推广一些老歌和不知名的新作。 3、营销方式发生变化在网络时代，评价体系发生变化：在网上，人们利用口头传播效应来创造需求，这种力量正在取代传统的营销方式。（口碑营销、熟人营销）对于新一代消费者来说，一个公司怎样宣传它的品牌并不重要，重要的是Google搜索出来的条目怎么评价它。（例如豆瓣上的评价也一样）所以，我们也需要适应这种变化，而不是仅仅通过公式的广告来推广，也需要重视网络的评价。 文章摘录 大一统的文化只是例外，不是规则。 经济学的任务：力求用简单易懂的框架来描述真实世界的现象。经济学：一门社会科学，研究的是稀缺资源下的选择。亚当·斯密就是用时间（或便捷性）和金钱的权衡理论开创现代经济学的。从此，有限蛋糕的分割方法就成了经济学的核心问题。 “饮水机效应”指的是办公室里围绕某个大众文化事件的热烈讨论。 下水道的最高排放量通常是在超级碗大赛（Super Bowl）的中场休息时测量到的。 知道大热门的密码公式，把魅力四射的年轻男人卖给年轻的女人。成功的要点无非就是帅气的外表和打造出的个性，音乐本身几乎成了无关紧要的事。 黄金唱片：销量超过50万张；白金唱片：销量超过100万张；超白金唱片：销量200万~1000万张；钻石唱片：1000万张以上。 电影启用大牌演员和导演，只不过是给一件不可预见的事情带来一点点可预见性。 AC尼尔森公司（ACNielsen），又名：AGB尼尔森，是一家总部位于美国纽约市国际市场调查研究公司，北美地区总部坐落于伊利诺斯州绍姆堡。主要研究包括消费品市场的情况和动态、解决市场和销售问题，以及确定市场发展机会。在该行业是全球最大和最有名气的公司。 反馈环：分为正反馈环和负反馈环。正反馈环是指市场中的投资者受到分析师乐观的收益预测、通货膨胀回落及“货币幻觉”的影响等等，导致了投机性价格上升，最初的投资者取得了成功，从而吸引了公众的注意力，导致了价格的进一步上涨，因为通过投资者需求的上升，最初的价格上涨又反馈到了更高的价格中；负反馈环则与之相反。反馈环理论不单适用于投资行为，其背后的原理更多凸显的是心理因素，受心理预期的影响，某种行为会在群体间得到放大，结果便是好的愈好，差的愈差，到了临界点，泡沫破灭，又会恢复原始状态，周而复始。 邮购分类目录是互联网购物的前身。 宽客（Quant）宽客是现代金融市场的基础——金融衍生品的创造者。 另一种定义称：指一群靠数学模型分析金融市场的物理学家和数学家。他们相信数学的精确性是分析最复杂的人类活动的基础，还曾用分析神经系统的数学技巧来赚钱。还有一种定义：指数量金融师，他们受过严格的科学训练，主要的工作是建立工作金融交易模型。 马克思在《德意志意识形态》一书中提出，劳动—也就是被迫、非自发的有偿工作，将被主观积极性取代。物质生产为每一个人留下了从事其它活动的剩余时间。（个人注：其实就像8小时之外的时间，是每个人自己支配的。） 维基（Wiki）：夏威夷语单词，意思是快捷或迅速。wikipedia上创建了一个堪比亚历山大大帝的古代图书馆相媲美的知识宝库。之前创建权威知识库一直就是学者们的事情，但wiki颠覆了这点，采用了一种开放式的集思广益。wikiepedia从混乱中创造出了秩序。维基百科的优点：1、时时更新的能力；2、篇幅的无限性和视觉辅助（比如图片和图表）；3、大量链接到其他资源的外部链接；4、维基百科或许还能更好的显示不同的观点和争议之处。wiki有时候也只一种多人协作的模式。例如：wikipedia：是维基百科； wikiLeaks：维基揭秘。两者没什么关系，只是两者都使用了协作的模式，都使用了Wiki的字眼而已。 P2P：peer-to-peer 对等，点对点； 自己亲自发现的东西通常会给他们带来更大的满足感。默多克说过：年轻人不会等待某个神圣的数据来告诉他们什么东西是重要的，他们想控制他们的媒体而不是被媒体控制。 信息理论：这么学问研究的主要是一个信息采集的问题，从随机性的电子噪声中分离出连贯有序的信号。（信号-噪声比） 马尔萨斯就是零和游戏的支持者，他认为人口会以几何级数增长，而农业产出只能以算术技术增长。根据马尔萨斯的观点，食物匮乏最终会扼杀经济增长。 许多非商业书籍只是营销工具而已，目的是提高作者的学术声望，推销他们的顾问服务，为他们赚取演讲费，或者只是将他们的名号留在世上。从这个角度来看，自我出版并不是赚钱的一种方式，而是对其他人传达信息的一种方式。 自助出版网站Lulu.com，但在中国因为各种因素，是无法开展这个业务的。具体见阮一峰的文章《自助出版网站Lulu.com》 黑天鹅效应《黑天鹅效应：如何及早发现最不可能发生但总是发生的事》（The Black Swan）是一本由纳西姆·尼可拉斯·塔雷伯（Nassim Nicholas Taleb）所著关于随机和不确定性的书。其典故来自当欧洲人首次接触到黑天鹅所引发的冲击而命名。在18世纪欧洲人发现澳洲之前，由于他们所见过的天鹅都是白色的，所以在当时欧洲人眼中，天鹅只有白色的品种。直到欧洲人发现了澳洲，看到当地的黑天鹅后，人们认识天鹅的视野才打开，只需一个黑天鹅的观察结果就能使从无数次对白天鹅的观察中推理出的一般结论失效，引起了人们对认知的反思－以往认为对的不等于以后总是对的。“黑天鹅”隐喻那些意外事件：它们极为罕见，在通常的预期之外，在发生前，没有任何前例可以证明，但一旦发生，就会产生极端的影响。 帕累托原则（80/20法则）也是一种重要少数原则（Law of the Vital Few） 电子商务：便利、便宜实体店：体验好、社交需要（人是群居动物）在物理世界中移动的是消费者，而不是产品，互联网相反。 城市中各公司聚集在一起，也是为了利用密集人口所带来的生产率的优势、规模经济和知识外溢效应。 今天的零售货架就是人类与产品供应链的互动界面。超市中，中部神奇货架的销售力是底部货架的5倍还多。 博客可以专注于某些特殊的主题，这样的专业化程度，媒体企业的记者是没有几个能做到的。因为记者越专业，公司要雇用得记者就越多，这样他们才能覆盖所有的领域。自媒体的力量。 愤青： young contrarian 60年代我们学会了质疑权威，但并没有提供质疑权威的工具。现在我们掌握了这些工具— 互联网 戴维·福斯特·华莱士：电视又粗俗、又下流、又愚蠢，并不是因为电视观众又粗俗、又下流、又愚蠢。电视之所以是这副样子，只是因为人们在那些粗俗、下流、愚蠢的兴趣爱好上极端的相似，但在那些优雅、美好、高尚的兴趣爱好上却又大相径庭。 eBay最初只是作为一个实验项目而创立的：试试看网上出售旧货是否强于现场兜售。 浏览器同时扮演了统一用户界面和操作系统防护盾的角色。 Google的广告：自我服务模式、可衡量的效果、低进入成本和不断改进广告内容的能力。 他们既没有陶醉于过去所取得的成绩，也没有忘记它们必须遵循的传统。 以客户为中心 倾听消费者的声音。 最大的机构，往往不愿意摒弃那些传统的、组织严密的，有指挥有控制的信息传递方式。 公关的职责从对外关系专项了对内关系，从沟通交流转移到了培训员工如何有效地做好自我的宣传。 超新星：超新星是一颗爆炸的恒星，而且它的光度会短暂的超越整个星系，辐射出的能量如同太阳或普通恒星一生所辐射的总量。在它的光度衰退前，可以用裸眼看见几个星期或数月。这极端的亮度爆发的辐射会驱逐这颗恒星大部分或全部的物质，并以30,000 km/s（光速的10%）的速度驱动着激波进入周遭的星际物质。这个激波会清扫出一个膨胀的气体壳层，称为超新星遗迹的外壳。超新星是星系引力波潜在的强大来源。初级宇宙射线有很大的比例来自超新星。恒星演化中的作用超新星爆发后的遗迹包括一个中央的致密星体和因激波而快速向外扩散的物质。这些物质在快速膨胀的状态下扫过周围的星际物质，这种状态能够持续长达两个世纪。其后它们将经历一个绝热膨胀的过程，进而再用一万年左右的时间逐渐冷却并与周围的星际物质混合。根据天文学中的标准理论，大爆炸产生了氢和氦，可能还有少量锂；而其他所有元素都是在恒星和超新星中合成的。超新星爆发令它周围的星际物质充满了金属（对于天文学家来说，金属就是比氦重的所有元素，与化学中的概念不同）。这些合成的金属丰富了形成恒星的分子云的元素构成[126]，所以每一代的恒星（及行星系）的组成成分都有所不同，由纯氢、氦组成到充满金属的组成。超新星是宇宙间将恒星核聚变中生成的较重元素重新分布的主要机制，不同元素的所有的分量对于一颗恒星的生命，以至围绕它的行星的存在性都有很大的影响。膨胀中的超新星遗迹的动能能够压缩凝聚附近的分子云，从而启动一颗恒星的形成。如果气体云无法释掉过多的能量，增大的湍流压也能阻止恒星形成[10]。在太阳系附近的一颗超新星爆发中，借助其中半衰期较短的放射性同位素的衰变产物所提供的证据能够了解四十五亿年前太阳系的元素组成，这些证据甚至显示太阳系的形成也有可能是由这颗超新星爆发而启动的。由超新星产生的重元素经过了和天文数字一样长的时间后，这些化学成分最终使地球上生命的诞生成为可能。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>管理</tag>
        <tag>市场</tag>
        <tag>长尾理论</tag>
        <tag>小众立场</tag>
        <tag>利基市场</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利基市场（niche market）]]></title>
    <url>%2F2016%2F12%2F27%2F%E5%88%A9%E5%9F%BA%E5%B8%82%E5%9C%BA%2F</url>
    <content type="text"><![CDATA[利基市场（英语：niche market）是指由已有市场绝对优势的企业所忽略的某些细分市场，并且在此市场尚未完善供应服务。一般由较小的产品市场并具有持续发展的潜力中一些需要但尚未被满足的族群消费者所组成。为了满足特定的市场需求，价格区间与产品质量，针对细分后的产品进入这个小型市场且有盈利的基础。经由专业化的经营将品牌意识灌输到该特定消费者族群中逐渐形成该族群的领导品牌。 利基一词是英文NICHE的音译，原指小生境。利基：较小的一块区隔(较狭窄的顾客群)，有利润而又专门性的市场利基战略，则是指企业根据自身所特有的资源优势，通过专业化经营来占领这些市场，从而最大限度的获取收益所采取的竞争战略。20世纪80年代，美国商学院的学者们开始将这一词引入市场营销领域。 niche market就是指“小众市场”，也被称为“缝隙市场、利基市场”。Niche是相对于mass（大众）而言的，与niche market相对的就是mass market（大众市场）]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>利基市场</tag>
        <tag>小众</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《响应式Web设计- HTML5和CSS3实战》读书心得]]></title>
    <url>%2F2016%2F12%2F26%2F%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1%20%2F</url>
    <content type="text"><![CDATA[响应式设计是使用一套代码为各类设备提供良好设计效果和使用体验的最佳设计方法。响应式设计中，我们力求精简、语义和内容优先。响应式网页设计（RWD，Responsive Web Design），是将三种已有的开发技巧（弹性网格布局、弹性图片、媒体和媒体查询）联合起来的一种网页设计技术。（个人注：这里的媒体是指使用网页的设备。）。和以前的网页设计以桌面电脑为中心的设计思想不同的是，响应式方法论是先针对小视口进行设计，然后逐步针对大视口进行渐进增强支持。这就是一种为“未知设备”而设计的思想。但是，虽然说响应式设计有自己的优势，但是专门设计的手机版页面也有其优势，例如手机版（非响应式设计）网站可以基于增强现实功能、用户当前GPS位置功能。所以说，在预算允许的情况下，一个完全定制的“移动版”网站比响应式设计更适合。按照作者所说，我们应该把精力花在更有价值的地方。所以，HTML5、CSS3技术，给我们提供了很多简单的、语义明确的、功能强大的工具，让网页设计人员能把精力放在内容上，而不是形式上。HTML5、CSS3的出现，使网页的设计达到了飞跃的发展，使我们对JavaScript的依赖降低到最小的限度。 一、HTML5的新特性1、新的语义标签新的语义标签能更简洁的创建代码、创建更具语义的网页。包括新的结构元素、视频、音频标签。语义化就是标签赋予意义的过程。 2、提供了针对表单处理和用户输入的特定工具这些特性大大节省了为表单验证这类工作而在复杂技术如JavaScript上耗费的精力。增加了电话号码、电子邮件及URL的输入类型检查；并且，键盘还可以根据这些输入类型自动调整键盘的样式。还包括颜色、搜索、日期及时间等类型。占位符的支持：表单域中都有占位符文字，如果聚焦该域，其中的占位符文字就会自动消失；如果失去焦点，又重新显示； 二、CSS3的新特性CSS（层叠样式表）作为一种将设计与内容分离的方法引入。支持外部样式表（独立文件）、内部样式表（文件内）、内联样式表（元素内）。所谓层叠，就是只样式表中后面的样式会覆盖前面相同的样式。重置样式就是一组CSS声明，用来覆盖不同浏览器渲染HTML元素时的各种默认样式。 1、能简单的实现网页视觉及动态效果。使用CSS3制作动画比JavaScript或Flash更轻量级，更好维护，因此对响应设计来说很理想，同时可以大幅减少视觉效果对图片的依赖。CSS3中的选择器([alt])，让我们可以选择页面中任何我们想要的元素。而过去我们需要使用JavaScript库（如jQuery）来做复杂的元素选择。一些熟悉CSS3的同志早就看不惯动不动就使用Javascript的做法了，他们正想方设法收复失地，虽然CSS3不可能短期内取代jQuery或类似的框架。 2、支持媒体查询设备可视区域，也叫“视口”。在不改变页面内容的情况下，根据使用设备的视口来选择相关的显示样式和效果。媒体查询支持的特性由：width、height、color等；但在设计的时候，需要考虑不同设备内容模块显示顺序的重要性和差异性。这时候，“内容优先”的原则是合理的做法。 3、支持流式布局流式布局又称等比缩放布局，使用百分比设定宽度。流式布局，使得页面能在某个宽度内自由伸缩。传统的基于像素的布局，优点是更加接近印刷设计，保证不同的显示器出来的效果是一样的。 4、媒体查询与流式布局的组合使用百分比布局创建流动的弹性界面，同时，使用媒体查询来限制元素的变动范围，将这两者组合到一起构成了响应式设计的核心，基于此可以创造出真正完美的设计。 三、怎么说服客户接纳响应式网页设计技术 文章摘录 Chrome，调整浏览器分辨率模拟各种设备的插件，Windows Resizer。 前端的瑞士军刀：Modernizr 包括了好多最佳实践的HTML5的样板文件。 IOS模拟器、Android模拟器，可以模拟相关的手机。 使用多个独立的文件会增加页面渲染的HTTP请求数量，从而导致页面加载变慢。所以，雪碧图也是为了解决这个问题。 页面的主要结构：头部、导航、侧边栏、内容以及页脚。 单位：em 相对单位，相对上下文的字体的比例。 em是书面形式的大写字母“M”的简称，发音和M相同。以前，“M”常被用来测定某种字体的大小，因为它是英文字母中最大（最宽）的字母。 现代浏览器的默认文字大小都是16像素。 如果你指向讲某个元素包裹起来以便于设置样式，那应该还是使用&lt;div&gt;。 可缩放矢量图形 SVG CSS沿用了在Flash和其它基于时间线的应用程序中被广发使用的动画关键帧技术。CSS3动画由两部分组成：首先是关键帧声明，然后在动画属性中使用该关键帧声明。 jQuery 是JavaScript框架，定义了一组API，方便JavaScript调用操作页面元素（DOM）。 span 元素的作用公司选择指定特定文本，以便于指定特殊的样式，这些特性由CSS控制。meta 元素提供相关页面的元信息，格式是名称/值对。（单闭合元素，不需要关闭标签）ul 元素定义无序列表]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>响应式</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>网页设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黄金分割]]></title>
    <url>%2F2016%2F12%2F26%2F%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2%2F</url>
    <content type="text"><![CDATA[黄金比例，又称黄金分割，是一个数学常数，一般以希腊字母 \phi 表示。可以透过以下代数式定义： \dfrac {a+b} {a}=\dfrac {a} {b}=\phi \qquad \left(a>b>0\right)这也是黄金比例一名的由来。黄金比例的准确值为 \dfrac {1+\sqrt {5}} {2}，所以是无理数，而大约值则为（小数点后20位）： \phi=1.61803398874989484820应用时一般取1.618，就像圆周率在应用时取3.14一样。黄金分割具有严格的比例性、艺术性、和谐性，蕴藏着丰富的美学价值，而且呈现于不少动物和植物的外观。现今很多工业产品、电子产品、建筑物或艺术品均普遍应用黄金分割，展现其功能性与美观性。 一个得出 \phi 数值的方法是从左边的分数式入手。经过简化和代入， \dfrac {a+b} {a}=1+\dfrac {b} {a}=1+\dfrac {1} {\phi}于是： 1+\dfrac {1}{\phi }=\phi两边乘以\phi就得到： \phi +1=\phi ^{2}即是 \phi^{2}-\phi -1=0找出该方程的正解， \phi =\dfrac {1+\sqrt {5}}{2}=1.6180339887黄金分割奇妙之处，在于其倒数为自身减1，即：1.618…的倒数为0.618… = 1.618… - 1，并时常被称为“黄金比例共轭”。从上面的1+\dfrac {1}{\phi }=\phi得到： \dfrac {1} {\phi }=\phi -1这个0.618…的数值常用希腊字母 \Phi 表示，即： \Phi =\dfrac {1} {\phi } =\dfrac{1} {1.6180339887...} =0.6180339887...，亦可表达为： \Phi =\phi -1=1.6180339887... -1=0.6180339887...]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>黄金分割</tag>
        <tag>1.618</tag>
        <tag>黄金比例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《一本书读懂财报》读书心得]]></title>
    <url>%2F2016%2F12%2F26%2F%E4%B8%80%E6%9C%AC%E4%B9%A6%E8%AF%BB%E6%87%82%E8%B4%A2%E6%8A%A5%2F</url>
    <content type="text"><![CDATA[3月份就在Kindle看过这本书，在Kindle看过的书，感觉效果不很好，最近接触到财务报表，又决定买一本纸质书来看了。资产负债表、利润表、现金流量表是企业三张财务报表，这三张报表经常听到、看到，但是平时只知道皮毛，现在重看了一遍，很多事情就豁然开朗了。资产负债表和利润表告诉我们公司的运营情况，现金流量表告诉我们公司的风险状况。通俗点概况：如果资产负债表和利润表说这个公司好，说明他赚钱；现金流量表说这个公司好，说明它有钱。现金流量表既涵盖了企业经营活动的现金流，也包括了企业投资和融资活动的现金流，也就是说，他把企业的经营、投资、融资活动又重新描述了一遍。现金流是风险的视角；资产负债表是家底的视角；利润表是收益的视角。他们构成了一个有机的整体，完整的、不多不少地描述了一家公司的所有经济活动。三张报表分别构建了两个体系，一个体系由现金流量表构成，另一个体系由资产负债表和利润表共同构成，这两者都记录了企业所有现金的流入和流出。但在现金流量表上，我们不需要考虑这个支出跟未来有没有关系；而资产负债表和利润表构成的体系当中，我们则以经济活动是否与未来有关未标准，将他们各自反应在两张报表上。实际上，两个体系描述了同样的经济活动，但他们各自描述经济活动的方式是不一样的。资产和费用之间有一个很大的共同之处，就是都得花钱。但如果这笔钱可以换来一个对将来有用的东西，那它就是资产。如果这笔钱花完就完了，那它就是费用。在很多情况下，资产和费用只存在时间概念的不同，今天说的资产其实就是明天的费用（例如折旧费（或者成本），长期待摊费用等）。最初是一笔资产，但随着企业的正常运营和时间的流逝，最终变成了一笔费用，这就叫待摊费用。比如预付的房租、预付的广告费、开办费等（一般指超过一年的）。书中提到一句话很好：会计是一个谨慎的行业！所以，在会计的过程中，从谨慎的角度去思考总是对的。以上就是对三张报表的粗略理解，下面就是看书过程的一些记录。 一、资产负债表资产负债表：企业大单反相机（时点的概念）企业一辈子其实只做了三件事：经营、投资、融资；与历史成本相对的，用当前的市场价格来计价的，会计们会把它称为“公允价值”。如果一个东西的市场价格全世界都看得到，没有任何争议，它就可以用公允价值来计价。除了金融资产和房地产（投资性房地产）之外，所有的大多数资产都是按照历史成本来计价。历史成本的两层含义：1、只有花了的钱才能记在账上；2、增加资产价值的唯一途径就是发生一个新的交易；股东权益：公司中总资产扣除负债后所余下的部分，也称为净资产。在中国，股本必须等于注册资本。当股东实际投入的资金比注册资本多，那么多出来的这块，就是所谓的资本公积。（上市公司一定有资本公积）股本金额就等于公司的注册资本，这就意味着，股本的总额体现了这个公司对外承担法律责任的上限，而股本的组成则确定了多个股东之间权利义务的关系。因此股本具有非常重要的法律意义。资产负债表：由资产、负债、股东权益三部分组成；资产负债表的左边告诉我们，钱被拿去做什么了；右边告诉我们，企业的钱是从哪里来的；让公司的股东了解自己的家底，股东必须了解自己投入的资金都去了哪里，又欠了谁的钱。资产等于负债加上股东权益就是资产负债表上最基础的逻辑关系，也是整个会计学当中最基础的逻辑关系，我们称之为“会计恒等式”。 二、利润表利润表主要用来描述企业的经营活动。企业在经营过程中支付的各种费用、支付的所得税以及研发支出等。这些经济活动只与经营有关，所以利润表是主要描述经营活动的一种财务报表。利润表就是给这家公司的盈利状况录了一段视频。所得税：是企业赚到钱才需要交纳；流转税：无论是否赚钱，只要有业务的企业都得交纳，常见的流转税有营业税和增值税。营业税：价内税；会在利润表中出现增值税：价外税；一种销售税，属于消费者承担的税费，属累退税。不会在利润表中出现，增值税要交给税局的，所以体现在资产负债表中的应交税金这一项目中。营业税及附加：营业税的附加税费包括城市维护建设费、教育附加等。期间费用：营业费用、管理费用、财务费用营业费用：在生产和销售过程中产生的费用就是营业费用。例如运费、仓储费、广告费、销售人员的工资、门店的租金或折旧等。管理费用：与企业的管理环节的有关的一切费用。例如管理人员的工资、行政办公费用、办公楼的折旧等。（房地产中工程人员的工资属于成本）毛利=营业收入-营业成本税法规定：当公司的广告支出超出了营业收入的15%之后，超过的部分就不能在（所得）税前列支了。固定成本：厂房设备的折旧是一种固定成本。 三、现金流量表现金流量表本来就是一张流水账单。现金流量表向我们展示了资产负债表上货币资金增减变化的原因。 四、表间逻辑利润表和资产负债表最直接、最表面的联系：利润表中的一部分利润有可能被归入资产负债表中的未分配利润这一项，未分配利润将两张表联系在一起。通过设计不同的组织架构，来实现不同的会计结果：例如：研发支出应该被记录在管理费用中，但是，外购技术（说明该技术的商业价值得到了认可）的支出是记在无形资产中。所以，可以把研发部门作为独立的法人，母公司采购研发公司的技术，这时候，就可以记录在无形资产中了。在经营活动中，应收账款、应付账款等项目，他们会被列在资产负债表中。但是，资产负债表虽然与经营活动有那么一点点的关系，但和投资、融资才算是真正的血亲。任何时间利润和现金流的差异都正好是非现金资产和负债的变化，同时，这也是三张报表最为重要的内在联系。，例如，购买50万的资产，现金流量表有50万的现金流出，同时，在固定资产一项中有记录50万的固定资产；但是在利润表中是没有体现的。这样，现金流量表和利润表的差额就多出50万。然后，设备使用第一年，产生5万的折旧（入成本或者费用），这时，利润表多了5万的费用。这时，利润表和现金流量表又不一样了。而两者的差异正好是企业资产负债表上减少的那部分非现金资产。 当一个企业遭遇巨大风险的时候，关注风险是第一的，现金流对他来说更重要；当企业经营搞活动风险在相对可控的范围时，利润就显得更为就重要。经济形势不好的时候，很多企业会特别关注现金流；而经济形势好的时候，他们又会格外关注利润。不同人关注三张的角度： 银行：关注现金流量表 投资人：关注利润表； 收购方：关注资产负债表 五、财务报表的分析方法 1）同型分析各项占比，让企业更加了解财务报表的结构；同时，可以进行趋势分析、比较分析（同行）； 2）比率分析利润率：毛利率、净利润率总资产周转率：收入÷总资产效益：净利润率=净利润÷收入效率：总资产周转率=收入÷总资产总资产回报率（ROA）=效率*效益=净利润÷总资产 企业的短期偿债能力：流动比率=企业流动资产÷流动负债；或者更谨慎的方法，速动比率=（流动资金- 存货）÷流动负债企业的长期偿债能力：资产负债率=企业负债总额÷企业资产总额 3）现金流分析 六、影响财务数据的因素1、外部环境存在差异2、企业的战略定位分为：1）成本领先战略型。体现在毛利率低；毛利只受企业战略定位的影响，净利润还收管理水平、营销模式等因素的影响。2）差异化战略型3、战略执行能力 七、什么样的企业才是好企业好企业应该是赚钱的，赚钱是企业存在的终极目标。机会成本：为了得到某种东西而要放弃另一些东西的最大价值；也可以理解成在面临多方案择一决策时，被舍弃的选项中最高价值者是本次决策的机会成本。行业平均盈利水平是衡量企业用股东钱的成本（而不是银行利息），就是所谓的加权平均资本成本。不过需要考虑“利息的税盾作用”一家公司的净利润大于0，但是经济利润小于0，那么这并不是一家赚钱的公司。贴现：那些钱相当于现在的多少钱，这个过程就叫做“贴现”。也叫现值。用现值-成本就是净现值。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>读书心得</tag>
        <tag>三张</tag>
        <tag>财务报表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符编码笔记：ASCII，Unicode和UTF-8]]></title>
    <url>%2F2016%2F12%2F23%2F%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%9AASCII%EF%BC%8CUnicode%E5%92%8CUTF-8%2F</url>
    <content type="text"><![CDATA[转自：http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html字符编码是计算机技术的基石，想要熟练使用计算机，就必须懂得一点字符编码的知识。 1. ASCII码我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。ASCII码一共规定了128个字符的编码，比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。 2、非ASCII编码英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用ASCII码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0—127表示的符号是一样的，不一样的只是128—255的这一段。至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。中文编码的问题需要专文讨论，这篇笔记不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的Unicode和UTF-8是毫无关系的。 3.Unicode正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字”严”。具体的符号对应表，可以查询unicode.org，或者专门的汉字对应表。 4. Unicode的问题需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。比如，汉字”严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。这里就有两个严重的问题，第一个问题是，如何才能区别Unicode和ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。它们造成的结果是：1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。2）Unicode在很长一段时间内无法推广，直到互联网的出现。 5.UTF-8互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。UTF-8的编码规则很简单，只有二条：1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。下表总结了编码规则，字母x表示可用编码的位。Unicode符号范围 | UTF-8编码方式(十六进制) | （二进制）——————————+——————————————————————-0000 0000-0000 007F | 0xxxxxxx0000 0080-0000 07FF | 110xxxxx 10xxxxxx0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx跟据上表，解读UTF-8编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。下面，还是以汉字”严”为例，演示如何实现UTF-8编码。已知”严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此”严”的UTF-8编码需要三个字节，即格式是”1110xxxx 10xxxxxx 10xxxxxx”。然后，从”严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，”严”的UTF-8编码是”11100100 10111000 10100101”，转换成十六进制就是E4B8A5。 6. Unicode与UTF-8之间的转换通过上一节的例子，可以看到”严”的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。它们之间的转换可以通过程序实现。在Windows平台下，有一个最简单的转化方法，就是使用内置的记事本小程序Notepad.exe。打开文件后，点击”文件”菜单中的”另存为”命令，会跳出一个对话框，在最底部有一个”编码”的下拉条。里面有四个选项：ANSI，Unicode，Unicode big endian 和 UTF-8。1）ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。2）Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。这个选项用的little endian格式。3）Unicode big endian编码与上一个选项相对应。我在下一节会解释little endian和big endian的涵义。4）UTF-8编码，也就是上一节谈到的编码方法。选择完”编码方式”后，点击”保存”按钮，文件的编码方式就立刻转换好了。 7. Little endian和Big endian上一节已经提到，Unicode码可以采用UCS-2格式直接存储。以汉字”严”为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。因此，第一个字节在前，就是”大头方式”（Big endian），第二个字节在前就是”小头方式”（Little endian）。那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。 8. 实例下面，举一个实例。打开”记事本”程序Notepad.exe，新建一个文本文件，内容就是一个”严”字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式保存。然后，用文本编辑软件UltraEdit中的”十六进制功能”，观察该文件的内部编码方式。1）ANSI：文件的编码就是两个字节”D1 CF”，这正是”严”的GB2312编码，这也暗示GB2312是采用大头方式存储的。2）Unicode：编码是四个字节”FF FE 25 4E”，其中”FF FE”表明是小头方式存储，真正的编码是4E25。3）Unicode big endian：编码是四个字节”FE FF 4E 25”，其中”FE FF”表明是大头方式存储。4）UTF-8：编码是六个字节”EF BB BF E4 B8 A5”，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5”就是”严”的具体编码，它的存储顺序与编码顺序是一致的。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>Unicode</tag>
        <tag>UTF-8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈mock和stub]]></title>
    <url>%2F2016%2F12%2F23%2F%E6%B5%85%E8%B0%88mock%E5%92%8Cstub%2F</url>
    <content type="text"><![CDATA[作为测试的基本概念，在开发测试中经常遇到mock和stub。之前认为自己对这两个概念已经很明白了，但是当决定要写下来并写清楚以便能让不明白的人也能弄明白，似乎就很有困难。 一、mock和stub的差异1、相同点先看看两者的相同点吧，非常明确的是，mock和stub都可以用来对系统(或者将粒度放小为模块，单元)进行隔离。在测试，尤其是单元测试中，我们通常关注的是主要测试对象的功能和行为，对于主要测试对象涉及到的次要对象尤其是一些依赖，我们仅仅关注主要测试对象和次要测试对象的交互，比如是否调用，何时调用，调用的参数，调用的次数和顺序等，以及返回的结果或发生的异常。但次要对象是如何执行这次调用的具体细节，我们并不关注，因此常见的技巧就是用mock对象或者stub对象来替代真实的次要对象，模拟真实场景来进行对主要测试对象的测试工作。因此从实现上看，mock和stub都是通过创建自己的对象来替代次要测试对象，然后按照测试的需要控制这个对象的行为。 2、不同点1） 类实现的方式从类的实现方式上看，stub有一个显式的类实现，按照stub类的复用层次可以实现为普通类(被多个测试案例复用)，内部类(被同一个测试案例的多个测试方法复用)乃至内部匿名类(只用于当前测试方法)。对于stub的方法也会有具体的实现，哪怕简单到只有一个简单的return语句。而mock则不同，mock的实现类通常是有mock的工具包如easymock, jmock来隐式实现，具体mock的方法的行为则通过record方式来指定。以mock一个UserService, UserDao为例，最简单的例子，只有一个查询方法：123456789101112131415public interface UserService &#123; User query(String userId);&#125;public class UserServiceImpl implements UserService &#123; private UserDao userDao; public User query(String userId) &#123; return userDao.getById(userId); &#125; //setter for userDao&#125;public interface UserDao &#123; User getById(String userId);&#125; stub的标准实现，需要自己实现一个类并实现方法:123456789101112131415161718public class UserDaoStub implements UserDao &#123; public User getById(String id) &#123; User user = new User(); user.set..... return user; &#125;&#125; @Testpublic void testGetById() &#123; UserServiceImpl service = new UserServiceImpl(); UserDao userDao = new UserDaoStub(); service.setUserDao(userDao); User user = service.query("1001"); ...&#125; mock的实现，以easymock为例，只要指定mock的类并record期望的行为，并没有显式的构造新类:1234567891011121314@Testpublic void testGetById() &#123; UserDao dao = Easymock.createMock(UserDao.class); User user = new User(); user.set..... Easymock.expect(dao.getById("1001")).andReturn(user); Easymock.reply(dao); UserServiceImpl service = new UserServiceImpl(); service.setUserDao(userDao); User user = service.query("1001"); ... Easymock.verify(dao)；&#125; 对比可以看出，mock编写相对简单，只需要关注被使用的函数，所谓”just enough”。stub要复杂一些，需要实现逻辑，即使是不需要关注的方法也至少要给出空实现。 2)测试逻辑的可读性从上面的代码可以看出，在形式上，mock通常是在测试代码中直接mock类和定义mock方法的行为，测试代码和mock的代码通常是放在一起的，因此测试代码的逻辑也容易从测试案例的代码上看出来。Easymock.expect(dao.getById(“1001”)).andReturn(user); 直截了当的指明了当前测试案例对UserDao这个依赖的预期: getById需要被调用，调用的参数应该是”1001”，调用次数为1(不明确指定调用次数时easymock默认为1)。而stub的测试案例的代码中只有简单的UserDao userDao = new UserDaoStub ();构造语句和service.setUserDao(userDao);设置语句，我们无法直接从测试案例的代码中看出对依赖的预期，只能进入具体的UserServiceImpl类的query()方法，看到具体的实现是调用userDao.getById(userId)，这个时候才能明白完整的测试逻辑。因此当测试逻辑复杂，stub数量多并且某些stub需要传入一些标记比如true，false之类的来制定不同的行为时，测试逻辑的可读性就会下降。 3)可复用性Mock通常很少考虑复用，每个mock对象通过都是遵循”just enough”原则，一般只适用于当前测试方法。因此每个测试方法都必须实现自己的mock逻辑，当然在同一个测试类中还是可以有一些简单的初始化逻辑可以复用。stub则通常比较方便复用，尤其是一些通用的stub，比如jdbc连接之类。spring框架就为此提供了大量的stub来方便测试，不过很遗憾的是，它的名字用错了：spring-mock！ 4)设计和使用接着我们从mock和stub的设计和使用上来比较两者，这里需要引入两个概念：interaction-based和state-based。具体关于interaction-based和state-based，不再本文阐述，强烈推荐Martin Fowler 的一篇文章，”Mocks Aren’t Stubs”。地址为http://martinfowler.com/articles/mocksArentStubs.html(PS：当在google中输入mock stub两个关键字做搜索时，出来结果的第一条就是此文，向Martin Fowler致敬，向google致敬)，英文不好的同学，可以参考这里的一份中文翻译：http://www.cnblogs.com/anf/archive/2006/03/27/360248.html。 总结来说，stub是state-based，关注的是输入和输出。mock是interaction-based，关注的是交互过程。 5)expectiation/期望这个才是mock和stub的最重要的区别：expectiation/期望。对于mock来说，exception是重中之重：我们期待方法有没有被调用，期待适当的参数，期待调用的次数，甚至期待多个mock之间的调用顺序。所有的一切期待都是事先准备好，在测试过程中和测试结束后验证是否和预期的一致。 而对于stub，通常都不会关注exception，就像上面给出的UserDaoStub的例子，没有任何代码来帮助判断这个stub类是否被调用。虽然理论上某些stub实现也可以通过自己编码的方式增加对expectiation的内容，比如增加一个计数器，每次调用+1之类，但是实际上极少这样做。 6)总结关于mock和stub的不同，在Martin Fowler的”Mocks Aren’t Stubs”一文中，有以下结束，我将它列出来作为总结：(1) Dummy对象被四处传递，但是从不被真正使用。通常他们只是用来填充参数列表。(2) Fake有实际可工作的实现，但是通常有一些缺点导致不适合用于产品(基于内存的数据库就是一个好例子)。(3) Stubs在测试过程中产生的调用提供预备好的应答，通常不应答计划之外的任何事。stubs可能记录关于调用的信息，比如 邮件网关的stub 会记录它发送的消息，或者可能仅仅是发送了多少信息。(4) Mocks如我们在这里说的那样：预先计划好的对象，带有各种期待，他们组成了一个关于他们期待接受的调用的详细说明。 3、退化和转化在实际的开发测试过程中，我们会发现其实mock和stub的界限有时候很模糊，并没有严格的划分方式，从而造成我们理解上的含糊和困惑。主要的原因在于现实使用中，我们经常将mock做不同程度的退化，从而使得mock对象在某些程度上如stub一样工作。以easymock为例，我们可以通过anyObject(), isA(Class)等方式放宽对参数的检测，以atLeatOnce(),anytimes()来放松对调用次数的检测，我们可以使用Easymock.createControl()而不是Easymock.createStrictControl()来放宽对调用顺序的检测(或者调用checkOrder(false))，我们甚至可以通过createNiceControl(), createNiceMock()来创建完全不限制调用方式而且自动返回简单值的mock，这和stub就几乎没有本质区别了。目前大多数的mock工具都提供mock退化为stub的支持，比如easyock中，除了上面列出的any*,NiceMock之外，还提供诸如andStubAnswer(),andStubDelegateTo(),andStubReturn(),andStubThrow()和asStub()。上面也谈到过stub也是可以通过增加代码来实现一些expectiation的特性，stub理论上也是可以向mock的方向做转化，而从使得两者的界限更加的模糊。 三、其它文章摘录Stub和Mock都是属于测试替身，对类型细分的话可以分为： Dummy Object Fake Object Test Stub Test Spy Mock Object 前四项属于Stub，最后的Mock Object属于Mock。 Dummy Object（哑对象）测试代码仅仅是需要使用它来通过编译，实际上用不到它。如测试A类的run方法，需要在创建A类的实例时需要传入B类实例，但run方法并没有用到B类实例。在测试时需要传入B类的哑对象new NullB()（如“new A(new NullB())”），让其通过编译。这里的NullB是一个空类，没有具体实现。 Fake Object（假对象）假对象相对于哑对象来说，要对耦合的组件有一些简单的实现，实现我们在测试中要用到的方法，指定期望的行为（如返回期望的值）。假对象适用于替换产品代码中使用的全局对象，或者创建的类。这里注意的是要先对被替换的全局对象或类进行备份，然后在测试完成后进行恢复。 Test Stub（测试桩）测试桩与假对象有点类似，也要实现与产品代码耦合的组件，指定期望的行为。这里最大的不同是测试桩需要注入到产品代码中，从而在测试产品代码时替换组件，执行桩的行为。使用测试桩不需要进行备份和还原。 Mock Object（模拟对象）设定产品代码中耦合的类的期望的行为，然后验证期望的行为是否发生，从而达到测试产品代码行为的目的。适用于验证一些void的行为。例如：在某个条件发生时，要记录Log。这种情景，用stub就很难验证，因为对目标物件来说，沒有回传值，也沒有状态变化，就只能通过mock object來验证目标物件是否正确的与Log介面进行互动。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>stub</tag>
        <tag>mock</tag>
        <tag>打桩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[雪碧图CSS Sprite的应用]]></title>
    <url>%2F2016%2F12%2F23%2F%E9%9B%AA%E7%A2%A7%E5%9B%BECSS%20Sprite%E7%9A%84%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[CSS雪碧 即CSS Sprite，也有人叫它CSS精灵，是一种CSS图像合并技术，该方法是将小图标和背景图像合并到一张图片上，然后利用css的背景定位来显示需要显示的图片部分。例如常见的商品分类导航其实所有商品的背景图用的都是一个所有小图标拼凑成的大图，只是在不同类别显示对应类别的图标时，通过li背景定位到大图的对应图标的位置。背景图位置可以使用一些雪碧图生成工具的时候，生成对应的CSS样式文件里面会有对应的位置信息。 1、好处优点有效减少网站的http请求数量，加速图片的显示。 2、条件静态图片，图片不随用户信息的变化而变化。小图片，容量比较小的（2~3k）。图片加载量比较大的。注意：大图片不建议用雪碧图咯，图片那么大，拼完之后岂不是拆机无敌大咯，加载就慢了，得不偿失！！！ 3、原理利用 css3的 background-position控制一个层可显示区域范围大小，通过一个窗口，对背景图进行滑动。简单来说，就是利用这个属性，设置背景图需要显示的起始位置，在通过标签来控制背景图显示的范围。 4、background-position属性根据图所知：以左上角为（0,0）坐标x,y都是负值综上所诉，所以background-position的取值就是背景图显示的起始坐标，形式就是background-position：0, 0; 5、拼图拼图可以用ps，或者网上很多在线雪碧图生成工具，可以利用这些去生成雪碧图。其实最好的拼图就是每个图标边距是多少和图标周围的留白留多少都控制好，对css的background-position的坐标写起来有规律的话，好些很多（然而这个是我自己手动拖拉的，位置很没有规律，所以下面的坐标值都是调试过才取值的）讲完这些了，可以来正题了，html和css代码了，下面代码是模仿生成一个菜单~~~ 6、代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 &lt;div id="content"&gt; &lt;ul class="content"&gt; &lt;li class="cat-1"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;女装/男装/内衣&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-2"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;鞋靴/箱包/配件&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-3"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;童装玩具/孕产/用品&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-4"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;家电/数码/手机&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-5"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;美妆/洗护/保健品&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-6"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;珠宝/眼镜/手表&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-7"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;运动/户外/乐器&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-8"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;游戏/动漫/影视&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-9"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;美食/生鲜/零食&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-10"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;鲜花/宠物/农资&lt;/h3&gt; &lt;/li&gt; &lt;li class="cat-11"&gt; &lt;i&gt;&lt;/i&gt; &lt;h3&gt;房产/装修/建材&lt;/h3&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;style type="text/css" &gt; #content&#123; width: 180px; background: #f8f8f8; border: 1px solid #bbb; &#125; h3&#123; margin: 0; padding: 0; &#125; ul&#123; list-style: none; padding: 0; &#125; li h3&#123; font-size: 14px; font-weight: 400; &#125; li&#123; margin: 3px 10px 0 0; display: block; height: 31px; line-height: 31px; overflow: hidden; border-bottom: 1px solid #dedede; &#125; li i&#123; background: url(sprite.png); display: inline; width: 40px; height: 28px; float: left; &#125; .cat-1 i&#123; background-position: -7px -5px; &#125; .cat-2 i&#123; background-position: -2px -35px; &#125; .cat-3 i&#123; background-position: -7px -65px; &#125; .cat-4 i&#123; background-position: -7px -105px; &#125; .cat-5 i&#123; background-position: -7px -129px; &#125; .cat-6 i&#123; background-position: -7px -151px; &#125; .cat-7 i&#123; background-position:-60px -4px; &#125; .cat-8 i&#123; background-position:-56px -33px; &#125; .cat-9 i&#123; background-position: -56px -66px; &#125; .cat-10 i&#123; background-position:-60px -103px; &#125; .cat-11 i&#123; background-position: -51px -128px; &#125; &lt;/style&gt; 7、效果图如下：]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>雪碧图</tag>
        <tag>CSS Sprite</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[主题文件和CSS文件的区别]]></title>
    <url>%2F2016%2F12%2F22%2F%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E5%92%8CCSS%E6%96%87%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[主题和CSS文件的描述不同，所能够完成的功能也不同，其主要区别如下所示：1、主题可以定义控件的样式，不仅能够定义样式属性，还能够定义其他样式，包括模板。主题不仅能够进行控件的样式定义，还能够定义模板，这样减少了相同类型的控件的模板编写操作。2、主题可以包括图形等其他主题元素文件。3、主题的层叠方式与CSS文件的层叠方式不同。一个页面只能应用与一个主题，而CSS可以被多个文件应用。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>主题</tag>
        <tag>样式</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[（全解析）屏幕尺寸，分辨率，像素，PPI之间到底什么关系？]]></title>
    <url>%2F2016%2F12%2F21%2F%EF%BC%88%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%89%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%EF%BC%8C%E5%88%86%E8%BE%A8%E7%8E%87%EF%BC%8C%E5%83%8F%E7%B4%A0%EF%BC%8CPPI%E4%B9%8B%E9%97%B4%E5%88%B0%E5%BA%95%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[转自：http://www.jianshu.com/p/c3387bcc4f6e今天我给大家来讲讲这几个咱们经常打交道的词到底啥意思，以及他们之间到底有什么关系。这篇文章是我花了一个下午从N多篇文章里提炼出的一个白话版，保证让你看得懂。咱们从手机开始说起吧。先上一张图，给大家看看关于手机屏幕方面的一些参数。红框内的三个参数，大家一定都不陌生，我也不陌生。不过讲真的，就在不久前，我连手机的屏幕尺寸到底是怎么算出来的都不知道。下面我们开始慢慢讲。 屏幕尺寸屏幕（主屏）尺寸是什么，怎么算？下面这张图是华为荣耀7的尺寸图，图上写的是5.2英寸。那么这个5.2英寸到底是怎么算出来的呢？在说这个问题之前，我们先进行一下单位的换算。我们平时是不用英寸这个单位的，我们用的是毫米，厘米，米这些单位。那么英寸和毫米，厘米之间怎样的换算关系呢？我也不知道，所以我百度了一下。 1英寸（inch）=2.54厘米（cm） 原来一英寸相当于我们的2.54厘米这么长。现在让我们回到5.2英寸到底是怎么算出来的这个问题。一开始呢，我觉得可能是手机屏幕的面积有这么大吧，后来我百度了英寸之后，才发现自己有多愚蠢。因为英寸是长度单位，面积的表示要用面积单位，英寸显然不可以表示面积。从这一点，就否认了我的想法。其实，我们所说的这个5.2英寸是手机屏幕对角线的长度。 我这么一说，有点数学常识的人就知道手机的屏幕尺寸是怎么算的了吧。没错，就是那个勾股定理了，知道手机屏幕的长和宽，然后利用勾股定理，就可以算出斜边的长了。还有个更简单的方法，只要用尺子量一下它的对角线是多少厘米，然后再换算成英寸就搞定了。 分辨率分辨率又是什么鬼？上面的图显示，华为荣耀7的分辨率是1920PX*1080PX。那么，这个分辨率又是怎么回事呢？可能大家注意了，1920和1080后面都跟了PX的字样，这个PX就是我们很熟悉的像素了，这个像素咱们后面讲，现在你只要明白，像素是分辨率的单位就好了。在讲解分辨率之前，我们要明白一个概念。在我们手机上呈现的一条线，一个面，一张图像都是由最小的单位像素来表示的，你也可以简单理解为是由一个个小方块组成的。看看下面这张图你就明白了。 所以呢，分辨率1920px*1080px的意思就是，在这个华为荣耀7的5.2英寸屏幕上，在竖向的高度上有1920个像素块，在横向的宽度上有1080个像素块。 分辨率比下面来讲讲啥是分辨率比？你可能注意到了，手机的屏幕是个长方形，高是1920px，宽是1080px。你稍计算就会发现，这个高和宽的比例是16:9的。说到16:9这个比例，经常看视频的同学一定就不陌生了。手机屏幕有各种分辨率比，这个比你也可以看作是手机屏幕的尺寸比。根据百度百科显示，手机分辨率之所以表示成1920px*1080px这种形式，也是为了方便表示手机屏幕的大小。这里的大小，应该指的就是手机屏幕的尺寸吧。其实，告诉你一个手机的分辨率，你真的就能计算出手机屏幕的尺寸吗？那么，还差什么条件才能计算出手机屏幕的尺寸呢？ 像素密度什么是屏幕像素密度？屏幕像素密度，即每英寸屏幕所拥有的像素数，英文简称PPI。在读到这个每英寸屏幕时，我曾经深深的疑惑，这个每英寸是不是每平方英寸的简称呢？事实证明，我还是太年轻，这个英寸跟之前手机屏幕的尺寸一样，也是对角线的长度。所以，我们可以这么理解屏幕像素密度，即在一个对角线长度为1英寸的正方形内所拥有的像素数。说到这里，大家可能还是有些疑惑的，没事，接着看下面。 屏幕像素密度，分辨率，屏幕尺寸的关系屏幕像素密度，分辨率，屏幕尺寸的关系是什么？这三个专业名词之间，有着非常严谨的关系。为啥说严谨呢，因为这三者之间，有一个公式可以表示。 这个公式真是简单明了，把很多疑问都给我们解决了。我们还是拿华为荣耀7手机为例，我们知道它的尺寸为5.2英寸，分辨率为1920px*1080px（1920px就是公式里的纵向，1080px就是公式里的横向了）。你不信的话就用公式算一下，最后得出的PPI，是不是就是424ppi。我算了一下，结果是423.6359942465958，懂得四舍五入的同学就知道424是个近似值了。 像素的大小是固定的吗？我先这么说一句，像素是没有实际的物理尺寸的。为啥呢，按照惯例，举个例子。 上面的这两张图，第一张是苹果6手机的屏幕参数，第二张还是出镜率最高的华为荣耀7的屏幕参数。大家注意看，这两个手机的分辨率都是1920px*1080px。但是，苹果手机的屏幕尺寸比华为荣耀7小了0.2英寸。又一个但是，苹果手机的屏幕像素密度（PPI）却比华为荣耀7高了45个PPI，也就是每英寸像素个数多了45个。这说明了啥？说明了同样的一英寸的长度，苹果手机用469个ppi来显示，华为只用了424个ppi来显示。你能告诉我哪个手机的显示效果更加精细吗？同样是一英寸，同样都是像素，为啥苹果手机一英寸有469个像素，华为只有424个呢？我们知道，英寸是长度单位，它有固定的物理尺寸。那么问题就只能出在了像素身上。这说明，像素这个东西，在苹果手机上变小了。所以，像素这个东西，就像金箍，能变大能变小。 电脑调分辨率的原理电脑屏幕可以调分辨率，难道是通过调整它的像素大小实现的？你错啦，要是这么简单，我写这篇文章有个卵用？其实类，在同一个设备上，它的像素个数是固定的，这是厂商在出厂时就设置好了的。只有不同的设备之间，才有像素大小的区别。既然在同一个设备上，像素点数早就设定好了，那电脑上可以调整分辨率是怎么回事？我再怎么调，像素点数还是那么多啊。 人家系统给你推荐的是1366px768px的分辨率，你知道意味着什么吗？没错，微软在这块屏幕上竖向设置了768个像素，横向设置了1366个像素。再怎么拉扯，这个数字是不会变了。那么，为啥我还能调整分辨率呢？我要是调整到800px600px，按照定义，横向就是600个像素，竖向就是800个像素了啊。其实呢，你把分辨率调成800600，系统就会分配给你800600个有效像素个数，也就是真实的色彩块。其他的个数呢，就由系统自作主张，通过一系列运算给你一个模拟色彩块，填充成正好1366*768个色彩块。这些拿来充数的像素块，和真实的像素块放到一起。就好比一个正规军，里面掺了很多杂牌军一样，只能是队伍不好带了。 PPI大的手机显示效果就越精细吗？要回答这个问题，就要先明白，一个像素到底包含了什么？一个像素其实就是一个色彩块，你不信的话，就去前面看看那张风雨雷电图。同样的一英寸，苹果手机能展示469个色彩，华为只能展示424个色彩，当然是苹果手机的显示效果更好了。也就是苹果6在出厂时，早就在屏幕上设置了同样个数更小的像素块，也就意味着可以显示更多的色彩。 屏幕的清晰程度其实是分辨率和尺寸大小共同决定，用ppi指数衡量屏幕清晰程度更加准确。 屏幕尺寸固定，分辨率越高，PPI就越高吗？废话，看公式啊。 分辨率固定，屏幕尺寸大了，PPI是不是就少了？废话，看公式啊。还有，苹果6和荣耀7的例子还很鲜活的摆在这呢。 PPI不变，屏幕尺寸变大，分辨率是不是也会变大？废话，看公式啊。 鉴于篇幅太长，我本来还想把安卓手机上app的图标显示问题说一说，看来只能留到下一次了。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>手机</tag>
        <tag>分辨率</tag>
        <tag>像素</tag>
        <tag>PPI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EBIT、EIBTDA、ROIC、ROI、ROA、ROE等投资分析指标的说明]]></title>
    <url>%2F2016%2F12%2F20%2FEBIT%E3%80%81EIBTDA%E3%80%81ROIC%E3%80%81ROI%E3%80%81ROA%E3%80%81ROE%E7%9A%84%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[1、EBITEBIT，全称Earnings Before Interest and Tax，即息税前利润，从字面意思可知是扣除利息、所得税之前的利润。计算公式有两种，EBIT＝净利润＋所得税＋利息。或EBIT＝经营利润＋投资收益＋营业外收入－营业外支出＋以前年度损益调整。 2、EBITDAEBITDA，全称Earnings Before Interest, Tax, Depreciation and Amortization，即息税折旧摊销前利润，是扣除利息、所得税、折旧、摊销之前的利润。计算公式为EBITDA＝净利润＋所得税＋利息＋折旧＋摊销，或EBITDA＝EBIT＋折旧＋摊销。 3、EBIT与EBITDA比较EBIT主要用来衡量企业主营业务的盈利能力，EBITDA则主要用于衡量企业主营业务产生现金流的能力。&nbsp;个人注：我们公司的酒店就是用EBITDA这个指标来衡量的。 他们都反映企业现金的流动情况，是资本市场上投资者比较重视的两个指标，通过在计算利润时剔除掉一些因素，可以使利润的计算口径更方便投资者使用。EBIT通过剔除所得税和利息，可以使投资者评价项目时不用考虑项目适用的所得税率和融资成本，这样方便投资者将项目放在不同的资本结构中进行考察。EBIT与净利润的主要区别就在于剔除了资本结构和所得税政策的影响。如此，同一行业中的不同企业之间，无论所在地的所得税率有多大差异，或是资本结构有多大的差异，都能够拿出EBIT这类指标来更为准确的比较盈利能力。而同一企业在分析不同时期盈利能力变化时，使用EBIT也较净利润更具可比性。EBITDA剔除摊销和折旧，则是因为摊销中包含的是以前会计期间取得无形资产时支付的成本，而并非投资人更关注的当期的现金支出。而折旧本身是对过去资本支出的间接度量，将折旧从利润计算中剔除后，投资者能更方便的关注对于未来资本支出的估计，而非过去的沉没成本。20世纪80年代，伴随着杠杆收购的浪潮，EBITDA第一次被资本市场上的投资者们广泛使用。但当时投资者更多的将它视为评价一个公司偿债能力的指标。 随着时间的推移，EBITDA开始被实业界广泛接受，因为它非常适合用来评价一些前期资本支出巨大，而且需要在一个很长的期间内对前期投入进行摊销的行业，比如核电行业、酒店业、物业出租业等。如今，越来越多的上市公司、分析师和市场评论家们推荐投资者使用EBITDA进行分析。EBITDA也经常被拿来与企业现金流进行比较，因为它对净利润加入了两个对现金没有任何影响的主要费用科目——折旧和摊销，然而由于并没有考虑补充营运资金以及重置设备的现金需求，并不能就此简单的将EBITDA与现金流对等。 4、ROI投资回报率（ROI）是指通过投资而应返回的价值，它涵盖了企业的获利目标。利润和投入的经营所必备的财产相关，因为管理人员必须通过投资和现有财产获得利润。其计算公式为：投资回报率（ROI）=年利润或年均利润/投资总额×100% 投资回报率（ROI）的优点是计算简单；缺点是没有考虑资金时间价值因素，不能正确反映建设期长短及投资方式不同和回收额的有无等条件对项目的影响，分子、分母计算口径的可比性较差，无法直接利用净现金流量信息。只有投资利润率指标大于或等于无风险投资利润率的投资项目才具有财务可行性。 投资回报率（ROI）往往具有时效性—回报通常是基于某些特定年份。 5、ROIC（Return on invested Capital）即已投资本回报率，计算公式为：ROIC=息税前收益（EBIT）*（1-税率）/总资本。 该指标主要用于衡量企业运用所有债权人和股东所投入为：企业资本获得现金盈利的能力。该指标也用于评价企业创造价值的能力，资本市场常用的评估办法为：企业创造的价值=（ROIC-WACC）*投入资本。从长期来看，该指标应高于企业的WACC，否则将破坏企业的价值。 6、ROAROA（Reture on Asset）即总资产回报率，计算公式； ROA=净收入/总资产。该指标用于衡量企业管理层有效运用企业所有资产获得利润的能力。 7、ROEROE（Return on Earning）即股东投资回报率，计算公式为：ROE=净利润/股东权益。也叫净资产回报率，该指标用于衡量企业有效运用股东所投入资本的能力，是股权投资者最关注的指标之一。 8、WACC(加权平均资本成本)WACC代表公司整体平均资金成本，可用来衡量一个项目是否值得投资；项目的回报必须不低于WACC。计算WACC时，先算出构成公司资本结构的各个项目如普通股、优先股、公司债及其他长期负债各自的资金成本或要求回报率，然后将这些回报率按各项目在资本结构中的权重加权，即可算出加权平均资本成本。加权平均资本成本（WACC），反映一个公司通过股权和债务融资的平均成本，项目融资的收益率必须高于这个加权平均资本成本该项目才具有投资价值。WACC计算公式=（债务/总资本）债务成本（1-企业所得税税率）+（股权/总资本）*股权成本其中，债务成本和股权成本用债务人和股东要求的收益率表示。至于债务成本一项要乘以（1-企业所得税税率），是因为与股权融资相比，债务融资可以使企业少缴企业所得税，因为利息在计算利润时是被扣除掉的，而所得税的计算又是按照利润总额的一定比例计算的，显然被扣除利息后的利润乘以一定比率所计算的所得税要比不扣除的计算的少，基于此，所以说利息能够抵税。 9、ROIC（投资资本收益率）ROIC衡量的是企业全部投资资本的运用效率，而不考虑企业所使用资金来自于股东或是债权人。ROIC以投资资本代替ROE中的所有者权益作为分母，以息前税后利润(NOPLAT)代替净利润做分子。 10、NOPLAT，扣除调整税后的净营业利润。是指扣除与核心经营活动有关的所得税后公司核心经营活动产生的利润。NOPLAT = EBIT ×(1-所得税率)= EBIT - 所得税(只考虑核心业务,扣除非经常性损益)ROIC的公式很简单：ROIC=NOPLAT/ICNOPLAT=EBIT*(1-t）IC=经营性营运资本+经营性长期资产=全部股东权益+有息负债-非核心资产-多余现金 11、ROIC、ROE一个ROIC和ROE之间关系的近似方程式：ROE=ROIC+(ROIC-r）DFL税后利息率r包含了正常的利息与少数股东税后收益，净财务杠杆DFL的分子“净负债”包含了“少数股东权益”，此外，假设公司不存在其他任何非核心资产和非核心收益。于是，ROE和ROIC的关系就清楚了：1）ROIC是ROE的决定因素，甚至是根本性的决定因素；2）从理论上说，ROE受3个因素驱动：ROIC，ROIC与r的差异即经营差异率、净财务杠杆DFL。基于ROE=ROIC+(ROIC-r）DFL，ROE和ROIC完全可能有多种背离，下面简单的说明之：1)、最良性的背离——“高ROIC+较高的ROE”，典型的例子就是贵州茅台。贵州茅台的ROIC接近70-100%，ROE在35%左右，茅台的r接近于0，DFL居然为-0.5左右。这是A股市场中罕见的经营特例，茅台超高的ROIC显示了公司有极高的经济商誉和较强的经济特许权。除茅台外，像格力电器（000651）、苏宁电器（002024）等“轻资产+类金融”的公司也有类似特征，即公司的ROIC高于ROE，净财务杠杆为负。2)、第二流的背离——“一般高的ROIC+较高的ROE”，典型的例子如万科、华侨城、海螺水泥等，如万科的ROIC略高于ROE，华侨城A（000069）则要差一些，华侨城历年来的ROE在20%左右，但ROIC只在12%左右，公司在一定程度上利用了财务杠杆，但ROIC显示公司的价值创造能力值得警惕，至少目前没有机构宣传的那么好。3)、最值得警惕的背离——“高ROE+低ROIC”，这类公司表面上ROE很高，但是只有平庸的ROIC。我们可以举一个简单的例子：一家公司的ROIC为12%，净利息率为8%，公司使用了5倍的净财务杠杆，计算出来的ROE=12%+（12%-8%）*5=32%。光看ROE会让人兴奋，但这类公司的ROIC则只显示了平庸的基础盈利能力，只不过公司大幅度的使用了财务杠杆，表面的高收益对应了经营的高风险。4)、最糟糕的背离——“不错的ROIC+拙劣的ROE”，这类公司ROIC尚可，但疏于管理，导致了极高的r，最终只有平庸的ROE。]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>财务</tag>
        <tag>投资分析</tag>
        <tag>EBITDA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《人类简史-从动物到上帝》读书心得]]></title>
    <url>%2F2016%2F12%2F19%2F%E3%80%8A%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2-%E4%BB%8E%E5%8A%A8%E7%89%A9%E5%88%B0%E4%B8%8A%E5%B8%9D%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[作者说得好“我们之所以研究历史，不是为了要知道未来，而是要拓展视野，要了解现在的种种绝非‘自然’，也并非无可避免。未来的可能性远超出我们的想象。……历史总是这样从一个岔路走到另一个岔路，选择走某条路而非另一条的原因总是神秘而不可知。”就像书中所说，人类从一种食物链中端的生物，发展到现在类似上帝的存在，其中的每个关键步骤都是超乎当时人们的想象的。 本书从智人的认知革命说到了现代科学革命。智人开始发展出新的思维和沟通方式（新的语言），这种认知的革命，开始让智人站上了生物链的最顶端。认知，让智人能想象出现实世界中不存在的事物以及虚构的故事、让智人能够组织更大规模的合作和创新，就这样，智人扩展到了整个地球并主宰了地球。农业革命的到来，人类第一次不再让自然牵着鼻子走，人类能在小范围内做到了人定胜天。人们种植农作物、饲养家禽，人们丰年储存粮食、食物以备来年之用。在这过程中，衍生出初级的人类分工，人类在组织层面达到了更高的水平，人类从部落的形式一步步进化到了城邦、国家。 工业革命的到来，让人类发出了上帝已死的最强音。人类慢慢站到了上帝的视角环视我们的地球。并且，我们的视角再也不仅局限于地球，而是投向了浩瀚的星空。工业革命的核心，其实就是能量转换的革命。工业革命，让人类对能量的控制达到了前所未有的水平。从单纯的能量利用，变成了能量转换、存储再利用等，人类能力得到飞跃的发展，从而跳出了自然力量的控制，人类第一次真正体验到了人定胜天的滋味。 工业革命之后，资本、科学、帝国，三者相互作用，让人类的科学水平、文明水平、生活水平得到最大程度的提升。人类不再满足于自身的自然定位，而是努力克服人类生物性的局限，医学水平的发展使人类对抗疾病、对抗自然衰老的能力大大增强；科学水平的发展，使人类借助科学的力量突破了空间及时间的影响；尤其是现代AI技术的发展，让人们开始思考，将来的世界是否会出现超越人类的智能生命出现？这个奇点出现之后的任何事情，都超出我们现在所能想象的。到时人类如何定位、如何应对都是一个未知的、细思极恐的话题！那时候，作为创造智能生命的人类，是作为神一般的存在还是搬起石头砸自己的脚？ 回顾人类的历史，从一个部落的合作、到一个地区的合作、到一个国家的合作，直到现在的地球村。最终人类不仅有了改变历史进程的能力，更有了结束历史进程的能力。而未来的故事就像作者所说的，可能性会远远超出我们的想象。 文章摘录 所谓同一物种，就是他们会彼此交配，能够产生出下一代； 对智人来说，大脑只占身体总量的2%-3%，但是身体休息而不活动时，大脑的能量消耗却占了25%； “第四权力”是西方社会的一种关于新闻传播媒体在社会中地位的比喻。它所表达的一种社会力量：新闻传播媒体总体上构成了与立法、行政、司法并立的一种社会力量，对这三种政治权力起制衡作用。这实际是一种认识理念，以这种简单比喻的形式，19世纪以来普及于西方主要工业国家，但又经常受到人们的质疑。 150人是一个组织自然管理的门槛。 任何大规模人类合作的根基，都在于某种只存在于集体想象中的虚构的故事。 难点不在于讲故事，而在于要让人相信。 个人注：例如现在的商业模式，好多时候都是在讲故事。关键是讲故事的人一定要自己都要相信。 演化心理学，认为现在人类的各种社会和心理特征是从农业时代之前就已经开始形成。现在社会逼迫所有人类都采用一夫一妻的核心家庭，这其实是与我们的生物本能背道而驰的。 农业和工业社会的传染病（例如天花、麻疹、肺结核）多半是来自家禽家畜。 最早海平面较低，西伯利亚东部还有陆地和阿拉斯加的西北相连。 生存和繁衍是最基本的演化标准，根据这个标准，小麦可以说是地球史上最成功的植物。 【小知识】 英国的巨石阵：Stonehenge Beagle 小猎犬 胼手胝足pián shǒu zhī zú 【解释】胼、胝：老茧。皮肤等的异常变硬和增厚,一般是指长期从事体力劳动者，手脚生茧。形容十分辛勤劳动。 汲汲营营jí jí yíng yíng：汲汲，勤求不休止的样子。营营，追逐求取。汲汲营营形容人急切求取名利的样子。 觥筹交错 边陲 “孟不离焦”，或者“焦不离孟”出自《杨家将》，焦、孟指的是杨延昭（杨六郎）部下的两员大将焦赞和孟良，二人是结义弟兄，常形影不离。后用于比喻两人关系非常铁，感情深厚。 穷兵黩武：qióng bīng dú wǔ 穷：竭尽；黩：随便，任意。随意使用武力，不断发动侵略战争。形容极其好战。 夙夜匪懈：夙夜：早晚，朝夕；匪：不；懈：懈怠。形容日夜谨慎工作，勤奋不懈。 生物学没有创造，而是演化。而演化就没有平等的概念，而是物竞天择、适者生存。演化的基础是差异，而不是平等。 想象所构建出来的秩序总是有一夕崩溃的风险，因为这些秩序背后靠的是虚构的故事。例如制度、主义、宗教等等都是虚构出来的。 苏美尔、古埃及、中国和银价帝国的文化中，发展出力能够将文字记录予以归档、编目和检索。这是一种文字的核心要求。 文书和会计的想法就是没有人性，像个文件柜一样。过去的自由链接、整体思考，已经转变为分割思考、官僚制度。 《风俗通》（应劭著）原文：俗说天地开辟，未有人民，女娲（传说是人面蛇身，创造了人类）抟黄土做人。剧务（工作繁忙），力不暇供（没有多余的力量来供应需要），乃引（牵、拉）绳于泥中，举以为人。故富贵者，黄土人；贫贱者，引縆（绳）人也。译文：民间传说，天地开辟之初，大地上并没有人类，是女娲把黄土捏成缉鸡光课叱酒癸旬含莫团造了人。她干得又忙又累，竭尽全力干还赶不上供应。于是她就拿了绳子把它投入泥浆中，举起绳子一甩，泥浆洒落在地上，就变成了一个个人。后人说，富贵的人是女娲亲手抟黄土造的，而贫贱的人只是女娲用绳沾泥浆，把泥浆洒落在地上变成的。 洪水后，诺亚成为一个农夫，还种植了一个葡萄园。他喝了园中的酒便醉了，在帐棚里赤裸身子。这时含（含有四个儿子，古实、埃及、弗和迦南，其中圣经曾两次记载含是“迦南的父亲”。含看过喝醉了的诺亚的下体，而让迦南受诺亚的咒诅，要作兄弟奴隶的奴隶。）看见他父亲赤身，就到外边告诉他两个弟兄。于是闪和雅弗拿了一件衣服，倒退著进去，盖在诺亚身上；他们背着诺亚，以免看到父亲的赤身。诺亚醒了酒，知道小儿子向他所作的事，就说：“迦南当受咒诅，必给他弟兄作奴仆的奴仆；又说：耶和华闪的神是应当称颂的！愿迦南作闪的奴仆。愿神使雅弗扩张，使他住在闪的帐棚里；又愿迦南作他的奴仆。” 三K党（英语：Ku Klux Klan, KKK），指美国历史上和现代三个不同时期奉行白人至上主义运动和基督教恐怖主义的民间仇恨团体，也是美国种族主义的代表性组织。该组织常使用恐怖主义方式来达成自己的目的。 教育带来进一步的教育，而无知只会造成进一步的无知。 人类几乎从出生到死亡都被种种虚构的故事和概念围绕，让他们以特定的方式思考，以特定的标准形式，想要特定的东西，也遵守特定的规范。就是这样，让数以百万计的陌生人能遵照这种人造而非天生的直觉，合作无间。这种人造的直觉就是“文化”。 金钱并不是物质上的现实，而只是心理上的想象。所以，金钱的运作就是要把前者转变为后者。金钱正是有史以来最有效的互信系统。金钱货币史上真正的突破，就是人类终于开始相信某种货币形式，虽然他们本身没有什么固定价值，但却能方便储存和运送。 宗教信仰的重点是自己相信，但金钱信仰的重点是别人相信。 历史就是没有正义。 个人注：只有力量，只有利益。 帝国的定义就在于文化的多元性和疆界灵活性两项。 中国的汉族，以公元前206年到公元220年的汉朝为名。 在金钱和帝国之外，宗教正是第三种让人类统一的力量。 很多古代神话其实就是一种法律契约，人类承诺要永远崇敬某些神灵，换取人类对其他动植物的控制权。 六畜兴旺六畜：牛、马、羊、猪、鸡、狗。指各种牲畜、家禽繁衍兴旺。 耶稣号称自己就是旧约里面所说的来解救以色列人的弥赛亚。 福音就是耶稣做的好事。 二元论宗教信奉着善与恶这两种对立力量的存在。 基督徒大致上信奉一神论的上帝，相信二元论的魔鬼，崇拜多神论的圣人，还相信泛神论的鬼魂。 佛教，崇拜的这个秩序是自然法则，而不是神圣的意志，虽然他们也相信有神祗的存在，但认为这些神祗和人类、动物和植物一样会手自然法则的限制。 生命就像毫无意义的追寻。 释伽牟尼思索人类苦痛的本质、原因和解决方式。欲望，让人心永远不满、永远不安。无欲则无苦。 涅槃：梵文的原意就是熄灭。佛陀：觉悟者。 佛陀的教诲：痛苦来自欲望；要从痛苦中解脱，就要放下欲望；而放下欲望，就必须训练心智，体验事物的本质。 宗教：信念+仪式 演化人文主义，以纳粹为最著名的代表。 历史的铁则就是：事后看来无可避免的事，在当时看来总是毫不明显。 一级混沌指的是，不会因为预测而变化，例如天气就属于一级混沌系统；二级混沌系统，指的是，会受到预测的影响而改变，因此就永远无法准确预测；例如市场或者股票就是。 宗教总是假设世上所有重要的事情都已经为人活着神所知。 概率计算是精算学的基础。 培根：知识就是力量。科学就是一种知识，科技工具就成了人们的力量来源。 古罗马军队的优点在于：有效率的组织；铁一般的纪律；庞大的后勤力量。 坏血病：缺乏维生素C，所以以前的船员经常有这个病，要多吃水果蔬菜。 事物都有好坏正反两方面。 耶稣说过：骆驼穿过针的眼，比财主进神的国还容易。 1776年，苏格兰经济学家亚当·斯密出版了《国富论》，这可以说是史上最重要的经济学著作。书中指出，人类全体财富的基础，就在于希望增加个人利润的自私心理。这一点可以说是人类历史上最重要的革命性的概念，而且还不只是从经济的角度，也包括道德和政治的角度。他其实告诉我们，贪婪是好的，而且我们让自己过得好的时候，不只是自己得到，还能让他人收益。利己就是利他。亚当·斯密推翻了传统上认为财富与道德彼此对立的概念，这些天堂的大门也会为富人而敞开，而有钱也就有了道德。 现在资本主义的一大重点，就在于出现了一种新的道德标准：应该把利润拿出来，继续投资生产。资本（Capital）与财富（wealth）有所不同。资本指的是投入生产的各种金钱、物品和资源。而财富指的则是那些埋在地下或者浪费在非生产性活动的金钱、物品或资源。 独裁国家不愿保障个人和其财产，于是资本也就一点一滴离开，流向那些原意遵守法制、保护私有财产的国家。保护私产+司法独立是资本主义发展的重要前提。 自由市场资本主义美中不足的地方就是，它无法保证利润会以公平的方式取得或者以公平的方式分配。 在水煮沸的那一刻，水壶或锅的盖子会开始跳上跳下，这是热能转换为动能。也是蒸汽机发明的来源。 在地心引力下降一颗小苹果抬升一米，所需的能量就是一焦耳。 工业革命最重要的一点，其实就在于它就是第二次农业革命。 秩序及隐含着稳定和连续的意义。 狄更斯在《双城记》写到：It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way—in short, the period was so. far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.翻译如下：那是最美好的时代，那是最糟糕的时代；那是智慧的年头，那是愚昧的年头；那是信仰的时期，那是怀疑的时期；那是光明的季节，那是黑暗的季节；那是希望的春天，那是失望的冬天；我们全都在直奔天堂，我们全都在直奔相反的方向—简而言之，那时跟现在非常相象，某些最喧嚣的权威坚持要用形容词的最高级来形容它。说它好，是最高级的；说它不好，也是最高级的。 我们只要回顾过往就发现，自己对于过去历史的看法总是受到近几年事件的左右。 快乐是一种主观感受。而佛教认为，快乐既不是主观感受到愉悦，也不是主观感受到生活有意义，反而是在于放下追求主观感受这件事。佛教更重要也更深刻的见解在于，真正的快乐不在于我们的主观感受。我们如果越强调主观感受，反而就月感到苦。佛教给我们的建议是，除了别再追求外在的成就之外，同事也别再追求那些感觉良好的心里感受了。 啮齿目：niè chǐ 啮齿目是哺乳动物中的一目，其特征为上颌和下颌各两颗会持续生长的门牙，啮齿目动物必须通过啃咬来不断磨短这两对门牙。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>人类史</tag>
        <tag>读书心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOSQL的优势]]></title>
    <url>%2F2016%2F12%2F16%2FNOSQL%2F</url>
    <content type="text"><![CDATA[1、易扩展NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。 2、大数据量，高性能NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了。 3、灵活的数据模型NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。这点在大数据量的web2.0时代尤其明显。 4、高可用NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构。比如Cassandra，HBase模型，通过复制模型也能实现高可用。 总结NoSQL数据库的出现，弥补了关系数据（比如MySQL）在某些方面的不足，在某些方面能极大的节省开发成本和维护成本。MySQL和NoSQL都有各自的特点和使用的应用场景，两者的紧密结合将会给web2.0的数据库发展带来新的思路。让关系数据库关注在关系上，NoSQL关注在存储上。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>NOSQL</tag>
        <tag>SQL</tag>
        <tag>比较</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库Sharding的基本思想和切分策略（分库分表）]]></title>
    <url>%2F2016%2F12%2F16%2F%E5%88%86%E8%A1%A8%E5%88%86%E5%BA%93%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%EF%BC%89%20%2F</url>
    <content type="text"><![CDATA[本文着重介绍sharding的基本思想和理论上的切分策略，关于更加细致的实施策略和参考事例请参考另一篇博文：数据库分库分表(sharding)系列(一) 拆分实施策略和示例演示 一、基本思想Sharding的基本思想就要把一个数据库切分成多个部分放到不同的数据库(server)上，从而缓解单一数据库的性能问题。不太严格的讲，对于海量数据的数据库，如果是因为表多而数据多，这时候适合使用垂直切分，即把关系紧密（比如同一模块）的表切分出来放在一个server上。如果表并不多，但每张表的数据非常多，这时候适合水平切分，即把表的数据按某种规则（比如按ID散列）切分到多个数据库(server)上。当然，现实中更多是这两种情况混杂在一起，这时候需要根据实际情况做出选择，也可能会综合使用垂直与水平切分，从而将原有数据库切分成类似矩阵一样可以无限扩充的数据库(server)阵列。下面分别详细地介绍一下垂直切分和水平切分.垂直切分的最大特点就是规则简单，实施也更为方便，尤其适合各业务之间的耦合度非常低，相互影响很小，业务逻辑非常清晰的系统。在这种系统中，可以很容易做到将不同业务模块所使用的表分拆到不同的数据库中。根据不同的表来进行拆分，对应用程序的影响也更小，拆分规则也会比较简单清晰。（这也就是所谓的”share nothing”）。水平切分于垂直切分相比，相对来说稍微复杂一些。因为要将同一个表中的不同数据拆分到不同的数据库中，对于应用程序来说，拆分规则本身就较根据表名来拆分更为复杂，后期的数据维护也会更为复杂一些。让我们从普遍的情况来考虑数据的切分：一方面，一个库的所有表通常不可能由某一张表全部串联起来，这句话暗含的意思是，水平切分几乎都是针对一小搓一小搓（实际上就是垂直切分出来的块）关系紧密的表进行的，而不可能是针对所有表进行的。另一方面，一些负载非常高的系统，即使仅仅只是单个表都无法通过单台数据库主机来承担其负载，这意味着单单是垂直切分也不能完全解决问明。因此多数系统会将垂直切分和水平切分联合使用，先对系统做垂直切分，再针对每一小搓表的情况选择性地做水平切分。从而将整个数据库切分成一个分布式矩阵。 二、切分策略如前面所提到的，切分是按先垂直切分再水平切分的步骤进行的。垂直切分的结果正好为水平切分做好了铺垫。垂直切分的思路就是分析表间的聚合关系，把关系紧密的表放在一起。多数情况下可能是同一个模块，或者是同一“聚集”。这里的“聚集”正是领域驱动设计里所说的聚集。在垂直切分出的表聚集内，找出“根元素”（这里的“根元素”就是领域驱动设计里的“聚合根”），按“根元素”进行水平切分，也就是从“根元素”开始，把所有和它直接与间接关联的数据放入一个shard里。这样出现跨shard关联的可能性就非常的小。应用程序就不必打断既有的表间关联。比如：对于社交网站，几乎所有数据最终都会关联到某个用户上，基于用户进行切分就是最好的选择。再比如论坛系统，用户和论坛两个模块应该在垂直切分时被分在了两个shard里，对于论坛模块来说，Forum显然是聚合根，因此按Forum进行水平切分，把Forum里所有的帖子和回帖都随Forum放在一个shard里是很自然的。 对于共享数据数据，如果是只读的字典表，每个shard里维护一份应该是一个不错的选择，这样不必打断关联关系。如果是一般数据间的跨节点的关联，就必须打断。 需要特别说明的是：当同时进行垂直和水平切分时，切分策略会发生一些微妙的变化。比如：在只考虑垂直切分的时候，被划分到一起的表之间可以保持任意的关联关系，因此你可以按“功能模块”划分表格，但是一旦引入水平切分之后，表间关联关系就会受到很大的制约，通常只能允许一个主表（以该表ID进行散列的表）和其多个次表之间保留关联关系，也就是说：当同时进行垂直和水平切分时，在垂直方向上的切分将不再以“功能模块”进行划分，而是需要更加细粒度的垂直切分，而这个粒度与领域驱动设计中的“聚合”概念不谋而合，甚至可以说是完全一致，每个shard的主表正是一个聚合中的聚合根！这样切分下来你会发现数据库分被切分地过于分散了（shard的数量会比较多，但是shard里的表却不多），为了避免管理过多的数据源，充分利用每一个数据库服务器的资源，可以考虑将业务上相近，并且具有相近数据增长速率（主表数据量在同一数量级上）的两个或多个shard放到同一个数据源里，每个shard依然是独立的，它们有各自的主表，并使用各自主表ID进行散列，不同的只是它们的散列取模（即节点数量）必需是一致的。（本文着重介绍sharding的基本思想和理论上的切分策略，关于更加细致的实施策略和参考事例请参考我的另一篇博文：数据库分库分表(sharding)系列(一) 拆分实施策略和示例演示） 三、切分需要关注的问题1.事务问题解决事务问题目前有两种可行的方案：分布式事务和通过应用程序与数据库共同控制实现事务下面对两套方案进行一个简单的对比。方案一：使用分布式事务优点：交由数据库管理，简单有效缺点：性能代价高，特别是shard越来越多时方案二：由应用程序和数据库共同控制原理：将一个跨多个数据库的分布式事务分拆成多个仅处于单个数据库上面的小事务，并通过应用程序来总控各个小事务。优点：性能上有优势缺点：需要应用程序在事务控制上做灵活设计。如果使用了spring的事务管理，改动起来会面临一定的困难。 2.跨节点Join的问题只要是进行切分，跨节点Join的问题是不可避免的。但是良好的设计和切分却可以减少此类情况的发生。解决这一问题的普遍做法是分两次查询实现。在第一次查询的结果集中找出关联数据的id,根据这些id发起第二次请求得到关联数据。 3.跨节点的count,order by,group by以及聚合函数问题这些是一类问题，因为它们都需要基于全部数据集合进行计算。多数的代理都不会自动处理合并工作。解决方案：与解决跨节点join问题的类似，分别在各个节点上得到结果后在应用程序端进行合并。和join不同的是每个结点的查询可以并行执行，因此很多时候它的速度要比单一大表快很多。但如果结果集很大，对应用程序内存的消耗是一个问题。 参考资料：《MySQL性能调优与架构设计》 四、其它知识点1、关于垂直切分Vertical Sharding的粒度垂直切分的粒度指的是在做垂直切分时允许几级的关联表放在一个shard里．这个问题对应用程序和sharding实现有着很大的影响．关联打断地越多，则受影响的join操作越多，应用程序为此做出的妥协就越大，但单表的路由会越简单，与业务的关联性会越小，就越容易使用统一机制处理．在此方向上的极端方案是：打断所有连接，每张表都配有路由规则，可以使用统一机制或框架自动处理．比如amoeba这样的框架，它的路由能且仅能通过SQL的特征（比如某个表的id）进行路由． 反之，若关联打断地越少，则join操作的受到的限制就小，应用程序需要做出的妥协就越小，但是表的路由就会变复杂，与业务的关联性就越大，就越难使用统一机制处理，需要针对每个数据请求单独实现路由．在此方向上的极端方案是：所有表都在一个shard里，也就是没有垂直切分，这样就没有关联被打断．当然这是非常极端的，除非整个数据库很简单，表的数量很少． 实际的粒度掌控需要结合“业务紧密程度”和“表格数据量”两个因素综合考虑，一般来说：若划归到一起的表格关系紧密，且数据量并不大，增速也非常缓慢，则适宜放在一个shard里，不需要再进行水平切分;若划归到一起的表格数据量巨大且增速迅猛，则势必要在垂直切分的基础上再进行水平切分，水平切分就意味着原单一shard会被细分成多个更小的shard，每一个shard存在一个主表（即会以该表ID进行散列的表）和多个相之相关的关联表。总之，垂直切分的粒度在两个相反的方向上呈现优势与劣势并存并相互博弈的局面．架构师需要做的是结合项目的实际情况在两者之间取得收益最大化的平衡． 2、全局主键生成策略flickr使用的一种主键生成测策略。flickr这一方案的整体思想是：建立两台以上的数据库ID生成服务器，每个服务器都有一张记录各表当前ID的Sequence表，但是Sequence中ID增长的步长是服务器的数量，起始值依次错开，这样相当于把ID的生成散列到了每个服务器节点上。例如：如果我们设置两台数据库ID生成服务器，那么就让一台的Sequence表的ID起始值为1,每次增长步长为2,另一台的Sequence表的ID起始值为2,每次增长步长也为2，那么结果就是奇数的ID都将从第一台服务器上生成，偶数的ID都从第二台服务器上生成，这样就将生成ID的压力均匀分散到两台服务器上，同时配合应用程序的控制，当一个服务器失效后，系统能自动切换到另一个服务器上获取ID，从而保证了系统的容错。 3、 关于使用框架还是自主开发以及sharding实现层面的考量在应用服务器与数据库之间加入一个代理方式：应用程序向数据发出的数据请求会先通过代理，代理会根据配置的路由规则，对SQL进行解析后路由到目标shard，因为这种方案对应用程序完全透明，通用性好，所以成为了很多sharding产品的选择。在这方面较为知名的产品是mysql官方的代理工具：Mysql Proxy和一款国人开发的产品:amoeba。mysql proxy本身并没有实现任何sharding逻辑，它只是作为一种面向mysql数据库的代理，给开发人员提供了一个嵌入sharding逻辑的场所，它使用lua作为编程语言，这对很多团队来说是需要考虑的一个问题。amoeba则是专门实现读写分离与sharding的代理产品，它使用非常简单，不使用任何编程语言，只需要通过xml进行配置。不过amoeba不支持事务(从应用程序发出的包含事务信息的请求到达amoeba时，事务信息会被抹去，因此，即使是单点数据访问也不会有事务存在)一直是个硬伤。当然，这要看产品的定位和设计理念，我们只能说对于那些对事务要求非常高的系统，amoeba是不适合的。 4、多数据源的事务处理（分布式事务）系统经sharding改造之后，原来单一的数据库会演变成多个数据库，如何确保多数据源同时操作的原子性和一致性是不得不考虑的一个问题。总体上看，目前对于一个分布式系统的事务处理有三种方式：分布式事务、基于Best Efforts 1PC模式的事务以及事务补偿机制。分布式事务，最严格的事务实现，但性能是个大问题;Best Efforts 1PC模式，性能与事务可靠性的平衡，支持系统水平伸缩，大多数情况下是最合适的选择;事务补偿机制，只能适用于对事务性要求不高，允许数据“最终一致”即可的系统，牺牲实时一致性，获得最大的性能回报。注：不像两阶段提交那样复杂，一阶段提交非常直白，就是从应用程序向数据库发出提交请求到数据库完成提交或回滚之后将结果返回给应用程序的过程。一阶段提交不需要“协调者”角色，各结点之间不存在协调操作，因此其事务执行时间比两阶段提交要短，但是提交的“危险期”是每一个事务的实际提交时间，相比于两阶段提交，一阶段提交出现在“不一致”的概率就变大了。1）分布式事务优势： 基于两阶段提交，最大限度地保证了跨数据库操作的“原子性”，是分布式系统下最严格的事务实现方式。 实现简单，工作量小。由于多数应用服务器以及一些独立的分布式事务协调器做了大量的封装工作，使得项目中引入分布式事务的难度和工作量基本上可以忽略不计。劣势：系统“水平”伸缩的死敌。基于两阶段提交的分布式事务在提交事务时需要在多个节点之间进行协调,最大限度地推后了提交事务的时间点，客观上延长了事务的执行时间，这会导致事务在访问共享资源时发生冲突和死锁的概率增高，随着数据库节点的增多，这种趋势会越来越严重，从而成为系统在数据库层面上水平伸缩的”枷锁”， 这是很多Sharding系统不采用分布式事务的主要原因。 2）基于Best Efforts 1PC模式的事务与分布式事务采用的两阶段提交不同，Best Efforts 1PC模式采用的是一阶段端提交，牺牲了事务在某些特殊情况(当机、网络中断等)下的安全性，却获得了良好的性能，特别是消除了对水平伸缩的桎酷。Distributed transactions in Spring, with and without XA一文对Best Efforts 1PC模式进行了详细的说明，该文提供的Demo代码更是直接给出了在Spring环境下实现一阶段提交的多数据源事务管理示例。不过需要注意的是，原示例是基于spring 3.0之前的版本，如果你使用spring 3.0+,会得到如下错误：java.lang.IllegalStateException: Cannot activate transaction synchronization - already active，如果使用spring 3.0+，你需要参考spring-data-neo4j的实现。鉴于Best Efforts 1PC模式的性能优势，以及相对简单的实现方式，它被大多数的sharding框架和项目采用。 3）事务补偿机制对于那些对性能要求很高，但对一致性要求并不高的系统，往往并不苛求系统的实时一致性，只要在一个允许的时间周期内达到最终一致性即可，这使得事务补偿机制成为一种可行的方案。事务补偿机制最初被提出是在“长事务”的处理中，但是对于分布式系统确保一致性也有很好的参考意义。笼统地讲，与事务在执行中发生错误后立即回滚的方式不同，事务补偿是一种事后检查并补救的措施，它只期望在一个容许时间周期内得到最终一致的结果就可以了。事务补偿的实现与系统业务紧密相关，并没有一种标准的处理方式。一些常见的实现方式有：对数据进行对帐检查;基于日志进行比对;定期同标准数据来源进行同步，等等。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>分表分库</tag>
        <tag>性能调优</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读写分离（数据库性能调优）]]></title>
    <url>%2F2016%2F12%2F16%2F%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[对于读大于写并且数据量增加不是很明显的数据库，推荐采用读写分离+缓存的模式，试想一下一个用户注册、修改用户信息、记录用户登录时间、记录用户登录IP、修改登录密码，这些是写操作。但是以上这些操作次数都是很小的，所以整个数据库的写压力是很小的。唯一一个比较大的就是记录用户登录时间、记录用户登录IP这类信息，只要把这些经常变动的信息排除在外，那么写操作可以忽略不计。所以读写分离首要解决的就是经常变化的数据的拆分，比如：用户登录时间、记录用户登录IP。这类信息可以单独独立出来，记录在持久化类的缓存中（可靠性要求并不高，登陆时间、IP丢了就丢了，下次来了就又来了）以oracle为例，主库负责写数据、读数据。读库仅负责读数据。每次有写库操作，同步更新cache，每次读取先读cache再读DB。写库就一个，读库可以有多个，采用dataguard来负责主库和多个读库的数据同步。读写分离的基本原理：让主数据库处理事务性增、删、改操作（INSERT、DELETE、UPDATE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。读写分离的基本结构：一台主、多台从。主提供写操作，从提供读操作。所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>性能调优</tag>
        <tag>读写分离</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SOA、MQ的开源方案]]></title>
    <url>%2F2016%2F12%2F16%2FSOA%E3%80%81MQ%E7%9A%84%E5%BC%80%E6%BA%90%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[SOA：开源的做的比较好的，大公司的服务框架有：dubbox和Motandubbo最先是阿里开源，当当改造为dubbox，使用面最广Motan是微博的开源 MQ：Apache ActiveMQ和RabbitMQ用的比较多]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>SOA</tag>
        <tag>MQ</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解Node.js事件驱动编程]]></title>
    <url>%2F2016%2F12%2F16%2F%E7%90%86%E8%A7%A3Node.js%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Node.js现在非常活跃，相关生态社区已经超过Lua（基本上比较知名的功能都有nodejs模块实现）。但是我们为何要使用Node.Js？相比传统的webserver服务模式，nodejs有什么优点优势？Node.Js是基于javascript语言，建构在google V8 engine以及Linux上的一个非阻塞事件驱动IO框架。nodejs是单进程单线程，但是基于V8的强大驱动力，以及事件驱动模型，nodejs的性能非常高，而且想达到多核或者多进程也不是很难（现在已经有大量的第三方module来实现这个功能）。 这里主要不是介绍nodejs具体应用代码，而是想介绍一下事件驱动编程。在这篇文章（1）里面，Dan York介绍了两种典型的事件驱动实例。 第一个例子是关于医生看病。在美国去看医生，需要填写大量表格，比如保险、个人信息之类，传统的基于线程的系统（thread-based system），接待员叫到你，你需要在前台填写完成这些表格，你站着填单，而接待员坐着看你填单。你让接待员没办法接待下一个客户，除非完成你的业务。想让这个系统能运行的快一些，只有多加几个接待员，人力成本需要增加不少。基于事件的系统（event-based system）中，当你到窗口发现需要填写一些额外的表格而不仅仅是挂个号，接待员把表格和笔给你，告诉你可以找个座位填写，填完了以后再回去找他。你回去坐着填表，而接待员开始接待下一个客户。你没有阻塞接待员的服务。你填完表格，返回队伍中，等接待员接待完现在的客户，你把表格递给他。如果有什么问题或者需要填写额外的表格，他给你一份新的，然后重复这个过程。这个系统已经非常高效了，几乎大部分医生都是这么做的。如果等待的人太多，可以加入额外的接待员进行服务，但是肯定要比基于线程模式的少得多。 第二个例子是快餐店点餐。在基于线程的方式中（thread-based way）你到了柜台前，把你的点餐单给收银员或者给收银员直接点餐，然后等在那直到你要的食物准备好给你。收银员不能接待下一个人，除非你拿到食物离开。想接待更多的客户，容易！加更多的收银员！当然，我们知道快餐店其实不是这样工作的。他们其实就是基于事件驱动方式，这样收银员更高效。只要你把点餐单给收银员，某个人已经开始准备你的食物，而同时收银员在进行收款，当你付完钱，你就站在一边而收银员已经开始接待下一个客户。在一些餐馆，甚至会给你一个号码，如果你的食物准备好了，就呼叫你的号码让你去柜台取。关键的一点是，你没有阻塞下一个客户的订餐请求。你订餐的食物做好的事件会导致某个人做某个动作（某个服务员喊你的订单号码，你听到你的号码被喊到去取食物），在编程领域，我们称这个为回调（callback function）。 Node.Js做了什么工作呢？传统的web server多为基于线程模型。你启动Apache或者什么server，它开始等待接受连接。当收到一个连接，server保持连接连通直到页面或者什么事务请求完成。如果他需要花几微妙时间去读取磁盘或者访问数据库，web server就阻塞了IO操作（这也被称之为阻塞式IO).想提高这样的web server的性能就只有启动更多的server实例。 相反的，Node.Js使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO） 考虑下面这个过程：1，你用浏览器访问nodejs服务器上的”/about.html”2，nodejs服务器接收到你的请求，调用一个函数从磁盘上读取这个文件。3，这段时间，nodejs webserver在服务后续的web请求。4，当文件读取完毕，有一个回调函数被插入到nodejs的服务队列中。5，nodejs webserver运行这个函数，实际上就是渲染（render）了about.html页面返回给你的浏览器。好像就节省了几微秒时间，但是这很重要！特别是对于需要相应大量用户的web server。 这也就是为什么Node.Js这么热这么惹人关注。而且它还使用了一个非常通用的编程语言Javascript，也让开发者可以快速容易的编写高可扩展性服务器。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>事件驱动</tag>
        <tag>非堵塞式IO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js]]></title>
    <url>%2F2016%2F12%2F15%2FNodeJs%2F</url>
    <content type="text"><![CDATA[我们正式开启JavaScript的后端开发之旅。简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。 Node.js是目前非常火热的技术，但是它的诞生经历却很奇特。众所周知，在Netscape设计出JavaScript后的短短几个月，JavaScript事实上已经是前端开发的唯一标准。后来，微软通过IE击败了Netscape后一统桌面，结果几年时间，浏览器毫无进步。（2001年推出的古老的IE 6到今天仍然有人在使用！）没有竞争就没有发展。微软认为IE6浏览器已经非常完善，几乎没有可改进之处，然后解散了IE6开发团队！而Google却认为支持现代Web应用的新一代浏览器才刚刚起步，尤其是浏览器负责运行JavaScript的引擎性能还可提升10倍。先是Mozilla借助已壮烈牺牲的Netscape遗产在2002年推出了Firefox浏览器，紧接着Apple于2003年在开源的KHTML浏览器的基础上推出了WebKit内核的Safari浏览器，不过仅限于Mac平台。随后，Google也开始创建自家的浏览器。他们也看中了WebKit内核，于是基于WebKit内核推出了Chrome浏览器。Chrome浏览器是跨Windows和Mac平台的，并且，Google认为要运行现代Web应用，浏览器必须有一个性能非常强劲的JavaScript引擎，于是Google自己开发了一个高性能JavaScript引擎，名字叫V8，以BSD许可证开源。现代浏览器大战让微软的IE浏览器远远地落后了，因为他们解散了最有经验、战斗力最强的浏览器团队！回过头再追赶却发现，支持HTML5的WebKit已经成为手机端的标准了，IE浏览器从此与主流移动端设备绝缘。 浏览器大战和Node有何关系？话说有个叫Ryan Dahl的歪果仁，他的工作是用C/C++写高性能Web服务。对于高性能，异步IO、事件驱动是基本原则，但是用C/C++写就太痛苦了。于是这位仁兄开始设想用高级语言开发Web服务。他评估了很多种高级语言，发现很多语言虽然同时提供了同步IO和异步IO，但是开发人员一旦用了同步IO，他们就再也懒得写异步IO了，所以，最终，Ryan瞄向了JavaScript。因为JavaScript是单线程执行，根本不能进行同步IO操作，所以，JavaScript的这一“缺陷”导致了它只能使用异步IO。选定了开发语言，还要有运行时引擎。这位仁兄曾考虑过自己写一个，不过明智地放弃了，因为V8就是开源的JavaScript引擎。让Google投资去优化V8，咱只负责改造一下拿来用，还不用付钱，这个买卖很划算。于是在2009年，Ryan正式推出了基于JavaScript语言和V8引擎的开源Web服务器项目，命名为Node.js。虽然名字很土，但是，Node第一次把JavaScript带入到后端服务器开发，加上世界上已经有无数的JavaScript开发人员，所以Node一下子就火了起来。 在Node上运行的JavaScript相比其他后端开发语言有何优势？最大的优势是借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举。其次，JavaScript语言本身是完善的函数式语言，在前端开发时，开发人员往往写得比较随意，让人感觉JavaScript就是个“玩具语言”。但是，在Node环境下，通过模块化的JavaScript代码，加上函数式编程，并且无需考虑浏览器兼容性问题，直接使用最新的ECMAScript 6标准，可以完全满足工程上的需求。 我还听说过io.js，这又是什么鬼？因为Node.js是开源项目，虽然由社区推动，但幕后一直由Joyent公司资助。由于一群开发者对Joyent公司的策略不满，于2014年从Node.js项目fork出了io.js项目，决定单独发展，但两者实际上是兼容的。然而中国有句古话，叫做“分久必合，合久必分”。分家后没多久，Joyent公司表示要和解，于是，io.js项目又决定回归Node.js。具体做法是将来io.js将首先添加新的特性，如果大家测试用得爽，就把新特性加入Node.js。io.js是“尝鲜版”，而Node.js是线上稳定版，相当于Fedora Linux和RHEL的关系。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>后端</tag>
        <tag>Javascript</tag>
        <tag>高性能</tag>
        <tag>事件驱动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[消息队列]]></title>
    <url>%2F2016%2F12%2F15%2F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[一、消息队列MQ基础在服务化架构中，消息队列的作用时不可替代的。服务化架构的异步通信、流量消峰、跨语言调用、通知协调等等很多功能都会用到消息队列。在选用MQ时，要考虑一下我们的需求和MQ自身功能是否匹配，超前的使用有时候并不能给我们带来相应的好处，反而可能会成为使用的障碍。消息队列有点对点（point to point， queue）与发布订阅（publish/subscribe)等方式。 1、MQ核心组成Sender（Producer App）——Message Queue——Receiver（Consumer App） 2、MQ vs SOA消息队列的出现意于完成系统间的消息通信，协调系统调用间调用。这跟SOA类似。但不同于SOA面向服务的直接调用，消息队列的通信不是直接调用关系，系统间通信主要通过消息发送，接收方接收消息，进行处理，完成与发送方的调用处理。 3、消息队列的优势（1）系统解耦交互系统之间没有直接的调用关系，只是通过消息传输，故系统侵入性不强，耦合度低。 （2）提高系统响应时间例如原来的一套逻辑，完成支付可能涉及先修改订单状态、计算会员积分、通知物流配送几个逻辑才能完成；通过MQ架构设计，就可将紧急重要（需要立刻响应）的业务放到该调用方法中，响应要求不高的使用消息队列，放到MQ队列中，供消费者处理。 （3）为大数据处理架构提供服务通过消息作为整合，大数据的背景下，消息队列还与实时处理架构整合，为数据处理提供性能支持。 二、消息队列需要注意事项 是否保证消息顺序； 消息拉取／推送模式有哪些； 水平扩展能力； 实时能力； 消息堆积能力； 监控功能是否完整／是否提供了完善的监控接口； 是否有持久化能力； down机重启后，是否可以继续消费； 社区活跃度、更新频率； 成功使用案例。 三、分布式事务分布式事务经常会涉及到的概念有两阶段提交、一阶段提交、事务补偿等等，可参考相关文档说明了解详细内容。这里我们要分析一下，使用事务的最终目的是什么？首先想到的是同时成功或失败，再深入分析一下，我们终于明白要的是什么了：数据的一致性，一致性又分为 最终一致、强一致和弱一致三种。那么是不是所有的场景都要求必须要达到数据的强一致呢？显然不是，这需要我们根据实际情况分析（鱼与熊掌不可兼得，这是一 个不使用任何程序控制事务的场景，一个操作先插入从属信息再插入主信息，即便主信息插入失败也不会给用户带来影响，类似这样以空间换时间的方式也未尝不 可）。数据的最终一致性业界有了很多的解决方案（非事务方式）。1）使用MQ、Redis进行协调控制从而达到数据最终一致；2）通过分析MySQL的Binlog达到数据最终一致；3）根据行业、业务特点自己实现的数据最终一致。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>MQ</tag>
        <tag>消息队列</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务化演进过程之技术演进（性能提升之路）]]></title>
    <url>%2F2016%2F12%2F15%2F%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%BC%94%E8%BF%9B%E8%BF%87%E7%A8%8B%E4%B9%8B%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B%2F</url>
    <content type="text"><![CDATA[1、WebServer、数据库、文件从单一到分离此时的ORM工具、事务控制手段、简化CRUD是重要的关注点。职责分离，针对需求不同对服务器进行不同的配置（或采购），对应将依赖程度较高。 2、页面缓存、数据缓存为了提高响应速度和避免不必要的请求，增加了页面缓存；为了应对有限的I/O资源，增加了数据缓存。在对数据修改时，同时修改缓存内容。随着数据越来越多，缓存也逐渐变成了分布式（Memcached、Redis等等），对于分布式缓存的使用主要存在几种情况：1）每台缓存Server存储部分数据（按Hash、取余、一致性Hash进行key的分配）；2）缓存可以分主备模式（优势时down掉一台机器不会影响key分布，劣势是会存在脏数据以及是否需要双写及双写的损耗）；3）缓存是否需要持久化（即保证缓存服务重启后数据仍然存在），这对控制型的缓存数据尤为重要；4）缓存数据Key的规则，需要确保在数据结构变化时，程序不会读到脏数据；5）对于缓存数据的超时时间，可设置全局默认值，特殊情况特殊处理（需要与Key规则结合设定）。 3、WebServer集群随着WebServer的增加，就需要进行负载均衡及状态信息同步（主要是用户的登录信息），这就需要在架构上对信息同步进行支持（比如将登陆信息放在缓存中或者通过Cookie判断）。 4、分库分表与读写分离分库分表、读写分离都需要架构的支持，无论是在代码的数据访问层处理还是单独的数据库中间层。在处理分库分表、读写分离时，最好要做到对开发人员的透明。此时需要制定通用的规则、规范（针对特殊情况需要有相应的处理方案）以保证开发人员的快速开发与程序的正确运行。分库分表规则的设定一定要参考业务，不同的业务类型分库分表的规则也不尽相同。以人为中心的业务和以地区为中心的业务，其规则一定不同。规则的设置一定 要在架构中支持，避免通过业务代码控制。在架构中支持的规则，一定要通过配置方式实现，便于修改及管理（关于配置管理的内容以后单独说明）。 5、NoSQL与搜索引擎关系型数据库存储结构简单、查询速度慢，先天不适合处理复杂类型数据。NoSQL（Not Only SQL）的诞生在一定程度上缓解了这种紧张的局面（为什么是一定程度呢？）。下面是关于NoSQL的一些简单说明，用以解释为什么会使用NoSQL。NoSQL数据库主要分为四类：键-值存储数据库（如Redis）、列存储数据库（如HBase）、文档数据库（如MongoDB）、图形数据库（如 Neo4J）。每种数据库的特点、适用场景有所不同，具体内容可查找相关文档查看。NoSQL因为去掉了关系数据库的关系型特性，所以非常容易扩展。一般MySQL使用的是Query Cache，当表更新后Cache就会失效，Cache性能不高。而NoSQL的Cache是记录级的，粒度更细、性能更高。另外NoSQL无须事先创建 字段，可随意存储自定义数据格式，这也是其广泛应用的一个原因。NoSQL也有其不利的一面，历史短暂、在稳定性上与关系数据库（MySQL）比还是稍有 逊色。搜索引擎的出现大幅度的提高站内搜索速度，提升了用户体验，尤其是各种中文分词插件/工具的出现，让站内中文搜索结果的准确性大幅度提高，同时也缩短了用户在查找内容时的时间。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT需求培训现场笔记及练习]]></title>
    <url>%2F2016%2F12%2F14%2FIT%E9%9C%80%E6%B1%82%E5%9F%B9%E8%AE%AD%E7%8E%B0%E5%9C%BA%E7%AC%94%E8%AE%B0%E5%8F%8A%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[2015年11月份，公司组织的，请徐锋老师给公司进行需求管理方面的培训。简要记录如下。 课程总结 练习1：场景化目标写作法练习：（存在问题：1、尽量用动宾结构 2、如果量化的话，最好有历史的情况统计分析表 3、视角需要宏观、面向高层一点） 练习2：干系人识别/分析（问题：1、影响可以再具体、细化一下，可以适当分解） 练习3、流程识别（现场出图）（存在问题：1、产物关系写在连线的上面或者右边 2、录入数据 建议具体说明录入什么数据 3、有结束的标示就必须要有开始的标示 4、职能的人员粒度最好一致 5、规则：在流程图里面打上1a，1b，*2a 之类的，然后在下面的规则前面对应描述） 练习4、场景分析法 练习5、四色建模（问题：1、绿色：一般是表示那些基础数据表 2、蓝色：可以是其它系统的输入，并且是动态的，经常变化的 3、有黄必有绿）]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>需求</tag>
        <tag>培训</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你知道URL、URI和URN三者之间的区别吗？]]></title>
    <url>%2F2016%2F12%2F13%2F%E4%BD%A0%E7%9F%A5%E9%81%93URL%E3%80%81URI%E5%92%8CURN%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%90%97%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[你知道URL、URI和URN三者之间的区别吗？]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>区别</tag>
        <tag>URI</tag>
        <tag>URL</tag>
        <tag>URN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sprint在scrum中到底是什么？]]></title>
    <url>%2F2016%2F12%2F13%2Fsprint%E5%9C%A8scrum%E4%B8%AD%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[很多聊技术的人会聊敏捷，聊敏捷似乎避免不了scrum，而scrum中经常出现的sprint这个东西，那么sprint在scrum中到底是什么呢？有人也许会说sprint就是是一个迭代（iteration），一个开发周期嘛，那么问题来了：sprint和我们之前认知的开发周期有什么区别？任何一个迭代都可以称为一个sprint吗？sprint背后到底代表的是什么？从sprint和scrum的关系开始聊起那么我们先从sprint和scrum的关系开始聊起吧，下面这张图是scrum的开发模型我们关注图中的蓝色部分，就是代表的sprint，可以很明显的发现，sprint是scrum的一部分，并且貌似还是很重要的一部分，它会有一个时间限制可能是4 weeks，在每个sprint过程中，我们会经历daily meetings以及并且会密切关注sprint burn down（燃尽图），我们会以sprint backlog作为开始工作的基础或者叫做输入，然后发布一定的product。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>敏捷开发</tag>
        <tag>srum</tag>
        <tag>sprint</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微服务实战]]></title>
    <url>%2F2016%2F12%2F13%2F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[微服务实战（一）：微服务架构的优势与不足]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>SOA</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebService的两种方式SOAP和REST比较]]></title>
    <url>%2F2016%2F12%2F13%2FWebService%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8FSOAP%E5%92%8CREST%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[WebService原来有两种方式，一是SOAP协议方式，在这种方式下需要WSDL,UDDI等，二是REST方式，这种方式根本不需要WSDL,UDDI等。而且REST方式现在看来是更加流行，更有前途的方式。在SOA的基础技术实现方式中WebService占据了很重要的地位，通常我们提到WebService第一想法就是SOAP消息在各种传输协议上交互。近几年REST的思想伴随着SOA逐渐被大家接受，同时各大网站不断开放API提供给开发者，也激起了REST风格WebService的热潮。 一、定义1、SOAP其实SOAP最早是针对RPC的一种解决方案，简单对象访问协议，很轻量，同时作为应用协议可以基于多种传输协议来传递消息（Http,SMTP等）。但是随着SOAP作为WebService的广泛应用，不断地增加附加的内容，使得现在开发人员觉得SOAP很重，使用门槛很高。在SOAP后续的发展过程中，WS-*一系列协议的制定，增加了SOAP的成熟度，也给SOAP增加了负担。 2、RESTREST其实并不是什么协议也不是什么标准，而是将Http协议的设计初衷作了诠释，在Http协议被广泛利用的今天，越来越多的是将其作为传输协议，而非原先设计者所考虑的应用协议。SOAP类型的WebService就是最好的例子，SOAP消息完全就是将Http协议作为消息承载，以至于对于Http协议中的各种参数（例如编码，错误码等）都置之不顾。其实，最轻量级的应用协议就是Http协议。Http协议所抽象的get,post,put,delete就好比数据库中最基本的增删改查，而互联网上的各种资源就好比数据库中的记录（可能这么比喻不是很好），对于各种资源的操作最后总是能抽象成为这四种基本操作，在定义了定位资源的规则以后，对于资源的操作通过标准的Http协议就可以实现，开发者也会受益于这种轻量级的协议。 3、REST的思想 1)面向资源的接口设计所有的接口设计都是针对资源来设计的，也就很类似于我们的面向对象和面向过程的设计区别，只不过现在将网络上的操作实体都作为资源来看待，同时URI的设计也是体现了对于资源的定位设计。后面会提到有一些网站的API设计说是REST设计，其实是RPC-REST的混合体，并非是REST的思想。 2)抽象操作为基础的CRUD这点很简单，Http中的get,put,post,delete分别对应了read,update,create,delete四种操作，如果仅仅是作为对于资源的操作，抽象成为这四种已经足够了，但是对于现在的一些复杂的业务服务接口设计，可能这样的抽象未必能够满足。其实这也在后面的几个网站的API设计中暴露了这样的问题，如果要完全按照REST的思想来设计，那么适用的环境将会有限制，而非放之四海皆准的。 3)Http是应用协议而非传输协议这点在后面各大网站的API分析中有很明显的体现，其实有些网站已经走到了SOAP的老路上，说是REST的理念设计，其实是作了一套私有的SOAP协议，因此称之为REST风格的自定义SOAP协议。 4)无状态，自包含这点其实不仅仅是对于REST来说的，作为接口设计都需要能够做到这点，也是作为可扩展和高效性的最基本的保证，就算是使用SOAP的WebService也是一样。 4、REST vs SOAP 1）成熟度SOAP虽然发展到现在已经脱离了初衷，但是对于异构环境服务发布和调用，以及厂商的支持都已经达到了较为成熟的情况。不同平台，开发语言之间通过SOAP来交互的web service都能够较好的互通（在部分复杂和特殊的参数和返回对象解析上，协议没有作很细致的规定，导致还是需要作部分修正）REST国外很多大网站都发布了自己的开发API，很多都提供了SOAP和REST两种Web Service，根据调查部分网站的REST风格的使用情况要高于SOAP。但是由于REST只是一种基于Http协议实现资源操作的思想，因此各个网站的REST实现都自有一套，在后面会讲诉各个大网站的REST API的风格。也正是因为这种各自实现的情况，在性能和可用性上会大大高于SOAP发布的web service，但统一通用方面远远不及SOAP。由于这些大网站的SP往往专注于此网站的API开发，因此通用性要求不高。ASF上考虑发布REST风格的Web Service，可以参考几大网站的设计（兄弟公司的方案就是参考了类似于flickr的设计模式），但是由于没有类似于SOAP的权威性协议作为规范，REST实现的各种协议仅仅只能算是私有协议，当然需要遵循REST的思想，但是这样细节方面有太多没有约束的地方。REST日后的发展所走向规范也会直接影响到这部分的设计是否能够有很好的生命力。总的来说SOAP在成熟度上优于REST。 2）效率和易用性：SOAP协议对于消息体和消息头都有定义，同时消息头的可扩展性为各种互联网的标准提供了扩展的基础，WS-*系列就是较为成功的规范。但是也由于SOAP由于各种需求不断扩充其本身协议的内容，导致在SOAP处理方面的性能有所下降。同时在易用性方面以及学习成本上也有所增加。REST被人们的重视，其实很大一方面也是因为其高效以及简洁易用的特性。这种高效一方面源于其面向资源接口设计以及操作抽象简化了开发者的不良设计，同时也最大限度的利用了Http最初的应用协议设计理念。同时，在我看来REST还有一个很吸引开发者的就是能够很好的融合当前Web2.0的很多前端技术来提高开发效率。例如很多大型网站开放的REST风格的API都会有多种返回形式，除了传统的xml作为数据承载，还有（JSON,RSS,ATOM）等形式，这对很多网站前端开发人员来说就能够很好的mashup各种资源信息。因此在效率和易用性上来说，REST更胜一筹。 3）安全性：这点其实可以放入到成熟度中，不过在当前的互联网应用和平台开发设计过程中，安全已经被提到了很高的高度，特别是作为外部接口给第三方调用，安全性可能会高过业务逻辑本身。SOAP在安全方面是通过使用XML-Security和XML-Signature两个规范组成了WS-Security来实现安全控制的，当前已经得到了各个厂商的支持，.net ，php ，java 都已经对其有了很好的支持（虽然在一些细节上还是有不兼容的问题，但是互通基本上是可以的）。REST没有任何规范对于安全方面作说明，同时现在开放REST风格API的网站主要分成两种，一种是自定义了安全信息封装在消息中（其实这和SOAP没有什么区别），另外一种就是靠硬件SSL来保障,但是这只能够保证点到点的安全，如果是需要多点传输的话SSL就无能为力了。安全这块其实也是一个很大的问题，今年在BEA峰会上看到有演示采用SAML2实现的网站间SSO，其实是直接采用了XML-Security和XML-Signature，效率看起来也不是很高。未来REST规范化和通用化过程中的安全是否也会采用这两种规范，是未知的，但是加入的越多，REST失去它高效性的优势越多。 4）应用设计与改造：我们的系统要么就是已经有了那些需要被发布出去的服务，要么就是刚刚设计好的服务，但是开发人员的传统设计思想让REST的形式被接受还需要一点时间。同时在资源型数据服务接口设计上来说按照REST的思想来设计相对来说要容易一些，而对于一些复杂的服务接口来说，可能强要去按照REST的风格来设计会有些牵强。这一点其实可以看看各大网站的接口就可以知道，很多网站还要传入function的名称作为参数，这就明显已经违背了REST本身的设计思路。而SOAP本身就是面向RPC来设计的，开发人员十分容易接受，所以不存在什么适应的过程。 5）总的来说，其实还是一个老观念，适合的才是最好的技术没有好坏，只有是不是合适，一种好的技术和思想被误用了，那么就会得到反效果。REST和SOAP各自都有自己的优点，同时如果在一些场景下如果去改造REST，其实就会走向SOAP（例如安全）。REST对于资源型服务接口来说很合适，同时特别适合对于效率要求很高，但是对于安全要求不高的场景。而SOAP的成熟性可以给需要提供给多开发语言的，对于安全性要求较高的接口设计带来便利。所以我觉得纯粹说什么设计模式将会占据主导地位没有什么意义，关键还是看应用场景。同时很重要一点就是不要扭曲了REST现在很多网站都跟风去开发REST风格的接口，其实都是在学其形，不知其心，最后弄得不伦不类，性能上不去，安全又保证不了，徒有一个看似象摸象样的皮囊。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>webservice</tag>
        <tag>SOAP</tag>
        <tag>REST</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jar包和war包的区别（转）]]></title>
    <url>%2F2016%2F12%2F13%2Fjar%E5%8C%85%E5%92%8Cwar%E5%8C%85%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E8%BD%AC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[jar包和war包的区别：war是一个web模块，其中需要包括WEB-INF，是可以直接运行的WEB模块。而jar一般只是包括一些class文件，在声明了Main_class之后是可以用java命令运行的.它们都是压缩的包,拿Tomcat来说,将war文件包放置它的\webapps\目录下，启动Tomcat,这个包可以自动进行解压，也就是你的web目录，相当于发布了。 war包:是做好一个web应用后，通常是网站，打成包部署到容器中。jar包：通常是开发时要引用通用类，打成包便于存放管理。ear包：企业级应用，通常是EJB打成ear包。所有的包都是用jar打的，只不过目标文件的扩展名不一样。WAR是Sun提出的一种Web应用程序格式，与JAR类似，也是许多文件的一个压缩包。这个包中的文件按一定目录结构来组织：通常其根目录下包含有 Html和Jsp文件或者包含这两种文件的目录，另外还会有一个WEB-INF目录，这个目录很重要。通常在WEB-INF目录下有一个web.xml文 件和一个classes目录，web.xml是这个应用的配置文件，而classes目录下则包含编译好的Servlet类和Jsp或Servlet所依 赖的其它类（如JavaBean）。通常这些所依赖的类也可以打包成JAR放到WEB-INF下的lib目录下，当然也可以放到系统的CLASSPATH 中，但那样移植和管理起来不方便.]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>打包</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 教程]]></title>
    <url>%2F2016%2F12%2F13%2FSpring%20%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Spring 教程Spring 框架是一个开源的 Java 平台，它为容易而快速的开发出耐用的 Java 应用程序提供了全面的基础设施。 一、概述Spring 是最受欢迎的企业级 Java 应用程序开发框架。数以百万的来自世界各地的开发人员使用 Spring 框架来创建好性能、易于测试、可重用的代码。Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且 2003 年 6 月首次在 Apache 2.0 许可下发布。当谈论到大小和透明度时， Spring 是轻量级的。 Spring 框架的基础版本是在 2 MB 左右的。Spring 框架的核心特性可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。 二、使用 Spring 框架的好处下面列出的是使用 Spring 框架主要的好处： Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。 Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你必须并且只需要但是你需要的，而忽略剩余的那部分。 Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像几个 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。 测试一个用 Spring 编写的应用程序很容易，因为 environment-dependent 代码被放进了这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。 Spring 的 web 框架是一个设计良好的 web MVC 框架，它为 web 框架，比如 Structs 或者其他工程上的或者很少受欢迎的 web 框架，提供了一个很好的供替代的选择。 为将特定技术的异常（例如，由 JDBC、Hibernate，或者 JDO 抛出的异常）翻译成一致的， Spring 提供了一个方便的 API，而这些都是未经检验的异常。 轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。 Spring 提供了一个一致的事务管理界面，该界面可以缩小成一个本地事务（例如，使用一个单一的数据库）和扩展成一个全局事务（例如，使用 JTA）。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>框架</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未来企业移动化是什么样？[转]]]></title>
    <url>%2F2016%2F12%2F09%2F%E6%9C%AA%E6%9D%A5%E4%BC%81%E4%B8%9A%E7%A7%BB%E5%8A%A8%E5%8C%96%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%2F</url>
    <content type="text"><![CDATA[从世纪初黑莓带来的第一缕曙光开始算起，企业移动化已经走过了十余年的发展历程。这种全新的移动生产力组织形态在革新了组织办公方式的同时，也对组织内的IT架构产生了深远的改变。 在回顾企业移动化突飞猛进发展势头的同时，更多的人有另外一个疑问：未来企业移动化将是什么样的?国信灵通市场研究中心专家组在对企业移动化实践案例进行分析后认为，未来企业移动化将会呈现三个重大改变：更广、更强、更小。 未来企业移动化是什么样？ 一、企业移动化“管理范围”更广 在企业移动化得到应用伊始，企业移动化管理平台虽然已经出现，但是管理的范围却非常小。从设备上来看，只能管理黑莓、iPhone等少数几种设备，而对于众多数量庞大但碎片化严重的其它智能移动设备却无能为力;从管理内容来看，企业移动化管理平台只能管理移动设备的注册状态、地理位置等有限的内容，无法将触角伸向移动化需求的各个角落。 但是，随着企业移动化技术的发展，企业移动化管理的范围大大增强了。这主要得益于针对移动设备长期的适配性开发，众多企业移动化管理平台已经可以管理iOS、安卓、Windows等众多硬件、操作系统迥异的移动设备，确保这些设备处于统一的移动化管理策略之下。 更重要的是，云计算的发展让硬件的差异变得几乎可以忽略。借助于云桌面技术，员工可以在网络环境下，在不同的移动设备(甚至是PC上)上访问相同的应用与数据。而且，由于数据往往并不直接保存在本地，而是存储于组织的数据中心里，因此安全性得到了更大程度保障。 另外，企业移动化管理平台的功能也将变得前所未有的丰富。特别是EMM的出现，改变了传统MDM侧重在设备层面进行管理的现状，将管理的范围拓展至移动应用、移动信息。例如，未来的企业移动化管理平台将有望打通数据间的屏障，PC上的工作数据将无缝衔接到移动设备中，移动办公将变得前所未有的便利。通过这些先进的技术手段，组织可以将管理能力全面覆盖至移动设备的整个生命周期，以及移动办公的所有应用场景。 未来，企业移动化管理平台将进一步扩大至移动门户这个概念，整合企业通讯录、企业移动应用商店、消息中心等多项基础应用功能，信息一站式浏览和处理，帮助企业实现业务运营移动化。以国信灵通的概念产品APP NEST为例，其基于轻应用的开发、运行、集成、管理，专门打造了一款企业门户形态的MEAP产品，可覆盖绝大多数的移动化应用需求。 二、企业移动化管理的“功能”将更加强大 企业移动化管理平台的重要价值主要是基于两个角度：安全性以及应用体验。 要想匹配组织用户需求的安全性，就需要对组织内的移动设备、应用进行严格的管控，不仅要确保不被黑客恶意利用、出现安全威胁，也要从内容的层面确保信息的合规性，保证机密信息不会泄露;应用体验的重要性相对而言更加直接，其要求移动应用管理能够切实的降低终端用户的使用门槛，提升他们的使用意愿。 目前，比较流行的安全机制是“安全沙箱”。即所有的企业数据访问都是在沙箱内进行的，彻底把个人数据和企业数据隔离开，沙箱机制还可以与手机自带远程擦除能力结合来对存储在个人设备上的敏感数据。既保证企业数据安全，又不影响员工隐私。 但是，现在的企业移动化管理平台关注点主要在于数据的保密处理方面，而对于APT攻击、病毒感染、DDoS攻击等传统安全威胁则缺乏应对手段。实际上，随着移动设备日渐深入组织的工作场景之中，黑客将会越来越多的尝试将移动设备当做对组织发动进一步攻击的“跳板”，通过将恶意软件植入到移动设备之中，他们甚至能够轻易地获取系统权限。 未来的企业移动化管理平台则有望解决这个问题，方式则是将传统的防火墙、威胁发现设备与移动化管理平台进行联动，共享威胁情报，并将移动安全纳入到统一的安全管理体系之内，让安全不留死角。 除了安全性之外，我们预计企业移动化管理平台将具备更强大的功能，提供更好的应用体验。例如，企业移动化管理平台将不仅仅具备管理功能，而是更多的向应用延伸，实现移动应用的整合，快捷提供移动OA、移动CRM、移动BI、移动协同办公等功能，让移动办公流程更加清晰和轻松。 三、企业移动化管理平台的“身影”将更小 从本质上来说，企业移动化管理平台是一个工具，在发展成熟之后，不应该也不适合成为关注的重点。反之，企业移动化管理平台将会更多的退居后台，削弱自己的存在感，让终端用户将关注的目光放至移动应用本身。这一点并不难理解，我们都知道火箭上天、潜艇下海，但其中重要的关键技术与保障系统却少有人知。 “把复杂留给后台，简单带给用户”，未来企业移动化管理平台将遵循这一准则，给用户呈现的将是清晰而简洁的应用场景。目前最符合这一理念的无疑是移动门户，其将整合企业内部业务服务及移动应用、汇集入口、提供单点登录、聚合业务消息，集成与企业员工紧密相关的日常服务，搭建组织员工工作移动门户。 在理想的移动门户内，终端用户的关注点将集中在核心业务的处理之中，而不再将时间耗费在账号登录、流程衔接等与核心业务无关的琐碎事务之中。而前台“隐身”的同时，移动信息化管理平台的后台将会更加强大，其将承担各种移动流程的整合工作，力求给终端用户带来更好的体验。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>移动信息化</tag>
        <tag>企业信息化</tag>
        <tag>移动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[光和颜料的三原色联系与区别]]></title>
    <url>%2F2016%2F12%2F02%2F%E5%85%89%E5%92%8C%E9%A2%9C%E6%96%99%E7%9A%84%E4%B8%89%E5%8E%9F%E8%89%B2%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[一、色光三原色光学三原色：红（Red)、绿（Green）、蓝（Blue)组合的颜色：红＋绿＝黄（Yellow)； 绿＋蓝＝青（Cyan)； 红＋蓝＝品红（Magenta)； 红＋绿＋蓝＝白（White)这里所写的颜色都是100%颜色的叠加。随着它们叠加比例的不同，则产生不同的色彩 二、颜料三原色（红）+（黄)=（橙）（蓝）+（红)=（紫）（蓝）+（黄)=（绿） 三、原理差别对于光源，其颜色叠加的效果是同时显示出各光源的颜色效果，如红+绿，结果就是黄色。对于物体，其颜色叠加效果是显示出各个颜色所共同反射的颜色。如，黄色的物体，反射红光和绿光较多，而蓝色的物体，反射绿光、蓝光和紫光较多，加在一起，就是他们共同反射的颜色，也就是绿色了。所以说，光源的颜色叠加，会越来越亮，颜料的颜色叠加是越加越暗。 另外，光源的颜色是纯色，只与光源本身有关。如，红色的光源，它的颜色就是红色，不管你把它放到什么环境下，都不改变它的颜色。但是颜料的颜色不是纯色，还与周围的环境有关。（学过美术的人就知道这是“固有色”与“环境色”。） 三原色和三基色实际上是一个意思。就是说用从理论上讲，如果有三种颜色可以组合成其它任何一种颜色，那么这三种颜色就是三原色或三基色。 &nbsp;从颜色混合原理上讲，一般分为光学三原色（遵循颜色加法原理）和印刷三原色（遵循颜色减法原理） 四、印刷三原色青（Cyan)、品红（Magenta)、黄（Yellow)组合的颜色：青+品红=蓝；品红+黄=红；黄+青=绿；青+黄+品红=黑。这里所写的颜色都是100%颜色的叠加。随着它们叠加比例的不同，则产生不同的色彩。由于印刷是通过油墨反射光的原理产生颜色，所以反应出的颜色的纯度与所用油墨有很大关系，特别是青品黄三色叠加成黑色在实际应用用无法达到纯黑，所以在印刷上会添加一种黑色，形成青品黄黑四色。 五、生活应用电视机，显示器就是光学原理的三原色，颜色是通过三色的不同量的叠加产生的。书，宣传画等印刷品则是利用颜色的减法原理产生的。由于光学上的颜色与印刷上的颜色成色原理不同，所以它们所表达的色彩范围（色域）也不同，一般说光学的色域包含印刷的色域。这就是为什么印刷品的颜色有时无法达到显示器或电视机上显示的颜色。另：印刷的三色中，青色是指一般所说的天蓝色，品红是指一般所说的洋红，玫瑰红。在早期的印刷厂里一般工人称为蓝和红。所以这就造成了印刷三色是：红黄蓝三色的原因。而这与光学的红绿蓝造成了混淆。所以在这一点上一定要注意]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>三原色</tag>
        <tag>光</tag>
        <tag>颜料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[齐襄公灭纪国报“九世之仇”]]></title>
    <url>%2F2016%2F11%2F30%2F%E9%BD%90%E8%A5%84%E5%85%AC%E7%81%AD%E7%BA%AA%E5%9B%BD%E6%8A%A5%E2%80%9C%E4%B9%9D%E4%B8%96%E4%B9%8B%E4%BB%87%E2%80%9D%20%2F</url>
    <content type="text"><![CDATA[自姜太公封齐建国，历经丁公、乙公、癸公、哀公、胡公、献公、武公、厉公、文公、成公、庄公、僖公，到襄公时已历经三百余年，传了十四世。 齐襄公，僖公长子，名诸儿，公元前697年—公元前686年在位，齐国第十四任国君。齐襄公性情粗暴，崇尚武功，图谋称霸，即位伊始就大动干戈，矛头直指纪国。 纪国为西周封国，据史料记载，“纪，姜姓，侯爵”，在今山东寿光境内，疆域不亚于齐国。西周初期，纪国的统治者大都在周天子身边服务，与周王室的关系十分密切。齐国与纪国毗邻，又是同姓，在很长一段时期内和平共处，相安无事。齐哀公时，齐、纪产生摩擦。周夷王三年，“纪侯谮之周，周烹哀公”，齐国与纪国从此结为世仇，齐国一直伺机吞并纪国。文公、成公、庄公、僖公之前，齐国内乱不断，无暇他顾，而纪国“强本而用，其五谷丰满”，经济繁荣，国势强盛。那时的齐国，即使有报仇之心，却无报仇之力。后来，纪国逐渐衰落，齐国日臻强大，出现了“庄僖小霸”的局面。公元前707年，齐僖公准备灭掉纪国，不料事情泄露，未果。纪国惧怕齐国，于是选择与鲁国结好，借齐、鲁两强国的矛盾而自保；而鲁国也想通过保存纪国，抑制齐国的扩张。公元前699年，纪国与鲁国、郑国结盟，击败了齐、宋、燕、卫四国联军，纪国得以安定一时。 盛气凌人的齐襄公即位后，在伐纪报仇方面表现得非常坚决。公元前695年，也就是齐襄公即位的第三年，齐襄公就发兵攻打纪国，纪国不得不求救于鲁国，鲁桓公出面调停，组织会盟，纪国的危机有所缓解。然而，齐襄公并没有放弃灭掉纪国的念头。次年，齐襄公杀死鲁桓公和郑君子亹，纪国失去了鲁、郑两国的保护，形势急转直下。公元前693年，齐襄公撕毁盟约，打着为九世祖报仇的旗号，再次兴兵伐纪，连下三城，驱其民而占其地。两年后，纪国分裂，纪侯之弟纪季将酅邑献给齐国，甘做齐国的附庸。公元前690年，齐襄公派兵攻破纪国都城，纪侯将剩下的国土交给纪季，出国逃亡一去不返，纪国灭亡。对此，《公羊传·庄公四年》云：“襄公将复仇乎纪……远祖者几世乎？九世矣。九世犹可以复仇乎？虽百世可也。”《春秋三传》对此事曾有争议，因为当时的风俗是家仇只论五世。《公羊传》认为国仇不受世代限制。 齐襄公灭纪，报九世之仇，对汉武帝影响极大。汉武帝曾说：“昔齐襄公复九世之仇，春秋大之”，遂效仿齐襄公此举，坚决北伐匈奴。因为汉高祖曾有“白登之围”被迫贡献金帛女子之耻；吕后也遭遇过匈奴致书之辱；文景两代也都不断遭受匈奴入侵，所以汉武帝决心复仇，解决边患。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>九世仇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《知行合一王阳明》读书心得]]></title>
    <url>%2F2016%2F11%2F30%2F%E3%80%8A%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80%E7%8E%8B%E9%98%B3%E6%98%8E%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[王阳明一生虽然立下奇功，但在仕途上也属于郁郁不得志之列。王阳明在被贬贵州修文县时，在龙场悟道，创立了心学，从此，王阳明走向了人生的巅峰。王阳明的心学强调“知行合一”，遵循内心的良知，便能达到宁静于内、无敌于外的境界。知行是合为一体的，知是行的开始，行是知的结果，由此，心学否定了程朱理学格物致知理论关于知行两者割裂开的思想。也正因为这样，王阳明一直受到了儒家弟子的攻击和反对。王阳明提出，人的一生就是要达到致良知，根据自己的良知去行事。真正的自信就是，相信自己的良知，并按良知做事。王阳明提倡的“良知”，除了关于道德的善恶之心外，还有关于智慧的是非之心。他认为，这些良知就在人心中，不需要再向外界寻求，很多人只是良知给蒙蔽了。但是，王阳明的心学和佛学不同的是，心学是一种入世的学问，强调行的重要性，要在行中磨炼自己。看了整本书，最大的感觉就是，王阳明才是真正的心理学大师，剿匪的时候，充分利用了人的心理，虚虚实实，或招安、或强攻，基本是以最小的代价获得了最大的胜利。 格物致知格物致知是中国古代儒家思想中的一个重要概念，源于《礼记·大学》八目──格物、致知、诚意、正心、修身、齐家、治国、平天下─所论述的“欲诚其意者，先致其知；致知在格物。物格而后知至，知至而后意诚”此段。但《大学》文中只有此段提及“格物致知”，却未在其后作出任何解释[1]，也未有任何先秦古籍使用过“格物”与“致知”这两个词汇而可供参照意涵，遂使“格物致知”的真正意义成为儒学思想的难解之谜。东汉郑玄最早为“格物致知”作出注解，而自从宋儒将《大学》由《礼记》独立出来成为《四书》的一部后，“格物致知”的意义也就逐渐成为后世儒者争论不休的热点议题，以至于今。现在社会上关于“格物致知”的流行诠释是根据南宋朱熹学说的部分观点，认为“格物致知”就是研究事物而获得知识、道理。《现代汉语词典》将其解释为：“穷究事物的原理法则而总结为理性知识”。现今流行观点和朱熹观点的差异，乃是在关于“致知”的解释。朱熹所谓的“知”是知性─包含了智慧与知识─而现代流行观点的“知”只是指知识，这种观念变异可能是由于现今社会流行唯物论观点所产生的影响。虽然朱熹乃是儒学史上承先启后的一代大儒，但他对于“格物致知”的观点之所以在后世成为主流，并非是因为获得后世儒家学者的普遍赞同。事实上，朱熹学说在南宋当时还因政治党争而被斥为“伪学”，而后世的许多儒家学者也更大力批判朱熹对于“格物致知”的学说观点。但因为朱熹的《四书集注》在元朝中叶就被官方采用为科举取士的应试准则，而自从明太祖开始独尊朱熹学说为《四书》上的唯一官方思想权威以后，朱熹学说更是成为明清两代历时五百余年在科举应试上的官方教条观点。因而朱熹在“格物致知”上的观点也就在数百年的官方教条权威下，成为后世社会上的普遍流行观点。所以在清末的洋务学堂中，就把物理、化学等学科称为“格致”[2]，即“格物致知”的简称。上海等地还成立科学技术学校，称为格致书院。 横渠四句即“为天地立心，为生民立命，为往圣继绝学，为万世开太平”，为北宋儒学家张载的名言。当代哲学家冯友兰将其称作“横渠四句”。由于其言简意宏，一直被人们传颂不衰。其意思是读书人其心当为天下而立，其命当为万民而立，当继承发扬往圣之绝学，当为万世开创太平基业，说出了读书人应当有的志向和追求：天下、万民、圣贤之道、太平基业。 宋真宗赵恒的《劝学诗》富家不用买良田，书中自有千锺粟；安居不用架高堂，书中自有黄金屋；出门莫恨无人随，书中车马多如簇；娶妻莫恨无良媒，书中自有颜如玉；男儿若遂平生志。六经勤向窗前读。 仁义礼智信“仁义礼智信”为儒家“五常”，孔子提出“仁、义、礼”，孟子延伸为“仁、义、礼、智”，董仲舒扩充为“仁、义、礼、智、信”，后称“五常”。这“五常”贯穿于中华伦理的发展中 胶柱鼓瑟源于故事“齐人跟赵人学习瑟这种乐器。他不去刻苦钻研演奏瑟的技术，却依照赵人预先调弄好的音调，将瑟上调音的短柱用胶粘固起来，就高高兴兴地回到了家乡。齐人回家后，摆弄了多年，总是弹不出一支曲子。他还觉得奇怪呢!后来，有人从赵国来，了解到是怎么回事，觉得这个齐人的举动是多么愚蠢啊!”比喻固执拘泥，不知变通。 文章摘要 孟子说人性本善，荀子说人性本恶，告子则说，人性可善可恶。 儒学只有在大一统时代才有力量。 个人注：儒学在大一统的时代是用来麻痹人民的精神鸦片。 董仲舒曾用“天人感应”的方式来限制皇权，“天人感应”认为，国君做了坏事，老天就发怒；国君做了好事，老天就高兴。 能勇敢向前是勇气，能转身是智慧，智勇兼备，才可成大事。 个人注：知进退！ 儒家知识分子最大的追求就是把皇上塑造成德高望重的圣贤。 个人注：所谓的圣君良相。 噤若寒蝉：噤：闭口不作声。象深秋的蝉那样一声不吭。比喻因害怕有所顾虑而不敢说话。《后汉书·杜密传》：“刘胜位为大夫，见礼上宾，而知善不荐，闻恶无言，隐情惜己，自同寒蝉，此罪人也。” 轻徭薄赋、悲天悯人 王八吃秤砣——铁了心 人生一切所谓困难，都是比较而言。 人的力量永远来自心灵。当你的心灵产生力量后，外界的环境看上去也就没想象中的险恶了。 逆境让人成长，让人成熟。摩西被放逐渺无人迹的沙漠，才有了《摩西十诫》；耶稣在颠沛流离的传道中悟得大道；穆罕穆德在放逐地创建了伊斯兰教；释迦摩尼放弃了王子养尊处优的生活，到深山老林中度过了艰苦的岁月，创建佛教。 孝顺父母的终极目的就是让他们心上安宁，物质条件还在其次。 所谓政治力，无非就是一个人处理各种关系的能力，主要就是人际关系。 学术辩论是要明理，而不是要分胜败。 古人云，攻我短者是吾师。 心学和禅学的区别就是在于实践。（个人注：一个入世，一个出世） 佛教以超脱生死来劝人信奉，道教以长生不老劝人信奉。 一个内心强大的人，肯定是做事的人。 一个人是否成熟，要看他在面对事情时的态度。 不要迷信自己的经验。世间一切瞬息万变，拿从前的经验对待新出现的事物是胶柱鼓瑟。 靠山山倒，靠河河枯。 莫道君行早，更有早行人。 政治无是非、无亲情，厉害即是非。 人因性格、人生阅历和生活环境的不同，看待事物时的态度就会迥然不同。 汤武和吕伊：汤是商汤，武是周武，伊是伊尹，吕是吕尚，也就是姜子牙。 兵法说，围五攻十。 包围敌人要用五倍于敌人的士兵，攻击敌人就要用十倍于敌人的士兵。 大家智慧都相差无几，胜负之决只在此心动与不动。 恶人也不是天不怕地不怕的，他们最怕的就是丧失利益。对付他们，只需要给他们摆清厉害关系，他们就会知难而退。 将心比心，永远都不会过时，必能产生奇效。 结交皇帝身边的红人是一个政治家变通的智慧，多年以后的张居正让半死不活的明帝国重获生命力，靠的就是和宫中的大太监冯保的友谊。 真正服膺王阳明心学的人，都没有登上权力之巅。（个人注：政治还是要靠权谋） 只要他能给你带来心灵上的安宁，它就是好学问。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>哲学</tag>
        <tag>历史</tag>
        <tag>王阳明</tag>
        <tag>知行合一</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT规划及实施]]></title>
    <url>%2F2016%2F11%2F27%2FIT%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[一、规划方面的思考1、思考的方式：站在老板的角度思考，和业务换位思考。2、首席信息官，对本行业的业务风险有清晰的判断。首席信息官应负责制定和及时更新信息科技战略,确保信息科技战略与业务战略保持一致；信息化的价值观就是帮助业务，提升业务。3、要思考5-10年的房地产和技术发展趋势，提前做一些规划和应对的工作；4、深入到企业的经营管理问题求解需求，才能爆发出新的创新点；5、万变不离其宗，要找到变背后的不变。 二、业务的问题1、老板管控要求落地问题老板的管控要求，如何形成具体的可执行的需求在系统落地；老板的管控要求，是否在系统得到落地。这两方面（需求、审计）最好有专门的团队跟进。2、数据的准确性问题报表必须从系统出，对不同的数据必须有不同的部门负责；业务经营汇报必须从系统出。3、简要管理，增强授权的问题目前的管理由点复杂，其实一定要简化管理。例如一个流程几十个人审，但是谁都不用负责任。真正的好做法？以后的管理要通过标准、全面预算、两书三控进行管理，通过授权进行管理，减少人为的裁量权。 三、IT的问题1、形成统一的服务接口，实行首问责任制；2、要形成激励机制，调动员工积极性；3、明确前后台的工作界面、工作分工及考核机制。4、宣导不够5、对业务的理解不深 四、IT工作方式CIO最大的难度是如何推动业务你明确业务需求、明确规则、上线系统；平衡老板和业务领导的利益1、找差异2、找重点3、找资源（取得老板支持）4、清晰的路线图（近期、远景），类似地铁线路反映进展。4、组团队推进。5、每月评估（效果、验收） 五、落地实施1、实施原则分步实施：先基础平台+重点业务系统；因为基础平台的业务比较单一、固定，市场上有成熟的产品，上线比较快，也通过这个上线，培养员工信息化的习惯。 2、平台原则所有的建设需要满足规划的要求，选项必须保证平台的一致性，同时，最好能考虑全方位的解决方案，减少系统的接口。要达到统一入口、统一认证、统一流程等。** 3、工作原则工作落实：组织保障（领导委员会（一把手工程）、业务+IT的专职小组）、选型、工作计划、目标及验收方案 4、工作重点互联网思维，产品化，降低员工的技能要求、培训要求；系统的可扩展性、灵活性、交付体验等是IT的目标 5、工作难点三分技术、七分实施、十二分数据，技术就像买了一套房子，主要有钱，问题不大（技术）；但是搬家（实施初始化）的清理现有的物品、搬到新家是一件很大工作量的一件事情（实施），搬进去之后，需要每天打理、买菜、做饭、回家吃饭，这要检查每天都做，是更不容易的一件事情（数据）； 6、工作内容 基础性的工作：如何达成目标，最重要的是组织架构、授权、流程、标准。但是这些基础性的工作因为不出彩，没人做。 后续的工作：系统上线后，系统的日常维护、技术支持（运维人员），需要一些的小修小改功能（开发人员）。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>规划</tag>
        <tag>实施</tag>
        <tag>信息化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[缩写]]></title>
    <url>%2F2016%2F11%2F27%2F%E7%BC%A9%E5%86%99%2F</url>
    <content type="text"><![CDATA[LS:两书LSSK：两书三控HD：合道ZJ：珠江NFHY：南方花园BJDJ：滨江帝景]]></content>
      <categories>
        <category>地产相关</category>
      </categories>
      <tags>
        <tag>规划</tag>
        <tag>两书三控</tag>
        <tag>缩写</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[信息化评价]]></title>
    <url>%2F2016%2F11%2F27%2F%E4%BF%A1%E6%81%AF%E5%8C%96%E8%AF%84%E4%BB%B7%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>信息化</tag>
        <tag>评价</tag>
        <tag>绩效</tag>
        <tag>效果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle GRC平台及主数据及BI]]></title>
    <url>%2F2016%2F11%2F27%2FGRC%E5%B9%B3%E5%8F%B0%E5%8F%8A%E4%B8%BB%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[一、什么是GRC在管理信息化应用当中，GRC（管控、风险和法规遵从）平台是很重要一个组成部分。GRC平台提供了一整套的IT理论架构，即如何在“以流程为中心、以风险辨识为基础、以实现有原则绩效为目标”的整体思想下，构建一体化企业管理信息化架构。各项GRC管理活动都要与相关的核心业务活动深度交互才能真正实现GRC的价值，而这需要GRC平台充分协调整个组织中的大量人员、流程、技术和信息。 二、企业内容全生命周期 三、主数据管理Oracle主数据管理PDF文件 四、BI关注内容&nbsp;不同人在BI系统的不同关注视角：]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>GRC</tag>
        <tag>Oracle</tag>
        <tag>主数据</tag>
        <tag>BI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT规划咨询工作日志]]></title>
    <url>%2F2016%2F11%2F27%2FIT%E8%A7%84%E5%88%92%E5%92%A8%E8%AF%A2%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[个人总结 1、结果导向：要出什么成果（业务视图、IT规划图、IT施工图（三图：流程图、系统功能图、ER图））； 2、访谈策略：由上而下、存在问题、期望。 3、工作方法（PDCA）；IT现状、业务正常的流程、重点关注业务变动的部分及影响； PS：对“HD”公司的要求 1、 学习方法论、进度、时间节奏； 2、 目标：整体规划、接口、包括三年规划（计划、预算及依据、三年“HD”公司的收入） 3、 项目的方案对比：自主开发、外购（切换SAP、Oracle的方案）、混合型。 4、 项目范围 一、术语说明规划：总规图实施路线图：施工图独立系统：独立数据库或同一数据库但表之间没有关联。 二、工作要求1、启动会 组织架构：架构、项目成员、参加什么、参与的时间比例。 工作过程：需要哪些部门配合、要配合的大事项； 访谈：访谈的对象（访谈的对象确定：先上后下，先核心部门后边缘部门）、参与的角色（成员、访谈、资料、讨论）； 项目实施的大原则：遵从客观、开放。 主要领导说话。 《“ZJ”公司投资IT规划项目启动会_V3.0》 2、工作成果 2.1 三图：流程图（信息的输入、输出）、系统图（功能图）、数据图（ER图） 2.2 独立系统清单及之间的数据交换、同步 2.3 业务热点图及对应的信息系统图； 3、工作内容四件事情：1、现状图 2、实体图 3、IT基础架构 4、访谈（产出？业务现状与应用现状的差异）。 三、存在的主要核心问题 1、标准类数据、资料的及时更新问题：有专门的组织处理；参照PDCA：标准类数据、资料要按照实际的快速调整！ 2、变更流程审批过长的问题：授权，结合标准类数据、资料的更新； 3、部门之间配合的问题：梳理并且明确前置条件，作为CheckList例如开发：（报建图）空调上报政府是水冷，设计：（施工图）空调设计成风冷。这些矛盾在政府验收的时候才出问题，导致交楼时候业主的索赔。解决：清理出容易出现的矛盾，做成其它部门工作的前置条件。（Checklist）主要是开发与设计的矛盾。 4、LS部门指标变化导致的联动调整问题：版本比较、自动的联动调整、手动调整指标的梳理。表间的关系。 四、工作日志（第一天）1、了解两个集团的管理架构、股权架构（财务核算实体的架构，重点是持股比例，有没有外部持股的公司）；2、了解IT现状（应用架构、技术架构）3、IT基础架构要调查的东西 网络的实际TOP图、2012的实际现金流（采购、合同、费用）、2013的计划、变更管理（ITIL）、故障记录、监控手段、告警发送范围及发送机制、今年的主要工作。5、财务出成本管理帐的问题历史的管理帐清理工作量非常大，目前的资金占用没有计算利息、费用分摊也难以重新梳理。经营管理主要还是以管理的架构来执行、财务核算主要是在出财务报表的时候用到。管理费用占总成本约5%左右；开发成本及利息对成本的影响比较大。 (总成本比例：土地：建安：税费及财务成本 40:35:(10+15)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;融资的资金占总成本的60%)现金流及开发证照对进度的影响较大。项目管理是对应工作单元，财务会计是对应核算单元。 业务知识点：1、节点1级：集团管控节点；2级：部门节点；3级：责任人节点 （第二天）1、集中过整体业务流程图《项目开发全过程一二级节点流程图（住宅在建项目）0304 更新》分析要点：考虑a、变化的影响 b、不按要求完成的影响。存在的主要问题： 业务知识点：1、盖楼的速度：一个月4层。2、标准工期：详见《“LSSK”工作需关联的业务标准和分摊原则》工规到施工证 20天。3、3D报建：现在南海已经开始要求3D报建4、基准价：设计基准价（设计限额）（前台）、发包基准价（后台）5、两点一线：两点一线：贵的2000万左右。 普通（“NFHY项目”）的约480万，售楼部：4000一平方，样板房：2000元，交楼装修标准：1500；售价：2.5万一方。共600多套。 异常情况：1、实际上的工程会有三超：上面超高、中间超容积率、下面超红线。2、实际的工程款支付会有拖延：只拖不欠；3、进度延误问题：资金支付影响进度、变更的时候流程太长（进度和流程的矛盾），一般是先电话沟通再走流程。影响的主要要素：合同图纸、预结算、合约规划！！ （第三天）LSSK《“ZJ”公司LSSK近期工作安排及工作标准、规范20130228》《“BJDJ项目”LSSK汇报20121121》1、LS的理解LS是框，执行在框内，从而规避风险。当时框也要与时俱进。通过授权控制风险。 风险控制委员会，全盘的授权体系变化，下发范围内（包括计划、预算、成本）的不用上报。考虑KPI指标的管理。LS定指标、出模型套路、按照模型落地就能达到目标。 业务知识点：1、LSSK旧项目10天，新项目2个月出。 问题：1、LSSK的指标那些可以变，怎么控制？那些不能变？变化后的记录及比较。2、LS有拿过历史盘套过没有？3、要通过图来表达变化。Excel表看不出变化。4、标准价的改变需要改变LSSK的数据。5、定价系统（如果定价，定价的考虑要素）6、LS表的前后顺序、表之间的关系（考虑改动、联动规则、逻辑关系），有多个基础表：时间：发展计划；结构：面积表；例如面积增加了，会导致所有的进度、资金流。如果没有自动联动，所有的规则都变成了人的事情了。如果是自动就能跟踪变化的依据及规则。7、工作手册：分不同的项目，类别。工作指引。8、变化人为因素有哪些，必须严格跟踪这些！ 说明：拼音是相关敏感信息的缩写。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>规划</tag>
        <tag>方法</tag>
        <tag>过程</tag>
        <tag>实施</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据仓库与ODS的区别]]></title>
    <url>%2F2016%2F11%2F27%2F%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8EODS%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[个人总结目前PM的成本库是从生产库抽取数据，对生产库的压力很大。可以考虑ODS或者数据库的Stanby方式实现。 一、数据仓库数据仓库存储报表，数据仓库是面向主题的、集成的、随时间变化的、非易失的、用于进行战略型决策的数据集合。 二、ODSODS是一个面向主题的、集成的、可变的、当前的细节数据集合，用于支持企业对于即时性的、操作性的、集成的全体信息的需求。ODS常常被作为数据仓库的过渡，也是数据仓库项目的可选项之一。 三、数据仓库与ODS的比较操作型数据存储（Operational Data Store，ODS）用于战术型决策，而数据仓库支持战略型决策。操作型数据存储在某些方面具有类似于数据仓库的特点，但在另一些方面又显著不同于数据仓库： 像数据仓库那样，是面向主题的。 像数据仓库那样，其数据是完全集成的。 数据是当前的——或其数据处理技术允许这样，这与数据仓库存储历史数据的性质显著不同。 ODS具有最少的历史数据，而尽可能接近实时地展示实体的状态。 数据是易失的和可更新的，这是与静态数据仓库的一个很大的区别。 ODS就如同一个事务处理系统，当新的数据流进 ODS时，受其影响的字段被新信息覆盖或更新。除审计数据外，不保留其他的历史内容。 数据几乎完全是细节数据，仅具有少量的动态聚集或汇总数据。通常将 ODS设计成包含事务级的数据，即包含该主题域最低级别的数据。 在数据仓库中，几乎没有针对其本身的报表（报表均放到数据集市中完成）；与此不同，在 ODS中，业务用户频繁地直接访问 ODS。 四、其它关于ODS的说明ODS的定义 是操作型系统中的集成,用于当前，历史以及其它细节查询(业务系统的一部分) 为决策支持提供当前细节数据(数据仓库的一部分) 因此操作数据存储（ODS）是用于支持企业日常的全局应用的数据集合，ODS的数据具有面向主题、集成的、可变的和数据是当前的或是接近当前的4个基本特征。同样也可以看出ODS是介于DB和DW 之间的一种数据存储技术，和原来面向应用的分散的DB相比，ODS中的数据组织方式和数据仓库（DW）一样也是面向主题的和集成的，所以对进入ODS的数 据也象进入数据仓库的数据一样进行集成处理。另外ODS只是存放当前或接近当前的数据，如果需要的话还可以对ODS中的数据进行增、删和更新等操 作，虽然DW中的数据也是面向主题和集成的，但这些数据一般不进行修改，所以ODS和DW的区别主要体现数据的可变性、当前性、稳定性、汇总度上。 由于ODS仍然存储在普通的关系数据库中，出于性能、存储和备份恢复等数据库的角度以及对源数据库的性能影响角度，个人不建议ODS保存相当长周期的数据，同样ODS中的数据也尽量不做转换，而是原封不动地与业务数据库保持一致。即ODS只是业务数据库的一个备份或者映像，目的是为了使数据仓库的处理和决策支持要求与OLTP系统相隔离，减少决策支持要求对OLTP系统的影响。 ODS的作用为什么需要有一个ODS系统呢？一般在带有ODS的系统体系结构中，ODS都具备如下几个作用： 1） 在业务系统和数据仓库之间形成一个隔离层。一 般的数据仓库应用系统都具有非常复杂的数据来源，这些数据存放在不同的地理位置、不同的数据库、不同的应用之中，从这些业务系统对数据进行抽取并不是一件 容易的事。因此，ODS用于存放从业务系统直接抽取出来的数据，这些数据从数据结构、数据之间的逻辑关系上都与业务系统基本保持一致，因此在抽取过程中极 大降低了数据转化的复杂性，而主要关注数据抽取的接口、数据量大小、抽取方式等方面的问题。 2） 转移一部分业务系统细节查询的功能在 数据仓库建立之前，大量的报表、分析是由业务系统直接支持的，在一些比较复杂的报表生成过程中，对业务系统的运行产生相当大的压力。ODS的数据从粒度、 组织方式等各个方面都保持了与业务系统的一致，那么原来由业务系统产生的报表、细节数据的查询自然能够从ODS中进行，从而降低业务系统的查询压力。 3） 完成数据仓库中不能完成的一些功能。一 般来说，带有ODS的数据仓库体系结构中，DW层所存储的数据都是进行汇总过的数据和运营指标，并不存储每笔交易产生的细节数据，但是在某些特殊的应用中，可能需要 对交易细节数据进行查询，这时就需要把细节数据查询的功能转移到ODS来完成，而且ODS的数据模型按照面向主题的方式进行存储，可以方便地支持多维分析 等查询功能。即数据仓库从宏观角度满足企业的决策支持要求，而ODS层则从微观角度反映细节交易数据或者低粒度的数据查询要求。在一个没有ODS层的数据仓库应用系统体系结构中，数据仓库中存储的数据粒度是根据需要而确定的，但一般来说，最为细节的业务数据也是需要保留的，实际上 也就相当于ODS，但与ODS所不同的是，这时的细节数据不是“当前、不断变化的”数据，而是“历史的，不再变化的”数据。这样的数据仓库的存储压力和性能压力都是比较大的，因此对数据仓库的物理设计和逻辑设计提出了更高的要求。 五、ODS如何保持实时性问题：想了解一下ods在保持实时性方面是怎么实现的，是业务系统完成ods的加载呢，还是做一个接近实时的etl过程，或者其它一些方法？回答：呵呵，这个问题问得好！保持实时性有很多种办法 1、利用数据库的特性，Oracle的logminer，SQLServer的分发订阅都可以实现，本质上都是通过数据库的日志分析来完成的。许多ETL工具即利用数据库的特性来实现实时操作。 2、Oracle数据库的话有standby方式，也可以认为是一个ODS数据库，即脱离联机在线OLTP的功能，达到数据整合的目的就行了。 3、Oracle的物化视图方式，也可以实现实时性的目的。当然也有一定的延迟！ 4、准实时性的，就是普通的ETL抽取，1小时~1天不等的进行数据的定期抽取！]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>数据仓库</tag>
        <tag>ODS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[捕捉变化数据]]></title>
    <url>%2F2016%2F11%2F27%2F%E6%8D%95%E6%8D%89%E5%8F%98%E5%8C%96%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[使用变化数据捕捉特性可以简化数据仓库应用中的ETL过程。数据提取是所有数据仓储的一个完整组成部分。数据通常是在晚上从事务处理系统中被提取出来并被传输到数据仓库。一般情况下，数据仓库中的所有数据都是由从源系统中提取出的数据来更新。但是在提取和传输海量数据时，资源和时间的消耗都是巨大的。由于数据提取每日都在进行，因此如果只是提取和加载自上次提取之后发生变化的数据，那么效率就会大大提高。但是，在大多数源系统中，识别并提取最新变化的数据即使是可能的，也非常困难。除了识别最新变化数据的挑战之外，许多提取、转换和加载（ETL）环境都包含一个源系统，为多个目标系统提供数据。另外，从一个源系统到多个目标系统同步改变数据也是一个挑战。Oracle变化数据捕捉（Change Data Capture，CDC）特性简化了识别自上次提取后发生变化的数据的过程。CDC提供了易于使用的API来设置CDC环境。 如果你是参与数据集成项目的DBA或开发人员，需要定期从一个系统提取大量数据并将其传输到另一个系统或多个系统，那就赶快考虑使用CDC来缩短ETL的时间吧。本文将为你提供一种设置CDC环境的循序渐进的方法，概述设置CDC环境的先决条件，并讨论为你的应用程序设置CDC时需要掌握的API。 一、概述CDC特性是在Oracle9i数据库中引入的。CDC能够帮助你识别从上次提取之后发生变化的数据。利用CDC，在对源表进行INSERT、UPDATE或DELETE等操作的同时就可以提取数据，并且变化的数据被保存在数据库的变化表中。这样就可以捕获发生变化的数据，然后利用数据库视图以一种可控的方式提供给目标系统。图 1 给出了CDC环境的基本体系结构。 CDC建立订阅者视图来控制目标系统对变化数据的获取。目标系统是任何需要使用从源系统中捕获的数据的应用程序。 二、发布者和订阅者CDC体系结构基于发布者/订阅者模型。发布者捕捉变化数据并提供给订阅者。订阅者使用从发布者那里获得的变化数据。通常，CDC系统拥有一个发布者和多个订阅者。发布者首先需要识别捕获变化数据所需的源表。然后，它捕捉变化的数据并将其保存在特别创建的变化表中。它还使订阅者能够控制对变化数据的访问。订阅者需要清楚自己感兴趣的是哪些变化数据。一个订阅者可能不会对发布者发布的所有数据都感兴趣。 订阅者需要创建一个订阅者视图来访问经发布者授权可以访问的变化数据。 三、设置CDC环境CDC特性是Oracle9i (及更高版本)数据库软件的一部分，你无需安装除Oracle9i外的任何其他软件就可以使用CDC。要使用Oracle9i 数据库的CDC特性，请按下述步骤进行：启用数据库中的Java功能（Java虚拟机，JVM）。有关配置Oracle JVM的详细说明，请参见《Oracle9i数据库Java开发人员指南》。当使用数据库配置助理（Database Configuration Assistant，DBCA）创建数据库时，你可以选择安装Oracle JVM。 启用系统触发器。当创建数据库时，系统触发器默认情况下是启用的。一旦你的数据库做好了CDC准备，你就可以按照以下步骤设置CDC环境。 确定源表。 设置发布者。 创建变化表。 设置订阅者。 订阅源表并激活订阅过程。 设置CDC窗口。 准备订阅者视图。 访问变化表中的数据。 删除订阅者视图，并清除CDC窗口。 重复第6到第9步，以查看新数据。 出于本文的目的，我将使用一个销售应用程序作为示例。源应用程序是记录关于每笔销售的信息的事务处理系统。该系统的表的计划所有者是SALES_OP。我设置一个基于销售运营数据的数据仓库。用户SALES_DW是数据仓库的所有者。我的CDC系统的目的是高效地将变化数据从事务处理系统(SALES_OP拥有的源表)传输到数据仓库系统(SALES_DW拥有的目标表)。 变化数据包括： 自上次提取后在源表中插入(INSERT)的数据； 自上次提取后在源表中更新(UPDATE)的数据； 自上次提取后从源表中删除的(DELETE)的数据。 在下面几节中，我将向你演示如何在源系统中捕捉变化数据并将其提供给目标系统。 1.识别源表数据库用户SALES_OP拥有两个表：PRICE_LIST和SALES_TRAN。这两个表分别保存已售商品的价格清单和每笔销售交易的细节。SQL&gt; DESC PRICE_LIST Name Null? Type PRODUCT_ID NOT NULL VARCHAR2(20) UOM NOT NULL VARCHAR2(20) PRICE_PER_UOM NOT NULL NUMBER(10,2) SQL&gt; DESC SALES_TRAN Name Null? Type PRODUCT_ID NOT NULL VARCHAR2(20) SALE_DATE_TIME NOT NULL TIMESTAMP(6) QUANTITY NOT NULL NUMBER(10,2) 每天早上，这两个表中发生变化的数据必须被提取出来并传送到数据仓库系统。 2.设置发布者发布者是创建和维护变化表的数据库用户。正如前面提到的，发布者的职责是识别并提取变化数据，并将其提供给订阅者。要做到这一点，必须给发布者分配以下两个数据库角色：SELECT_CATALOG_ROLEEXECUTE_CATALOG_ROLE 为了简单起见，让用户SALES_OP 充当发布者的角色。因为SALES_OP拥有源表，所以将其指定为发布者会比较简单。不过，你也可以指定任何其他数据库用户为发布者。在由多个数据库用户拥有的表构成源表的情况下，最好指定另一个用户作为发布者。在这种情况下，该用户需要在源表上有SELECT权限。 3.创建变化表每个源表都需要一个变化表。发布者使用DBMS_LOGMNR_CDC_PUBLISH .CREATE_CHANGE_TABLE过程来创建变化表，如清单 1所示。在这个例子中，与PRICE_LIST和 SALES_TRAN 相对应的变化表分别被命名为CDC_PRICE_LIST和CDC_SALES_TRAN。CREATE_CHANGE_TABLE 过程将变化集的名字作为一个变量来传递。一个变化集是一个变化表的集合。 在清单 1中，我使用了系统生成的变化集：SYNC_SET。 4.设置订阅者在我的例子中，目标系统SALES_DW是订阅者。为了能够订阅变化数据，订阅者必须在源表和变化表上有SELECT权限，如下所示：connect sales_op/sales_opgrant select on PRICE_LIST to sales_dw;grant select on SALES_TRAN to sales_dw;grant select on CDC_PRICE_LIST to sales_dw;grant select on CDC_SALES_TRAN to sales_dw; 5.订阅源表并激活订阅过程在典型的CDC环境中会有多个订阅者，每个订阅者只需要订阅自己所需要的表。此外，订阅者可能不希望看到自己所订阅的表的所有字段。在可以订阅发布的数据之前，你需要得到一个订阅句柄。订阅句柄使订阅者能够管理自己感兴趣的变化表和字段。在Oracle的CDC环境中，一个订阅只能由一个订阅句柄识别，而无论你订阅了多少个表，你只需创建一个订阅句柄。 使用DBMSLOGMNR CDC_SUBSCRIBE.GET_SUBSCRIPTION HANDLE过程就可以得到一个订阅句柄。这个过程以变量的方式返回句柄值。你可以在你的会话中定义一个变量来接收来自过程的句柄值，如下所示：variable sh_sales number;EXECUTE -DBMS_LOGMNR_CDC_SUBSCRIBE .GET_SUBSCRIPTION_HANDLE( - CHANGE_SET=&gt;’SYNC_SET’, - DESCRIPTION=&gt;’Change data fromSales Appln.’, - SUBSCRIPTION_HANDLE=&gt;:sh_sales); 一旦你建立了句柄，你就可以订阅你想要的变化数据。当订阅变化数据时，需要指定你希望订阅的表和字段，如下所示： EXECUTE DBMS_LOGMNR_CDC_SUBSCRIBE .SUBSCRIBE( - SUBSCRIPTION_HANDLE=&gt;:sh_sales, - SOURCE_SCHEMA=&gt;’SALES_OP’, - SOURCE_TABLE=&gt;’PRICE_LIST’, - COLUMN_LIST=&gt;’PRODUCT_ID,UOM,PRICE_PER_UOM’); EXECUTE DBMSLOGMNR_CDC_SUBSCRIBE .SUBSCRIBE( - SUBSCRIPTION_HANDLE=&gt;:sh_sales, - SOURCE_SCHEMA=&gt;’SALES_OP’, - SOURCE_TABLE=&gt;’SALES_TRAN’, - COLUMN_LIST=&gt;’PRODUCT_ID,SALE_DATE_TIME,QUANTITY’); 当指定了希望订阅的表和字段后，你就可以激活你的订阅。无论订阅多少个表，你都只需要激活订阅一次。一旦激活了一个订阅，你就不能再将任何其他表或字段添加到你的订阅中。为了激活订阅，你可以调用将订阅句柄作为参数调用DBMS_LOGMNR_CDC_SUBSCRIBE.ACTIVATE SUBSCRIPTION过程，并将订阅句柄传递给它：EXECUTE - DBMS_LOGMNR_CDC_SUBSCRIBE .ACTIVATE_SUBSCRIPTION( - SUBSCRIPTION_HANDLE=&gt;:sh_sales)。 6. 设置CDC窗口源表中的数据不断变化(插入、更新或删除) ，而不管对变化数据的订阅。因此，订阅要设置（扩展）一个窗口――CDC窗口，通过该窗口可以看到任何变化。DBMS_LOGMNR_CDC_SUBSCRIBE.EXTEND_WINDOW过程可以被用来设置CDC窗口，如下所示： EXECUTE -DBMS_LOGMNR_CDC_SUBSCRIBE.EXTEND_WINDOW( - SUBSCRIPTION_HANDLE=&gt;:sh_sales); 当你执行了EXTEND_WINDOW过程后，如果你没有清除窗口并再次对它进行扩展，那么对源表所做的改变在订阅中就无法看到（后面对此有更详细介绍）。 7.准备一个订阅者视图一旦你设置了CDC窗口，你就需要为订阅者准备一个视图，以便订阅者能够看到变化数据。你需要为订阅者订阅的每个源表准备一个视图。DBMS_LOGMNR_CDC_SUBSCRIBE.PREPARE_SUBSCRIBER_VIEW过程可以被用来准备一个订阅者视图。你需要将订阅句柄、源模式名和源表名传递给该过程，该过程就会以变量的方式返回订阅者视图的名字。在本例中，源表PRICE_LIST和SALES_TRAN 的订阅者视图名分别以变量sv_price_list 和sv_sales_tran返回。 variable sv_price_list varchar2(30); EXECUTE -DBMS_LOGMNR_CDC_SUBSCRIBE .PREPARE_SUBSCRIBER_VIEW( - SUBSCRIPTION_HANDLE =&gt;:sh_sales, - SOURCE_SCHEMA=&gt;’SALES_OP’, - SOURCE_TABLE=&gt;’PRICE_LIST’, - VIEW_NAME =&gt; :sv_price_list); variable sv_sales_tran varchar2(30); EXECUTE -DBMS_LOGMNR_CDC_SUBSCRIBE .PREPARE_SUBSCRIBER_VIEW( - SUBSCRIPTION_HANDLE =&gt;:sh_sales, - SOURCE_SCHEMA=&gt;’SALES_OP’, - SOURCE_TABLE=&gt;’SALES_TRAN’, - VIEW_NAME =&gt; :sv_sales_tran); 你可以从这两个变量中得到视图名。视图名是系统产生的，一般包括一个CDC前缀和一个数字。例如： SQL&gt; select :sv_price_list from dual; :SV_PRICE_LISTCDC#CV$1430621 SQL&gt; select :sv_sales_tran from dual; :SV_SALES_TRANCDC#CV$1430623 8.访问变化表中的数据订阅者视图包含你所需要的变化数据。它还包含使用变化数据所需的其他一些附加信息： SQL&gt; desc CDC#CV$1430621 Name Null? Type OPERATION$ CHAR(2) CSCN$ NUMBER COMMIT_TIMESTAMP$ DATE TIMESTAMP$ DATE USERNAME$ VARCHAR2(30) PRICE_PER_UOM NUMBER(10,2) PRODUCT_ID VARCHAR2(20) UOM VARCHAR2(20) 例如，字段OPERATION$ 表示变化是INSERT、UPDATE还是DELETE。字段CSCN$、COMMIT_TIMESTAMP$、TIMESTAMP$和USERNAME$表示是谁在源表中做的改变以及是何时做的。其他字段是源表中订阅的字段。你可以使用SELECT语句查看订阅者视图中的数据，例如： SQL&gt; select * from CDC#CV$1430621; OP PRICE_PER_UOM PRODUCT_ID UOM I 2.99 P101 poundI 4.99 P102 pound 9.删除订阅者视图，清除CDC窗口当你了解并提取了变化数据并且不再需要在订阅者视图中显示变化数据时，你需要删除订阅者视图并清除CDC窗口，这样你才可以建立（扩展）新的窗口来查看新的变化数据。删除已有的订阅者视图，使用DBMS_LOGMNR_CDC_SUBSCRIBE.DROP_SUBSCRIBER_VIEW过程。在你可以清除旧的CDC窗口并建立新窗口之前，你需要逐个删除子订阅的每个订阅者视图。 EXECUTE -DBMS_LOGMNR_CDC_SUBSCRIBE .DROP_SUBSCRIBER_VIEW( - SUBSCRIPTION_HANDLE =&gt;:sh_sales, - SOURCE_SCHEMA=&gt;’SALES_OP’, - SOURCE_TABLE=&gt;’PRICE_LIST’); EXECUTE -DBMS_LOGMNR_CDC_SUBSCRIBE .DROP_SUBSCRIBER_VIEW( - SUBSCRIPTION_HANDLE =&gt;:sh_sales, - SOURCE_SCHEMA=&gt;’SALES_OP’, - SOURCE_TABLE=&gt;’SALES_TRAN’); 删除订阅者视图后，你就可以清除窗口。使用DBMS_LOGMNR_CDC_SUBSCRIBE. PURGE_WINDOW过程来清除窗口： EXECUTE -DBMS_LOGMNR_CDC_SUBSCRIBE.PURGE_WINDOW( - SUBSCRIPTION_HANDLE=&gt;:sh_sales); 10.重复第6到第9步以查看新数据要定期提取变化数据，你需要重复第6到第9步。如果你每日都要提取变化数据，你的每日（最好在晚上）数据提取工作将包括建立订阅窗口(EXTEND_WINDOW)、准备订阅者视图(PREPARE_SUBSCRIBER_VIEW)、从订阅者视图中访问数据、删除订阅者视图(DROP_SUBSCRIBER_VIEW)、清除窗口(PURGE_WINDOW)。 步骤总结第1步到第5步是配置步骤，对于一个给定的发布者/订阅者环境只需要设置一次。定期执行第6到第9步，以从源系统中提取越来越多的变化数据。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>CDC</tag>
        <tag>数据变化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[系统设计角色活动]]></title>
    <url>%2F2016%2F11%2F27%2F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%A7%92%E8%89%B2%E6%B4%BB%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[架构设计:架构师根据需求进行架构设计,对高风险的关键问题进行分析，并给出解决方案,并针对性能、可靠性、安全等常见的非功能需求（系统的质量属性）给出解决方案，架构设计文档中分别从概念、逻辑和物理三个层次描述架构的体系结构和行为过程。架构的质量是通过验证确认的，所以架构设计需要对没把握的部分实现为原型系统，并通过仿真运行、测试进行验证。 数据库设计：数据库设计员基于需求和逻辑架构设计逻辑数据模型，包括数据表（或文件）的分割以及数据表（或文件）之间的关系，然后基于物理架构把逻辑数据模型映射为物理数据模型，体现数据的分布以及共享数据结构和数据协议。同时建立数据标准以及数据的管控机制。 概要设计：基于系统架构和数据架构，对系统采用分解策略，自顶向下逐步分解，把系统划分为子系统，子系统进一步划分为模块，并定义各级子系统和模块的接口，包括接口的通行形式和数据协议。同时对每个子系统/模块给出关键内部设计。概要设计一般不需要验证，更多的是对系统细分、落地为可以开发的模块。 详细设计：对每个要开发的模块的内部结构和行为过程进行设计，映射到开发机制，一般开发人员能够清晰而高效的通过编程或者复用实现。 UI设计：因为产品的界面是用户确认需求和获得用户体验的关键，讲求的不单是可行，更是可用，所以由专业的UI设计员进行设计，并制作原型，由用户进行评价和确认。从用户交互落地到界面，是一个从设计到实现的过程，所以UI设计员可以进一步分解为负责交互设计的UE和负责界面本身的UI。 实现：由开发人员基于详细设计，实现每个模块的结构和行为过程。在实现的时候，通过不断的运行测试来确认是否满足设计和需求。 建议：在实际环境下，工作不可以省略，角色可以根据团队情况进行合并。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>系统设计</tag>
        <tag>分工</tag>
        <tag>活动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IT项目实施方法论的选择之道]]></title>
    <url>%2F2016%2F11%2F27%2FIT%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD%E6%96%B9%E6%B3%95%E8%AE%BA%E7%9A%84%E9%80%89%E6%8B%A9%E4%B9%8B%E9%81%93%2F</url>
    <content type="text"><![CDATA[古人云：“授人以鱼，不如授人以渔”。道理其实很简单，鱼是目的，钓鱼是手段，一条鱼能解一时之饥，却不能解长久之饥，如果想永远有鱼吃，那就要学会钓鱼的方法。信息化在华夏大地已经轰轰烈烈地开展了近30年，人们对信息化的理解也日益独到精准，ERP也好，CRM也罢，不论是KM还是SCM等等，信息化早己成为驱动企业加速成长不可或缺的方式，而信息化项目成功与否很大程度上缺乏的不是技术，而是执行人以及执行人所遵守的实施地图——实施方法论。正所谓“三分技术、七分管理、十二分实施（数据）”，而实施成功的重中之重又是实施方法论。 一、五种常见的实施方法论方法论是战略向导，是带领IT项目走向成功的向导图（Project Map）。信息化供应商是整个项目实施过程中的领航者，应该对整个项目的实施有着全面与前瞻性的认识，有足够的驾驭能力。用户不能期望连自己都不知道将要发生什么事情的公司与顾问能够带领项目成功前进，那样无异于盲人骑瞎马！软件供应商有无成熟的实施方法论是项目成功的关键。对一个项目应该如何实施、怎样分阶段、每阶段重点工作是什么、解决什么问题、会有什么情况、怎样应对、采用什么样的方法等，软件供应商一定要有明确的认识，当然，这并不是说实施顾问只要照本宣科就可以了，实施顾问根据具体情况解决实际问题的能力也很重要。目前，市场上常见的实施方法论主要有以下六种： 1、用友公司的ERP系统实施阶段示意图 2、金蝶个性化ERP——kingdee way实施方法示意图 3、SAP公司的ERP实施方法论ASAP是SAP公司为使R/3项目的实施更简单、更有效而建立的一套完整的快速实施方法论。ASAP优化了在实施过程中对时间、质量和资源的有效使用等方面的控制。主要包括ASAP路线图、SAP工具包、SAP技术支持和服务、SAP培训和SAP参考模型。 ASAP路线图提供了面向过程的，清晰和简明的项目计划，在实施R/3的整个过程中提供一步一步的指导。路线图共有五步,包括项目准备、业务蓝图、实现过程、最后准备、上线与技术支持。 4、甲骨文公司的ERP实施方法论Oracle Applications实施方法论是一套建立整体解决方案的方法，主要由AIM（应用系统实施方法论）和PJM（整体项目管理方法论）等各自独立的方法论组成。这些方法论可以提高工作效率及项目实施质量。顾问在项目实施过程中，将用Oracle Applications实施方法论及实施工具来帮助实施，并将此方法论技术作为技术转移的一部分。项目管理方法(PJM)的目标是提供一个主框架，使其能够对所有项目用一致的手段进行计划、评估、控制和跟踪。AIM即应用系统实施方法论。Oracle公司在全球经过多年的应用产品实施而提炼好的结构化实施方法，它能满足用户的各种需求，从定义用户的实施方法、策略到新的系统上线运行，AIM包含了所有不可缺少的实施步骤。因而尽可能地减少用户的实施风险，以保证快速、高质量地实施Oracle应用系统。 AIM共分为七个阶段，建立实施策略、业务流程分析、设计解决方案、建立应用系统、文档编码、系统切换和运行维护。 5、BaaN公司ERP实施方法论iBaaN的Target实施方法论提炼总结了世界范围内8000多个Baan公司ERP产品用户的实施经验。Target实施方法论是ERP领域唯一利用多层原型化的工具，它不仅着重于ERP软件系统的实施而且还致力于企业业务流程和组织的改进和完善。Target实施方法论主要包括以下几个方面：注重于结果，全员参与、风险共担， 面向目标，建立正式的里程碑和责任，文档清晰，公司模型原型化，使用专业化工具， 灵活而且简单和人员/系统/组织(PSO)项目。通过以上几个信息化项目实施方法论，我们可以看出，无论是国内企业管理软件领导厂商还是国外管理软件巨擘的实施方法论都无不在强调：人、系统、组织这三个核心因素。但仅仅有这三个词汇是不够的，我们还需要再深入的思考，到底我们自己需要什么样的实施方法论呢？ 二、实施方法论的衡量笔者认为，管理= 哲学+数学。学好哲学让我们世事洞明，清楚为人处世的原理，让我们的思考深度有力；掌握好数学，让我们能量化行业准则，为行为加一尺度，防止失之毫厘，谬以千里的惨剧发生。所以，一个质量较高的项目实施方法论应该处处包含管理的艺术（哲学的大度与数学的精确），在如今凡事皆项目的年代里，不懂得管理肯定是行不通的，团队建设、项目资源规划分析、项目组成员沟通协作……无一能脱离管理的范畴。一个质量较高的实施方法论应该包含以下内容，引用一句时下时髦的语言：人是主语。 一个方法论再先进再完整也需要人去执行，没有执行一切都要归零。或许因为六年来笔者一直从事IT咨询实施及IT规划的关系，一直喜欢用“PPT”这个词。此“PPT”非彼PPT也，它不是我们常用的幻灯片，而是实施方法论的核心内容：People、Process、Tools （人、流程、工具）。 People21世纪什么最贵？人才 ！我们需要的不是只能照本宣科式的顾问与实施工程师，我们需要懂管理、懂技术、懂流程、懂……患有”多懂症”复合型顾问人才，这样才能使我们的方法论得以保质保量贯彻实施下去。这样的人才在团队中可能是：行业咨询专家、资深管理顾问、项目实施顾问、IT技术顾问、专业的厂商/客户方项目团队等综合人的群体。 Process“不重视过程的企业肯定也不是真正的重视结果的企业”，我们大家更多的时候是更关注事情的结果，而常常忽略了过程，我们从字面理解来看，Process一词有：工序、流程、工艺流程、进程等意思，我们虽然要坚持以结果为导向，注重过程而保证结果的正确性。在此过程中需要规范项目管理、优化业务流程、规范项目中人员的沟通与监督机制，先同志后兄弟，让团队在一种”同志加兄弟”般的环境中进行，请切记一定是先同志后兄弟，决不能先兄弟后同志，因为同志讲规则讲纪律，纪律规范是我们保证项目顺利进行的有力武器。 Tools俗话说，三分手艺，七分工具，没有金刚钻，别揽瓷器活。民谚俗语道出工具的重要性，“工欲善其事，必先利其器”在企业信息化项目实施中，行之有效的工具将是我们保质保量的推进项目的有力保障，在我们实施方法论当中的Tools主要是指：IT咨询、IT规划、咨询实施的方法、业务流程优化模型、企业行业管理模型等知识库与行业经验库，以及高效的第三方工具。在衡量评价一个信息化项目实施方法论时，我们要始终把握这三条原则，只有坚持这三条原则，才能把看似不可能完成的任务，变得可行！并游刃有余。让我们一起努力来把IMPOSSIBLE变成 I’M POSSIBLE ！]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>方法</tag>
        <tag>实施</tag>
        <tag>信息化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网思维与企业信息化]]></title>
    <url>%2F2016%2F11%2F27%2F%E4%BA%92%E8%81%94%E7%BD%91%E6%80%9D%E7%BB%B4%E4%B8%8E%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%2F</url>
    <content type="text"><![CDATA[一、互联网思维简单互联网思维倡导简单、专注和极致。而我们在企业信息化建设时往往出现这样一些情形，上了很多看似高大上的系统和项目，投入了大量的资金和人力，但最终得到的是一堆没人用的功能，回头来看得到的回报率还不足20%，甚至彻底失败。相比互联网产品，企业管理软件在客户体验方面远远地落后了，而在信息化项目实施过程中，把简单的事情搞复杂，范围不断蔓延是最常见的问题。 快速天下武功唯快不破，快速迭代是互联网思维所倡导的。我们在企业信息化建设中，一个项目光立项就需要进行可行性研究、逐级评审、正式立项、公开招标等一系列繁琐的过程，短则3个月，长则半年，有些甚至可能长达1年之久。立项之后的实施过程则更具挑战，需求调研分析、系统设计、文档确认、文档修改、系统开发，完成系统测试，开发人员面对的可能是无休无止的变更和不断衍生的需求，甚至彻底推翻重来。互联网时代，时间是最大的成本，任何企业都会越来越深刻地体会到这点，企业如果不能快速应对环境的变化将很难生存，因此传统的信息化实施和系统开发方法将无法适应企业发展的需求，敏捷开发必定是趋势。 用户参与互联网将用户参与度提升到了前所未有的高度，用户从被动转变为主动，从使用者转变为设计者、制造者，用户的热情被极大地提升。再看企业信息化，传统的实施方式中用户的参与主要依赖文档，而抽象枯燥的文档很难激发用户的有效参与，理解上也会存在很大的差异。另外，“用户”的定义往往会被狭隘地定义为信息的“获取者”，因为信息获取是构建信息系统的目标，但信息“获取者”往往是管理者，是项目的发起人。而作为信息的“提供者”往往被忽视，因为他们通常是执行者，遵从管理者的要求录入信息。这样就出现太多的系统因为被这些信息“提供者”或公开或私下的抵触而导致失败。通过快速Demo，与用户一起面向真实系统，精准沟通需求，快速迭代；不仅让项目发起人（信息的“获取者”）参与开发过程，更要让关键用户（信息的“提供者”）参与进来，倾听和满足他们的需求，让甲方主导、让业务部门主导信息系统的开发！ 开放性互联网的开放性创造了更多的机遇，通过开放汇聚更多创新和力量。企业信息系统的开放性同样重要，一个封闭的系统必然会造成“信息孤岛”。除了系统的封闭性，IT部门思维保守封闭也会成为信息化的障碍。企业在经过一定的信息化建设后，各个部门的信息化需求被激发，但往往IT部门仍然按照ERP级的项目实施和管控方式进行管理，反而抑制和阻碍了企业创新和管理升级。只要确保系统的开放性，那么IT部门也要用开放的心态，允许其在公司总体框架之下，既独立又融合地去构建专业系统。 综上，我们提出“轻量化”和“自生长”的企业信息化理念。 二、如何“轻量化”“轻量化”就是简单、快速，当一个项目过于复杂时，我们需要仔细推敲，究竟哪些是核心问题？哪些是必须的？是否可以分步实施？哪些可以先排除，留待后续改进？ 聚焦核心问题以往很多信息化项目从需求调研开始就迷失方向，有些项目甚至一开始就没有明确的目标。精准定位项目亟待解决的核心问题，甄别目标系统的核心价值最重要，也最难。在项目实施过程中需要不断评估、排除无关需求的干扰。 少投入，多频次从项目可研开始，项目的每个环节都应面向真实系统展开，然后不断迭代推进。阶段性任务完成后，系统仍可以进入下一轮大迭代中。 “轻量化”可以大幅降低项目风险和成本投入，提高项目的实效性。传统模式由于面向文档沟通，费时费力且会埋下巨大风险，这些风险会在系统上线前集中爆发，项目往往就此面临大量返工，甚至最终失败。而且，很多系统因为不是基于SOA的架构，其灵活性较差，当项目上线后很难进入下一个持续改进的大迭代。参见图1，轻量化与传统模式对比： 三、怎样“自生长”“自生长”就是用户参与和系统开放、可延伸。公司应有预先规划，哪些系统由公司层面负责？哪些系统由部门层面负责？哪些工作由公司自行解决？哪些需要外部力量的支持？公司应当搭建一个灵活的基础平台，确立各系统的主导者，规划好各自的关系，这样更有利于激发创新和提升企业的应变能力。参见图2 系统自生长： zsz 用户主导随着近些年信息化的普及，企业的信息化意识和能力在逐步增强，信息系统也逐步成为企业核心竞争力的一部分。传统的乙方主导模式已逐渐不能适应时代发展的需要，因为让外部力量主导构建企业核心竞争力显然是不合适的。另外，除了最核心的ERP系统，即从订单到付款的主业务链，大部分的系统公司层面可以鼓励由关键部门主导，IT部门负责从全局层面支持和纠偏即可。任正非曾经说过：“让听的见炮声的人来决策”，信息化建设也一样，让真正使用系统的人来主导。随着科技的发展，技术将不再是用户自己参与系统建设的障碍。例如Joget workflow就可以允许非专业IT人员通过拖拽和配置的方式自己搭建系统，关键用户可以自己搭建80%以上的功能，如果遇到少量较专业的技术问题，则由IT部门或外部技术支持。 开放、可延伸有人会担心，如果让大家各自主导自己的系统，会不会产生很多“信息孤岛”？其实只要保证到每个系统的开放性并合理规划相互之间的数据关系，那么这个问题即迎刃而解。另外，还要关注这些系统的延伸性，任何系统都可能随着企业的发展而变化，需要不断的改进。所以，在软件/工具初期选型阶段，评估系统开发成本时必须要考虑到系统的开放性和二次开发的成本投入，否则“信息孤岛”问题将无法避免。 四、未来趋势企业信息化未来方向将趋向于平台化的快速定制开发，基于敏捷开发平台，快速搭建适合自己的管理应用，企业也可以选用该平台的应用模版来节省定制开发时间，从而节约成本。大家可以关注Joget workflow这款产品，它是目前市场上少见的简单而强大的无代码快速开发平台，是一款理想的“轻量化”实施工具和可伴随企业“自生长”的基础平台。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>信息化</tag>
        <tag>互联网思维</tag>
        <tag>趋势</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[李荣融谈管理]]></title>
    <url>%2F2016%2F11%2F27%2F%E6%9D%8E%E8%8D%A3%E8%9E%8D%E8%B0%88%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[1、管理是超级生产力物质要素：人、工具、劳动对象非物质要素：技术（第一生产力）+管理 2、管理的目的提高资源的配置效率 3、管理的手段学会选工具！&nbsp; 毛主席的 《实践论》《矛盾论》鱼刺图—原因分析直方图—主要矛盾 4、管理的重点管理：违规、例外花更多时间在梳理（理清楚、理顺、出规章、出制度、出方法、出理论、工作主要的管理职责）重要决策要亲自调研（例如重大的方案），不能光听汇报。 5、管理落地制度+机制（执行）基础工作：标准-&gt;计量-&gt;定额-&gt;责任制-&gt;培训 6、时间管理时间管理：管的时间少，理的时间长。 7、原文摘录就在这个山上他还提出来说，星星之火可以燎原，还要解放全中国，毛主席讲那个话的背后有他的东西：第一，三大纪律、八项注意，这就像我们企业一样，要有规章制度，规章制度是形成合力的；第二，支部建在连队上，这是机制了。上面的是制度、这个是机制。就要叫我的下边睡不着，下边睡着了我就睡不着所以我四项指标考核中，管理我只考核你这个企业的短板，每个企业的短板不一样，只要你短板提高一点我就很满意。有的企业搞得很好看，全面提高，说良心话就是全面失败，不可能的。]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
        <tag>鱼刺图</tag>
        <tag>直方图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工程成本与财务成本的区别]]></title>
    <url>%2F2016%2F11%2F26%2F%E5%B7%A5%E7%A8%8B%E6%88%90%E6%9C%AC%E4%B8%8E%E8%B4%A2%E5%8A%A1%E6%88%90%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[工程成本与财务核算成本的差异： 1.工程成本不含土地成本 2.财务核算成本要对不可售部分进行二次分摊 3.工程成本的会所等进建安，而财务核算进入公建下的建安 4.工程成本不考虑产品的成本，财务核算要拆分到产品]]></content>
      <categories>
        <category>地产相关</category>
      </categories>
      <tags>
        <tag>成本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分类和标签]]></title>
    <url>%2F2016%2F11%2F26%2F%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[大多数的blog站点都支持按照分类和标签对文章进行组织。这也是信息管理的两种有效手段。二者的对比如下： 分类是最经典的方法，事先进行严格的类别划分，构建分类树，然后每个项目(Item)从属于分类树上的唯一节点。 由于类别的划分比较严格，通常会在一开始就规划好。如果想要更改分类树，就要付出比较大的代价。 标签(tag)是比较新兴的一种信息管理方式。与分类最大的不同是每个项目(Item)可以有多个标签。标签之间没有关系，但是通过内容可以使不同的标签之间产生关联。 如果某个项目（Item)具有多个标签，那么这多个标签之间就产生了某种相关性。相关性可以表达任何一种关系，可以用相关性表示出一颗分类树，也可以表示出一张图（Graph）。 增加标签的代价非常小，完全可以在产生项目（Item）之后再按需增加标签，并通过关联使新的标签与原来的标签之间产生相关性关系。 由于标签更加灵活强大，变更的代价又很小，在很多同时支持分类和标签的系统或软件工具中都在逐步淡化分类的作用。比如，gmail中的分类功能就是用标签实现的；evernote中的笔记本只支持两级划分（笔记本组和笔记本）；博客园的博客系统只支持一级分类。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库设计原则]]></title>
    <url>%2F2016%2F11%2F26%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%2F</url>
    <content type="text"><![CDATA[我所遵守的11条数据库设计准则 一、设计原则资料一1、数据库设计范式第一范式(1NF)：属性具有原子性，不可再分解，即不能表中有表；（字段是最小的的单元不可再分 ）第二范式(2NF)：唯一性约束，每条记录有唯一标示，所有的非主键字段均需依赖于主键字段；第三范式(3NF)：冗余性约束，非主键字段间不能相互依赖；第四范式(4NF)：消除表中的多值依赖 2、完整性not null声明禁止插入空值；check子句限制属性域； 3、去冗余避免冗余属性，冗余属性会带来数据不一致性；学生选课系统中，老师可以开课、学生可以选课，数据库设计中，课程可以由课程编号和课程名称等确定；如果现在维护两个表，一个表A存储课程信息（课程编号、名称、简介、学分、院系等），另一个表B存储开课信息（有哪些课程开课），如果B中重复存储了A的课程名称、简介、学分、院系等信息，一旦A中的信息更新，B中和A中信息便出现不一致；正确的做法是，B中只存储课程编号，并以此和A相关联； 节省空间和增加查询效率之间,有时候是存在矛盾的，很多时候都需要进行取舍。其实这样的时候可以适当的反范式设计表.按照实际的需要适当增加一些重复的字段到一张表上是有好处的。但同时也有些问题,如果需求变了那就可能悲剧.，好的情况是这个冗余字段没用了，坏情况就是可能要修改表字段。如果这时表已经积累非常多的数据,那就异常痛苦.数据库是要注重效率,但绝对没想象中那么脆弱，一般慢的原因都是本身配置不合理，程序逻辑不合理，或者索引加的不合理引起的，真正什么高并发或者大量数据的情况真的很难遇到，你放心用就行了。一个设计良好的数据库，即使连接很多张表，查询效率也几乎不会下降。只不过开发起来有些麻烦，要不停的去联表或填充数据。如果不遵守第三范式，当数据经常更新的时候，就会很麻烦，要改很多地方。而不经常修改的表，比如报表和日志记录，字段很多，生成一次一般就不会再修改了，那么可以做数据冗余，满足第二范式即可。 4、解耦合一个表只存储它应该存储的信息，和此表无关的信息放到另一个表去存储，表之间尽量解耦；上面的例子中，A中存储且只存储面向课程的信息，另外有表C，存储且只存储面向学生的信息（学号、姓名、性别、年龄、选课id等），对于“课程级别”的信息，应当坚决的存储在A而不是C中，而且尽量避免将A、C合并成一个表（可能刚开始是设计成一个表），而且A、C间尽量解耦；字段不可再分：一个字段中不要出现分隔符，或者在一个字段中存储多个信息;例如，first name和last name不要放在同一个字段中，稳定版本号和临时版本号不要放在同一个字段中； 5、考虑性能上述原则可能造成多表连接查询的情况出现，降低性能；如果性能成为主要矛盾，则上述原则也不绝对； 6、数据库命名原则 数据库的命名会直接影响到上层应用的名称，所以要和业务部门仔细讨论、慎重确定； 每个属性名在数据库中只有唯一的含义，number这个属性名可能表示电话号码或是房间号，这是一种容易引起歧义的命名； 数据库的名词要一致，不能在这个地方叫一个名字，到另外一个表又叫另外一个名字； 一般来说，Table命名用单数，Column命名用单数； Table不用Prefix前缀来表示不同的组，而用schema来划分命名空间（postgresql中）； 命名用snake_case，不要有其他特殊字符； 名称中不要有sql关键字； 如果确实需要使用sql关键字，可用双引号包围，比如CREATE TABLE “order”(…)； 主键的名字永远都是同一的，就是id，外键名称才需要加table的名字，诸如xxx_id、yyy_id； 命名不要用缩写，比如date缩写成dt； 用 create_date/update_date/sample_date这些含义更明确的名称代替date这个命名，这样不仅表达更准确，而且避免了用关键字的麻烦； timestamp类型的字段要有timezone（时区），字段名用xxx_date的形式，仅表示年月日用xxx_day，仅表示时分秒用xxx_time； 表示数量、次数等概念的字段名称最好写为xxx_count，不要写为xxx_number/xxx_num/xxx_no等； boolean类型的命名要用is_xxx格式； 7、数据库设计其他注意事项 每个表都要有主键，名称是id，类型为bigint； 主键的类型是设为integer还是long，取决于这个系统用多长时间，如果要用100年，主键还是设置为long类型较好，这样用的很久以后id也不会超出范围； 一个字段不要有多个用途，空间不是问题，清晰才是重点； 不要过早优化，先把东西做出来再说，遇到性能问题再去优化； 对于varchar类型的字段，当字符串并不是非常明确到底限制是多少的时候，通常选择255这个长度，varchar(50)并不比varchar(255)节省空间，varchar(50)仅仅是表示最多分配50个字符而已； varchar(100)类型在PostgreSQL中代表100个字符，而在Oracle中代表100字节，具体的占用空间数目和语言、编码方式有关； 对外键要加Index； 数据库里面的密码一定要加密，不能保存明文； 用is_deleted=true来表示本条记录的业务上的删除，不要在数据库中真正删除记录，或者仅仅是版本化修改，这样能防止数据丢失； 8、数据库性能提升方案 使用索引会大大提升查询效率，同时降低在被索引的表上INSERT和DELETE效率； 分离频繁和不频繁使用的数据到多个表中；例如，原先，一个表中保存用户名、密码、年龄、个人简介、学校等信息，但是发现访问用户名、密码、年龄的频率远高于其他字段，此时就应当将这个表分为两个表，分别存储频繁访问项和非频繁访问项； 9、数据库安全策略 至少保存3个月的系统访问日志； 数据库中的表可以有创建和更新时间戳，及所创建/修改行的用户标示； 不删除字段，而是打上一个被删除的标记； 版本化修改； 10、大型数据库设计 负载均衡； 读写分离； 分布式存储； 参考这篇文章； 二、设计原则资料二1. 原始单据与实体之间的关系 可以是一对一、一对多、多对多的关系。在一般情况下，它们是一对一的关系：即一张原始单据对应且只对应一个实体。在特殊情况下，它们可能是一对多或多对一的关系，即一张原始单证对应多个实体，或多张原始单证对应一个实体。这里的实体可以理解为基本表。明确这种对应关系后，对我们设计录入界面大有好处。 〖例1〗：一份员工履历资料，在人力资源信息系统中，就对应三个基本表：员工基本情况表、社会关系表、工作简历表。这就是“一张原始单证对应多个实体”的典型例子。 2. 主键与外键 一般而言，一个实体不能既无主键又无外键。在E—R 图中, 处于叶子部位的实体, 可以定义主键，也可以不定义主键 (因为它无子孙), 但必须要有外键(因为它有父亲)。 主键与外键的设计，在全局数据库的设计中，占有重要地位。当全局数据库的设计完成以后，有个美国数据库设计专 家说：“键，到处都是键，除了键之外，什么也没有”，这就是他的数据库设计经验之谈，也反映了他对信息系统核 心(数据模型)的高度抽象思想。因为：主键是实体的高度抽象，主键与外键的配对，表示实体之间的连接。 3. 基本表的性质 基本表与中间表、临时表不同，因为它具有如下四个特性： (1) 原子性。基本表中的字段是不可再分解的。 (2) 原始性。基本表中的记录是原始数据（基础数据）的记录。 (3) 演绎性。由基本表与代码表中的数据，可以派生出所有的输出数据。 (4) 稳定性。基本表的结构是相对稳定的，表中的记录是要长期保存的。 理解基本表的性质后，在设计数据库时，就能将基本表与中间表、临时表区分开来。 4. 范式标准 基本表及其字段之间的关系, 应尽量满足第三范式。但是，满足第三范式的数据库设计，往往不是最好的设计。为了提高数据库的运行效率，常常需要降低范式标准：适当增加冗余，达到以空间换时间的目的。 〖例2〗：有一张存放商品的基本表，如表1所示。“金额”这个字段的存在，表明该表的设计不满足第三范式， 因为“金额”可以由“单价”乘以“数量”得到，说明“金额”是冗余字段。但是，增加“金额”这个冗余字段， 可以提高查询统计的速度，这就是以空间换时间的作法。 在Rose 2002中，规定列有两种类型：数据列和计算列。“金额”这样的列被称为“计算列”，而“单价”和 “数量”这样的列被称为“数据列”。 表1 商品表的表结构 商品名称 商品型号 单价 数量 金额 电视机 29吋 2,500 40 100,000 5. 通俗地理解三个范式 通俗地理解三个范式，对于数据库设计大有好处。在数据库设计中，为了更好地应用三个范式，就必须通俗地理解 三个范式(通俗地理解是够用的理解，并不是最科学最准确的理解)： 第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解； 第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性； 第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。 没有冗余的数据库设计可以做到。但是，没有冗余的数据库未必是最好的数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是：在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理 数据模型设计时考虑。降低范式就是增加字段，允许冗余。 6. 要善于识别与正确处理多对多的关系 若两个实体之间存在多对多的关系，则应消除这种关系。消除的办法是，在两者之间增加第三个实体。这样，原来一 个多对多的关系，现在变为两个一对多的关系。要将原来两个实体的属性合理地分配到三个实体中去。这里的第三个 实体，实质上是一个较复杂的关系，它对应一张基本表。一般来讲，数据库设计工具不能识别多对多的关系，但能处理多对多的关系。 〖例3〗：在“图书馆信息系统”中，“图书”是一个实体，“读者”也是一个实体。这两个实体之间的关系，是一 个典型的多对多关系：一本图书在不同时间可以被多个读者借阅，一个读者又可以借多本图书。为此，要在二者之 间增加第三个实体，该实体取名为“借还书”，它的属性为：借还时间、借还标志(0表示借书，1表示还书)，另外， 它还应该有两个外键(“图书”的主键，“读者”的主键)，使它能与“图书”和“读者”连接。 7. 主键PK的取值方法 PK是供程序员使用的表间连接工具，可以是一无物理意义的数字串, 由程序自动加1来实现。也可以是有物理意义的字段名或字段名的组合。不过前者比后者好。当PK是字段名的组合时，建议字段的个数不要太多，多了不但索引占用空间大，而且速度也慢。 8. 正确认识数据冗余 主键与外键在多表中的重复出现, 不属于数据冗余，这个概念必须清楚，事实上有许多人还不清楚。非键字段的重复出现, 才是数据冗余！而且是一种低级冗余，即重复性的冗余。高级冗余不是字段的重复出现，而是字段的派生出现。 〖例4〗：商品中的“单价、数量、金额”三个字段，“金额”就是由“单价”乘以“数量”派生出来的，它就是冗余， 而且是一种高级冗余。冗余的目的是为了提高处理速度。只有低级冗余才会增加数据的不一致性，因为同一数据，可能从不同时间、地点、角色上多次录入。因此，我们提倡高级冗余(派生性冗余)，反对低级冗余(重复性冗余)。 9. E—R图没有标准答案 信息系统的E—R图没有标准答案，因为它的设计与画法不是惟一的，只要它覆盖了系统需求的业务范围和功能内容，就是可行的。反之要修改E—R图。尽管它没有惟一的标准答案，并不意味着可以随意设计。好的E—R图的标准是：结构清晰、关联简洁、实体个数适中、属性分配合理、没有低级冗余。 10 . 视图技术在数据库设计中很有用 与基本表、代码表、中间表不同，视图是一种虚表，它依赖数据源的实表而存在。视图是供程序员使用数据库的 一个窗口，是基表数据综合的一种形式, 是数据处理的一种方法，是用户数据保密的一种手段。为了进行复杂处理、提高运算速度和节省存储空间, 视图的定义深度一般不得超过三层。 若三层视图仍不够用, 则应在视图上定义临时表, 在临时表上再定义视图。这样反复交迭定义, 视图的深度就不受限制了。 对于某些与国家政治、经济、技术、军事和安全利益有关的信息系统，视图的作用更加重要。这些系统的基本表完 成物理设计之后，立即在基本表上建立第一层视图，这层视图的个数和结构，与基本表的个数和结构是完全相同。并且规定，所有的程序员，一律只准在视图上操作。只有数据库管理员，带着多个人员共同掌握的“安全钥匙”， 才能直接在基本表上操作。请读者想想：这是为什么？ 11. 中间表、报表和临时表 中间表是存放统计数据的表，它是为数据仓库、输出报表或查询结果而设计的，有时它没有主键与外键(数据仓 库除外)。临时表是程序员个人设计的，存放临时记录，为个人所用。基表和中间表由DBA维护，临时表由程序员自己用程序自动维护。 12. 完整性约束表现在三个方面 域的完整性：用Check来实现约束，在数据库设计工具中，对字段的取值范围进行定义时，有一个Check按钮，通过它定义字段的值城。 参照完整性：用PK、FK、表级触发器来实现。 用户定义完整性：它是一些业务规则，用存储过程和触发器来实现。 13. 防止数据库设计打补丁的方法是“三少原则” (1) 一个数据库中表的个数越少越好。只有表的个数少了，才能说明系统的E—R图少而精，去掉了重复的多余的实体，形成了对客观世界的高度抽象，进行了系统的数据集成，防止了打补丁式的设计； (2) 一个表中组合主键的字段个数越少越好。因为主键的作用，一是建主键索引，二是做为子表的外键，所以组合主键的字段个数少了，不仅节省了运行时间，而且节省了索引存储空间； (3) 一个表中的字段个数越少越好。只有字段的个数少了，才能说明在系统中不存在数据重复，且很少有数据冗余，更重要的是督促读者学会“列变行”，这样就防止了将子表中的字段拉入到主表中去，在主表中留下许多空余的字段。所谓“列变行”，就是将主表中的一部分内容拉出去，另外单独建一个子表。这个方法很简单，有的人就是不习惯、不采纳、不执行。 数据库设计的实用原则是：在数据冗余和处理速度之间找到合适的平衡点。“三少”是一个整体概念，综合观点，不能孤立某一个原则。该原则是相对的，不是绝对的。“三多”原则肯定是错误的。试想：若覆盖系统同样的功能，一百个实体(共一千个属性) 的E—R图，肯定比二百个实体(共二千个属性) 的E—R图，要好得多。 提倡“三少”原则，是叫读者学会利用数据库设计技术进行系统的数据集成。数据集成的步骤是将文件系统集成为应用数据库，将应用数据库集成为主题数据库，将主题数据库集成为全局综合数据库。集成的程度越高，数据共享性就越强，信息孤岛现象就越少，整个企业信息系统的全局E—R图中实体的个数、主键的个数、属性的个数就会越少。 提倡“三少”原则的目的，是防止读者利用打补丁技术，不断地对数据库进行增删改，使企业数据库变成了随意 设计数据库表的“垃圾堆”，或数据库表的“大杂院”，最后造成数据库中的基本表、代码表、中间表、临时表 杂乱无章，不计其数，导致企事业单位的信息系统无法维护而瘫痪。 “三多”原则任何人都可以做到，该原则是“打补丁方法”设计数据库的歪理学说。“三少”原则是少而精的 原则，它要求有较高的数据库设计技巧与艺术，不是任何人都能做到的，因为该原则是杜绝用“打补丁方法”设计数据库的理论依据。 14. 提高数据库运行效率的办法 在给定的系统硬件和系统软件条件下，提高数据库系统的运行效率的办法是： (1) 在数据库物理设计时，降低范式，增加冗余, 少用触发器, 多用存储过程。 (2) 当计算非常复杂、而且记录条数非常巨大时(例如一千万条)，复杂计算要先在数据库外面，以文件系统方式用C++语言计算处理完成之后，最后才入库追加到表中去。这是电信计费系统设计的经验。 (3) 发现某个表的记录太多，例如超过一千万条，则要对该表进行水平分割。水平分割的做法是，以该表主键PK的某个值为界线，将该表的记录水平分割为两个表。若发现某个表的字段太多，例如超过八十个，则垂直分割该表，将原来的一个表分解为两个表。 (4) 对数据库管理系统DBMS进行系统优化，即优化各种系统参数，如缓冲区个数。 (5) 在使用面向数据的SQL语言进行程序设计时，尽量采取优化算法。总之，要提高数据库的运行效率，必须从数据库系统级优化、数据库设计级优化、程序实现级优化，这三个层次上同时下功夫。 上述十四个技巧，是许多人在大量的数据库分析与设计实践中，逐步总结出来的。对于这些经验的运用，读者不能生帮硬套，死记硬背，而要消化理解，实事求是，灵活掌握。并逐步做到：在应用中发展，在发展中应用。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>设计</tag>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SOA、EAI异同]]></title>
    <url>%2F2016%2F11%2F26%2FESB%E3%80%81SOA%E3%80%81EAI%E5%BC%82%E5%90%8C%2F</url>
    <content type="text"><![CDATA[1、 总体介绍随着互联网、电子商务的风起云涌，外部世界的快捷变化要求企业能够快速反应，而要做出快速反应，离不开企业内部信息流的畅通无阻。在企业的信息化过程中，针对不同部门不同的应用需求，开发出了各种各样的应用软件。这些软件基本满足了企业的应用需要，但从企业整体角度出发，要达到内部信息流的畅通无阻，就必须对不同的应用软件进行集成才能实现。本文将对现有最为常见的两种企业集成方案：EAI(Enterprise Application Integration，企业应用整合)与SOA(service-oriented architecture，面向服务的体系结构)进行探讨与比较。 2、 EAI(Enterprise Application Integration，企业应用整合)EAI是将基于异构平台下的业务应用系统集成在一起的一种技术。EAI通过中间件作为粘合剂来连接企业内外各种业务相关的异构系统、应用以及数据源，从而满足企业内部应用系统之间信息共享的需要。 EAI可从以下的几个层面来实施：● 用户界面集成：这个层面是一个面向用户的整合，强调的是要将来自多个信息源的信息以一种可以定制的、个性化的界面展现给用户。● 应用集成：应用集成是以应用系统为基本集成单位，通过中间件，为两个应用系统提供业务集成。● 数据集成：数据集成是应用集成的基础。在实施集成之前，必须首先对数据进行标识并编成目录，另外还要确定元数据模型。这三步完成以后，数据才可以在多个数据库系统之间进行分布和共享。EAI的结构一般可以分为以下两种形式： 1). Hub/spoke （集线器架构）Hub/Spoke架构是星型拓扑结构，由处于系统中央的一个Hub和连接在Hub及应用系统的多个适配器(adapter)组成。适配器在Hub和应用系统之间，进行数据格式的转换与传输。适配器将应用系统的数据信息转化为Hub可以识别的格式并传递给Hub, Hub通过消息代理管理消息路由，并将这些来自应用系统的数据消息按其要求的路由规则传递给目标应用系统的适配器。这种架构中的Hub使得系统易于管理，但是不易扩展。在需求突增时，只能通过硬件的升级才能增加系统容量。然而，这种升级方式的改进是有限的，不足以应付越来越多的整合需求，因此出现了联邦Hub/spoke架构的概念，在这种架构下，出现了多个Hub，每一个Hub拥有本地元数据，并且同全局元数据进行同步。对于全局规则和元数据的改变将自动传播到其他的Hub上。 2). BUS（总线架构）EAI的总线架构可以看作是Hub/Spoke星型架构的一种变形。将星型中心点Hub的传输消息的功能提炼成一条消息传递总线，而将适配器、集成引擎绑在了应用系统所在的平台。应用程序使用适配器转换消息格式，并将消息发送到总线上。这些消息通过消息总线流动到预订的应用系统的适配器中。该适配器再将消息翻译成符合其应用系统要求的格式。由于将适配器和集成引擎捆绑在了应用程序的平台上，bus架构在获得比hub/spoke布局更好的扩展性的同时提升了集成的复杂性。但两种架构本质上都是应用系统之间点到点的整合模式。 3、 SOA(service-oriented architecture，面向服务的体系结构)SOA(面向服务的体系结构)将企业中各个系统应用程序的不同功能单元抽象为服务，通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务能够通过统一和通用的方式进行交互。SOA架构由服务总线、服务目录、门户、流程管理等几个核心组件构成的。这些核心组件协同工作共同支撑服务的部署、运行与管理监控。 l) 服务总线SOA集成平台通过企业服务总线(ESB)完成业务应用系统和其他系统的功能调用的统一接入，业务应用系统和公共功能作为标准服务在总线上公开，隔离服务消费者和服务提供者的技术实现细节，实现松耦合。 2)服务目录服务目录主要用于保存运行时进行服务调用所需的必要信息，它要求能实现快速的服务寻址。服务目录保存的信息包括：服务的路由信息、服务的访问权限、服务的优先级、服务的版本信息等。 3)流程管理业务流程通过流程设计工具，对服务进行编排，实现企业业务流程，生成可执行的业务流程服务，在业务流程引擎中部署执行。业务流程管理同时提供业务的管理和监控工具，进行业务流程的监控管理。 4)门户门户作为SOA架构中展示层。门户可以对服务、流程、应用模块等进行组合，形成复合应用。门户同时也是展示服务（Portlets）的运行环境。门户对服务的使用和流程（以流程服务的形式）的集成也通过服务总线进行。 4、 EAI与SOA的比较我们从以下的几个方面对EAI与SOA进行比较： 1). 集成的本质&nbsp;EAI的集成方式从本质而言是基于消息的集成，因此EAI的各组成部件，如适配器与hub，都带有消息转换与消息路由的功能，在EAI的运作过程中，单个应用系统只关心其与EAI连接部分消息的输入与输出，不关心具体的业务处理，业务处理都是在应用系统内部完成的。&nbsp;SOA的集成方式，其本质是对业务功能服务化后根据业务流程进行编排，是真正意义上的基于功能服务的集成。当然在基于SOA的集成中同样包含了基于消息集成的功能。因此基于SOA的集成方式比EAI的集成方式适用范围更广。 2). 集成对象的颗粒度SOA和EAI从不同的视角切入去看待企业已有的信息资源，并基于此对企业已有的资源进行梳理、分类和集成。&nbsp;EAI从应用系统的层面去看待企业已有信息资源，企业的每一个应用系统被看作一个集成单元，EAI工作的目标就是，通过为这些已有的应用系统提供一种中间沟通方式，让这些应用软件之间可以进行数据的共享与交换，从而盘活这一个个独立的“信息孤岛”。&nbsp;SOA从提供服务、使用服务的角度去看待企业已有的信息资源。在这种方式下，同样的一种资源既可能是服务提供者，也同样可以是服务使用者； 在这种方式下，一个应用模块可能只提供一种服务，因此被封装成一个服务，也可能由于提供了多种服务，而需要进一步划分。显然，SOA方式集成处理的颗粒度比EAI要小，因此SOA方式比EAI方式更具有灵活性。 3). 标准化SOA在实现企业信息化集成的同时，也将实现企业级服务的高度可重用作为目标，因此，在SOA架构中任何一种接口、通讯、协议都是遵循相应的国际标准，如：标准描述语言（WSDL）、发现协议（UDDI)和消息协议(SOAP)等。EAI则大多使用基于具体实施EAI企业中制定的私有标准。基于私有标准的优点是可以在一定程度上减轻EAI中间层对应用系统消息翻译转换的压力，在应用系统较少的情况下可以提高EAI的整体性能，但私有标准同时也对企业整合的灵活可扩展性上带来损失，当企业引入新的应用系统，或当某个应用系统需要做比较大的改动时，整个EAI总线的适应性将变得十分脆弱。在系统较少的情况下或是系统集成的早期阶段，采用私有标准的EAI会体现出性能高，实现难度低等优点，但在企业规模不断增长的过程中，新引入系统的整合难度将因为标准的不统一而呈指数级上升。 4). 灵活可扩展性由于对标准的良好支持，使得SOA具有可灵活扩展的特性，而EAI要达到同样的扩展效果，其代价将远远高于SOA。例如，现在有甲、乙两个系统需要集成。假设它们通过SOA完成集成形成A方案，使用EAI完成集成形成B方案。当集成需求发生变化后，甲乙两个系统需要以另外一种业务逻辑进行集成。对于A方案而言，所需要做的工作比较简单，只需将之前的业务逻辑打开，重新组合一下业务逻辑就可以实现。而对于B方案而言，过程就会麻烦的多，需要根据新的业务逻辑，重新设计开发满足新业务逻辑需要的适配器和中间层的消息处理逻辑。 5). 重用性企业信息化建设的投资可以分为两个部分：现有应用系统的维护与新系统的开发费用。在SOA架构下，各个服务是以完全独立的方式通过服务目录暴露在SOA集成平台上的，当新集成进来的应用系统需要使用现有的某个服务时，可以直接使用，无需再次开发，即服务是可重用的，只需用开发目前还没有的业务功能服务，这样可以充分利用现有的资源，降低成本。通过EAI方式实现企业应用集成，其开发的适配器、中间层消息转换规则和消息路由都是紧耦合的，当新系统要在EAI中进行集成，便需要对现有的部分适配器、中间层消息转换规则与消息路由进行改造，无法重用。因此，使用SOA比使用EAI更经济，尤其在多个应用系统相互集成的复杂场景下，SOA的优点将更加突出。 6). SOA企业服务总线与EAI总线的比较&nbsp;ESB(Enterprise Service Bus企业服务总线）是一种用于推动SOA的基础设施，从技术上而言，企业服务总线是一种消息传递的主干线，它用于提供协议转换，消息格式的转换，地址路由，接收并分发从各个连接到ESB的服务请求与系统传递来的消息。 在EAI的总线架构中，EAI为消息传播提供了一个中央消息主干线—-Bus。应用程序使用适配器将消息发布到总线，消息通过总线流动到预订的应用程序中。总线是消息流动的通道，捆绑在应用软件端的适配器负责将消息在应用程序端的格式与符合总线标准的格式之间转换。因此，对于每一个应用程序，都需要单独为其开发符合应用程序自身要求的适配器，而由于没有遵循统一的标准，这些适配器是无法通用的。当某个应用系统进行比较大的改动时，则有可能存在对适配器的改造已经不能满足系统变更需求的情况，此时甚至有可能会牵涉到对BUS总线的修改，给企业信息架构带来很大的风险。&nbsp;从ESB和EAI的总线工作过程上的区别可以看出ESB承担了更多的责任，做了更多的事情，为集成后的系统提供了完善、坚固的底层支持。而EAI的总线，只是一个消息的分发器。功能上的差别导致了系统集成到总线上的代价的巨大差异。 7). 系统集成的代价SOA架构中的企业服务总线与EAI中私有形式BUS尽管结构较为相似，但是在系统集成中却导致集成的成本代价却有很大的差别。这种在代价上的差异主要由两个方面的因素造成的，一是私有形式的总线提供很多产品套件式的内建函数功能，这些函数功能需要根据业务需求进行开发；二是很多的私有形式的总线采用专有的消息格式来提高性能，但却增加了系统开发代价。企业服务总线都是基于标准的。企业服务总线主要的优点就是相比集线器架构和基于产品套件的总线架构的支出要低，而且它是完全基于业界标准化。另一个关键的不同是：ESB具有分散的和分布式体系结构，更加轻型的安装，而EAI遵从HUB-SPOKE体系结构，因而企业中进行多个大型应用系统之间的集成时，硬件成本高，扩展性也会相对比较薄弱。. 5、 总结到目前为止，传统的编程技术所形成的软件系统都是刚性的。也就是说，一旦开发完成并投入运行，就是固定不变的，不能在使用过程中进行调整和改变。在业务流程中，软件系统严格按照预先设定的目标，各功能模块按照确定的顺序执行。如果数据结构或者业务逻辑发生改变，就必须对所有相关的软件模块、数据源和消息逐个进行修改。就算是有了EAI中间件，这种情况也并没有得到根本性的改变。今天，SOA改变了这种现状。SOA采用服务请求(Service Request)的方式，使软件系统向“柔性化”迈进了一大步。与传统的软件系统不同，SOA只限定服务所需的信息并提出服务请求，但是不限定提供服务的模块。SOA架构替代EAI实现企业应用集成是必然的趋势，只有通过SOA架构来进行企业应用集成，才能使企业信息化快速、稳定发展。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>互联互通</tag>
        <tag>SOA</tag>
        <tag>EAI</tag>
        <tag>ESB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[司马迁《报任安书》节选]]></title>
    <url>%2F2016%2F11%2F23%2F%E5%8F%B8%E9%A9%AC%E8%BF%81%E3%80%8A%E6%8A%A5%E4%BB%BB%E5%AE%89%E4%B9%A6%E3%80%8B%E8%8A%82%E9%80%89%2F</url>
    <content type="text"><![CDATA[《史记》著者司马迁在《史记》书成后，向其友任安解释他甘受宫刑之奇耻大辱以求偷生于世的缘由的一封信，信中详述自己偷生只是为了完成《史记》大作。可惜这封信任安没能看到。在写下这封信以后，我们历史上最伟大的史家司马迁便消失在了历史中，以至于我们现在尚不清楚他是怎么死的。 文段落如下 “古者富贵而名摩灭，不可胜记，唯俶傥非常之人称焉。盖西伯拘而演《周易》；仲尼戹而作《春秋》；屈原放逐，乃赋《离骚》；左丘失明，厥有《国语》；孙子膑脚，《兵法》修列；不韦迁蜀，世传《吕览》；韩非囚秦，《说难》、《孤愤》。《诗》三百篇，大氐贤圣发愤之所为作也。此人皆意有所郁结，不得通其道，故述往事，思来者。及如左丘明无目，孙子断足，终不可用，退论书策以舒其愤，思垂空文以自见。仆窃不逊，近自讬于无能之辞，网罗天下放失旧闻，考之行事，稽其成败兴坏之理，上计轩辕，下至于兹。为十表，本纪十二，书八章，世家三十，列传七十，凡百三十篇，亦欲以究天人之际，通古今之变，成一家之言。草创未就，适会此祸，惜其不成，是以就极刑而无愠色。仆诚已著此书，藏之名山，传之其人通邑大都，则仆偿前辱之责，虽万被戮，岂有悔哉！然此可为智者道，难为俗人言也。” 另当别记的是，“人固有一死，死有重于泰山，或轻于鸿毛”，“士为知己用，女为说己容”等众人皆知之语，皆出于此篇《报任安书》。 译文古时候虽富贵但名字磨灭不传的人，多得数不清，只有那些卓异而不平常的人才在世上著称。（那就是：）西伯姬昌被拘禁而扩写《周易》；孔子受困窘而作《春秋》；屈原被放逐，才写了《离骚》；左丘明失去视力，才有《国语》；孙膑被截去膝盖骨，《兵法》才撰写出来；吕不韦被贬谪蜀地，后世才流传着《吕氏春秋》；韩非被囚禁在秦国，写出《说难》、《孤愤》；《诗》三百篇，大都是一些圣贤们抒发愤懑而写作的。这些都是人们感情有压抑郁结不解的地方，不能实现其理想，所以记述过去的事迹，让将来的人了解他的志向。就像左丘明没有了视力，孙膑断了双脚，终生不能被人重用，便退隐著书立说来抒发他们的怨愤，想到活下来从事著作来表现自己的思想。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>史记</tag>
        <tag>司马迁</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker容器与虚拟机区别]]></title>
    <url>%2F2016%2F11%2F23%2FDocker%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[一、Docker 与虚拟机虚拟机：我们传统的虚拟机需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给他的资源将全部被占用。，每一个虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。 Docker：容器技术是和我们的宿主机共享硬件资源及操作系统可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。 虚拟机和容器都是在硬件和操作系统以上的，虚拟机有Hypervisor层，Hypervisor是整个虚拟机的核心所在。他为虚拟机提供了虚拟的运行平台，管理虚拟机的操作系统运行。每个虚拟机都有自己的系统和系统库以及应用。 容器没有Hypervisor这一层，并且每个容器是和宿主机共享硬件资源及操作系统，那么由Hypervisor带来性能的损耗，在linux容器这边是不存在的。但是虚拟机技术也有其优势，能为应用提供一个更加隔离的环境，不会因为应用程序的漏洞给宿主机造成任何威胁。同时还支持跨操作系统的虚拟化，例如你可以在linux操作系统下运行windows虚拟机。 从虚拟化层面来看，传统虚拟化技术是对硬件资源的虚拟，容器技术则是对进程的虚拟，从而可提供更轻量 级的虚拟化，实现进程和资源的隔离。从架构来看，Docker比虚拟化少了两层，取消了hypervisor层和GuestOS层，使用 Docker Engine 进行调度和隔离，所有应用共用主机操作系统，因此在体量上，Docker较虚拟机更轻量级，在性能上优于虚拟化，接近裸机性能。从应用场景来 看，Docker和虚拟化则有各自擅长的领域，在软件开发、测试场景和生产运维场景中各有优劣 二、具体对比 docker启动快速属于秒级别。虚拟机通常需要几分钟去启动。 docker需要的资源更少，docker在操作系统级别进行虚拟化，docker容器和内核交互，几乎没有性能损耗，性能优于通过Hypervisor层与内核层的虚拟化。； docker更轻量，docker的架构可以共用一个内核与共享应用程序库，所占内存极小。同样的硬件环境，Docker运行的镜像数远多于虚拟机数量。对系统的利用率非常高 与虚拟机相比，docker隔离性更弱，docker属于进程之间的隔离，虚拟机可实现系统级别隔离； 安全性： docker的安全性也更弱。Docker的租户root和宿主机root等同，一旦容器内的用户从普通用户权限提升为root权限，它就直接具备了宿主机的root权限，进而可进行无限制的操作。虚拟机租户root权限和宿主机的root虚拟机权限是分离的，并且虚拟机利用如Intel的VT-d和VT-x的ring-1硬件隔离技术，这种隔离技术可以防止虚拟机突破和彼此交互，而容器至今还没有任何形式的硬件隔离，这使得容器容易受到攻击。 可管理性：docker的集中化管理工具还不算成熟。各种虚拟化技术都有成熟的管理工具，例如VMware vCenter提供完备的虚拟机管理能力。 高可用和可恢复性：docker对业务的高可用支持是通过快速重新部署实现的。虚拟化具备负载均衡，高可用，容错，迁移和数据保护等经过生产实践检验的成熟保障机制，VMware可承诺虚拟机99.999%高可用，保证业务连续性。 快速创建、删除：虚拟化创建是分钟级别的，Docker容器创建是秒级别的，Docker的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间。 交付、部署：虚拟机可以通过镜像实现环境交付的一致性，但镜像分发无法体系化；Docker在Dockerfile中记录了容器构建过程，可在集群中实现快速分发和快速部署;]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于数据挖掘（Data Mining）]]></title>
    <url>%2F2016%2F11%2F23%2F%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%2F</url>
    <content type="text"><![CDATA[数据挖掘（Data Mining）就是从大量的、不完全的、有噪声的、模糊的、随机的实际应用数据中，提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程。也就是指从大量的数据中通过算法搜索隐藏于其中信息的过程。这个定义包括好几层含义：数据源必须是真实的、大量的、含噪声的；发现的是用户感兴趣的知识；发现的知识要可接受、可理解、可运用；并不要求发现放之四海皆准的知识，仅支持特定的发现问题。通过统计、在线分析处理、情报检索、机器学习、专家系统（依靠过去的经验法则）和模式识别等诸多方法来实现上述目标。有时候放“马后炮”也是有意义、有价值的。数据挖掘（Data Mining）是有组织有目的地收集数据，通过分析数据使之成为信息，从而在大量数据中寻找潜在规律以形成规则或知识的技术。因为与数据库密切相关，又称为数据库知识发现(Knowledge Discovery in Databases，KDD) ，就是将高级智能计算技术应用于大量数据中，让计算机在有人或无人指导的情况下从海量数据中发现潜在的，有用的模式(也叫知识)。数据挖掘的主要功能 1．分类：按照分析对象的属性、特征，建立不同的组类来描述事物。例如：银行部门根据以前的数据将客户分成了不同的类别，现在就可以根据这些来区分新申请贷款的客户，以采取相应的贷款方案。 2．聚类：识别出分析对内在的规则，按照这些规则把对象分成若干类。例如：将申请人分为高度风险申请者，中度风险申请者，低度风险申请者。 3．关联规则和序列模式的发现：关联是某种事物发生时其他事物会发生的这样一种联系。例如：每天购买啤酒的人也有可能购买香烟，比重有多大，可以通过关联的支持度和可信度来描述。与关联不同，序列是一种纵向的联系。例如：今天银行调整利率，明天股市的变化。 4．预测：把握分析对象发展的规律，对未来的趋势做出预见。例如：对未来经济发展的判断。 5．偏差的检测：对分析对象的少数的、极端的特例的描述，揭示内在的原因。例如：在银行的100万笔交易中有500例的欺诈行为，银行为了稳健经营，就要发现这500例的内在因素，减小以后经营的风险。 需要注意的是：数据挖掘的各项功能不是独立存在的，在数据挖掘中互相联系，发挥作用。 第一回合：分析报告在《大闹天宫》里孙悟空跟二郎神在花果山下大战三百回合，咱来写一篇文章分析。孙悟空有金刚不坏火眼金睛筋斗云七十二般变化加上定海神针身法灵活。二郎神杨戬有三只眼缚妖索哮天犬银袍金甲加上三尖两刃四窍八环刀力量无穷。所以在大战开始三百回合时候不相上下，结果后来二郎神派出天兵天将放火烧花果山让大圣慌了心神被偷袭得手 最后二郎神赢了。分析报告完成。 第二回合：统计分析大圣二战杨戬。这次在二位大战之前做个数理统计来预测结果。首先根据历史样本史书记载发现两人在之前的五百年里打过100次，其中孙悟空赢60次。然后有记录显示，之前孙悟空和牛魔王战斗的胜率是80%，而杨戬斗牛魔王胜率是70%。所以可以得出综合预测总体胜率是孙悟空赢面大。 结论依靠历史记录，使用样本预测总体，根据经验做出假设。统计分析完成。 第三回合：数据挖掘孙悟空和杨戬终极决战。这次咱们根据两位的详细资料(如家庭出身、教育背景、工作经验、婚育情况等)让计算机做协同过滤关联分析。计算机通过数据清洗建模后发现：贫苦出身的孩子一般比皇亲国戚更能吃苦所以功夫底子更好平时训练更加扎实。战斗经验丰富的斗战胜佛因为平时经常打架擅长利用天时地利环境因素而胜算更大。在都得到大师指点的情况下，贫苦出身的孩子可以利用后天的努力来弥补先天悟性的欠缺。样貌奇特注定孤独终老的神仙总是会比同等条件下美若天仙喜欢拈花惹草处处留情的神仙功夫好。 综上所述，我们可知道：论出身两位大神不分伯仲。一个从石头出来，一个是凡人与神仙结合所生。悟空的师父菩提老祖(准提道人)和二郎神的师父玉鼎真人的师父元始天尊同为鸿钧老祖的高足所以前者更胜一筹。斗战胜佛战斗经验相对整日快活逍遥无忧无虑的二郎神来说更加丰富。另孙行者由于样貌原因始终单身(好伤感)。 所以可以得出结论，这次大战孙悟空赢面大。数据挖掘完成。 最后总结：分析报告一般是整个事件发生结束以后的总结(马后炮)。统计分析能利用大量的历史样本来预测整个事件总体未来的走向(概率)。数据挖掘则透过事件的表象发现隐藏在背后的蛛丝马迹，从而找到潜伏的规律以及看似无关事物之间背后的联系。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《策略思维》读书笔记]]></title>
    <url>%2F2016%2F11%2F18%2F%E3%80%8A%E7%AD%96%E7%95%A5%E6%80%9D%E7%BB%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[博弈论类似中国古代的纵横家，他们通过各种类似博弈的故事，建功立业。而博弈论是在西方科学体系基础上的一种模型，把商场、生活、工作上的各种博弈，转化为数学模型，借鉴一些数学的方法，运筹帷幄，决胜千里。不过，数学、物理模型的要义就是抛开次要因素，抓住核心要素来建立。但是，实际上，一些次要的因素的变化，往往会导致较大的差异结果。例如蝴蝶效应，所以实际上的博弈论并不能一概而论。再说，博弈论最难的地方就是在一个案例（事件）中抽象出对应的数学模型，还要找到核心的要素，保留核心的要素，剔除次要的因素，这要靠经验、水平了。在实际生活中，有时候，经验比这些所谓的科学手段还更有效。一个人能根据经验，对一些形势、人性做出的判断，比通过博弈工具更直达事件本质。再说，博弈总感觉是在术层面上的技巧（雕虫小技），而仁义、大智若愚这些大道层面上的思维，其实其境界更高。 一、策略思维的简要说明1、定义策略思维是关于了解对手打算如何战胜你，然后战而胜之的艺术。关于策略思维的科学称为博弈论。在社会科学中，研究策略性决策制定过程的分支称为博弈论。 2、策略思维策略思维认为人都是理性的。换位思维：从别人的角度来思考问题、来观察问题。不过，从别人的角度观察这个世界做起来并不容易，我们总喜欢把别人看做和我们一样的人，而不是不同的类型。博弈论要求你设身处地，仔细分析自己弱处于对方的境地，思路会有什么变化，哪怕你完全不能同意他们的见解。在你做决定的时候，必须将冲突考虑在内，同事注意发挥合作的效力。类似的互动决定就具有策略性，与之相适应的行动计划称为一个策略。 其它人的行动向我们展示了他们究竟知道什么，我们应该利用这些信息知道我们自己的行动。 在博弈论的过程当中，我们不能忽略自尊和失去理性的这两种要素。 先行者处于不利地位：在博弈游戏里，抢占先机、率先出手并不总是好事。因为这么做会暴露你的行动，其他参与者可以利用这一点点占你的便宜。（类似高手不先出招一样:))。 3、博弈分类博弈分为同时发生、相继发生。 冲突的博弈零和博弈 合作的博弈 冲突+合作的博弈存在博弈均衡（或者没有）。 4、博弈均衡我们已经找到了一个策略组合，其中，各方的行动就是针对对方行动而确定的最佳对策。一旦知道对方在做什么，就没人愿意改变自己的做法。博弈论学者把这么一个结果称为“均衡”。这个概念是由普林斯顿大学数学家约翰·纳什（John Nash）提出的。有些博弈存在好几个均衡，有些博弈却一个均衡都没有。 5、视觉辅助工具1）树状图（决策树、博弈树）— 相继行动 2）博弈表— 同时行动 显示所有可能想象得到的策略组合将会相应产生什么结果。 3）博弈均衡图 二、博弈四大法则1、法则1（相继行动）：向前展望，倒后推理。向前展望，倒后推理：应该首先明确自己最后希望达到什么目标，然后从这个结果倒后研究，直到找出自己现在应该选择哪条道路，这样才能保证以后可以达到那个目标。这种策略，一般从未来某个固定点开始考察。2、法则2（同时行动）：假如你有一个优势策略，请照办。3、法则3（同时行动）：剔除所有劣势策略，不予考虑，如此一步一步做下去。4、法则4（同时行动）：寻找这个博弈的均衡，即一对策略，按照这对策略做，各个参与者的行动都是对对方行动的最佳回应。5、混合策略（同时行动）如果以上法则2、3、4都不行，这时候你需要将你的策略混合运用，“混合策略!” 三、策略行动针对相继行动的博弈。策略行动：一个策略行动的设计意图在于改变对方的看法和行动，使之变得对自己有利。其突出特征是刻意限制你的行动自由。例如声称（威胁），如果对方怎么样，你就一定会怎么样之类的。 1、以牙还牙法则体现了任何一个性质有效的策略应该符合的四个原则：清晰、善意、刺激性和宽容性（保持一定小概率的容忍，防止误判）。适度原则：不过最小限度、可行（可信）而又达到目的的威胁是最佳的。一个成功的威胁是那种完全不必实现的威胁。不战而屈人之兵。 2、随机策略随机性可以通过看你的手表的秒针，如果是单数怎么样、双数怎么样，或者在哪个期间怎么样。随机策略的最广泛的用途在于以较低的监管成本促使人们遵守规则。规则在于，预期的惩罚应该与罪行相称，而这种心理预期应该将被逮住的概率考虑在内。 3、混合策略只适用：两个选手各有两个策略的零和博弈。选择这个点的混合策略，会形成一个博弈上的均衡，双方都没有方法改善自己的地位。 4、跟随策略追踪而来的新公司总是倾向于采用更加具有创新性的策略，而龙头老大们则愿意模仿跟在自己后面的公司（例如腾讯:-))。 四、其它的一些策略１、边缘政策边缘政策则是你愿意在事实发生前创造这个风险，却在时机来临时不愿意将这个风险付诸实践。核心是一种风险管控机制，发出一种双方都不能承受的结果的风险提示（但不是确定的提示）。完全成功的边缘政策仍是一门艺术和一种冒险。 2、不稳定的均衡点开始严格执法，达到一个正向均衡之后，后期就能自动的达到良性循环。有点类似自适应了。 3、投票的策略投票表决的次序就有可能对最后的结果产生重大影响。第230页“法庭的秩序”这一章的关于法庭运转方式对囚犯判决结果有严重影响的例子很有趣！ 4、讨价还价讨价还价的本质在于提出折中的方案解决分歧。要看谁有相对优势，能支撑更多时间（等待成本较低），一般就能获取到比中间值更高的收获。谈判者应该将所有有关共同利益的问题放在一起进行讨价还价，利用各方对这些问题的重视程度不同，达成对大家来说都更好的结果。 文章摘要 谈判有一个策略：在最后期限做出一定的让步，同时，提出自己最核心的要求，这时候，一般大家都想到尽快结束谈判，从而做出让步。 [数学定理要思考其应用，而不再纠结与其严格的证明！] 有一个重要的结论：博弈的结果在很大程度上取决于参与者的人数。参与者越多越好。 假如你不得不冒一点风险，通常是越早冒险越好。 寻找优势策略是每一个人首要的任务。名句：爱过之后失去总比从来没有爱过好。换而言之，爱是一种优势策略。优势策略的优势是指你这个策略对你的其它策略占优优势，而不是对你的对手的策略占有优势。 只要你有行动的自由，你就有让步的自由。 “围师遗阙”是指包围敌人，要留缺口；出处：《孙子兵法》《军争篇》：“归师勿遏，围师遗阙，穷寇勿迫，此用兵之法也。”给对方一条路，不然兔子急了还咬人呢，或者说狗急跳墙。 对于耐用品，一个垄断者实际上是在跟以后的自己竞争，从而使市场变得富有竞争性。 但见新人笑，那闻旧人哭。《佳人》杜甫 扑克玩家应该隐藏在自相矛盾的面具后面。 我们的晚餐并不是来自屠夫、啤酒酿造者或点心师的善心，而是来源于他们对自身利益的考虑……[每个人]只关心他自己的安全、他自己的得益。他由一只看不见的手引导着，去提升他原来本没有想过的另一目标。他通过追求自己的利益，结果也提升了社会的利益，比他一心要提升社会利益还有效。《国富论》亚当·史密斯（Adam Smith） 差额选举是指候选人数多于应选人数的不等额选举。 马太效应：圣经中“马太福音”的故事：凡有的，还要加给他，叫他有余；凡没有的，连他所有的也要夺去。 招标：一个简单的机制就是将合同判给开价最低者，但付给她开价第二底者的价码。【个人注】但是在中国这种围标厉害的国家可能行不通;-)拍卖其实也是相当于将物品授予开价最高者（心理价位），而价码等于次高开价（超过这个价，次高开价人就退出了）。 杀鸡儆猴。“杀鸡儆猴”说的是杀掉鸡来吓唬猴子，比喻惩戒一个以警戒其余。 ** 三方对决话说有三个仇家，分别叫做拉里（Larry）、莫（Mo）和卷毛( Curly），他们决定来一场三方对决。总共有两个回合：第一回合，每人得到一次射击机会，射击次序分别为拉里、莫和卷毛；第一回合过后，幸存者得到第二次射击机会，射击次序还是拉里、莫和卷毛。对于每一个参与对决的人，最佳结果都是成为惟一幸存者；次佳结果则是成为两个幸存者之一；排在第三位的结果，是无人死亡；最差的结果当然是自己被对方打死。拉里的枪法很糟糕，瞄准10次只有3次能够打中目标。莫的水平高一点，精确度有80％。卷毛是神枪手，百发百中。那么，拉里在第一回合的最优策略应该是什么？在这个问题里，谁有最大的机会幸存下来？案例的意义：弱者可以通过放弃自己的第一个成功机会来取得更好的结果。 歌利亚是《圣经》故事中被牧羊人大卫杀死的巨人。 部队的训练1、无条件服从 例如日常的折被子，就是训练士兵不问原因，无条件服从，形成条件反射。训练出不问是非的战斗机器。2、自豪感 灌输为祖国自豪、为当兵自豪。自豪感通常是一种精英主义的情感。 有些案例没有标准的答案，不过，这也是人生的一大特点。许多时候，并不存在完全正确的答案，只能用并不完美的方法处理遇到的问题。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[公地悲剧]]></title>
    <url>%2F2016%2F11%2F18%2F%E5%85%AC%E5%9C%B0%E6%82%B2%E5%89%A7%2F</url>
    <content type="text"><![CDATA[公地悲剧（Tragedy of the commons）是一种涉及个人利益与公共利益对资源分配有所冲突的社会陷阱。这个字起源于英国作家威廉·佛司特·洛伊（William Forster Lloyd）在1833年讨论人口的著作中所使用的比喻[1]。1968年时，美国生态学家加勒特·哈丁在期刊《科学》将这个概念加以发表、延伸，称为“公地悲剧”（The Tragedy of the Commons）[2]。而这个理论本身就如亚里斯多德所言：“那由最大人数所共享的事物，却只得到最少的照顾”[3]。这样的比喻宣示著有限的资源注定因自由进用和不受限的要求而被过度剥削。这样的情况之所以会发生源自于每一个个体都企求扩大自身可使用的资源，然而资源耗损的代价却转嫁所有可使用资源的人们。（可使用资源的群体数目可能远大于夺取资源的数目。）哈丁的主要兴趣如同前人洛伊和马尔萨斯一般皆专注在人口学，尤其是人口成长所造成的问题。他的论述聚焦于有限资源的使用，例如空气与海洋资源，并指出污染的负面共享性。（他并非处理私人资源的蓄意污染，负面共享性是指公有资源被剥夺或污染所造成的共有损失。）]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[毒丸防御]]></title>
    <url>%2F2016%2F11%2F18%2F%E6%AF%92%E4%B8%B8%E9%98%B2%E5%BE%A1%2F</url>
    <content type="text"><![CDATA[毒丸防御（英语：poison pill），又称“股权摊薄反收购措施”或“股东权益计划”，是目标公司抵御恶意收购的一种防御措施，1982年由美国Wachtell, Lipton, Rosen &amp; Katz律师行的并购律师马丁·利普顿（Martin Lipton）发明，在美国是经过1985年特拉华州大法官法庭(Delaware Chancery Court)的判决才被合法化的，由于它不需要股东的直接批准就可以实施，故在八十年代后期被广泛采用。实施毒丸防御的公司，由公司董事会事先通过一项股权摊薄条款，一旦敌意方收购公司一定比例的股份（通常是10%至20%的股份），即触发该条款生效，使公司原有股东可以较低的价格获得公司大量股份，从而抬高收购方的成本。在过去20年里毒丸防御一直是最受欢迎的反收购措施之一，在美国曾先后有2000多家公司采用毒丸防御，2001年搜狐就通过实施毒丸防御成功击退北大青鸟的恶意收购，搜狐在2001年8月3日收盘时的市值只有4867.1万美元，但通过实施毒丸防御，使得北大青鸟的收购成本高达27.812亿美元。毒丸防御虽是防止敌意收购的有效措施，但却不利于公司治理，阻碍资本自由流通，尤其是公司在陷入困境或发生丑闻时重组成本高昂，一些公司评估机构也往往会给那些实施毒丸防御的公司较低的评级，所以近几年来被不少公司弃用。其他抵御恶意收购的措施还有股份回购、白衣骑士、金色降落伞、银色降落伞、皇冠上的珍珠、焦土战术、帕克门、超级多数条款等等。]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堆、栈的区别]]></title>
    <url>%2F2016%2F11%2F17%2F%E5%A0%86%E3%80%81%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[一、定义堆是堆（heap），栈是栈（stack），堆栈是栈。 二、虚拟内存分布图中0号地址在最下边，越往上内存地址越大。注意在上图中，stack 是向下生长的; heap是向上生长的。栈是先进后出的数据的结构。LIFO（Last In First Out） 三、Java内存java内存是分为堆，栈和方法区。堆中分配的是对象，也就是new出来的东西。栈中分配的是基本类型和自定义对象的引用。方法区存放的是类信息和static变量。比如说你在方法里有一个String a=new String(“123”),就会先在堆里创建一个“123”的对象，然后再把这个对象的引用放到栈里面。对于一个方法123456public void Method1()&#123; int i = 4; int y = 2; class1 cls1 = new class1();&#125; 四、主要区别1、存储内容最主要的区别就是栈内存用来存储局部变量和方法调用。而堆内存用来存储Java中的对象。无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。系统使用stack段中的指针值访问heap段中的对象。如果stack对象的指针没有了，则heap中的对象就不能访问。这也是内存泄露的原因 2、独有还是共享栈内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有内存。而堆内存中的对象对所有线程可见。堆内存中的对象可以被所有线程访问。stack对象的优点主要有两点，一是创建速度快，二是管理简单，它有严格的生命周期。stack对象的缺点是它不灵活。创建时长度是多大就一直是多大，创建时是哪个函数创建的，它的owner就一直是它。不像heap对象那样有多个owner，其实多个owner等同于引用计数。只有heap对象才是采用“引用计数”方法管理它。 3、异常错误如果栈内存没有可用的空间存储方法调用和局部变量，JVM会抛出java.lang.StackOverFlowError。而如果是堆内存没有可用的空间存储生成的对象，JVM会抛出java.lang.OutOfMemoryError。 4、空间大小栈的内存要远远小于堆内存，如果你使用递归的话，那么你的栈很快就会充满。如果递归没有及时跳出，很可能发生StackOverFlowError问题。你可以通过-Xss选项设置栈内存的大小。-Xms选项可以设置堆的开始时的大小，-Xmx选项可以设置堆的最大值。这就是Java中堆和栈的区别。理解好这个问题的话，可以对你解决开发中的问题，分析堆内存和栈内存使用，甚至性能调优都有帮助。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[导航算法]]></title>
    <url>%2F2016%2F11%2F17%2F%E5%AF%BC%E8%88%AA%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1、路径规划的算法有哪些？ 路径规划有很多算法，在导航中，经常提到的就是A和Dijkstra算法。A算法是导航路径计算中的标准算法。它比Dijkstra算法多了一个估算函数，若估算函数为0，A*算法也就退化为Dijkstra算法。 2、两种算法的区别 Dijkstra 算法是全局遍历，确保运算结果一定是最短路径。A* 算法是策略寻路，不保证一定是最短路径。 Dijkstra 需要载入全部数据，遍历搜索。（也可以分层计算，分层载入）A* 算法可以根据需要，分部分块载入地图数据。 3、算法的改进但在一般的嵌入式硬件上，基于性能和内存的限制与要求，不能直接使用A*算法计算路径。所以，也有很多改进的方法。例如： 应用地图数据分层的思想，简化地图中道路的网络结构，也能提高路径规划的性能。 起始点与目的地的方向考虑进去，扩展时，有方向性进行扩展，可以大大减少计算量和存储空间。 保存曾经的规划记录，也能达到快速检索的能力。Google的地图规划好像就采用的这种思想。 4、路径规划考虑的要素 最短路径：只考虑时间，不考虑距离或其他因素 最快路径：只考虑距离，不考虑时间或其他因素 同时考虑时间和距离因素：50/50的路径规划方法。 5、Dijkstra算法戴克斯特拉算法，这个算法的时间复杂度是 O(N²)举例来说，如果图中的顶点表示城市，而边上的权重表示城市间开车行经的距离，该算法可以用来找到两个城市之间的最短路径。这个算法是通过为每个顶点 v 保留目前为止所找到的从s到v的最短路径来工作的。初始时，原点 s 的路径权重被赋为 0]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[起初他们]]></title>
    <url>%2F2016%2F11%2F16%2F%E8%B5%B7%E5%88%9D%E4%BB%96%E4%BB%AC%2F</url>
    <content type="text"><![CDATA[起初他们……（英语：First they came…）是德国著名神学家兼信义宗牧师马丁·尼莫拉的一首诗（忏悔文），描述忽视与自己无关的团体所造成的结果。该诗后来常被引用，作为对不关心政治的人之呼吁。 起初他们抓了所有的共产党人；我没有出声，因为我不是共产党人。接着他们抓了所有的犹太人；我没有出声，因为我不是犹太人。然后他们抓了所有的工会骨干；我没有出声，因为我不是工会骨干。后来他们抓了所有的天主教徒；我没有出声，因为我属于新教。最后他们来抓我；到那时候，已经没有剩下能出声讲话的人了]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>哲学</tag>
        <tag>历史</tag>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[远交近攻]]></title>
    <url>%2F2016%2F11%2F16%2F%E8%BF%9C%E4%BA%A4%E8%BF%91%E6%94%BB%2F</url>
    <content type="text"><![CDATA[“远交近攻”是兵法“三十六计”的一计。原文为：“混战之局，纵横捭阖之中，各自取利。远不可攻，而可以利相结；近者交之，反使变生肘腋。范雎之谋，为地理之定则，其理甚明。”原文为:“形格势禁，利从近取，害以远隔。上火下泽。”战国时代，范雎曾向秦昭王提出“远交近攻”的策略，希望秦国将地理位置较近的韩国、魏国作为秦国兼并的主要目标，同时应该与地理位置较远的齐国等国保持良好关系，这样就可以“得寸则王之寸，得尺则王之尺”；这样的战略也使得秦国可以兼并其他六国，成为统一的秦朝政权。释义:“远交近攻”意为结合远方势力以攻打临近国家或敌人]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>兵法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文章发表时间显示了两遍]]></title>
    <url>%2F2016%2F11%2F15%2F%E6%96%87%E7%AB%A0%E5%8F%91%E8%A1%A8%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA%E4%BA%86%E4%B8%A4%E9%81%8D%2F</url>
    <content type="text"><![CDATA[更新了 NexT主题之后，发表文章那里显示了两次时间（之前的版本是只有一个时间的）：NexT InformationsMaster： 5.1.0NexT Scheme:Pisces 其實是對的， Posted on 2016-11-04 | 2016-11-04 第一個日期， 是你create， 第二個日期是你有沒有modify 過你的文章。 如何屏蔽modify的选项：在主题NexT下面的目录：layout/_macro 裏面的post.swig，去掉如下一段：123&lt;time title="&#123;&#123; __('post.modified') &#125;&#125;" itemprop="dateModified" datetime="&#123;&#123; moment(post.updated).format() &#125;&#125;"&gt; &#123;&#123; date(post.updated, config.date_format) &#125;&#125;&lt;/time&gt; 还有上面的这个竖：1&amp;nbsp;|&amp;nbsp;]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[外部性(外部成本、外部效应、溢出效应)]]></title>
    <url>%2F2016%2F11%2F15%2F%E5%A4%96%E9%83%A8%E6%80%A7(%E5%A4%96%E9%83%A8%E6%88%90%E6%9C%AC%E3%80%81%E5%A4%96%E9%83%A8%E6%95%88%E5%BA%94%E3%80%81%E6%BA%A2%E5%87%BA%E6%95%88%E5%BA%94%E3%80%81%E7%95%8C%E5%A4%96%E6%95%88%E7%9B%8A)%20%2F</url>
    <content type="text"><![CDATA[外部性（英语：Externality）是指个体经济单位的行为对社会或者其他个人部门造成了影响(例如：环境污染）却没有承担相应的义务或获得回报,亦称外部成本、外部效应或溢出效应。这种外部效应有时产生有利影响（教育和安全提高社会生产力），有时会产生不利影响（污染和犯罪降低社会生产力）。我们可以按照外部效应产生的影响不同，把外部效应分为外部经济和外部不经济。外部经济通常是指有益外部性商品的生产。 这类商品的生产会对社会和环境产生的正效应（如教育和安全）。外部不经济通常是指有害外部性的商品。这类商品的生产会对社会和环境产生的负效应（如污染和犯罪）。假设私有产权清楚确立，交易费用低至某一水平以及国家政府给予一定程度上的补贴或政府干涉，外部性将不会存在。同时，从社会经济学的观点来看：个人通常会倾向于“外部不经济”的消费行为，因为有害外部性商品带来的成本不需要个人承担（如污染），经济上称此为“过度消费”（overconsumption)而由于有益外部性商品带来的收益并不能被个人独占，个人通常在一定程度上不愿意做出“外部经济”的消费行为（如教育），经济上称此为“不充分消费”（underconsumption)]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地预览没问题，deploy后主页显示大面积空白]]></title>
    <url>%2F2016%2F11%2F14%2F%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E6%B2%A1%E9%97%AE%E9%A2%98deploy%E5%90%8E%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E5%A4%A7%E9%9D%A2%E7%A7%AF%E7%A9%BA%E7%99%BD%2F</url>
    <content type="text"><![CDATA[一、问题本地预览没问题，deploy后主页显示大面积空白 二、处理方法“不清楚为什么 GitHub Pages 过滤掉了 source/vendors 目录的访问。我提交了一个更新到 master 分支上，修正这个问题，可以更新下。”按照作者的说法, 我的问题解决了.作者已经把相关的修改提交到 github 了, 不需要自己修改任何东西, 大家可以自己 git clone.解决步骤如下: 备份原来的 next 目录. 在 next 目录, 执行 git pull, 如果出现文件冲突(说明你自己修改过),请先记录自己修改过的文件. git pull 结束后, 重新执行 hexo g 和 hexo d. 等会(大概一分钟左右)打开自己的网站. 三、git pull 方法cd hexocd themes/nextgit initgit remote add origin https://github.com/iissnan/hexo-theme-nextgit pull 在git pull的时候报错error: Your local changes to the following files would be overwritten by merge: 解决办法：如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:git stashgit pullgit stash pop然后可以使用git diff -w +文件名来确认代码自动合并的情况.如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:git reset —hardgit pull其中git reset是针对版本 实在不行，备份Next目录之后，再删除Next目录，然后重新安装一份。git clone https://github.com/iissnan/hexo-theme-next themes/next 恢复备份的旧的配置文件，同时要修改配置文件。也可以手动将 source/vendors 目录修改成 source/lib （或者其他的名称，只是 lib 我测试了可以使用）；同时，修改下主题配置文件_config.yml， 将 _internal: vendors 改成你所修改的名字，例如 _internal: lib。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二项分布、泊松分布、正态分布的关系]]></title>
    <url>%2F2016%2F11%2F13%2F%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E3%80%81%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83%E3%80%81%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%2F</url>
    <content type="text"><![CDATA[一、二项分布、泊松分布、正态分布关系1）泊松分布，二项分布都是离散分布；正态分布是连续分布2）二项分布什么时候趋近于泊松分布，什么时候趋近于正态分布？这么说吧：二项分布有两个参数，一个 n 表示试验次数，一个 p 表示一次试验成功概率。现在考虑一列二项分布，其中试验次数 n 无限增加，而 p 是 n 的函数。如果 np 存在有限极限 λ，则这列二项分布就趋于参数为 λ 的 泊松分布。反之，如果 np 趋于无限大（如 p 是一个定值），则根据德莫佛-拉普拉斯(De’Moivre-Laplace)中心极限定理，这列二项分布将趋近于正态分布。3）实际运用中当 n 很大时一般都用正态分布来近似计算二项分布，但是如果同时 np 又比较小（比起n来说很小），那么用泊松分布近似计算更简单些，毕竟泊松分布跟二项分布一样都是离散型分布。 二、二项分布二项分布可基于对一系列潜在事件实际发生情况的观测对事件的发生次数建模。例如，二项分布可用于采集在临床研究中死于心脏病的人数、拥挤电梯中在第二层走出电梯的人数，或是某动物种群中携带特定遗传性状的动物数量。二项分布描述的是发生次数，而不是量值。它可以对完成比赛的参赛者数量建模，但不能对参赛者的速度建模。二项分布的公式如下： f\left( x\right) =\dfrac {n!} {x!\left( n-x\right) !}p^{x}\left( 1-p\right) ^{n-x}其中n 是观测值数量。p 是发生概率。x 是成功次数（从 0 到 n）。 使用二项分布的一个常见例子是，在抛掷硬币 10 次 (n = 10) 的情况下判断硬币正面朝上的次数概率。可能出现的情况是，10 次中有 0 次正面朝上、10 次中有 1 次正面朝上，以此类推；因此，x = 0、1、2、3、4、5、6、7、8、9、10。p 是每个 x 的概率。所有试验都是相互独立的，并且每个试验只有成功和失败这两种结果。如果 n 值较大且 p 值较小，则二项分布接近泊松分布。这种情况下使用泊松分布会更加简便。二项分布将返回代表 n 次试验中成功次数的随机变量，其中每次试验的成功概率为 p（例如，硬币正面朝上的概率为 p）。 在离散分布中如果试验次数n值非常大，而且单次试验的概率p值又不是很小的情况下，正态分布可以用来近似的代替二项分布。一个粗略的使用正态分布的近似规则是： n\cdot p\cdot\left( 1-p\right) \geq 9从二项分布中获得 ：&nbsp;期望值： μ=np&nbsp;方差： σ²=np(1-p)如果σ&gt;3，则必须采用下面的近似修正方法： P(x_{1}\leq X\leq x_{2})=\underbrace{\sum _{x_{1}=k}^{x_{2}}\left( \begin{matrix} n\\ k\end{matrix} \right) \cdot p^{k}\cdot q^{n-k}}_{EF}\approx\underbrace {\Phi \left({\frac {x_{2}+0.5-\mu }{\sigma }}\right)-\Phi \left({\frac {x_{1}-0.5-\mu }{\sigma }}\right)} _{\mathrm {ZF} }注：q=1-p，EF:二项分布； ZF:正态分布 上（下）临界值分别增加（减少）修正值0.5的目的是在σ值很大时获得更精确的近似值，只有 σ很小时，修正值0.5可以不被考虑。例如，随机试验为连续64次掷硬币，获得的国徽数位于32和42之间的概率是多少？用正态分布计算如下， \begin{align*} &\mu =n\cdot p=64\cdot 0.5=32\\ &{\displaystyle \sigma ={\sqrt {n\cdot p\cdot (1-p)}}={\sqrt {64\cdot 0.5\cdot 0.5}}=4} \\ &{\displaystyle n\cdot p\cdot q=16\geq 9} ，符合近似规则，应用 {\displaystyle z} -变换：\\ \end{align*} \begin{align*} P(32\leq X\leq 42)&\approx \Phi \left({\frac {42+0.5-32}{4}}\right)-\Phi \left({\frac {32-0.5-32}{4}}\right) \\ &=\Phi \left(2.63\right)-\Phi \left(-0.13\right)=0.0517+0.4957=0.5474 \end{align*}在运用z- 表格时注意到利用密度函数的对称性来求出 z为负值时的区域面积。 三、泊松分布泊松分布是一种离散型概率分布。泊松分布适合在给定一个已知平均值的情况下对固定时间步长内事件的发生次数概率进行建模。这些事件与它们最后一次发生的状态无关。X 轴上是 0、1、2、3、4（以此类推）等事件的离散值（通常表示事件的发生次数），Y 轴上是现象的发生概率（通常是给定一个已知平均值）。这些事件可以是十字路口的事故发生次数、出生缺陷数量或一平方公里内驼鹿的数量。泊松分布可以对小概率事件进行建模。这种分布有时也被称为小数定律 (Law of small numbers)，因为事件不经常发生，但仍有很多机会让它发生。泊松分布的公式如下： f\left( x;\lambda \right) =\begin{cases} \lambda e^{-\lambda x},x\geq 0\\ 0,x < 0\end{cases}其中：e 是自然对数的底。x 是事件的可能发生次数（正整数）。λ（即，平均值）是一个正数，代表指定区间内事件的预期发生次数。如果事件在 1 小时内（60 分钟）每 10 分钟发生一次，则 λ 为 6。 泊松分布与二项分布类似，但泊松分布是在不知道事件的可能发生总次数的情况下对小概率事件建模。泊松分布的建模对象是十字路口的事故发生次数，而二项分布的建模对象是事故发生次数与经由十字路口的汽车数量之间的相对关系。&nbsp;期望值：λ（即，平均值）&nbsp;方差：方差σ²与均数λ相等，即σ²=λ 1、Poisson分布的性质1）Poisson分布是一种单参数的离散型分布，其参数为λ，它表示单位时间或空间内某事件平均发生的次数，又称强度参数。2）Poisson分布的方差σ²与均数λ相等，即σ²=λ3）Poisson分布是非对称性的，在λ不大时呈偏态分布，随着λ的增大，迅速接近正态分布。一般来说，当λ=20时，可以认为近似正态分布，Poisson分布资料可按正态分布处理。4）Poisson分布的累计概率常用的有左侧累计和右侧累计两种。单位时间或空间内事件发生的次数。 2、Poisson对应不同λ的分布图分布当总体均数值小于5时为偏峰，愈小分布愈偏，随着增大，分布趋向对称。 四、正态分布正态分布用于对常见的连续随机变量建模。正态分布被广泛采用，适用于许多应用领域。它的理论基础是中心极限定理，该定理所基于的原理是：如果存在大量观测值，则随机变量的总和将呈正态分布。例如，如果多次抛掷硬币，则在一连串抛币动作中硬币正面朝上的次数将接近正态分布。正态分布的例子包括：某国家的人的身高、某个省的各个高程值以及 12 岁学生的数学考试分数。正态分布的公式如下： f\left( x\right) =\dfrac {1} {\sigma \sqrt {2\pi }}e^{-\dfrac {\left( x-\mu\right) ^{2}} {2\sigma ^{2}}}其中μ 是平均值。σ 是标准差（正数）。正态分布关于平均值、众数和中值对称（都在 μ 处相等）。 通常二项分布和泊松分布使用数量较少的观测值对未来的离散型独立随机事件（可能发生，也可能不发生。例如，抛硬币时硬币正面朝上的次数）建模，而正态分布则使用大量的观测值对连续型变量（例如高度、重量和金额）建模。二项分布和泊松分布以概率为基础，而正态分布涉及的是达到某个量或量值的观测值数量。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>概率</tag>
        <tag>分布</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[囚徒困境]]></title>
    <url>%2F2016%2F11%2F03%2F%E5%9B%9A%E5%BE%92%E5%9B%B0%E5%A2%83%2F</url>
    <content type="text"><![CDATA[囚徒困境（Prisoner’s Dilemma）是博弈论的非零和博弈中具代表性的例子，反映个人最佳选择并非团体最佳选择。或者说在一个群体中，个人做出理性选择却往往导致集体的非理性。虽然困境本身只属模型性质，但现实中的价格竞争、环境保护等方面，也会频繁出现类似情况。单次发生的囚徒困境，和多次重复的囚徒困境结果不会一样。在重复的囚徒困境中，博弈被反复地进行。因而每个参与者都有机会去“惩罚”另一个参与者前一回合的不合作行为。这时，合作可能会作为均衡的结果出现。欺骗的动机这时可能被受到惩罚的威胁所克服，从而可能导向一个较好的、合作的结果。作为反复接近无限的数量，纳什均衡趋向于帕累托最优(顾及团体利益的帕累托最优解决方案)。囚徒困境的主旨为，囚徒们彼此合作，坚不吐实，可为全体带来最佳利益（无罪开释），但在无法沟通的情况下，因为出卖同伙可为自己带来利益（缩短刑期），也因为同伙把自己招出来可为他带来利益，因此彼此出卖虽违反最佳共同利益，反而是自己最大利益所在。但实际上，执法机构不可能设立如此情境来诱使所有囚徒招供，因为囚徒们必须考虑刑期以外之因素（出卖同伙会受到报复等），而无法完全以执法者所设立之利益（刑期）作考量。1950年，由就职于兰德公司的梅里尔·弗勒德（Merrill Flood）和梅尔文·德雷希尔（Melvin Dresher）拟定出相关困境的理论，后来由顾问艾伯特·塔克（Albert Tucker）以囚徒方式阐述，并命名为“囚徒困境”。经典的囚徒困境如下：警方逮捕甲、乙两名嫌疑犯，但没有足够证据指控二人有罪。于是警方分开囚禁嫌疑犯，分别和二人见面，并向双方提供以下相同的选择：若一人认罪并作证检控对方（相关术语称“背叛”对方），而对方保持沉默，此人将即时获释，沉默者将判监10年。若二人都保持沉默（相关术语称互相“合作”），则二人同样判监半年。若二人都互相检举（互相“背叛”），则二人同样判监5年。用表格概述如下：如同博弈论的其他例证，囚徒困境假定每个参与者（即“囚徒”）都是利己的，即都寻求最大自身利益，而不关心另一参与者的利益。参与者某一策略所得利益，如果在任何情况下都比其他策略要低的话，此策略称为“严格劣势”，理性的参与者绝不会选择。另外，没有任何其他力量干预个人决策，参与者可完全按照自己意愿选择策略。囚徒到底应该选择哪一项策略，才能将自己个人的刑期缩至最短？两名囚徒由于隔绝监禁，并不知道对方选择；而即使他们能交谈，还是未必能够尽信对方不会反口。就个人的理性选择而言，检举背叛对方所得刑期，总比沉默要来得低。试设想困境中两名理性囚徒会如何作出选择：若对方沉默、我背叛会让我获释，所以会选择背叛。若对方背叛指控我，我也要指控对方才能得到较低的刑期，所以也是会选择背叛。二人面对的情况一样，所以二人的理性思考都会得出相同的结论——选择背叛。背叛是两种策略之中的支配性策略。因此，这场博弈中唯一可能达到的纳什均衡，就是双方参与者都背叛对方，结果二人同样服刑5年。这场博弈的纳什均衡，显然不是顾及团体利益的帕累托最优解决方案。以全体利益而言，如果两个参与者都合作保持沉默，两人都只会被判刑半年，总体利益更高，结果也比两人背叛对方、判刑5年的情况较佳。但根据以上假设，二人均为理性的个人，且只追求自己个人利益。均衡状况会是两个囚徒都选择背叛，结果二人判监均比合作为高，总体利益较合作为低。这就是“困境”所在。例子有效地证明了：非零和博弈中，帕累托最优和纳什均衡是互相冲突的。]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老板的讲话]]></title>
    <url>%2F2016%2F11%2F01%2F%E8%80%81%E6%9D%BF%E7%9A%84%E8%AE%B2%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>地产相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH原理与运用]]></title>
    <url>%2F2016%2F11%2F01%2FSSH%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%90%E7%94%A8%EF%BC%9A%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[一、什么是SSH？简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。此外，本文只讨论SSH在Linux Shell中的用法。如果要在Windows系统中使用SSH，会用到另一种软件PuTTY，这需要另文介绍。 二、最基本的用法SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。1 $ ssh user@host 如果本地用户名与远程用户名一致，登录时可以省略用户名。1 $ ssh host SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。1 $ ssh -p 2222 user@host 上面这条命令表示，ssh直接连接远程主机的2222端口。 三、中间人攻击SSH之所以能够保证安全，原因在于它采用了公钥加密。整个过程是这样的： （1）远程主机收到用户的登录请求，把自己的公钥发给用户。 （2）用户使用这个公钥，将登录密码加密后，发送回来。 （3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。 这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。 SSH协议是如何应对的呢？ 四、口令登录如果你是第一次登录对方主机，系统会出现下面的提示：1234 $ ssh user@host The authenticity of host 'host (12.18.429.21)' can't be established. RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d. Are you sure you want to continue connecting (yes/no)? 这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。假定经过风险衡量以后，用户决定接受这个远程主机的公钥。1 Are you sure you want to continue connecting (yes/no)? yes 系统会出现一句提示，表示host主机已经得到认可。1 Warning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts. 然后，会要求输入密码。1 Password: (enter password) 如果密码正确，就可以登录了。当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。 五、公钥登录使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：1 $ ssh-keygen 运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。运行结束以后，在$HOME/.ssh/目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。这时再输入下面的命令，将公钥传送到远程主机host上面：1 $ ssh-copy-id user@host 好了，从此你再登录，就不需要输入密码了。如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面”#”注释是否取掉。123 RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 然后，重启远程主机的ssh服务。1234 // ubuntu系统 service ssh restart // debian系统 /etc/init.d/ssh restart 六、authorized_keys文件远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。 这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：1 $ ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub 这条命令由多个语句组成，依次分解开来看： （1）”$ ssh user@host”，表示登录远程主机； （2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令： （3）”$ mkdir -p .ssh”的作用是，如果用户主目录中的.ssh目录不存在，就创建一个； （4）’cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub的作用是，将本地的公钥文件~/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。 写入authorized_keys文件后，公钥登录的设置就完成了。 七、远程操作SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。上一节的操作，就是一个例子：1 $ ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub 单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。下面看几个例子。【例1】将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录。1 $ cd &amp;&amp; tar czv src | ssh user@host 'tar xz' 【例2】将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录。1 $ ssh user@host 'tar cz src' | tar xzv 【例3】查看远程主机是否运行进程httpd。1 $ ssh user@host 'ps ax | grep [h]ttpd' 八、绑定本地端口既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：1 $ ssh -D 8080 user@host SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。 九、本地端口转发有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。为了区别后文的”远程端口转发”，我们把这种情况称为”本地端口转发”（Local forwarding）。假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过host3，将host1连上host2。我们在host1执行下面的命令：1 $ ssh -L 2121:host2:21 host3 命令中的L参数一共接受三个值，分别是”本地端口:目标主机:目标主机端口”，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。1 $ ftp localhost:2121 “本地端口转发”使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH隧道”。下面是一个比较有趣的例子。1 $ ssh -L 5900:localhost:5900 host3 它表示将本机的5900端口绑定host3的5900端口（这里的localhost指的是host3，因为目标主机是相对host3而言的）。另一个例子是通过host3的端口转发，ssh登录host2。1 $ ssh -L 9001:host2:22 host3 这时，只要ssh登录本机的9001端口，就相当于登录host2了。1 $ ssh -p 9001 localhost 上面的-p参数表示指定登录端口。 十、远程端口转发既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”（remote forwarding）当然是指绑定远程端口的转发。还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，”本地端口转发”就不能用了，怎么办？解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了。我们在host3执行下面的命令：1 $ ssh -R 2121:host2:21 host1 R参数也是接受三个值，分别是”远程主机端口:目标主机:目标主机端口”。这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为”远程端口绑定”。绑定之后，我们在host1就可以连接host2了：1 $ ftp localhost:2121 这里必须指出，”远程端口转发”的前提条件是，host1和host3两台主机都有sshD和ssh客户端。 十一、SSH的其他参数SSH还有一些别的参数，也值得介绍。N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作。1 $ ssh -NT -D 8080 host f参数，表示SSH连接成功后，转入后台运行。这样一来，你就可以在不中断SSH连接的情况下，在本地shell中执行其他操作。1 $ ssh -f -D 8080 host 要关闭这个后台连接，就只有用kill命令去杀掉进程。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java泛型：泛型类、泛型接口和泛型方法]]></title>
    <url>%2F2016%2F11%2F01%2FJava%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[根据《Java编程思想 （第4版）》中的描述，泛型出现的动机在于：有许多原因促成了泛型的出现，而最引人注意的一个原因，就是为了创建容器类。 泛型类容器类应该算得上最具重用性的类库之一。先来看一个没有泛型的情况下的容器类如何定义：12345678910111213141516171819202122232425public class Container &#123; private String key; private String value; public Container(String k, String v) &#123; key = k; value = v; &#125; public String getKey() &#123; return key; &#125; public void setKey(String key) &#123; this.key = key; &#125; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125;&#125; Container类保存了一对key-value键值对，但是类型是定死的，也就说如果我想要创建一个键值对是String-Integer类型的，当前这个Container是做不到的，必须再自定义。那么这明显重用性就非常低。 当然，我可以用Object来代替String，并且在Java SE5之前，我们也只能这么做，由于Object是所有类型的基类，所以可以直接转型。但是这样灵活性还是不够，因为还是指定类型了，只不过这次指定的类型层级更高而已，有没有可能不指定类型？有没有可能在运行时才知道具体的类型是什么？ 所以，就出现了泛型。12345678910111213141516171819202122232425public class Container&lt;K, V&gt; &#123; private K key; private V value; public Container(K k, V v) &#123; key = k; value = v; &#125; public K getKey() &#123; return key; &#125; public void setKey(K key) &#123; this.key = key; &#125; public V getValue() &#123; return value; &#125; public void setValue(V value) &#123; this.value = value; &#125;&#125; 在编译期，是无法知道K和V具体是什么类型，只有在运行时才会真正根据类型来构造和分配内存。可以看一下现在Container类对于不同类型的支持情况：1234567891011public class Main &#123; public static void main(String[] args) &#123; Container&lt;String, String&gt; c1 = new Container&lt;String, String&gt;("name", "findingsea"); Container&lt;String, Integer&gt; c2 = new Container&lt;String, Integer&gt;("age", 24); Container&lt;Double, Double&gt; c3 = new Container&lt;Double, Double&gt;(1.1, 2.2); System.out.println(c1.getKey() + " : " + c1.getValue()); System.out.println(c2.getKey() + " : " + c2.getValue()); System.out.println(c3.getKey() + " : " + c3.getValue()); &#125;&#125; 输出： name : findingseaage : 241.1 : 2.2 泛型接口在泛型接口中，生成器是一个很好的理解，看如下的生成器接口定义：123public interface Generator&lt;T&gt; &#123; public T next();&#125; 然后定义一个生成器类来实现这个接口：12345678910public class FruitGenerator implements Generator&lt;String&gt; &#123; private String[] fruits = new String[]&#123;"Apple", "Banana", "Pear"&#125;; @Override public String next() &#123; Random rand = new Random(); return fruits[rand.nextInt(3)]; &#125;&#125; 调用：12345678910public class Main &#123; public static void main(String[] args) &#123; FruitGenerator generator = new FruitGenerator(); System.out.println(generator.next()); System.out.println(generator.next()); System.out.println(generator.next()); System.out.println(generator.next()); &#125;&#125; 输出： BananaBananaPearBanana 泛型方法一个基本的原则是：无论何时，只要你能做到，你就应该尽量使用泛型方法。也就是说，如果使用泛型方法可以取代将整个类泛化，那么应该有限采用泛型方法。下面来看一个简单的泛型方法的定义：12345678910111213public class Main &#123; public static &lt;T&gt; void out(T t) &#123; System.out.println(t); &#125; public static void main(String[] args) &#123; out("findingsea"); out(123); out(11.11); out(true); &#125;&#125; 可以看到方法的参数彻底泛化了，这个过程涉及到编译器的类型推导和自动打包，也就说原来需要我们自己对类型进行的判断和处理，现在编译器帮我们做了。这样在定义方法的时候不必考虑以后到底需要处理哪些类型的参数，大大增加了编程的灵活性。 再看一个泛型方法和可变参数的例子：123456789101112public class Main &#123; public static &lt;T&gt; void out(T... args) &#123; for (T t : args) &#123; System.out.println(t); &#125; &#125; public static void main(String[] args) &#123; out("findingsea", 123, 11.11, true); &#125;&#125; 输出和前一段代码相同，可以看到泛型可以和可变参数非常完美的结合。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Socket通信原理简介(转)]]></title>
    <url>%2F2016%2F11%2F01%2FSocket%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[何谓socket计算机，顾名思义即是用来做计算。因而也需要输入和输出，输入需要计算的条件，输出计算结果。这些输入输出可以抽象为I/O（input output）。Unix的计算机处理IO是通过文件的抽象。计算机不同的进程之间也有输入输出，也就是通信。因此这这个通信也是通过文件的抽象文件描述符来进行。 在同一台计算机，进程之间可以这样通信，如果是不同的计算机呢？网络上不同的计算机，也可以通信，那么就得使用网络套接字（socket）。socket就是在不同计算机之间进行通信的一个抽象。他工作于TCP/IP协议中应用层和传输层之间的一个抽象。如下图： 服务器通信socket保证了不同计算机之间的通信，也就是网络通信。对于网站，通信模型是客户端服务器之间的通信。两个端都建立一个socket对象，然后通过socket对象对数据进行传输。通常服务器处于一个无线循环，等待客户端连接： TCP 三次握手传说的TCP三次握手又是如何体现的呢？什么是三次握手呢? 第一握：首先客户端发送一个syn，请求连接， 第二握：服务器收到之后确认，并发送一个 syn ack应答 第三握：客户端接收到服务器发来的应答之后再给服务器发送建立连接的确定。 用下面的比喻就是C：约么？S：约C：好的约会这样就建立了一个TCP连接会话。如果是要断开连接，大致过程是： 上图也很清晰的表明了三次握手的socket具体过程。 客户端socket对象connect调用之后进行阻塞，此过程发送了一个syn。 服务器内核完成三次握手，即发送syn和ack应答。 客户端socket对象收到服务端发送的应答之后，再发送一个ack给服务器，并返回connect调用，建立连接。 服务器socket对象接受客户端最后一次握手确定ack建立连接。 此时服务端调用accept，则从连接队列中将之前建立的连接取出返回。 至此，客户端和服务器的socket通信连接建立完成，剩下的就是两个端的连接对象收发数据，从而完成网络通信。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop文件系统元数据fsimage和编辑日志edits]]></title>
    <url>%2F2016%2F11%2F01%2FHadoop%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%83%E6%95%B0%E6%8D%AEfsimage%E5%92%8C%E7%BC%96%E8%BE%91%E6%97%A5%E5%BF%97edits%2F</url>
    <content type="text"><![CDATA[https://www.iteblog.com/archives/968]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8大排序算法]]></title>
    <url>%2F2016%2F11%2F01%2F8%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[http://www.cricode.com/3212.html8大排序算法图文讲解 http://blog.csdn.net/hguisu/article/details/7776068八大排序算法原理及实现 排序算法稳定性:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，ri=rj，且ri在rj之前，而在排序后的序列中，ri仍在rj之前，则称这种排序算法是稳定的；否则称为不稳定的。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[朴素贝叶斯分类器的应用]]></title>
    <url>%2F2016%2F11%2F01%2F%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[生活中很多场合需要用到分类，比如新闻分类、病人分类等等。本文介绍朴素贝叶斯分类器（Naive Bayes classifier），它是一种简单有效的常用分类算法。 一、病人分类的例子让我从一个例子开始讲起，你会看到贝叶斯分类器很好懂，一点都不难。某个医院早上收了六个门诊病人，如下表。 症状 职业 疾病 打喷嚏 护士 感冒 打喷嚏 农夫 过敏 头痛 建筑工人 脑震荡 头痛 建筑工人 感冒 打喷嚏 教师 感冒 头痛 教师 脑震荡现在又来了第七个病人，是一个打喷嚏的建筑工人。请问他患上感冒的概率有多大？根据贝叶斯定理： P(A|B) = P(B|A) P(A) / P(B)可得 P(感冒|打喷嚏x建筑工人) = P(打喷嚏x建筑工人|感冒) x P(感冒) / P(打喷嚏x建筑工人)假定”打喷嚏”和”建筑工人”这两个特征是独立的，因此，上面的等式就变成了 P(感冒|打喷嚏x建筑工人) = P(打喷嚏|感冒) x P(建筑工人|感冒) x P(感冒) / P(打喷嚏) x P(建筑工人)这是可以计算的。 P(感冒|打喷嚏x建筑工人) = 0.66 x 0.33 x 0.5 / 0.5 x 0.33 = 0.66因此，这个打喷嚏的建筑工人，有66%的概率是得了感冒。同理，可以计算这个病人患上过敏或脑震荡的概率。比较这几个概率，就可以知道他最可能得什么病。这就是贝叶斯分类器的基本方法：在统计资料的基础上，依据某些特征，计算各个类别的概率，从而实现分类。 二、朴素贝叶斯分类器的公式假设某个体有n项特征（Feature），分别为F1、F2、…、Fn。现有m个类别（Category），分别为C1、C2、…、Cm。贝叶斯分类器就是计算出概率最大的那个分类，也就是求下面这个算式的最大值： P(C|F1F2…Fn) = P(F1F2…Fn|C)P(C) / P(F1F2…Fn)由于 P(F1F2…Fn) 对于所有的类别都是相同的，可以省略，问题就变成了求 P(F1F2…Fn|C)P(C)的最大值。朴素贝叶斯分类器则是更进一步，假设所有特征都彼此独立，因此 P(F1F2…Fn|C)P(C) = P(F1|C)P(F2|C) … P(Fn|C)P(C)上式等号右边的每一项，都可以从统计资料中得到，由此就可以计算出每个类别对应的概率，从而找出最大概率的那个类。虽然”所有特征彼此独立”这个假设，在现实中不太可能成立，但是它可以大大简化计算，而且有研究表明对分类结果的准确性影响不大。下面再通过两个例子，来看如何使用朴素贝叶斯分类器。 三、账号分类的例子本例摘自张洋的《算法杂货铺——分类算法之朴素贝叶斯分类》。根据某社区网站的抽样统计，该站10000个账号中有89%为真实账号（设为C0），11%为虚假账号（设为C1）。 C0 = 0.89 C1 = 0.11接下来，就要用统计资料判断一个账号的真实性。假定某一个账号有以下三个特征： F1: 日志数量/注册天数 F2: 好友数量/注册天数 F3: 是否使用真实头像（真实头像为1，非真实头像为0） F1 = 0.1 F2 = 0.2 F3 = 0请问该账号是真实账号还是虚假账号？方法是使用朴素贝叶斯分类器，计算下面这个计算式的值。 P(F1|C)P(F2|C)P(F3|C)P(C)虽然上面这些值可以从统计资料得到，但是这里有一个问题：F1和F2是连续变量，不适宜按照某个特定值计算概率。一个技巧是将连续值变为离散值，计算区间的概率。比如将F1分解成[0, 0.05]、(0.05, 0.2)、[0.2, +∞]三个区间，然后计算每个区间的概率。在我们这个例子中，F1等于0.1，落在第二个区间，所以计算的时候，就使用第二个区间的发生概率。根据统计资料，可得： P(F1|C0) = 0.5, P(F1|C1) = 0.1 P(F2|C0) = 0.7, P(F2|C1) = 0.2 P(F3|C0) = 0.2, P(F3|C1) = 0.9因此， P(F1|C0) P(F2|C0) P(F3|C0) P(C0) = 0.5 x 0.7 x 0.2 x 0.89 = 0.0623 P(F1|C1) P(F2|C1) P(F3|C1) P(C1) = 0.1 x 0.2 x 0.9 x 0.11 = 0.00198可以看到，虽然这个用户没有使用真实头像，但是他是真实账号的概率，比虚假账号高出30多倍，因此判断这个账号为真。 四、性别分类的例子本例摘自维基百科，关于处理连续变量的另一种方法。下面是一组人类身体特征的统计资料。 性别 身高（英尺） 体重（磅） 脚掌（英寸） 男 6 180 12 男 5.92 190 11 男 5.58 170 12 男 5.92 165 10 女 5 100 6 女 5.5 150 8 女 5.42 130 7 女 5.75 150 9已知某人身高6英尺、体重130磅，脚掌8英寸，请问该人是男是女？根据朴素贝叶斯分类器，计算下面这个式子的值。P(身高|性别) x P(体重|性别) x P(脚掌|性别) x P(性别)这里的困难在于，由于身高、体重、脚掌都是连续变量，不能采用离散变量的方法计算概率。而且由于样本太少，所以也无法分成区间计算。怎么办？这时，可以假设男性和女性的身高、体重、脚掌都是正态分布，通过样本计算出均值和方差，也就是得到正态分布的密度函数。有了密度函数，就可以把值代入，算出某一点的密度函数的值。比如，男性的身高是均值5.855、方差0.035的正态分布。所以，男性的身高为6英尺的概率的相对值等于1.5789（大于1并没有关系，因为这里是密度函数的值，只用来反映各个值的相对可能性）。 有了这些数据以后，就可以计算性别的分类了。 P(身高=6|男) x P(体重=130|男) x P(脚掌=8|男) x P(男) = 6.1984 x e-9 P(身高=6|女) x P(体重=130|女) x P(脚掌=8|女) x P(女) = 5.3778 x e-4可以看到，女性的概率比男性要高出将近10000倍，所以判断该人为女性。 转自：http://www.ruanyifeng.com/blog/2013/12/naive_bayes_classifier.html]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 序列化 (Serializable) 的作用]]></title>
    <url>%2F2016%2F11%2F01%2FJava%20%E5%BA%8F%E5%88%97%E5%8C%96%20(Serializable)%20%E7%9A%84%E4%BD%9C%E7%94%A8%2F</url>
    <content type="text"><![CDATA[序列化是什么：序列化就是将一个对象的状态（各个属性量）保存起来，然后在适当的时候再获得。序列化分为两大部分：序列化和反序列化。序列化是这个过程的第一部分，将数据分解成字节流，以便存储在文件中或在网络上传输。反序列化就是打开字节流并重构对象。对象序列化不仅要将基本数据类型转换成字节表示，有时还要恢复数据。恢复数据要求有恢复数据的对象实例 序列化的什么特点：如果某个类能够被序列化，其子类也可以被序列化。声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态， transient代表对象的临时数据。 什么时候使用序列化：一：对象序列化可以实现分布式对象。主要应用例如：RMI要利用对象序列化运行远程主机上的服务，就像在本地机上运行对象时一样。二：java对象序列化不仅保留一个对象的数据，而且递归保存对象引用的每个对象的数据。可以将整个对象层次写入字节流中，可以保存在文件中或在网络连接上传递。利用对象序列化可以进行对象的”深复制”，即复制对象本身及引用的对象本身。序列化一个对象可能得到整个对象序列。 例如远程方法的变量和返回值必须是可序列化的，因为变量和返回值必须被打包并通过网络传输。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RPC、CORBA、WebService之区别[转]]]></title>
    <url>%2F2016%2F11%2F01%2FRPC%E3%80%81CORBA%E3%80%81WebService%E4%B9%8B%E5%8C%BA%E5%88%AB%5B%E8%BD%AC%5D%2F</url>
    <content type="text"><![CDATA[RPC是由Sun发明的远程过程调用协议，是第一种真正的分布式应用模型。Windows上使用的R PC是DCERPC的扩展。严格地说，RPC是一种逻辑上的协议，它可以使用Socket、Named Pipe等更低级的协议完成通信任务。现在Windows系统本身的大多数涉及通信和分布式应用 的服务程序都在使用RPC协议。这也就是为什么前一段时间RPC漏洞会给Windows带来那么大麻烦的原因所在了。CORBA从概念上扩展了RPC。用RPC开发的分布式应用是面向过程的，而CORBA是完全面向对象的。CORBA协议在许多大型企业级应用中使用得很多。因此，CORBA对RPC的扩展就像C++语言 对C语言的扩展一样。 DCOM是微软自己开发的，面向对象的分布式应用模型。它的设计目标和CORBA一样，但它远 没有CORBA那么健壮和丰富，因此，真正在企业级应用系统中使用DCOM协议的并不太多。 在企业级软件开发中，还经常使用一种类似于e-mail的异步通信方式——消息队列。微软、 IBM等公司都由相应的消息队列产品，IBM的MQ Series是目前业界比较成熟的一种，应用很广。 Web Service是在开放的HTTP协议和XML语言的基础上构建的，类似于CORBA或RPC的一种新的分布式应用模型。与传统的RPC和CORBA相比，Web Service因为使用XML来描述所有数据，具有 通用、可交互的优势，因为使用HTTP协议来传输数据，具有跨平台、跨网络的特点。微软 的.NET平台和Sun的J2EE平台都支持Web Service。 因此，总地说来，可以使用的分布式技术很多，我们可以根据需要选用。比如说，最简单的 通信，可以直接用Socket编程来实现；对分布式要求较高的应用，可以考虑使用RPC；在面 向对象的环境下，可以选用CORBA或DCOM；当我们要在不同的网络和平台之间搭建开放的分 布式应用系统时，Web Service就是最好的选择了。 我觉得，学习这些技术要遵循一定的顺序，循序渐进地学习。必须先掌握网络通信和TCP/IP 协议的基础知识，这是前提条件。然后可以学习Socket这样最基本的通信编程技术，接着可 以选择学习RPC、CORBA、DCOM中的一种，然后，在充分了解XML语言和HTTP协议的基础上， 掌握Web Service就非常容易了。你可以按照这样的思路去找每个领域里的书来看——我一时也想不出什么具体的书名。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA回调机制(CallBack)详解]]></title>
    <url>%2F2016%2F11%2F01%2FJAVA%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6(CallBack)%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[序言最近学习java，接触到了回调机制(CallBack)。初识时感觉比较混乱，而且在网上搜索到的相关的讲解，要么一言带过，要么说的比较单纯的像是给CallBack做了一个定义。当然了，我在理解了回调之后，再去看网上的各种讲解，确实没什么问题。但是，对于初学的我来说，缺了一个循序渐进的过程。此处，将我对回调机制的个人理解，按照由浅到深的顺序描述一下，如有不妥之处，望不吝赐教！开始之前，先想象一个场景：幼稚园的小朋友刚刚学习了10以内的加法。 第1章. 故事的缘起幼师在黑板上写一个式子 “1 + 1 = ”，由小明同学来填空。由于已经学习了10以内的加法，小明同学可以完全靠自己来计算这个题目，模拟该过程的代码如下：1234567891011121314151617181920212223242526public class Student&#123; private String name = null; public Student(String name) &#123; // TODO Auto-generated constructor stub this.name = name; &#125; public void setName(String name) &#123; this.name = name; &#125; private int calcADD(int a, int b) &#123; return a + b; &#125; public void fillBlank(int a, int b) &#123; int result = calcADD(a, b); System.out.println(name + "心算:" + a + " + " + b + " = " + result); &#125;&#125; 小明同学在填空(fillBalnk)的时候，直接心算(clacADD)了一下，得出结果是2，并将结果写在空格里。测试代码如下：12345678910public class Test&#123; public static void main(String[] args) &#123; int a = 1; int b = 1; Student s = new Student("小明"); s.fillBlank(a, b); &#125;&#125; 运行结果如下：小明心算:1 + 1 = 2该过程完全由Student类的实例对象单独完成，并未涉及回调机制。 第2章. 幼师的找茬课间，幼师突发奇想在黑板上写了“168 + 291 = ”让小明完成，然后回办公室了。花擦！为什么所有老师都跟小明过不去啊？明明超纲了好不好！这时候小明同学明显不能再像上面那样靠心算来完成了，正在懵逼的时候，班上的小红同学递过来一个只能计算加法的计算器（奸商啊）！！！！而小明同学恰好知道怎么用计算器，于是通过计算器计算得到结果并完成了填空。计算器的代码为：1234567public class Calculator&#123; public int add(int a, int b) &#123; return a + b; &#125;&#125; 修改Student类，添加使用计算器的方法：1234567891011121314151617181920212223242526272829303132public class Student &#123; private String name = null; public Student(String name) &#123; // TODO Auto-generated constructor stub this.name = name; &#125; public void setName(String name) &#123; this.name = name; &#125; @SuppressWarnings("unused") private int calcADD(int a, int b) &#123; return a + b; &#125; private int useCalculator(int a, int b) &#123; return new Calculator().add(a, b); &#125; public void fillBlank(int a, int b) &#123; int result = useCalculator(a, b); System.out.println(name + "使用计算器:" + a + " + " + b + " = " + result); &#125;&#125; 测试代码如下：12345678910public class Test&#123; public static void main(String[] args) &#123; int a = 168; int b = 291; Student s = new Student("小明"); s.fillBlank(a, b); &#125;&#125; 运行结果如下：小明使用计算器:168 + 291 = 459该过程中仍未涉及到回调机制，但是部分小明的部分工作已经实现了转移，由计算器来协助实现。 3. 幼师回来了发现小明完成了3位数的加法，老师觉得小明很聪明，是个可塑之才。于是又在黑板上写下了“26549 + 16487 = ”，让小明上课之前完成填空，然后又回办公室了。小明看着教室外面撒欢儿的小伙伴，不禁悲从中来。再不出去玩，这个课间就要废了啊！！！！ 看着小红再一次递上来的计算器，小明心生一计：让小红代劳。小明告诉小红题目是“26549 + 16487 = ”，然后指出填写结果的具体位置，然后就出去快乐的玩耍了。这里，不把小红单独实现出来，而是把这个只能算加法的计算器和小红看成一个整体，一个会算结果还会填空的超级计算器。这个超级计算器需要传的参数是两个加数和要填空的位置，而这些内容需要小明提前告知，也就是小明要把自己的一部分方法暴漏给小红，最简单的方法就是把自己的引用和两个加数一块告诉小红。因此，超级计算器的add方法应该包含两个操作数和小明自身的引用，代码如下：12345678public class SuperCalculator&#123; public void add(int a, int b, Student xiaoming) &#123; int result = a + b; xiaoming.fillBlank(a, b, result); &#125;&#125; 小明这边现在已经不需要心算，也不需要使用计算器了，因此只需要有一个方法可以向小红寻求帮助就行了，代码如下：12345678910111213141516171819202122232425public class Student &#123; private String name = null; public Student(String name) &#123; // TODO Auto-generated constructor stub this.name = name; &#125; public void setName(String name) &#123; this.name = name; &#125; public void callHelp (int a, int b) &#123; new SuperCalculator().add(a, b, this); &#125; public void fillBlank(int a, int b, int result) &#123; System.out.println(name + "求助小红计算:" + a + " + " + b + " = " + result); &#125;&#125; 测试代码如下：12345678910public class Test&#123; public static void main(String[] args) &#123; int a = 26549; int b = 16487; Student s = new Student("小明"); s.callHelp(a, b); &#125;&#125; 运行结果为：小明求助小红计算:26549 + 16487 = 43036执行流程为：小明通过自身的callHelp方法调用了小红（new SuperCalculator()）的add方法，在调用的时候将自身的引用（this）当做参数一并传入，小红在使用计算器得出结果之后，回调了小明的fillBlank方法，将结果填在了黑板上的空格里。灯灯灯！到这里，回调功能就正式登场了，小明的fillBlank方法就是我们常说的回调函数。通过这种方式，可以很明显的看出，对于完成老师的填空题这个任务上，小明已经不需要等待到加法做完且结果填写在黑板上才能去跟小伙伴们撒欢了，填空这个工作由超级计算器小红来做了。回调的优势已经开始体现了。 第4章. 门口的婆婆幼稚园的门口有一个头发花白的老婆婆，每天风雨无阻在那里摆着地摊卖一些快过期的垃圾食品。由于年纪大了，脑子有些糊涂，经常算不清楚自己挣了多少钱。有一天，她无意间听到了小明跟小伙伴们吹嘘自己如何在小红的帮助下与幼师斗智斗勇。于是，婆婆决定找到小红牌超级计算器来做自己的小帮手，并提供一包卫龙辣条作为报酬。小红经不住诱惑，答应了。回看一下上一章的代码，我们发现小红牌超级计算器的add方法需要的参数是两个整型变量和一个Student对象，但是老婆婆她不是学生，是个小商贩啊，这里肯定要做修改。这种情况下，我们很自然的会想到继承和多态。如果让小明这个学生和老婆婆这个小商贩从一个父类进行继承，那么我们只需要给小红牌超级计算器传入一个父类的引用就可以啦。不过，实际使用中，考虑到java的单继承，以及不希望把自身太多东西暴漏给别人，这里使用从接口继承的方式配合内部类来做。换句话说，小红希望以后继续向班里的小朋友们提供计算服务，同时还能向老婆婆提供算账服务，甚至以后能够拓展其他人的业务，于是她向所有的顾客约定了一个办法，用于统一的处理，也就是自己需要的操作数和做完计算之后应该怎么做。这个统一的方法，小红做成了一个接口，提供给了大家，代码如下：1234public interface doJob&#123; public void fillBlank(int a, int b, int result);&#125; 因为灵感来自帮小明填空，因此小红保留了初心，把所有业务都当做填空（fillBlank）来做。同时，小红修改了自己的计算器，使其可以同时处理不同的实现了doJob接口的人，代码如下：12345678 public class SuperCalculator&#123; public void add(int a, int b, doJob customer) &#123; int result = a + b; customer.fillBlank(a, b, result); &#125; &#125; 小明和老婆婆拿到这个接口之后，只要实现了这个接口，就相当于按照统一的模式告诉小红得到结果之后的处理办法，按照之前说的使用内部类来做，代码如下： 小明的：1234567891011121314151617181920212223242526272829303132public class Student &#123; private String name = null; public Student(String name) &#123; // TODO Auto-generated constructor stub this.name = name; &#125; public void setName(String name) &#123; this.name = name; &#125; public class doHomeWork implements doJob &#123; @Override public void fillBlank(int a, int b, int result) &#123; // TODO Auto-generated method stub System.out.println(name + "求助小红计算:" + a + " + " + b + " = " + result); &#125; &#125; public void callHelp (int a, int b) &#123; new SuperCalculator().add(a, b, new doHomeWork()); &#125;&#125; 老婆婆的：1234567891011121314151617181920212223242526272829303132public class Seller &#123; private String name = null; public Seller(String name) &#123; // TODO Auto-generated constructor stub this.name = name; &#125; public void setName(String name) &#123; this.name = name; &#125; public class doHomeWork implements doJob &#123; @Override public void fillBlank(int a, int b, int result) &#123; // TODO Auto-generated method stub System.out.println(name + "求助小红算账:" + a + " + " + b + " = " + result + "元"); &#125; &#125; public void callHelp (int a, int b) &#123; new SuperCalculator().add(a, b, new doHomeWork()); &#125;&#125; 测试程序如下：123456789101112131415public class Test &#123; public static void main(String[] args) &#123; int a = 56; int b = 31; int c = 26497; int d = 11256; Student s1 = new Student("小明"); Seller s2 = new Seller("老婆婆"); s1.callHelp(a, b); s2.callHelp(c, d); &#125;&#125; 运行结果如下：小明求助小红计算:56 + 31 = 87老婆婆求助小红算账:26497 + 11256 = 37753元最后的话可以很明显的看到，小红已经把这件事情当做一个事业来做了，看她给接口命的名字doJob就知道了。有人也许会问，为什么老婆婆摆摊能挣那么多钱？ 你的关注点有问题好吗！！这里聊的是回调机制啊！！我只知道，后来小红的业务不断扩大，终于在幼稚园毕业之前，用挣到的钱买了人生的第一套房子。完！！！]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Ant build.xml详解]]></title>
    <url>%2F2016%2F11%2F01%2FJava%20Ant%20build.xml%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一、ant的简要说明1、什么是ant：ant是构建工具2、什么是构建：概念到处可查到，形象来说，你要把代码从某个地方拿来，编译，再拷贝到某个地方去等等操作，当然不仅与此，但是主要用来干这个3、ant的好处： 跨平台 —因为ant是使用java实现的，所以它跨平台 使用简单 —与ant的兄弟make比起来 语法清晰—同样是和make相比 功能强大—ant能做的事情很多，可能你用了很久，你仍然不知道它能有多少功能。当你自己开发一些ant插件的时候，你会发现它更多的功能。 4、ant的兄弟make：ant做的很多事情，大部分是曾经有一个叫make的所做的，不过对象不同，make更多应用于c/c++ ,ant更多应用于Java。当然这不是一定的，但大部分人如此。 二、构建ant环境要使用ant首先要构建一个ant环境，步骤很简单： 1)安装jdk，设置JAVA_HOME ,PATH ,CLASS_PATH(这些应该是看这篇文章的人应该知道的) 2)下载ant 地址http://www.apache.org/找一个你喜欢的版本，或者干脆最新的版本 3)解压ant 你得到的是一个压缩包，解压缩它，并把它放在一个尽量简单的目录，例如D:\ant-1.6虽然你不一 定要这么做，但这么做是有好处的。 4)设置ANT_HOME, PATH中添加ANT_HOME目录下的bin目录(我设置的：ANT_HOME:D:\apache-ant-1.8.2,PATH:%ANT_HOME%\bin) 5)测试一下你的设置,开始—&gt;运行—&gt;cmd进入命令行—&gt;键入 ant 回车,如果看到Buildfile: build.xml does not exist!Build failed那么恭喜你你已经完成ant的设置 三、体验ant就像每个语言都有HelloWorld一样，一个最简单的应用能让人感受一下Ant1、首先你要知道你要干什么，我现在想做的事情是：编写一些程序、编译它们、把它打包成jar包、把他们放在应该放置的地方、运行它们这里为了简单起见只写一个程序，就是HelloWorld.java程序代码如下：123456package test.ant;public class HelloWorld&#123;public static void main(String[] args)&#123; System.out.println("Hello world1");&#125;&#125; 2，为了达到上边的目的，你可以手动的用javac 、copy 、jar、java来完成，但是考虑一下如果你有成百上千个类，在多次调试，部署的时候，一次次的javac 、copy、jar、java那将是一份辛苦的工作。现在看看ant怎么优雅的完成它们。要运行ant需要有一个build.xml虽然不一定要叫这个名字，但是建议你这么做下边就是一个完整的build.xml，然后我们来详细的解释每一句1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;project name="HelloWorld" default="run" basedir="."&gt;&lt;property name="src" value="src"/&gt;&lt;property name="dest" value="classes"/&gt;&lt;property name="hello_jar" value="hello1.jar"/&gt;&lt;target name="init"&gt; &lt;mkdir dir="$&#123;dest&#125;"/&gt;&lt;/target&gt;&lt;target name="compile" depends="init"&gt; &lt;javac srcdir="$&#123;src&#125;" destdir="$&#123;dest&#125;"/&gt;&lt;/target&gt;&lt;target name="build" depends="compile"&gt; &lt;jar jarfile="$&#123;hello_jar&#125;" basedir="$&#123;dest&#125;"/&gt;&lt;/target&gt;&lt;target name="run" depends="build"&gt; &lt;java classname="test.ant.HelloWorld" classpath="$&#123;hello_jar&#125;"/&gt;&lt;/target&gt;&lt;target name="clean"&gt; &lt;delete dir="$&#123;dest&#125;" /&gt; &lt;delete file="$&#123;hello_jar&#125;" /&gt;&lt;/target&gt;&lt;target name="rerun" depends="clean,run"&gt; &lt;ant target="clean" /&gt; &lt;ant target="run" /&gt;&lt;/target&gt;&lt;/project&gt; 解释：1&lt;?xml version="1.0" encoding="UTF-8" ?&gt; build.xml中的第一句话，没有实际的意义12&lt;project name="HelloWorld" default="run" basedir="."&gt;&lt;/project&gt; ant的所有内容必须包含在这个里边，name是你给它取的名字，basedir故名思意就是工作的根目录 .代表当前目录。default代表默认要做的事情。1&lt;property name="src" value="src"/&gt; 类似程序中的变量，为什么这么做想一下变量的作用123&lt;target name="compile" depends="init"&gt; &lt;javac srcdir="$&#123;src&#125;" destdir="$&#123;dest&#125;"/&gt;&lt;/target&gt; 把你想做的每一件事情写成一个target ，它有一个名字，depends是它所依赖的target，在执行这个target 例如这里的compile之前ant会先检查init是否曾经被执行过，如果执行过则直接直接执行compile，如果没有则会先执行它依赖的target例如这里的init，然后在执行这个target。如我们的计划编译：123&lt;target name="compile" depends="init"&gt;&lt;javac srcdir="$&#123;src&#125;" destdir="$&#123;dest&#125;"/&gt;&lt;/target&gt; 做jar包:123&lt;target name="build" depends="compile"&gt;&lt;jar jarfile="$&#123;hello_jar&#125;" basedir="$&#123;dest&#125;"/&gt;&lt;/target&gt; 运行：123&lt;target name="run" depends="build"&gt;&lt;java classname="test.ant.HelloWorld" classpath="$&#123;hello_jar&#125;"/&gt;&lt;/target&gt; 为了不用拷贝，我们可以在最开始定义好目标文件夹，这样ant直接把结果就放在目标文件夹中了新建文件夹:123&lt;target name="init"&gt;&lt;mkdir dir="$&#123;dest&#125;"/&gt;&lt;/target&gt; 为了更多一点的功能体现，又加入了两个target删除生成的文件1234&lt;target name="clean"&gt;&lt;delete dir="$&#123;dest&#125;" /&gt;&lt;delete file="$&#123;hello_jar&#125;" /&gt;&lt;/target&gt; 再次运行，这里显示了如何在一个target里边调用其他的target1234&lt;target name="rerun" depends="clean,run"&gt;&lt;ant target="clean" /&gt;&lt;ant target="run" /&gt;&lt;/target&gt; 好了，解释完成了，下边检验一下你的ant吧新建一个src的文件夹，然后把HelloWorld.java按照包目录放进去做好build.xml文件,最好将这些放到一个文件夹中,在cmd中进入该文件夹,在命令行下键入ant ,你会发现一个个任务都完成了。每次更改完代码只需要再次键入ant有的时候我们可能并不想运行程序，只想执行这些步骤中的某一两个步骤，例如我只想重新部署而不想运行，键入1ant build ant中的每一个任务都可以这样调用ant + target name好了，这样一个简单的ant任务完成了。 四、什么时候使用ant也许你听到别人说起ant，一时冲动准备学习一下ant，当你看完了上边的第一个实例，也许你感觉ant真好，也许你感觉ant不过如此，得出这些结论都不能说错，虽然ant很好用，但并不是在任何情况下都是最好的选择，例如windows上有更多更简单，更容易使用的工具，比如eclipse+myeclipse eclipse+wtp等等，无论是编译，部署，运行使用起来比ant更容易方便。但有些情况则是ant发挥的好地方： 1、服务器上部署的时候当你的程序开发完成，部署人员要部署在服务器上的时候，总不能因为因为安装一个程序就配置一个eclipse+myeclipse吧，ant在这个时候是个很好的选择，因为它小巧，容易配置，你带着你写好的build.xml到任何一台服务器上，只需要做简单的修改（一些设定，例如目录），然后一两个命令完成，这难道不是一件美好的事情吗。 2、linux上很多时候是这样的，程序开发是在windows下，但是程序要在linux或者unix上运行，在linux或者在unix(特别是unix上)部署是个麻烦的事情，这个时候ant的特点又出来了，因为ant是跨平台的，你在build.xml可以在大多数操作系统上使用，基本不需要修改。 3、当服务器维护者不懂编程的时候很多人都有过这样的经历，使用你们程序的人，并不懂得写程序。你得程序因为版本更新，因为修正bug需要一次又一次得重新部署。这个时候你会发现教一个人是如此得困难。但是有ant后，你只需要告诉他，输入ant xxx等一两个命令，一切ok. 以上是我遇到得一些情况。看完以上得情况，好好考虑一下，你是否需要使用ant，如果是继续。 五、进一步学习一个稍微复杂一点点的ant在实际的工作过程中可能会出现以下一些情况，一个项目分成很多个模块，每个小组或者部门负责一个模块，为了测试，他们自己写了一个build.xml,而你负责把这些模块组合到一起使用，写一个build.xml这个时候你有两种选择： 1、自己重新写一个build.xml ，这将是一个麻烦的事情 2、尽量利用他们已经写好的build.xml，减少自己的工作 举个例子：假设你下边有三个小组，每个小组负责一个部分，他们分别有一个src 和一个写好的build.xml这个时候你拿到他们的src，你需要做的是建立三个文件夹src1 ,src2, src3分别把他们的src和build.xml放进去，然后写一个build.xml12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;project name="main" default="build" basedir="."&gt;&lt;property name="bin" value="$&#123;basedir&#125;\bin" /&gt; &lt;property name="src1" value="$&#123;basedir&#125;\src1" /&gt; &lt;property name="src2" value="$&#123;basedir&#125;\src2" /&gt; &lt;property name="src3" value="$&#123;basedir&#125;\src3" /&gt; &lt;target name="init"&gt; &lt;mkdir dir="$&#123;bin&#125;" /&gt;&lt;/target&gt;&lt;target name="run"&gt; &lt;ant dir="$&#123;src1&#125;" target="run" /&gt; &lt;ant dir="$&#123;src2&#125;" target="run" /&gt; &lt;ant dir="$&#123;src3&#125;" target="run" /&gt;&lt;/target&gt;&lt;target name="clean"&gt; &lt;ant dir="$&#123;src1&#125;" target="clean" /&gt; &lt;ant dir="$&#123;src2&#125;" target="clean" /&gt; &lt;ant dir="$&#123;src3&#125;" target="clean" /&gt;&lt;/target&gt; &lt;target name="build" depends="init,call"&gt; &lt;copy todir="$&#123;bin&#125;"&gt; &lt;fileset dir="$&#123;src1&#125;"&gt; &lt;include name="*.jar" /&gt; &lt;/fileset&gt; &lt;fileset dir="$&#123;src2&#125;"&gt; &lt;include name="*.jar" /&gt; &lt;/fileset&gt; &lt;fileset dir="$&#123;src3&#125;"&gt; &lt;include name="*.jar" /&gt; &lt;/fileset&gt; &lt;/copy&gt;&lt;/target&gt;&lt;target name="rebuild" depends="build,clean"&gt; &lt;ant target="clean" /&gt; &lt;ant target="build" /&gt;&lt;/target&gt;&lt;/project&gt; ok你的任务完成了。 ok,上边你完成了任务，但是你是否有些感触呢，在那些build.xml中，大多数是重复的，而且更改一次目录需要更改不少东西。是否能让工作做的更好一点呢，答案是肯定的。引入两个东西： 1、propery 2、xml include 这两个东西都有一个功能，就是能把build.xml中中的内容分离出来，共同使用除此之外它们各有特点：propery的特点是维护简单，只需要简单的键值对，因为并不是所有人都喜欢xml的格式xml include的特点是不单可以提取出属性来，连target也可以。还是以前的例子：例如我们想把src1 src2 src3这三个属性从xml中提出来，可以新建一个文件叫all.properties里边的内容src1=D:\study\ant\src1src2=D:\study\ant\src2src3=D:\study\ant\src3然后你的build.xml文件可以这样写，别人只需要更改配置文件，而不许要更改你的build.xml文件了12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;project name="main" default="build" basedir="."&gt;&lt;property file="all.properties" /&gt; &lt;property name="bin" value="$&#123;basedir&#125;\bin" /&gt; &lt;target name="init"&gt; &lt;mkdir dir="$&#123;bin&#125;" /&gt;&lt;/target&gt;&lt;target name="run"&gt; &lt;ant dir="$&#123;src1&#125;" target="run" /&gt; &lt;ant dir="$&#123;src2&#125;" target="run" /&gt; &lt;ant dir="$&#123;src3&#125;" target="run" /&gt;&lt;/target&gt;&lt;target name="clean"&gt; &lt;ant dir="$&#123;src1&#125;" target="clean" /&gt; &lt;ant dir="$&#123;src2&#125;" target="clean" /&gt; &lt;ant dir="$&#123;src3&#125;" target="clean" /&gt;&lt;/target&gt; &lt;target name="build" depends="init,call"&gt; &lt;copy todir="$&#123;bin&#125;"&gt; &lt;fileset dir="$&#123;src1&#125;"&gt; &lt;include name="*.jar" /&gt; &lt;/fileset&gt; &lt;fileset dir="$&#123;src2&#125;"&gt; &lt;include name="*.jar" /&gt; &lt;/fileset&gt; &lt;fileset dir="$&#123;src3&#125;"&gt; &lt;include name="*.jar" /&gt; &lt;/fileset&gt; &lt;/copy&gt;&lt;/target&gt;&lt;target name="rebuild" depends="build,clean"&gt; &lt;ant target="clean" /&gt; &lt;ant target="build" /&gt;&lt;/target&gt;&lt;target name="test"&gt; &lt;ant dir="$&#123;src1&#125;" target="test" /&gt; &lt;ant dir="$&#123;src2&#125;" target="test" /&gt; &lt;ant dir="$&#123;src3&#125;" target="test" /&gt;&lt;/target&gt;&lt;/project&gt; 如果你自己看的话你会看到这样一个target12345&lt;target name="test"&gt;&lt;ant dir="$&#123;src1&#125;" target="test" /&gt;&lt;ant dir="$&#123;src2&#125;" target="test" /&gt;&lt;ant dir="$&#123;src3&#125;" target="test" /&gt;&lt;/target&gt; 有的时候你想给每个小组的build.xml加入几个target，一种做法是每个里边写，然后在这里调用但是有一种更好的方法。你可以写一个include.xml文件，内容如下123456&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;property name="src" value="src"/&gt;&lt;property name="dest" value="classes"/&gt;&lt;target name="test" &gt;&lt;ant target="run" /&gt;&lt;/target&gt; 然后更改你三个小组的build.xml文件,每个里边加入如下内容12345&lt;!--include a xml file ,it can be common propery ,can be also a target --&gt;&lt;!DOCTYPE project [&lt;!ENTITY share-variable SYSTEM "file:../include.xml"&gt;]&gt;&amp;share-variable; 变成如下的样子这个时候，你只要在include.xml添加propery , 添加target，三个build.xml会同时添加这些propery和target而且不会让三个组的build.xml变得更复杂。123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!--include a xml file ,it can be common propery ,can be also a target --&gt;&lt;!DOCTYPE project [&lt;!ENTITY share-variable SYSTEM "file:../include.xml"&gt;]&gt;&lt;project name="HelloWorld" default="run" basedir="."&gt;&lt;!--use the include --&gt;&amp;share-variable;&lt;!--defined the property--&gt;&lt;!--via include&lt;property name="src" value="src"/&gt;&lt;property name="dest" value="classes"/&gt;--&gt;&lt;property name="hello_jar" value="hello1.jar"/&gt;&lt;!--define the op--&gt;&lt;target name="init"&gt; &lt;mkdir dir="$&#123;dest&#125;"/&gt;&lt;/target&gt;&lt;target name="compile" depends="init"&gt; &lt;javac srcdir="$&#123;src&#125;" destdir="$&#123;dest&#125;"/&gt;&lt;/target&gt;&lt;target name="build" depends="compile"&gt; &lt;jar jarfile="$&#123;hello_jar&#125;" basedir="$&#123;dest&#125;"/&gt;&lt;/target&gt;&lt;target name="run" depends="build"&gt; &lt;java classname="test.ant.HelloWorld" classpath="$&#123;hello_jar&#125;"/&gt;&lt;/target&gt;&lt;target name="clean"&gt; &lt;delete dir="$&#123;dest&#125;" /&gt; &lt;delete file="$&#123;hello_jar&#125;" /&gt;&lt;/target&gt;&lt;target name="rerun" depends="clean,run"&gt; &lt;ant target="clean" /&gt; &lt;ant target="run" /&gt;&lt;/target&gt;&lt;/project&gt; 掌握了上边的那些内容之后，你就知道如何去写一个好的ant，但是你会发现当你真的想去做的时候，你不能马上作出好的build.xml，因为你知道太少的ant的默认提供的命令.这个时候如果你想完成任务，并提高自己，有很多办法： 1、很多开源的程序都带有build.xml，看看它们如何写的 2、ant的document，里边详细列写了ant的各种默认命令，及其丰富 3、google，永远不要忘记它 ok,在这之后随着你写的ant build越来越多，你知道的命令就越多，ant在你的手里也就越来越强大了。这个是一个慢慢积累的过程。 ant的例子很好找，各种开源框架都会带有一个build.xml仔细看看，会有很大收获另外一个经常会用到的，但是在开源框架的build.xml一般没有的是cvs如果使用的是远程的cvs，可以这样使用1234567891011121314&lt;xml version="1.0" encoding="utf-8"?&gt;&lt;project&gt; &lt;property name="cvsroot" value=":pserver:wang:@192.168.1.2:/cvsroot"/&gt; &lt;property name="basedir" value="/tmp/testant/"/&gt; &lt;property name="cvs.password" value="wang"/&gt; &lt;property name="cvs.passfile" value="$&#123;basedir&#125;/ant.cvspass"/&gt; &lt;target name="initpass"&gt; &lt;cvspass cvsroot="$&#123;cvsroot&#125;" password="$&#123;cvs.password&#125;" passfile="$&#123;cvs.passfile&#125;"/&gt; &lt;/target&gt; &lt;target name="checkout" depends="initpass"&gt; &lt;cvs cvsroot="$&#123;cvsroot&#125;" command="checkout" cvsrsh="ssh" package="myproject" dest="$&#123;basedir&#125;" passfile="$&#123;cvs.passfile&#125;"/&gt; &lt;/target&gt;&lt;/project&gt; 在eclipse里边先天支持ant，所以你可以在eclipse里边直接写build.xml因为eclipse提供了提示功能，自动补充功能，它能让你事半功倍。使用方法，只需要建立一个工程，然后建立一个叫build.xml的文件。然后就可以在里边写你的ant build了但是时刻记住http://www.apache.org/永远能找到你需要的东西]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MapReduce]]></title>
    <url>%2F2016%2F11%2F01%2FMapReduce%2F</url>
    <content type="text"><![CDATA[MapReduce是Google提出的一个软件架构，用于大规模数据集（大于1TB）的并行运算。概念“Map（映射）”和“Reduce（归纳）”，及他们的主要思想，都是从函数式编程语言借来的，还有从矢量编程语言借来的特性。[1]当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归纳）函数，用来保证所有映射的键值对中的每一个共享相同的键组。简单来说，一个映射函数就是对一些独立元素组成的概念上的列表（例如，一个测试成绩的列表）的每一个元素进行指定的操作（比如，有人发现所有学生的成绩都被高估了一分，他可以定义一个“减一”的映射函数，用来修正这个错误。）。事实上，每个元素都是被独立操作的，而原始列表没有被更改，因为这里创建了一个新的列表来保存新的答案。这就是说，Map操作是可以高度并行的，这对高性能要求的应用以及并行计算领域的需求非常有用。而归纳操作指的是对一个列表的元素进行适当的合并（继续看前面的例子，如果有人想知道班级的平均分该怎么做？他可以定义一个归纳函数，通过让列表中的奇数（odd）或偶数（even）元素跟自己的相邻的元素相加的方式把列表减半，如此递归运算直到列表只剩下一个元素，然后用这个元素除以人数，就得到了平均分）。虽然他不如映射函数那么并行，但是因为归纳总是有一个简单的答案，大规模的运算相对独立，所以归纳函数在高度并行环境下也很有用。 MapReduce通过把对数据集的大规模操作分发给网络上的每个节点实现可靠性；每个节点会周期性的把完成的工作和状态的更新报告回来。如果一个节点保持沉默超过一个预设的时间间隔，主节点（类同Google档案系统中的主服务器）记录下这个节点状态为死亡，并把分配给这个节点的数据发到别的节点。每个操作使用命名文件的不可分割操作以确保不会发生并行线程间的冲突；当文件被改名的时候，系统可能会把他们复制到任务名以外的另一个名字上去。（避免副作用）。归纳操作工作方式很类似，但是由于归纳操作在并行能力较差，主节点会尽量把归纳操作调度在一个节点上，或者离需要操作的数据尽可能近的节点上了；这个特性可以满足Google的需求，因为他们有足够的带宽，他们的内部网络没有那么多的机器。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Hadoop技术内幕》读书心得]]></title>
    <url>%2F2016%2F11%2F01%2F%E3%80%8AHadoop%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一本比较偏重技术的书，介绍了很多的技术细节，所以只是涉猎的看了一下。 一、Hadoop的基本原理Hadoop现在已经被看成大数据分析的“神器”。Hadoop有三大重要的模块，即基础公共库、HDFS（分布式文件系统）实现和MapReduce实现（分布式计算框架）；MapReduce由两个阶段组成：Map和Reduce。通常而言，用户需要处理的数据均以文件形式存储到HDFS上！而非机构化的数据。 1、一个例子 split的多少决定了Map Task的数目，因为每个split会交由一个Map Task处理。 Partitioner的作用是对Mapper产生的中间结果进行分片，以便将同一分组的数据交给同一Reduce处理，它直接影响Reduce阶段的负载均衡。 2、编程步骤MapReduce能够解决的问题有一个共同的特点：任务可以被分解为多个子问题，且这些子问题相对独立，彼此间不会有牵制，待并行处理完这些子问题后，任务便被解决。MapReduce编程模型给出了其分布式编程方法，共5个步骤：1）迭代(iteration)。遍历输入数据，并将之解析成Key/value对；2）将输入Key/value映射（Map）成另外一些Key/value对；3）依据Key对中间数据进行分组（Grouping）；4）以组为单位对数据进行规约（Reduce）；5）迭代。将最终产生的Key/value对保存到输出文件中。 3、MapReduce运行过程Map Task分解成Read、Map、Collect、Spill和Combine五个阶段，讲Reduce Task分解成Shuffle、Merge、Sort、Reduce和Write五个阶段。 4、Hadoop原理在Hadoop MapReduce中，不同组件的通信协议均是基于RPC的，它们就像系统的“骨架”，支撑起整个MapReduce系统。 RPC： Remot Procedure Call，是一种常用的分布式网络通讯协议。JDK中的RMI（Remote Method Invocation）也是一种RPC框架。 Stub程序：客户端和服务器端均包含Stub程序，可将之看做代理程序。它使得远程函数调用表现的跟本地调用一样，对用户程序完全透明。 RPC 通用架构 IDL：开源RPC框架提供了一套接口描述语言（Interfae Description Language,IDL)。它提供了一套通用的数据类型，并以这些数据类型来定义更为复杂的数据类型和对外服务接口。一旦用户按照IDL定义的语法编写完成接口文件后，即可根据实际应用需要生成特定的编程语言（例如Java，C++，Python等）的客户端和服务器端代码。 任务推测执行原理：Hadoop采用了推测执行（Speculative Execution)机制。它根据一定的法则推测出“拖后腿”的任务，并为这样的任务启动一个备份任务，让该任务与原始任务同时处理一份数据，并最终选用最先成功完成任务的计算结果作为最终结果。 二、下一代MapReduce框架下一代MapReduce框架的基本设计思想是蒋JobTracker的两个主要功能，即资源管理和作业控制（包括作业监控、容错等），分拆成两个独立的进程。随着互联网的告诉发展，基于数据密集型应用的计算框架不断出现。从支持离线处理的MapReduce，到支持在线处理的Storm，从迭代式计算框架Spark到流式处理框架S4，各种框架诞生与不同的公司或者实验室。一种可能的技术方案如下：网页建索引采用MapReduce框架，自然语言处理/数据挖掘算法用MPI邓。考虑到资源利用率、运维成本、数据共享等因素，公司一般希望将所有这些框架部署到一个公共的集群中，让他们共享集群的资源，并对资源进行统一使用，这样，便诞生了资源统一管理与调度平台。YRAN是Apache的下一代MapReduce框架；Corona是Facebook于2012年11月开源的下一代MapReduce框架；YARN与Corona比较： 文章摘录 Apache软件基金会：支持开源软件项目而办的一个非营利性组织。 Rack：架子、机架； DAG：Directed Acqlic Graph，作业，工作流，有向无环图。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[怎样理解阻塞非阻塞与同步异步的区别]]></title>
    <url>%2F2016%2F10%2F31%2F%E6%80%8E%E6%A0%B7%E7%90%86%E8%A7%A3%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[“阻塞”与”非阻塞”与”同步”与“异步”不能简单的从字面理解，提供一个从分布式系统角度的回答。 1.同步与异步同步和异步关注的是消息通信机制 (synchronous communication/ asynchronous communication)所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。 而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。典型的异步编程模型比如Node.js举个通俗的例子：你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下”，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。 2. 阻塞与非阻塞阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态. 阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。 还是上面的例子你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。 转自：https://www.zhihu.com/question/19732473/answer/20851256]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《数学桥--对高等数学的一次观赏之旅》读书心得之一]]></title>
    <url>%2F2016%2F10%2F30%2F%E3%80%8A%E6%95%B0%E5%AD%A6%E6%A1%A5--%E5%AF%B9%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9A%84%E4%B8%80%E6%AC%A1%E8%A7%82%E8%B5%8F%E4%B9%8B%E6%97%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[一本非常烧脑的书！光是看书就花了四周，做笔记又华了一周。看完《无言的宇宙—隐藏在24个数学公式背后的故事》之后，想深入了解那些数学的定理，就决定重捡起这本书看看（书是之前买的，但因为比较深奥，当时就没看）。看的过程，仿佛就是重温了一遍大学的高等数学。不过本书重点是体现数学的思想，对一些深奥的、细节的问题倒是一带而过，所以看起来还是能把高等数学中核心的部分及思想体会一遍。本书最大的特点是，根据人类在认识自然、解决生活中实际问题的要求，自然而然带出数学的相关领域。例如从自然数到整数，从整数到分数，从分数到有理数、到无理数，从实数到复数等等。这些数的出现，不是数学家凭空想出来的，而是人们结合需要一步步的扩展来的。在数学发展的过程中，集合慢慢替代了数成为了数学的基本要素，集合的概念在数学中发挥了重大的作用。数学的不同领域，其实就是定义满足一定公理、定义、运算要求的一些符合条件元素的集合，然后在这些公理、定义上，用形式化的符合来对这个集合进行研究和推理，形成了一个完整的领域。例如欧式几何、罗氏几何、黎曼几何，例如群论，例如高维数系等等。数学的思想： 1）实际需求（问题） ； 2）定义形式 ； 3）对形式进行条件约束 ； 4）证明这些约束满足实际的需求（问题）； 5）抽象出定理并推广到一般的情况。 类似：1）要把一个东西快速运到另外一个地方； 2）定义一个叫车的东西； 3）车必须满足，能开动、速度要达到多少、装载容量、安全等等； 4）证明这个车符合实际的需求； 5）推广到运输工具（包括运人等）。 一、数 代数数：就是一个整数系多项式方程的实数根；例如$\sqrt {2}$超越数：就是任何不是代数数的实根；例如π。 哥德巴赫猜想：所有大于2的偶数都可以写成两个素数的和。 拓扑：研究与任何特定距离结构无关的形状的性质。 1、求两个数的最大公因数长除法。 2、连分数 3、RSA密码 下一篇：《数学桥—对高等数学的一次观赏之旅》读书心得之二]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《数学桥--对高等数学的一次观赏之旅》读书心得之二]]></title>
    <url>%2F2016%2F10%2F30%2F%E3%80%8A%E6%95%B0%E5%AD%A6%E6%A1%A5--%E5%AF%B9%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9A%84%E4%B8%80%E6%AC%A1%E8%A7%82%E8%B5%8F%E4%B9%8B%E6%97%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[接上篇：《数学桥—对高等数学的一次观赏之旅》读书心得之一 二、分析分析是一门处理无穷的学科，例如微积分。 1、二项式定理在初等代数中，二项式定理（英语：Binomial theorem）描述了二项式的幂的代数展开。根据该定理，可以将两个数之和的整数次幂诸如(x + y)^n展开为类似 ax^by^c 项之和的恒等式，其中b、c均为非负整数且b + c = n。系数a是依赖于n和b的正整数。当某项的指数为0时，通常略去不写。例如： \left( x+y\right) ^{4}=x^{4}+4x^{3}y+6x^{2}y^{2}+4xy^{3}+y^{4}其中n次方的系数满足杨辉三角的排列。 2、方程迭代解法f(x)=0的解法：牛顿-拉弗森方法。迭代法，要考虑分形的曲线，有些序列不收敛，对初始值的选择非常敏感，这些就是混沌。 3、级数序列的各项之和称为级数。 1）几何级数 2）调和级数调和级数（英语：Harmonic series）是一个发散的无穷级数，表达式为： \sum _{n=1}^{\infty }\dfrac {1} {n}=1+\dfrac {1} {2}+\dfrac {1} {3}+\dfrac {1} {4}+\ldots交错调和级数 \sum _{n=1}^{\infty }\dfrac {\left( -1\right) ^{n+1}} {n}=1-\dfrac {1} {2}+\dfrac {1} {3}-\dfrac {1} {4}+\ldots这个级数可经交错级数判别法证明收敛。特别地，这个级数的和等于2的自然对数： 1\,-\,{\frac {1}{2}}\,+\,{\frac {1}{3}}\,-\,{\frac {1}{4}}\,+\,{\frac {1}{5}}\,-\,\cdots \;=\;\ln 2.广义化：P-级数调和级数广义化的其中一个结果是p-级数，定义如下： \sum _{n=1}^{\infty }\dfrac {1} {k^{p}}其中P是任意正实数。当p=1，p级数即调和级数。由积分判别法或柯西并项判别法（en:Cauchy condensation test（英文））可知p-级数在p&gt;1时收敛（此时级数又叫过调和级数（over-harmonic series）），而在p ≤ 1时发散。 当p&gt;1时，p-级数的和即ζ(p)，也就是黎曼ζ函数在p的值。 3）幂级数\begin{align*} f(x)&=\sum _{n=0}^{\infty }a_{n}\left(x-c\right)^{n}\\ &=a_{0}+a_{1}(x-c)^{1}+a_{2}(x-c)^{2}+a_{3}(x-c)^{3}+\cdots \end{align*}其中的c和 ai都是常数。幂级数中的每一项都是一个幂函数，幂次为非负整数。幂级数的形式很像多项式，在很多方面有类似的性质，可以被看成是“无穷次的多项式”。如果把 (x-c) 看成一项，那么幂级数可以化简为 \sum _{n=0}^{\infty }a_{n}x^{n}后者被称为幂级数的标准形式。一个标准形式的幂级数完全由它的系数来决定。幂级数可以确定收敛半径，将一个函数写成幂级数： \sum _{n=0}^{\infty }a_{n}(x-c)^{n}的形式称为将函数在c处展开成幂级数。不是每个函数都可以展开成幂级数。多项式可以看做系数从某一项开始全是零的幂级数，例如多项式f(x)=x^{2}+2x+3可以写成标准形式的幂级数： f(x)=3+2x+1x^{2}+0x^{3}+0x^{4}+\cdots也可以写成（c=1）： f(x)=6+4(x-1)+1(x-1)^{2}+0(x-1)^{3}+0(x-1)^{4}+\cdots实际上，多项式可以写成在任意c附近展开的幂级数。就这个意义上说，幂级数是多项式的推广。等比级数的公式给出了对|x|&lt;1，有 \dfrac {1}{1-x}=\sum _{n=0}^\infty x^{n}=1+x+x^{2}+x^{3}+\cdots是幂级数中基本而又重要的一类。同样重要的还有指数的幂级数展开： e^{x}=\sum _{n=0}^\infty \frac {x^{n}}{n!}=1+x+\frac {x^{2}}{2!}+\frac {x^{3}}{3!}+\cdots以及正弦函数（对所有实数x 成立）： \sin \left( x\right) =\sum _{n=0}^{\infty }\dfrac {\left( -1\right) ^{n}x^{2n+1}} {\left( 2n+1\right) !}=x-\dfrac {x^{3}} {3!}+\dfrac {x^{5}} {5!}-\dfrac {x^{7}} {7!}+\ldots这些幂级数都属于泰勒级数。1）ln（1+x）的展开式当且仅当-1&lt;x&lt;=1的时候收敛2）expx的展开式对任意的x都收敛 4、收敛的判别方法1）比率判别法2）交错级数判别法3）绝对收敛4）比率判别法 5、函数极限序列的极限是考虑离散的情况（考虑n趋于∞），需要把极限的概念推广到以实数为自变量的函数（考虑x趋于某个数a，f(x)趋于一个极限l）。实数极限的最为重要的应用是微积分理论。 注意：在极限的工程当中，我们不需要知道f(x)在极限的点x=a的函数值。函数值在a点可以没有定义！ 6、连续函数在取极限点处取极限值为函数值的函数，称为在这个点是连续的。这种函数的图像可以笔不离纸的画出来。连续函数的函数仍然是连续函数。连续函数的重要定理是介值定理。例如知道函数值在某些点取负数、某些点取正数，那一定存在函数值取0的点（函数与x轴相交）。连续是可微的必要但非充分条件。 7、微分可微是研究函数的光滑性概念，光滑意味着函数的图像中没有转折点。函数的瞬时变化率就是微分（导数），如果导数存在，也是改点的唯一的切线的斜率。1）基本函数的导数基本函数的导数所谓基本函数是指一些形式简单并且容易求出导数的函数。这些基本函数的导函数可以通过定义直接求出。常见的多项式函数就是基本函数之一。如果 \displaystyle f(x)=x^{r}\，其中r是非零实数，那么导函数 \displaystyle f'(x)=rx^{r-1}\,。函数 f的定义域可以是整个实数域，但导函数的定义域则不一定与之相同。例如当 \displaystyle r={\frac {1}{2}}时： \displaystyle f'(x)={\frac {1}{2}}x^{-{\tfrac {1}{2}}}\,导函数的定义域只限所有正实数而不包括0。需要注意的是，不会有多项式函数的导数为 \displaystyle x^{-1}。当 r = 0 时，常函数的导数是0。底数为 e的指数函数 \displaystyle y=e^{x}的导数还是自身： \displaystyle {\frac {\mathrm {d} }{\mathrm {d} x}}e^{x}=e^{x}.而一般的指数函数 \displaystyle y=a^{x}的导数还需要乘以一个系数： \displaystyle {\frac {\mathrm {d} }{\mathrm {d} x}}a^{x}=\ln(a)a^{x}. 自然对数函数的导数则是{\displaystyle x^{-1}} ： {\displaystyle {\frac {\mathrm {d} }{\mathrm {d} x}}\ln(x)={\frac {1}{x}},\qquad x>0.}同样的，一般的对数函数导数则还需要乘以一个系数：{\displaystyle {\frac {\mathrm {d} }{\mathrm {d} x}}\log _{a}(x)={\frac {1}{x\ln(a)}}} 三角函数的导数仍然是三角函数，或者由三角函数构成: \displaystyle {\frac {\mathrm {d} }{\mathrm {d} x}}\sin(x)=\cos(x)\;\qquad \qquad \qquad {\frac {\mathrm {d} }{\mathrm {d} x}}\tan(x)=\sec ^{2}(x)={\frac {1}{\cos ^{2}(x)}}.\displaystyle {\frac {\mathrm {d} }{\mathrm {d} x}}\cos(x)=-\sin(x)\qquad \qquad \qquad {\frac {\mathrm {d} }{\mathrm {d} x}}\cot(x)=-\csc ^{2}(x)=-{\frac {1}{\sin ^{2}(x)}}.反三角函数的导数则是无理分式: {\displaystyle {\frac {\mathrm {d} }{\mathrm {d} x}}\arcsin(x)={\frac {1}{\sqrt {1-x^{2}}}},\qquad {\frac {\mathrm {d} }{\mathrm {d} x}}\arccos(x)=-{\frac {1}{\sqrt {1-x^{2}}}},\qquad {\frac {\mathrm {d} }{\mathrm {d} x}}\arctan(x)={\frac {1}{1+x^{2}}}.}2）微分中值定理在实分析中，中值定理（mean value theorem）描述了连续光滑曲线在两点之间的光滑性：令 {\displaystyle f(x)}为连续且光滑，任取其上两点 {\displaystyle (a,f(a))}与 {\displaystyle (b,f(b))}， a &lt; b，那么在这两端点之间必定存在一点 {\displaystyle (c,f(c)),a]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《数学桥--对高等数学的一次观赏之旅》读书心得之三]]></title>
    <url>%2F2016%2F10%2F30%2F%E3%80%8A%E6%95%B0%E5%AD%A6%E6%A1%A5--%E5%AF%B9%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9A%84%E4%B8%80%E6%AC%A1%E8%A7%82%E8%B5%8F%E4%B9%8B%E6%97%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E4%B8%89%2F</url>
    <content type="text"><![CDATA[接上篇：《数学桥—对高等数学的一次观赏之旅》读书心得之二 三、代数1、线性方程2、向量及向量空间一个向量空间完全由它的维数和用来与向量做标量乘法的数系所刻画。 3、矩阵矩阵用来表示向量函数。 4、非齐次线性方程解线性方程的本质实际上就是求矩阵的逆阵！矩阵A可逆的充要条件是A中列向量的任何一个线性组合都不为0；例如：不能一列全是0，或者两列完全相同！反过来，矩阵任何一个列向量线性组合都不可能等于零最明显的情况是这个矩阵是单位矩阵的一个纯量倍数。 5、行列式行列式：detA表示A的行列式；一个方阵A有一个逆阵的充要条件是detA!=0。对于简单的2阶和3阶的矩阵，行列式的表达式相对简单，而且恰好是每条主对角线（左上至右下）元素乘积之和减去每条副对角线（右上至左下）元素乘积之和（见图中红线和蓝线）。2阶矩阵的行列式： {\displaystyle {\begin{vmatrix}a_{1,1}&a_{1,2}\\a_{2,1}&a_{2,2}\end{vmatrix}}=a_{1,1}a_{2,2}-a_{1,2}a_{2,1}}3阶矩阵的行列式： {\displaystyle \displaystyle {\begin{vmatrix}a_{1,1}&a_{1,2}&a_{1,3}\\a_{2,1}&a_{2,2}&a_{2,3}\\a_{3,1}&a_{3,2}&a_{3,3}\end{vmatrix}}=a_{1,1}a_{2,2}a_{3,3}+a_{1,2}a_{2,3}a_{3,1}+a_{1,3}a_{2,1}a_{3,2}-a_{1,3}a_{2,2}a_{3,1}-a_{1,1}a_{2,3}a_{3,2}-a_{1,2}a_{2,1}a_{3,3}}几何意义：二维和三维欧氏空间中的例子行列式的一个自然的源起是n维平行体的体积。行列式的定义和n维平行体的体积有着本质上的关联。二维向量组的行列式在一个二维平面上，两个向量X = (a, c)和X’ = (b, d)的行列式是： {\displaystyle \det(X,X')={\begin{vmatrix}a&b\\c&d\end{vmatrix}}=ad-bc}比如说，两个向量X = (2, 1)和X’ = (3, 4)的行列式是： {\displaystyle \det(X,X')={\begin{vmatrix}2&3\\1&4\end{vmatrix}}=2\cdot 4-3\cdot 1=5}经计算可知，当系数是实数时，行列式表示的是向量X和X’形成的平行四边形的有向面积，并有如下性质：行列式为零当且仅当两个向量共线（线性相关），这时平行四边形退化成一条直线[8]。如果以逆时针方向为正向的话，有向面积的意义是：平行四边形面积为正当且仅当以原点为不动点将X逆时针“转到”X’处时，扫过的地方在平行四边形里，否则的话面积就是负的。如右图中，X和X’所构成的平行四边形的面积就是正的。行列式是一个双线性映射。也就是说，{\displaystyle \det(\lambda X+\mu Y,X')=\lambda \det(X,X')+\mu \det(Y,X')\;}并且 {\displaystyle \det(X,\lambda X'+\mu Y')=\lambda \det(X,X')+\mu \det(X,Y')\;}6、最优化1）线性约束给定一些约束方程的条件下求得某个量的一个最优值或最大值。函数的最大和最小值都出现在区域的顶点上。 凸区域：区域中任何两点都可以被一条不与边界相交的直线段连接起来。2）单纯形法 7、距离、长度、角度从一个向量到一个标量的运算：纯量积（点积），符号是：·例如x·y表示向量x与向量y的距离。两个向量{\displaystyle {\vec {a}}} = [a_{1}, a_{2}, …, a_{n}]和{\displaystyle {\vec {b}}} = [b_{1}, b_{2}, …, b_{n}]的点积定义为: {\displaystyle {\vec {a}}\cdot {\vec {b}}=\sum _{i=1}^{n}a_{i}b_{i}=a_{1}b_{1}+a_{2}b_{2}+\cdots +a_{n}b_{n}}定义向量的长度 {|x|=\sqrt {x\cdot x}}角度及点积的几何意义：几何定义在欧几里得空间中，点积可以直观地定义为 {\displaystyle {\vec {a}}\cdot {\vec {b}}=|{\vec {a}}|\,|{\vec {b}}|\cos \theta \;}这里 | {\displaystyle {\vec {x}}} | 表示 {\displaystyle {\vec {x}}}的模（长度），θ表示两个向量之间的角度。注意：点积的形式定义和这个定义不同；在形式定义中，{\displaystyle {\vec {a}}} 和 {\displaystyle {\vec {b}}} 的夹角是通过上述等式定义的。这样，两个互相垂直的向量的点积总是零。若{\displaystyle {\vec {a}}} 和{\displaystyle {\vec {b}}}都是单位向量（长度为1），它们的点积就是它们的夹角的余弦。那么，给定两个向量，它们之间的夹角可以通过下列公式得到： {\displaystyle \cos {\theta }={\frac {\mathbf {a\cdot b} }{|{\vec {a}}|\,|{\vec {b}}|}}}这个运算可以简单地理解为：在点积运算中，第一个向量投影到第二个向量上（这里，向量的顺序是不重要的，点积运算是可交换的），然后通过除以它们的标量长度来“标准化”。这样，这个分数一定是小于等于1的，可以简单地转化成一个角度值。 8、二维空间的二次型ax²+bx+cy²+exy=f通过配平方把x,y的线性项去掉。变成形式Ax²+Bxy+Cy²=D；利用二次方程求解公式可求。这些解有六种情况：圆周、椭圆、双曲线、抛物线、直线、点；如下图：（用一个平面去切割一个圆锥） 9、特征向量和特征值重点研究实对称矩阵的特殊性质： 实对称矩阵的特征值总是实数； 对称矩阵的两个特征向量如果对应的特征值不同，那么他们相交； 从任何一个n*n实对称矩阵M的特征值向量集合总，总可以为R^n选取一组标准正交基。 应用：特征脸。在图像处理中，脸部图像的处理可以看作分量为每个像素的灰度的向量。该向量空间的维数是像素的个数。一个标准化面部图形的一个大型数据集合的协方差矩阵的特征向量称为特征脸。它们对于将任何面部图像表达为它们的线性组合非常有用。特征脸提供了一种用于识别目的的数据压缩的方式。在这个应用中，一般只取那些最大特征值所对应的特征脸。 10、对称对称群：简称群。任何满足群公理的系统均可被认为是一个由对称组成的相容集合。 下一篇：《数学桥—对高等数学的一次观赏之旅》读书心得之四]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《数学桥--对高等数学的一次观赏之旅》读书心得之四]]></title>
    <url>%2F2016%2F10%2F30%2F%E3%80%8A%E6%95%B0%E5%AD%A6%E6%A1%A5--%E5%AF%B9%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9A%84%E4%B8%80%E6%AC%A1%E8%A7%82%E8%B5%8F%E4%B9%8B%E6%97%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[接上篇：《数学桥—对高等数学的一次观赏之旅》读书心得之三 四、微积分与微分方程1、微积分积分的本质就是无限细分然后求和！具体的求导、积分的公式见前文二、分析中对应微分和积分的部分！微积分基本定理：积分和求导是一对互逆的过程。 2、线性常微分方程通常用像t，exp(t)，sin(x)，cos(x)，lnt这些常见函数的组合来猜测微分方程解的可能形式，尽管有时候借着几分运气！1） 解齐次线性方程 猜测法我们研究一些方法，这些方法让我们对一个完全非线性系统其实根本不需要去求得任何解就能得到关于这些解的有效信息！这些定性的方法是微分方程中混沌现象研究的基础！ 幂级数法我们将要利用的事实是，如果一个函数在点t=0处的各阶导数形态良好，那么正如我们学习分析学时所知道的，它就是一个关于原点的幂级数展开式，先把一个微分方程化成一个关于幂级数的方程，这个方程就有可能解出。化成幂级数之后，先代入方程，通过满足方程的解，求出幂级数的系数！有些方程需要用到广义的幂级数来展开，例如贝塞尔函数。 2）解非齐次方程解是非线性系统。例如：f(x+y)!=f(x+y)求出一个特解，然后再求出对应齐次方程的一个解，然后加起来，就得出另外一个特解。 个人理解：线性方程和线性系统是不一样的，线性方程代表，未知数没有幂次项；而线性系统，指方程的解满足线性系统要求，就是不同解的线性组合还是方程的解。例如齐次方程和非齐次方程可以都是线性方程，但是齐次方程的解是线性系统；而非齐次方程的解不是线性系统！ 3、偏微分方程f(x,t)，偏袒一方的求f(x,t)关于x和t的导数，偏导数可以看做函数f(x,t)在另一个变量的值固定时的变化率。要对函数求偏导数，你只要暂时把另外一个变量看成常数，像一维情况那样求导数就行了。 当要建立一个微分方程时，我们首先探究这个问题的一个离散化近似，然后取极限以确定精确解！物理或化学方程为什么往往是偏微分方程？因为这些运动或者变化，并且都会受多个变量的影响，例如，运动会随时间或者位置而变化，所以在实际过程当中，就先离散化，然后求极限来处理，所以基本都是用偏微分方程来表示 1）弦振动方程弦振动方程波动方程 {\partial ^{2}u(x,t) \over \partial t^{2}}={KL^{2} \over M}{\partial ^{2}u(x,t) \over \partial x^{2}}在这个例子中，波速{\displaystyle c={\sqrt {\frac {KL^{2}}{M}}}}一般解代数方法一维标量形式波动方程的一般解是由达朗贝尔给出的。原方程可以写成如下的算子作用形式： {\displaystyle \left[{\frac {\partial }{\partial t}}-c{\frac {\partial }{\partial x}}\right]\left[{\frac {\partial }{\partial t}}+c{\frac {\partial }{\partial x}}\right]u=0.\,}从上面的形式可以看出，若F和G为任意函数，那么它们以下形式的组合 {\displaystyle u(x,t)=F(x-ct)+G(x+ct)\,}必然满足原方程。上面两项分别对应两列行波（”行”与”行动”中同音）——F表示经过该点（x点）的右行波，G表示经过该点的左行波。为完全确定F和G的最终形式还需考虑如下初始条件： {\displaystyle u(x,0)=f(x)\,}{\displaystyle u_{t}(x,0)=g(x)\,}经带入运算，就得到了波动方程著名的达朗贝尔行波解，又称达朗贝尔公式： {\displaystyle u(x,t)={\frac {f(x-ct)+f(x+ct)}{2}}+{\frac {1}{2c}}\int _{x-ct}^{x+ct}g(s)ds}在经典的意义下，如果 {\displaystyle f(x)\in C^{k}}并且 {\displaystyle g(x)\in C^{k-1}}则 {\displaystyle u(t,x)\in C^{k}}。但是，行波函数F和G也可以是广义函数，比如狄拉克δ函数。在这种情况下，行波解应被视作左行或右行的一个脉冲。基本波动方程是一个线性微分方程，也就是说同时受到两列波作用的点的振幅就是两列波振幅的相加。这意味着可以通过把一列波分解成它的许求解中很有效。此外，可以通过将波分离出各个分量来分析，例如傅里叶变换可以把波分解成正弦分量。弦乐器 2）扩散方程 4、微积分与几何相遇1） 切向量和法向量2） 梯度、散度和旋度 下一篇：《数学桥—对高等数学的一次观赏之旅》读书心得之五]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《数学桥--对高等数学的一次观赏之旅》读书心得之五]]></title>
    <url>%2F2016%2F10%2F30%2F%E3%80%8A%E6%95%B0%E5%AD%A6%E6%A1%A5--%E5%AF%B9%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9A%84%E4%B8%80%E6%AC%A1%E8%A7%82%E8%B5%8F%E4%B9%8B%E6%97%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E4%BA%94%2F</url>
    <content type="text"><![CDATA[接上篇：《数学桥—对高等数学的一次观赏之旅》读书心得之四 五、概率概率论就是用数学的确定性来描述随机的过程。样本空间:Ω； 某个结局:ω（在样本空间中）概率论就是先要把问题转换成事件，然后通过概率学符号来处理。事件：某些我们感兴趣事件（A）的概率P（A）。A是Ω样本空间中的某一种情况。P(A)=使A中事件可以发生的等可能方式的数目/等可能的结局的总数。等可能：相同可能，同概率随机事件。P(ω1)=P(ω2)=P(ω3)…… 例1、生日相同问题假设有n个人参加一个聚会，其中至少有两个人生日相同的概率是多少？思路：求完全不相同的概率，再1减去该概率。特征：当n大于或等于23的时候，两个人生日相同的可能性就过半。如果房间里有70个人，那么有两个人同生日的概率就达到了99.9%。 例2、比赛中止问题如果不是等可能是，必须非常小心。 例3、门和山羊的问题蒙提霍尔问题，亦称为蒙特霍问题或三门问题（英文：Monty Hall problem），是一个源自博弈论的数学游戏问题，大致出自美国的电视游戏节目Let’s Make a Deal。问题的名字来自该节目的主持人蒙提·霍尔（Monty Hall）。这个游戏的玩法是：参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车或者是奖品，选中后面有车的那扇门就可以赢得该汽车或奖品，而另外两扇门后面则各藏有一只山羊或者是后面没有任何东西。当参赛者选定了一扇门，但未去开启它的时候，知道门后情形的节目主持人会开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机会率？如果严格按照上述的条件的话，答案是会。—换门的话，赢得汽车的概率是2/3。 例4、外套问题n位数学家参加一个聚会，他们脱下外套，放在一起，聚会结束，他们各人随机地取了一件，问题：至少有一个人取了自己外套的概率是多少？ 1、容斥公式 2、条件概率A在B已发生的条件下的概率。P(A|B) 3、全概率定律和贝叶斯公式 4、样本空间上的函数：随机变量我们感兴趣的往往不是一个特定试验的结局，而是这个结局的某种函数。随机变量：我们探究时间空间上的函数的性质，这样的一种函数称为随机变量！ 1）二项分布结局只有成功或失败两种！二项分布的泊松近似：我们感兴趣的是，实验进行了很多次，但其中不成功却发生得相当稀少的情况。（小概率事件） 2）泊松分布泊松分布适合于描述单位时间内随机事件发生的次数的概率分布。Poisson分布（法语：loi de Poisson，英语：Poisson distribution），译名有泊松分布、普阿松分布、帕松分布、布瓦松分布、布阿松分布、波以松分布、卜氏分配等，又称泊松小数法则（Poisson law of small numbers），是一种统计与概率学里常见到的离散概率分布，由法国数学家西莫恩·德尼·泊松（Siméon-Denis Poisson）在1838年时发表。泊松分布适合于描述单位时间内随机事件发生的次数的概率分布。如某一服务设施在一定时间内受到的服务请求的次数，电话交换机接到呼叫的次数、汽车站台的候客人数、机器出现的故障数、自然灾害发生的次数、DNA序列的变异数、放射性原子核的衰变数、激光的光子数分布等等。泊松分布的概率质量函数为： {\displaystyle P(X=k)={\frac {e^{-\lambda }\lambda ^{k}}{k!}}}泊松分布的参数λ是单位时间（或单位面积）内随机事件的平均发生率。 3）连续性随机变量随机变量是作用在某个样本空间上而产生出实数输出的函数！概率密度函数：概率是取某段期间的面积（积分）来代替，而不是像离散随机变量那样是一个点的值 4）正态分布 5）均匀分布蒲丰投针问题，用来估计π的值！ 5、平均化与期望需要关注的不是试验产生某个特定结果的概率，而是这个试验最有可能产生的结果范围。期望为我们给出了关于一个试验可能是什么结局的好想法！期望的定义（加权平均）：期望是刻画整个概率分布的一个单独的数，它不一定是任何一个特定试验的结果。例如，抛硬币。E[x]=(1+2+3+4+5+6)/6=3.5这种情况说明：因为掷骰子，掷一次，6个点数都是同样的可能！所以，这种情况下，由期望所预测出来的值基本上没有用处！ 6、离散程度与方差方差，提供了分布值正在平均值周围离散程度的一种切实度量！方差大意味着随机变量有一个较广的分布，而方差小意味着一个较窄的分布。 7、极限定理1）切比雪夫不等式切比雪夫不等式为我们提供了一种方法，这种方法利用方差准确地确定了随机变量与平均值的偏差至少为一给定值的最大概率。切比雪夫不等式给出了最好的界限。这个不等式以数量化这方式来描述，究竟“几乎所有”是多少，“接近”又有多接近：与平均相差2个标准差以上的值，数目不多于1/4与平均相差3个标准差以上的值，数目不多于1/9与平均相差4个标准差以上的值，数目不多于1/16……与平均相差k个标准差以上的值，数目不多于1/k²举例说，若一班有36个学生，而在一次考试中，平均分是80分，标准差是10分，我们便可得出结论：少于50分（与平均相差3个标准差以上）的人，数目不多于4个（=36*1/9）。 2）大数律假设我们把某个随机试验进行许多次，并记下我们每一次试验的结果。直觉告诉我们，经过足够多次的试验后，根据所谓的“平均律”，所记录结果的平均值会趋向与某个固定的极限。有了大数定律，我们可以确信，为求得一个随机变量的期望，我们只要把它测量许多次，然后取我们所得值的平均值就可以了。 3）中心极限定理和正态分布中心极限定理是概率论中的一组定理。中央极限定理说明，大量相互独立的随机变量，其均值的分布以正态分布为极限。这组定理是数理统计学和误差分析的理论基础，指出了大量随机变量之和近似服从正态分布的条件。 完！]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RSA算法原理【转】]]></title>
    <url>%2F2016%2F10%2F24%2FRSA%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E3%80%90%E8%BD%AC%E3%80%91%2F</url>
    <content type="text"><![CDATA[RSA算法,这是目前地球上最重要的加密算法。 一、密钥生成的步骤我们通过一个例子，来理解RSA算法。假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？第一步，随机选择两个不相等的质数p和q。爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）第二步，计算p和q的乘积n。爱丽丝就把61和53相乘。 n = 61×53 = 3233n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。第三步，计算n的欧拉函数φ(n)。根据公式： φ(n) = (p-1)(q-1)爱丽丝算出φ(3233)等于60×52，即3120。第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）第五步，计算e对于φ(n)的模反元素d。所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。 ed ≡ 1 (mod φ(n))这个式子等价于 ed - 1 = kφ(n)于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。 ex + φ(n)y = 1已知 e=17, φ(n)=3120， 17x + 3120y = 1这个方程可以用”扩展欧几里得算法”求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。至此所有计算完成。第六步，将n和e封装成公钥，n和d封装成私钥。在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。实际应用中，公钥和私钥的数据都采用ASN.1格式表达。 二、RSA算法的可靠性回顾上面的密钥生成步骤，一共出现六个数字：123456 p q n φ(n) e d 这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。那么，有无可能在已知n和e的情况下，推导出d？123（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。（3）n=pq。只有将n因数分解，才能算出p和q。 结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。可是，大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。维基百科这样写道： “对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。 假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。 只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。” 举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。123456789 12301866845301177551304949 58384962720772853569595334 79219732245215172640050726 36575187452021997864693899 56474942774063845925192557 32630345373154826850791702 61221429134616704292143116 02221240479274737794080665 351419597459856902143413 它等于这样两个质数的乘积：1234567891011 33478071698956898786044169 84821269081770479498371376 85689124313889828837938780 02287614711652531743087737 814467999489 × 36746043666799590428244633 79962795263227915816434308 76426760322838157396665112 79233373417143396810270092 798736308917 事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。 三、加密和解密有了公钥和密钥，就能进行加密和解密了。（1）加密要用公钥 (n,e)假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。所谓”加密”，就是算出下式的c： me ≡ c (mod n)爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式： 6517 ≡ 2790 (mod 3233)于是，c等于2790，鲍勃就把2790发给了爱丽丝。（2）解密要用私钥(n,d)爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立： cd ≡ m (mod n)也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出 27902753 ≡ 65 (mod 3233)因此，爱丽丝知道了鲍勃加密前的原文就是65。至此，”加密—解密”的整个过程全部完成。我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种”对称性加密算法”（比如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。 四、私钥解密的证明最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子： cd ≡ m (mod n)因为，根据加密规则 ｍe ≡ c (mod n)于是，c可以写成下面的形式： c = me - kn将c代入要我们要证明的那个解密规则： (me - kn)d ≡ m (mod n)它等同于求证 med ≡ m (mod n)由于 ed ≡ 1 (mod φ(n))所以 ed = hφ(n)+1将ed代入： mhφ(n)+1 ≡ m (mod n)接下来，分成两种情况证明上面这个式子。（1）m与n互质。根据欧拉定理，此时 mφ(n) ≡ 1 (mod n)得到 (mφ(n))h × m ≡ m (mod n)原式得到证明。（2）m与n不是互质关系。此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立： (kp)q-1 ≡ 1 (mod q)进一步得到 [(kp)q-1]h(p-1) × kp ≡ kp (mod q)即 (kp)ed ≡ kp (mod q)将它改写成下面的等式 (kp)ed = tq + kp这时t必然能被p整除，即 t=t’p (kp)ed = t’pq + kp因为 m=kp，n=pq，所以 med ≡ m (mod n)原式得到证明。（完） 转自：http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《无言的宇宙--隐藏在24个数学公式背后的故事》读书心得之一]]></title>
    <url>%2F2016%2F10%2F19%2F%E3%80%8A%E6%97%A0%E8%A8%80%E7%9A%84%E5%AE%87%E5%AE%99--%E9%9A%90%E8%97%8F%E5%9C%A824%E4%B8%AA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[一本科普性质的数学书，作者摘选了24条在人类历史上最重要的数学公式（物理公式），介绍其背景及原理等。像作者所说，数学是表达宇宙的一种语言。看了本书之后，这些公式的优美，但背后揭示出宇宙本质的深刻程度，让人叹为观止。数学是一门科学，从毕达哥拉斯与柏拉图起希腊哲学家就对数学有这崇高的评价，他们将其视为纯理性的科学，认为它能穿透实际世界虚幻的表面，洞悉其实质；同时，数学也是一门艺术，它追求简单、优美。下面，就让我们跟随作者的步伐，领略这些美妙绝伦的公式吧。 第一部分：古代的定理1.我们为什么信赖算术：世界上最简单的公式阿拉伯数字然让数学民主化了。以前的数学都是精英阶层的专利。数学史的发展就是让数学普及开了，但是现在的高等数据，走向了抽象化的道路，又进入了精英阶层的专利了。大部分数学家强烈的感受到，数字，以及我们研究的大量其他数学创造物，都代表了人超越了人类思维的客观现实。如果是这样，出现能证明1+1既等于2又等于3这类矛盾陈述的可能性就微乎其微。逻辑家们将之称为“柏拉图主义者”的观点。“典型的数学家在工作日是柏拉图主义者，而在星期天是形式主义者。”与任何其它语言、宗教或信仰系统相比，在穿越文化与时间界限方面算术最为成功。的确，搜寻地外生物的科学家经常假定，我们能够解码的第一份来自地外世界的信息将以数学形式发送，因为数学是最为广泛接受的宇宙通用语言。 2.抗拒新概念：零的发现现代数学对于零的重要性的强调通常毫无过分之处。数学家们把它称为单位元素，因为把它加到任何数字上，都不会改变那个数字。单位元素对数学的重要性就相当于同义词对文学的重要性。 3.斜边的平方：毕达哥拉斯定理毕达哥拉斯认为，世界万物都是由数字统治的。质数对现代密码学至关重要。现代密码学很大的一部分基于如下理念：对于一个很大的合数，比如一个有几百位数的合数，找到它的质因子十分困难。归谬法，也成反证法，在早期的数学证明中是非常有用的一个工具。 4.圆的游戏：π的发现林德曼在1882年证明了关于π的另外一个更为微妙的事实：它是一个超越数（不能以任何系统为有理数多项式方程的解来表示，例如√2不是一个超越数，因为它是方程x²=2的解），一种加强版的无理数。 5.从芝诺悖论谈起：无穷的概念古代希腊人都还对无穷大这一概念没有把握，是他们无法取极限。几何级数的各项按某一常数比逐项递减。 6.杠杆作用的重要性：杠杆原理阿基米德他最引以为豪的成果是他证明了球体体积是它的外接圆柱体体积的三分之二，或可以等价的将此公式表达为：V=(4/3)πr³。他甚至要求人们在他的墓碑上刻此球体和它的外接圆柱体的图像。 下一篇：《无言的宇宙—隐藏在24个数学公式背后的故事》读书心得之二]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《无言的宇宙--隐藏在24个数学公式背后的故事》读书心得之二]]></title>
    <url>%2F2016%2F10%2F19%2F%E3%80%8A%E6%97%A0%E8%A8%80%E7%9A%84%E5%AE%87%E5%AE%99--%E9%9A%90%E8%97%8F%E5%9C%A824%E4%B8%AA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[接上篇：《无言的宇宙—隐藏在24个数学公式背后的故事》读书心得之一 第二部分：探索时代的定理7.口吃者的秘密：卡尔达诺公式卡尔达诺公式具有长期的影响，甚至超过了它所解决的问题本身的重要意义。例如，它是首次吸引人们在数学中使用虚数和复数的事物之一。虚数是平方为负数的数字，这是任何实数都不具有的性质。有了虚数我们就可以宣传：-1有两个平方根，他分别可以以i和-i记之。没有虚数，我们就只能说-1没有平方根。一旦有了虚数，我们就可以把复数定义为带有实数与虚数的两个部分的数，例如1+2i。如果没有虚数，不但现代数学无法想象，就连现代物理也同样无法想象。在征服了三次与四次方程之后，1824年，挪威数学家终于证明，对已五次方程，不纯在任何卡尔达诺式的求解公式。 8.九重天上的秩序：开普勒的行星运行定律 9.书写永恒：费马最后定理1993年，怀尔斯宣布他证明了费马大定理。 10.一片未曾探索过的大陆：微积分基本定理在17世纪，数学家们确实发现了他们相当于“美洲新大陆”的发现，这是一块未经探索的数学“大陆”。这片大陆的名字叫做“微积分”。莱布尼兹也有许多数学意外饿兴趣。作为哲学家，可以举出他在著作中有关邪恶的例子；他认为，尽管有些邪恶是必需的，单上帝创造了“一切可能的世界中最美好的一个”。一条曲线的切线的斜率就是那个图形所代表的函数的变化率。解决求切线问题的微分和解决求积问题的积分。微分和积分互为逆运算。为什么说这一发现开发了数学的新大陆呢？因为它最终让数学彻底掌握了连续变化的概念。在莱布尼兹和牛顿之前，数学家们一直被局限于静止的图像或者离散数量的桎梏(gù)之内，连续运动与连续变化的数量之世界与他们世界绝缘。但整个现代科学都是关于变化的科学。数学家们在微积分中找到了他们投身现代科学的必要工具。桎梏(gù)** 11.关于苹果、传说……以及彗星：牛顿定律牛顿的《自然哲学的数学原理》对物理学的重要意义等同于欧几里得的《几何原本》对几何学的意义。 牛顿第一定律：运动物体将永远保持匀速直线运动，除非有外力将其停止或者改变其运动方向。 牛顿第二定律：作用在物理上的力等于其动量的变化率。F=d(mv)/dt=ma 牛顿第三定律：对于任何一个作用力，都存在一个与它大小相等方向相反的反作用力。 牛顿真正独树一帜的成就就是他运用微积分，把引力定律和它运动定律结合，从而建立并随之解决了描述行星归到的方程的能力。 12.伟大的探索者：欧拉定理微积分中最重要的函数活血就是指数函数exp(x)，因为这是唯一一个导数和积分都是它本身的函数。exp(ix)=cos(x)+isin(x)这是欧拉本人认为最重要的公式，它把微积分中最终的exp、cos、sin三个函数联系在了一起。欧拉是一个光辉的特例，他发表了大量的著作，他以实际行动作为人们的榜样，带领他人前进，并对数学得以发展到今天的状况作出了贡献：今天的数学是一项职业，有关数学的信息不存在专利，而是公之于众，供大家分享。 下一篇：《无言的宇宙—隐藏在24个数学公式背后的故事》读书心得之三]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《无言的宇宙--隐藏在24个数学公式背后的故事》读书心得之三]]></title>
    <url>%2F2016%2F10%2F19%2F%E3%80%8A%E6%97%A0%E8%A8%80%E7%9A%84%E5%AE%87%E5%AE%99--%E9%9A%90%E8%97%8F%E5%9C%A824%E4%B8%AA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E4%B8%89%2F</url>
    <content type="text"><![CDATA[接上篇：《无言的宇宙—隐藏在24个数学公式背后的故事》读书心得之二 第三部分：普罗米修斯时代的定理革命的爆发经常是有那些对自己正在做些什么一无所知的人点燃引线的。 13.新的代数：汉密尔顿与四元数四元数完全出自一个人的想象之中，是新代数的第一个例子。这一步骤与其他数学家对于新集合和新函数的发现几乎同步，这些发现共同作用，把数学家从传统的结构与束缚中解放了出来。有史以第一次，数学家们可以在物质世界之外探险，他们可以自由自在地发明了一个全新的世界。（个人注：抽象代数）现在的问题不再是哪些结构是可能的，而是哪些结构值得研究。一个新结构会有助于解决已经存在的问题吗？它会有深刻的、富有挑战性的、有其固有美感的理论吗？ 14.两颗流星：群论1858年，查尔斯·艾尔米特证明，任何五次多项式方程的解不能用有限目的的+-x÷和根号来表达，但是可以用一种新型函数写出，这种函数名为椭圆函数，是阿贝尔发现的。这是正常的人类对难题的反应：如果你无法用现有的工具克服困难，那就发明新工具好了。群的概念现在已经变成了额数学家用以表达对称这一古老想法的主要工具。化学家在运用群论描述晶体对称性。物理学家运用群论描述粒子的对称性。 15.鲸鱼几何与蚂蚁几何：非欧几何第五条公设说：同一平面内一条直线a和另外两条直线b.c相交，若在a某一侧的两个内角的和小于两直角，则b.c两直线经无限延长后在该侧相交。按几何特性（曲率），现存非欧几何的类型可以概括如下： 坚持第五公设，引出欧几里得几何。 以“可以引最少两条平行线”为新公设，引出罗氏几何（或称双曲面几何）。 以“一条平行线也不能引”为新公设，引出黎曼几何（或称椭圆几何）。 这三种几何学，都是常曲率空间中的几何学，分别对应曲率为0、负常数和正常数的情况。三种几何中垂直于同一线段的两条直线的图象 16.我们信赖质数：质数定理当高斯1796年还在大学就读时，他便证明了正十七边形可以用尺规作图法画出。正是通过所有质数的乘法运算，才组成了所有其它的一切数字。在这种意义上，它们就像化学中的元素那样基本。 17.关于谱系的想法：傅立叶级数 18.上帝之眼中看到的光：麦克斯韦方程磁场是由电流产生的。电场是由变化的磁场引发的。而且说到底，光只不过就是传播中的电磁波。时光荏苒：rěn rǎn 荏苒：时间一点一点的流逝。指时间渐渐地过去了。 下一篇：《无言的宇宙—隐藏在24个数学公式背后的故事》读书心得之四]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《无言的宇宙--隐藏在24个数学公式背后的故事》读书心得之四]]></title>
    <url>%2F2016%2F10%2F19%2F%E3%80%8A%E6%97%A0%E8%A8%80%E7%9A%84%E5%AE%87%E5%AE%99--%E9%9A%90%E8%97%8F%E5%9C%A824%E4%B8%AA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%E4%B9%8B%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[接上篇：《无言的宇宙—隐藏在24个数学公式背后的故事》读书心得之三 第四部分：我们这个时代的定理19.光电效应：量子与相对论质量就应该是物体所含能量的一种量度，光就应该具有质量。狭义相对论：从任何以匀速运动的参照系及惯性系统中观察，物理定律都是不变的。爱因斯坦的看法：我们无法发现光速有任何变化的原因是：长度与实践都是相对的。他们取决于你的参照系。广义相对论要解决的问题是，在这种理论中，无论观察者处于何种参照系，物理定律将都表达为同样的方式。广义相对论的关键见解是：加速度与引力之间是不可分割的。在引力场内的自由落体运动和在不存在引力场的一部分空间内的匀速运动之间没有可以分辨的不同。物质告诉时空如何弯曲，弯曲的空间告诉物质如何运动。正式广义相对论使得爱因斯坦预言了光线在引力场内的弯曲。 20.从劣质雪茄到威斯敏斯特大教堂：狄拉克公式该公式具有高度的物理审美观，狄拉克曾多次说过，物理公式必须是优美的，他认为平方根很丑陋。什么是量子物理？物理学家们所测量的能量、电荷、角动量等都是量子化的。它们并非无限可分的；能量、电荷等等全部存在一个最小单位。单个量子的表现与我们在宏观世界上习惯的任何东西都有所不同。例如，爱因斯坦告诉我们，一个光子即是粒子又是波。这怎么可能？对于量子化的粒子来说，对角动量的任何观察都是一种“或者全部或者全不”的事件，看上去，好像粒子正在等待着你去测量，然后在测量的瞬间“决定”它是否绕你选择的轴自旋。玻色（shǎi）子 21.王国缔造者：陈省身—高斯—博内公式从爱因斯坦开始，物理学家常吃惊的发现，数学原来早已准备好了他们所需要的工具。反之亦然：数学家们也不断的意识到，是物理学上的问题和定理带来了最有趣、最深刻的数学发展。爱因斯坦的广义相对论要求弯曲空间，而这就要求一项可以有逐点不同曲率的非欧几何。 22.有一点儿无限：连续统假说在接近19实际末的时候，数学家们开始形成了一个共识，认为集合，而非数字，才是建筑数学大厦的基本材料。（个人注：数字是原子？）1900年，希尔伯特表列了数学家应该在20世纪加以研究的二十三个最重要的问题，连续统假说名列榜首。 23.混沌理论：洛伦兹方程真实的世界是非线性的。混沌的第一个标志性特征：对初始条件的敏感性。 24.驯虎：布莱克—斯科尔斯方程数学经济学，全新的一代交易家，数量分析专家，这些人通常有数学或物理背景，他们懂得偏微分方程。而且一切期权会根据数学模型有理性的定价：这是他们的信条。但也有些人认为，布莱克—斯科尔斯一类的模型永远不应该使用，因为它们低估了发生极端事件的可能性。一次极端事件就可能让你过往的努力付之一炬。 结论：将来会如何？人工智能+大数据。 完！]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代数、几何、分析 各自的范畴]]></title>
    <url>%2F2016%2F10%2F19%2F%E4%BB%A3%E6%95%B0%E3%80%81%E5%87%A0%E4%BD%95%E3%80%81%E5%88%86%E6%9E%90%20%E5%90%84%E8%87%AA%E7%9A%84%E8%8C%83%E7%95%B4%2F</url>
    <content type="text"><![CDATA[数学发展到现在，已经成为科学世界中拥有100多个主要分支学科的庞大的“共和国”。大体说来，数学中研究数的部分属于代数学的范畴；研究形的部分，属于几何学的范筹；沟通形与数且涉及极限运算的部分，属于分析学的范围。这三大类数学构成了整个数学的本体与核心。在这一核心的周围，由于数学通过数与形这两个概念，与其它科学互相渗透，而出现了许多边缘学科和交叉学科。本章简要介绍数学三大核心领域中十几门主要分支学科的有关历史发展情况。 一、代数学范畴 1、算术 算术有两种含义，一种是从中国传下来的，相当于一般所说的“数学”，如《九章算术》等。另一种是从欧洲数学翻译过来的，源自希腊语，有“计算技术”之意。现在一般所说的“算术”，往往指自然数的四则运算；如果是在高等数学中，则有“数论”的含义。作为现代小学课程内容的算术，主要讲的是自然数、正分数以及它们的四则运算，并通过由计数和度量而引起的一些最简单的应用题加以巩固。 算术是数学中最古老的一个分支，它的一些结论是在长达数千年的时间里，缓慢而逐渐地建立起来的。它们反映了在许多世纪中积累起来，并不断凝固在人们意识中的经验。 自然数是在对于对象的有限集合进行计算的过程中，产生的抽象概念。日常生活中要求人们不仅要计算单个的对象，还要计算各种量，例如长度、重量和时间。为了满足这些简单的量度需要，就要用到分数。 现代初等算术运算方法的发展，起源于印度，时间可能在10世纪或11世纪。它后来被阿拉伯人采用，之后传到西欧。15世纪，它被改造成现在的形式。在印度算术的后面，明显地存在着我国古代的影响。 19世纪中叶，格拉斯曼第一次成功地挑选出一个基本公理体系，来定义加法与乘法运算；而算术的其它命题，可以作为逻辑的结果，从这一体系中被推导出来。后来，皮亚诺进一步完善了格拉斯曼的体系。 算术的基本概念和逻辑推论法则，以人类的实践活动为基础，深刻地反映了世界的客观规律性。尽管它是高度抽象的，但由于它概括的原始材料是如此广泛，因此我们几乎离不开它。同时，它又构成了数学其它分支的最坚实的基础。 2、初等代数 作为中学数学课程主要内容的初等代数，其中心内容是方程理论。代数一词的拉丁文原意是“归位”。代数方程理论在初等代数中是由一元一次方程向两个方面扩展的：其一是增加未知数的个数，考察由有几个未知数的若干个方程所构成的二元或三元方程组(主要是一次方程组)；其二是增高未知量的次数，考察一元二次方程或准二次方程。初等代数的主要内容在16世纪便已基本上发展完备了。 古巴比伦(公元前19世纪～前17世纪)解决了一次和二次方程问题，欧几里得的《原本》(公元前4世纪)中就有用几何形式解二次方程的方法。我国的《九章算术》(公元1世纪)中有三次方程和一次联立方程组的解法，并运用了负数。3世纪的丢番图用有理数求一次、二次不定方程的解。13世纪我国出现的天元术(李冶《测圆海镜》)是有关一元高次方程的数值解法。16世纪意大利数学家发现了三次和四次方程的解法。 代数学符号发展的历史，可分为三个阶段。第一个阶段为三世纪之前，对问题的解不用缩写和符号，而是写成一篇论文，称为文字叙述代数。第二个阶段为三世纪至16世纪，对某些较常出现的量和运算采用了缩写的方法，称为简化代数。三世纪的丢番图的杰出贡献之一，就是把希腊代数学简化，开创了简化代数。然而此后文字叙述代数，在除了印度以外的世界其它地方，还十分普通地存在了好几百年，尤其在西欧一直到15世纪。第三个阶段为16世纪以后，对问题的解多半表现为由符号组成的数学速记，这些符号与所表现的内容没有什么明显的联系，称为符号代数。16世纪韦达的名著《分析方法入门》，对符号代数的发展有不少贡献。16世纪末，维叶特开创符号代数，经笛卡尔改进后成为现代的形式。 “＋”、“－”号第一次在数学书中出现，是1489年魏德曼的著作。不过正式为大家所公认，作为加、减法运算的符号，那是从1514年由荷伊克开始的。1540年，雷科德开始使用现在使用“＝”。到1591年，韦达在著作中大量使用后，才逐渐为人们所接受。1600年哈里奥特创用大于号“＞”和小于号“＜”。1631年，奥屈特给出“×”、“÷”作为乘除运算符。1637年，笛卡尔第一次使用了根号，并引进用字母表中头前的字母表示已知数、后面的字母表示未知数的习惯做法。至于“≮”、“≯”、“≠”这三个符号的出现，那是近代的事了。 数的概念的拓广，在历史上并不全是由解代数方程所引起的，但习惯上仍把它放在初等代数里，以求与这门课程的安排相一致。公元前4世纪，古希腊人发现无理数。公元前2世纪(西汉时期)，我国开始应用负数。1545年，意大利的卡尔达诺开始使用虚数。1614年，英国的耐普尔发明对数。17世纪末，一般的实数指数概念才逐步形成。 3、高等代数 在高等代数中，一次方程组（即线性方程组）发展成为线性代数理论；而—、二次方程发展成为多项式理论。前者是向量空间、线性变换、型论、不变量论和张量代数等内容的一门近世代数分支学科，而后者是研究只含有一个未知量的任意次方程的一门近世代数分支学科。作为大学课程的高等代数，只研究它们的基础。 1683年关孝和(日本人)最早引入行列式概念。关于行列式理论最系统的论述，则是雅可比1841年的《论行列式的形成与性质》一书。在逻辑上，矩阵的概念先于行列式的概念；而在历史上，次序正相反。凯雷在1855年引入了矩阵的概念，在1858年发表了关于这个课题的第一篇重要文章《矩阵论的研究报告》。 19世纪，行列式和矩阵受到人们极大的关注，出现了千余篇关于这两个课题的文章。但是，它们在数学上并不是大的改革，而是速记的一种表达式。不过已经证明它们是高度有用的工具。 多项式代数的研究始于对3、4次方程求根公式的探索。1515年，菲洛解决了被简化为缺2次项的3次方程的求解问题。1540年，费尔拉里成功地发现了一般4次方程的代数解法。人们继续寻求5次、6次或更高次方程的求根公式，但这些努力在200多年中付诸东流。 1746年，达朗贝尔首先给出了“代数学基本定理”的证明(有不完善之处)。这个定理断言：每一个实系数或复系数的n次代数方程，至少有一个实根或复根。因此，一般地说，n次代数方程应当有n个根。1799年，22岁的高斯在写博士论文中，给出了这个定理的第一个严格的证明。1824年，22岁的阿贝尔证明了：高于4次的一般方程的全部系数组成的根式，不可能是它的根。1828年，年仅17岁的伽罗华创立了“伽罗华理论”，包含了方程能用根号解出的充分必要条件。 4、数论 以正整数作为研究对象的数论，可以看作是算术的一部分，但它不是以运算的观点，而是以数的结构的观点，即一个数可用性质较简单的其它数来表达的观点来研究数的。因此可以说，数论是研究由整数按一定形式构成的数系的科学。 早在公元前3世纪，欧几里得的《原本》讨论了整数的一些性质。他证明素数的个数是无穷的，他还给出了求两个数的公约数的辗转相除法。这与我国《九章算术》中的“更相减损法”是相同的。埃拉托色尼则给出了寻找不大于给定的自然数N的全部素数的“筛法”：在写出从1到N的全部整数的纸草上，依次挖去2、3、5、7……的倍数(各自的2倍，3倍，……)以及1，在这筛子般的纸草上留下的便全是素数了。 当两个整数之差能被正整数m除尽时，便称这两个数对于“模”m同余。我国《孙子算经》(公元4世纪)中计算一次同余式组的“求一术”，有“中国剩余定理”之称。13世纪，秦九韶已建立了比较完整的同余式理论——“大衍求一术”，这是数论研究的内容之一。 丢番图的《算术》中给出了求x?＋y?＝z?所有整数解的方法。费尔马指出x^n＋y^n＝z^n在n＞3时无整数解，对于该问题的研究产生了19世纪的数论。之后高斯的《数论研究》(1801年)形成了系统的数论。 数论的古典内容基本上不借助于其它数学分支的方法，称为初等数论。17世纪中叶以后，曾受数论影响而发展起来的代数、几何、分析、概率等数学分支，又反过来促进了数论的发展，出现了代数数论(研究整系数多项式的根—“代数数”)、几何数论(研究直线坐标系中坐标均为整数的全部“整点”—“空间格网”)。19世纪后半期出现了解析数论，用分析方法研究素数的分布。二十世纪出现了完备的数论理论。 5、抽象代数 1843年，哈密顿发明了一种乘法交换律不成立的代数——四元数代数。第二年，格拉斯曼推演出更有一般性的几类代数。1857年，凯雷设计出另一种不可交换的代数——矩阵代数。他们的研究打开了抽象代数(也叫近世代数)的大门。实际上，减弱或删去普通代数的某些假定，或将某些假定代之以别的假定(与其余假定是相容的)，就能研究出许多种代数体系。 1870年，克隆尼克给出了有限阿贝尔群的抽象定义；狄德金开始使用“体”的说法，并研究了代数体；1893年，韦伯定义了抽象的体；1910年，施坦尼茨展开了体的一般抽象理论；狄德金和克隆尼克创立了环论；1910年，施坦尼茨总结了包括群、代数、域等在内的代数体系的研究，开创了抽象代数学。 1926年，诺特完成了理想(数)理论；1930年，毕尔霍夫建立格论，它源于1847年的布尔代数；第二次世界大战后，出现了各种代数系统的理论和布尔巴基学派；1955年，嘉当、格洛辛狄克和爱伦伯克建立了同调代数理论。 到现在为止，数学家们已经研究过200多种这样的代数结构，其中最主要德若当代数和李代数是不服从结合律的代数的例子。这些工作的绝大部分属于20世纪，它们使一般化和抽象化的思想在现代数学中得到了充分的反映。 抽象代数是研究各种抽象的公理化代数系统的数学学科。典型的代数系统有群、环、域等，它们主要起源于19世纪的群论，包含有群论、环论、伽罗华理论、格论、线性代数等许多分支，并与数学其它分支相结合产生了代数几何、代数数论、代数拓扑、拓扑群等新的数学学科。抽象代数已经成了当代大部分数学的通用语言。 现在，可以笼统地把代数学解释为关于字母计算的学说，但字母的含义是在不断地拓广的。在初等代数中，字母表示数；而在高等代数和抽象代数中，字母则表示向量(或n元有序数组)、矩阵、张量、旋量、超复数等各种形式的量。可以说，代数已经发展成为一门关于形式运算的一般学说了。 二、几何学范畴 1、初等几何 在希腊语中，“几何学”是由“地”与“测量”合并而来的，本来有测量土地的含义，意译就是“测地术”。“几何学”这个名词，系我国明代数学家根据读音译出的，沿用至今。 现在的初等几何主要是指欧几里得几何，它是讨论图形(点、线、面、角、圆等)在运动下的不变性质的科学。例如，欧氏几何中的两点之间的距离，两条直线相交的交角大小，半径是r的某一圆的面积等都是一些运动不变量。 初等几何作为一门课程来讲，安排在初等代数之后；然而在历史上，几何学的发展曾优先于代数学，它主要被认为是古希腊人的贡献。 几何学舍弃了物质所有的其它性质，只保留了空间形式和关系作为自己研究的对象，因此它是抽象的。这种抽象决定了几何的思维方法，就是必须用推理的方法，从一些结论导出另一些新结论。定理是用演绎的方式来证明的，这种论证几何学的代表作，便是公元前三世纪欧几里得的《原本》，它从定义与公理出发，演绎出各种几何定理。 现在中学《平面三角》中关于三角函数的理论是15世纪才发展完善起来的，但是它的一些最基本的概念，却早在古代研究直角三角形时便己形成。因此，可把三角学划在初等几何这一标题下。 古代埃及、巴比伦、中国、希腊都研究过有关球面三角的知识。公元前2世纪，希帕恰斯制作了弦表，可以说是三角的创始人。后来印度人制作了正弦表；阿拉伯的阿尔·巴塔尼用计算sinθ值的方法来解方程，他还与阿布尔·沃法共同导出了正切、余切、正割、余割的概念；赖蒂库斯作了较精确的正弦表，并把三角函数与圆弧联系起来。 由于直角三角形是最简单的直线形，又具有很重要的实用价值，所以各文明古国都极重视它的研究。我国《周髀算经》一开始就记载了周朝初年(约公元前1100年左右)的周公与学者商高的对话，其中就谈到“勾三股四弦五”，即勾股定理的特殊形式；还记载了在周公之后的陈子，曾用勾股定理和相似图形的比例关系，推算过地球与太阳的距离和太阳的直径，同时为勾股定理作的图注达几十种之多。在国外，传统称勾股定理为毕达哥拉斯定理，认为它的第一个一致性的证明源于毕氏学派(公元前6世纪)，虽然巴比伦人在此以前1000多年就发现了这个定理。到现在人们对勾股定理已经至少提供了370种证明。 19世纪以来，人们对于关于三角形和圆的初等综合几何，又进行了深入的研究。至今这一研究领域仍然没有到头，不少资料已引申到四面体及伴随的点、线、面、球。 2、射影几何 射影几何学是一门讨论在把点射影到直线或平面上的时候，图形的不变性质的一门几何学。幻灯片上的点、线，经过幻灯机的照射投影，在银幕上的图画中都有相对应的点线，这样一组图形经过有限次透视以后，变成另一组图形，这在数学上就叫做射影对应。射影几何学在航空、摄影和测量等方面都有广泛的应用。 射影几何是迪沙格和帕斯卡在1639年开辟的。迪沙格发表了—本关于圆维曲线的很有独创性的小册子，从开普勒的连续性原理开始，导出了许多关于对合、调和变程、透射、极轴、极点以及透视的基本原理，这些课题是今天学习射影几何这门课程的人所熟悉的。年仅16岁的帕斯卡得出了一些新的、深奥的定理，并于9年后写了一份内容很丰富的手稿。18世纪后期，蒙日提出了二维平面上的适当投影表达三维对象的方法，因而从提供的数据能快速算出炮兵阵地的位置，避开了冗长的、麻烦的算术运算。 射影几何真正独立的研究是由彭赛勒开创的。1822年，他发表了《论图形的射影性质》一文，给该领域的研究以巨大的推动作用。他的许多概念被斯坦纳进一步发展。1847年，斯陶特发表了《位置几何学》一书，使射影几何最终从测量基础中解脱出来。 后来证明，采用度量适当的射影定义，能在射影几何的范围内研究度量几何学。将一个不变二次曲线添加到平面上的射影几何中，就能得到传统的非欧几何学。在19世纪晚期和20世纪初期，对射影几何学作了多种公设处理，并且有限射影几何也被发现。事实证明，逐渐地增添和改变公设，就能从射影几何过渡到欧几里得几何，其间经历了许多其它重要的几何学。 3、解析几何 解析几何即坐标几何，包括平面解析几何和立体解析几何两部分。解析几何通过平面直角坐标系和空间直角坐标系，建立点与实数对之间的一一对应关系，从而建立起曲线或曲面与方程之间的一一对应关系，因而就能用代数方法研究几何问题，或用几何方法研究代数问题。 在初等数学中，几何与代数是彼此独立的两个分支；在方法上，它们也基本是互不相关的。解析几何的建立，不仅由于在内容上引入了变量的研究而开创了变量数学，而且在方法上也使几何方法与代数方法结合起来。 在迪沙格和帕斯卡开辟了射影几何的同时，笛卡儿和费尔马开始构思现代解析几何的概念。这两项研究之间存在一个根本区别：前者是几何学的一个分支，后者是几何学的一种方法。 1637年，笛卡儿发表了《方法论》及其三个附录，他对解析几何的贡献，就在第三个附录《几何学》中，他提出了几种由机械运动生成的新曲线。在《平面和立体轨迹导论》中，费尔马解析地定义了许多新的曲线。在很大程度上，笛卡儿从轨迹开始，然后求它的方程；费尔马则从方程出发，然后来研究轨迹。这正是解析几何基本原则的两个相反的方面，“解析几何”的名称是以后才定下来的。 这门课程达到现在课本中熟悉的形式，是100多年以后的事。象今天这样使用坐标、横坐标、纵坐标这几个术语，是莱布尼兹于1692年提出的。1733年，年仅18岁的克雷洛出版了《关于双重曲率曲线的研究》一书，这是最早的一部空间解析几何著作。1748年，欧拉写的《无穷分析概要》，可以说是符合现代意义的第一部解析几何学教程。1788年，拉格朗日开始研究有向线段的理论。1844年，格拉斯曼提出了多维空间的概念，并引入向量的记号。于是多维解析几何出现了。 解析几何在近代的发展，产生了无穷维解析几何和代数几何等一些分支。普通解析几何只不过是代数几何的一部分，而代数几何的发展同抽象代数有着密切的联系。 4、非欧几何 非欧几何有三种不同的含义：狭义的，单指罗氏(罗巴切夫斯基)几何；广义的，泛指一切和欧氏(欧几里得)几何不同的几何；通常意义的，指罗氏几何和黎曼几何。 欧几里得的第5公设(平行公设)在数学史上占有特殊的地位，它与前4条公设相比，性质显得太复杂了。它在《原本》中第一次应用是在证明第29个定理时，而且此后似乎总是尽量避免使用它。因此人们怀疑第五公设的公理地位，并探索用其它公理来证明它，以使它变为一条定理。在三千多年的时间中，进行这种探索并有案可查的就达两千人以上，其中包括许多知名的数学家，但他们都失败了。 罗巴契夫斯基于1826年，鲍耶于1832年发表了划时代的研究结果，开创了非欧几何。在这种几何中，他们假设“过不在已知直线上的一点，可以引至少两条直线平行于已知直线”，用以代替第五公设，同时保留了欧氏几何的其它公设。 1854年，黎曼推出了另一种非欧几何。在这种几何中，他假设“过已知直线外一点，没有和已知直线平行的直线可引”，用以代替第5公设，同时保留了欧氏几何的其它公设。1871年，克莱因把这3种几何：罗巴契夫斯基—鲍耶的、欧几里得的和黎曼的分别定名为双曲几何、抛物几何和椭圆几何。 非欧几何的发现不仅最终解决了平行公设的问题——平行公设被证明是独立于欧氏几何的其它公设的，而且把几何学从其传统模型中解放出来，创造了许多不同体系的几何的道路被打开了。 1854年，黎曼发表了“关于作为几何学基础的假设的讲演”。他指出：每种不同的(两个无限靠近的点的)距离公式决定了最终产生的空间和几何的性质。1872年，克莱因建立了各种几何系统按照不同变换群不变量的分类方法。 19世纪以后，几何空间概念发展的另一方向，是按照所研究流形的微分几何原则的分类，每一种几何都对应着一种定理系统。1899年，希尔伯特发表了《几何基础》一书，提出了完备的几何公理体系，建立了欧氏几何的严密的基础，并给出了证明一个公理体系的相容性(无矛盾性)、独立性和完备性的普遍原则。按照他的观点，不同的几何空间乃是从属于不同几何公理要求的元素集合。欧氏几何和非欧几何，在大量的几何系统中，只不过是极其特殊的情形罢了。 5、拓扑学 1736年，欧拉发表论文，讨论哥尼斯堡七桥问题。他还提出球面三角形剖分图形顶点、边、面之间关系的欧拉公式，这可以说是拓扑学的开端。 庞加莱于1895～1904年建立了拓扑学，采用代数组合的方法研究拓扑性质。他把欧拉公式推广为欧拉—庞加莱公式，与此有关的理论现在称为同调理论和同伦理论。以后的拓扑学主要按照庞加莱的设想发展。 拓扑学开始是几何学的一个分支，在二十世纪它得到了极大的推广。1906年，弗雷歇发表博士论文，把函数作为一个“点”来看，把函数收敛描绘成点的收敛，这就把康托的点集论和分析学的抽象化联系起来了。他在函数所构成的集合中引入距离的概念，构成距离空间，展开了线性距离空间的理论。在这个基础上，产生了点集拓扑学。在豪斯道夫的《点集论纲要》一书中，出现了更一般的点集拓扑学的完整想法。第二次世界大战后，把分析引进拓扑，发展了微分拓扑。 现在的拓扑学可以粗略地定义为对于连续性的数学研究。任何事物的集合都能在某种意义上构成拓扑空间，拓扑学的概念和理论已基本完组成为数学的基础理论之一，渗入到各个分支，并且成功地应用于电磁学和物理学的研究。 三、分析学范畴 1、微积分 微积分学是微分学和积分学的统称，它是研究函数的导数、积分的性质和应用的一门数学分支学科。 微积分的出现具有划时代意义，时至今日，它不仅成了学习高等数学各个分支必不可少的基础，而且是学习近代任何一门自然科学和工程技术的必备工具。现在的微积分学的教程，通常的讲授次序是先极限、再微分、后积分，这与历史顺序正好相反。 在微积分历史中，最初的问题是涉及计算面积、体积和弧长的。阿基米得(公元前3世纪)的方法最接近于现行的积分法。在17世纪探索微积分的至少有十几位大数学家和几十位小数学家。牛顿和莱布尼茨分别进行了创造性的工作，各自独立地跑完了“微积分这场接力赛的最后一棒”。 1609年，开普勒为了计算行星运动第二定律中包含的面积，和在他的论文中讨论的酒桶的体积，而借助了某种积分方法。1635年，卡瓦列利发表了一篇阐述不可分元法的论文，提出卡瓦列利原理，它是计算面积和体积的有价值的工具。1650年，沃利斯把卡瓦列利的方法系统化，并作了推广。 微分起源于作曲线的切线和求函数的极大值或极小值问题。虽然可以追溯到古希腊，但是第一个真正值得注意的先驱工作，是费尔马1629年陈述的概念。1669年，巴罗对微分理论作出了重要的贡献，他用了微分三角形，很接近现代微分法。一般认为，他是充分地认识到微分法为积分法的逆运算的第一个人。 至此，还有什么要做的呢？首要的是，创造一般的符号和一整套形式的解析规则，形成可以应用的微积分学，这项工作是由牛顿和莱布尼兹彼此独立地做出的。接着的工作是在可接受的严格的基础上，重新推导基本理论，这必须等到此课题想到多方面应用之后。柯西和他的后继者们完成了这一工作。 牛顿早在1665年才23岁时，就创造了流数法(微分学)，并发展到能求曲线上任意一点的切线和曲率半径。他的《流数法》写于1671年，但直到死后9年的1736年才发表。牛顿考虑了两种类型的问题，等价于现在的微分和解微分方程。他定义了流数(导数)、极大值、极小值、曲线的切线、曲率、拐点、凸性和凹性，并把它的理论应用于许多求积问题和曲线的求长问题。 牛顿创立的微积分原理是同他的力学研究分不开的，他借此发现、并研究了力学三大定律和万有引力定律，1687年出版了名著《自然哲学的数学原理》。这本书是研究天体力学的，包括了微积分的一些基本概念和原理。 莱布尼茨是在1673年到1676年之间，从几何学观点上独立发现微积分的。1676年，他第一次用长写字母∫表示积分符号，象今天这样写微分和微商。1684年～1686年，他发表了一系列微积分著作，力图找到普遍的方法来解决问题。今天课本中的许多微分的基本原则就是他推导出来的，如求两个函数乘积的n阶导数的法则，现在仍称作菜布尼兹法则。莱布尼兹的另一最大功绩是创造了反映事物本质的数字符号，数学分析中的基本概念的记号，例如微分dx，二级微分dx?，积分∫ydx，导数dy/dx等都是他提出来的，并且沿用至今，非常方便。 牛顿与莱布尼茨的创造性工作有很大的不同。主要差别是牛顿把x和y的无穷小增量作为求导数的手段，当增量越来越小的时候，导数实际上就是增量比的极限，而莱布尼兹却直接用x和y的无穷小增量(就是微分)求出它们之间的关系。 这个差别反映了他们研究方向的不同，在牛顿的物理学方向中，速度之类是中心概念；而在莱布尼兹的几何学方向中，却着眼于面积体积的计算。其它差别是，牛顿自由地用级数表示函数，采用经验的、具体和谨慎的工作方式，认为用什么记号无关紧要；而莱布尼兹则宁愿用有限的形式来表示函数，采用富于想象的、喜欢推广的、大胆的工作方式，花费很多时间来选择富有提示性的符号。 到1700年，现在大学且学习的大部分微积分内容已经建立起来。第一部微积分课本出版于1696年，是洛比达写的。1769年，欧拉论述了二重积分。1773年，拉格朗日考察了三重积分。1837年，波尔查诺给出了级数的现代定义。19世纪分析学的严谨化，是由柯西奠基的。现在课本中的极限、连续性定义、把导数看作差商的极限、把定积分看做和的权限等等，实质上都是柯西给出的。进一步完成这一工作的是威尔斯特拉斯，他给出了现在使用的精确的极限定义，并同狄德金、康托于19世纪70年代建立了严格的实数理论，使微积分有了坚固可靠的逻辑基础。 2、微分方程 凡是表示未知函数和未知函数的导数以及自变量之间的关系的方程，就叫做微分方程。如果未知函数是一元函数，则称为常微分方程，如果未知函数是多元函数，则称为偏微分方积。微分方程的基本问题是在一定条件下，从所给出的微分方程解出未知函数。 微分方程几乎是与微积分同时发展起来的，由于它与力学、物理学的渊源很深，所以在13世纪便已自成一门独立的学科了。两个多世纪来，这一学科已发展得相当完善。 1676年，莱布尼兹在致牛顿的信中，首先提出了“微分方程”这个名称。在他们两人的著作中，都包含了许多微分方程的实例。早期的研究侧重于探讨各类一阶方程的解法，并由此导致了方程的分类。18世纪，欧拉解决了全微分方程和“欧拉方程”(一类高阶变系数线性微分方程)，提出了通解和特解的概念，指出了n阶线性方程通解的结构。其后，泰勒得到了方程的奇解；拉格朗日推导了非齐次线性方程的常数交易法。 对于微分方程组的研究，始于达朗贝尔。19世纪前半叶，柯西开始研究解的存在性和唯一性。19世纪后半叶，数学家们开始利用群论来研究微分方程，由此建立连续群和李群的新理论。庞加莱引入了极限环的概念，李雅普诺夫引入了微分方程组解的稳定性概念。他们的方法都不必直接求解，称为定性理论。1927年，毕尔霍夫建立了“动力系统”的一段定性理论。 一阶偏微分方程的研究首先是从几何学问题开始的。拉格朗日指出，解一阶线性偏微分方程的技巧，在于把它们化为常微分方程。一阶非线性偏微分方程的研究，始于欧拉和拉格朗日，蒙日为偏微分方程的几何理论奠定了基础。到18世纪末叶，在引入奇解、通解、全积分、通积分、特积分等概念之后，偏微分方程已形成一门独立的学科。 二阶偏微分方程的研究，始于18世纪的弦振动理论。通常见的二阶偏微分方程均来自物理或力学的实际问题，它们构成了这门学科中一个独立的系统—数学物理方程。 积分方程源于阿贝尔1826年的工作，但是直到1888年杜·波阿·雷蒙的著作中，才正式提出了积分方程这个名词。1896年开始，伏特拉给出了两类积分方程的一般理论；不久，弗雷德荷姆大体上完成了一类重要的线性积分方程理论。由于这类积分方程常出现在一些物理问题中，因此积分方程论常被包含在数学物理方程内。 现代科学技术，如空间技术、现代物理学、力学等，都有许多问题需要用微分方程来求解，甚至在化学、生物学、医药学、经济学等方面，微分方程的应用也越来越多。 3、微分几何 微分几何这门分支学科主要研究三维欧氏空间中曲线和曲面的内在性质，所谓内在性质就是同几何对象在空间中的位置无关的性质。它以微积分、微分方程这些分支学科的理论为研究工具。或简单地说，微分几何就是用分析方法研究几何性质。 微分几何的发端可见于1731年克莱洛的著作中。蒙日1809年的著作包含了这一学科的雏型；欧拉研究了曲面的一般理论；高斯1827年的《关于曲面的一般研究》一书，论述了曲面理论，创立了内蕴几何学，奠定了曲面微分几何的基础。1887～1896年，达布的《曲面一般理论的讲义》集曲线和曲面微分几何之大成。 变换理论对于微分几何的影响，产生了射影微分几何、仿射微分几何等分支。二十世纪初，出现了对非充分光滑曲线和曲面以及曲线曲面的整体问题的研究，形成现代微分几何。1923年，嘉当提出了一般联络的理论。1945年，陈省身建立了代数拓扑和微分几何的联系，他又是纤维丛概念的创建人之一。 4、函数论 函数论包括复变函数论和实变函数论，但有时也单指复变函数论(或复分析)而言。 复数概念出现于16世纪，但对它的全面掌握和广泛运用，却迟至18世纪。自变量是复数的函数，叫做复变函数。如果复变函数在某一区域内除了可能有有限个例外点之外，处处有导数，那么这个伏辩函数叫做在这个区域内的解析函数；例外点叫做奇点。复变函数论主要研究解析函数的性质。 复变函数的研究是从18世纪开始的。30～40年代，欧拉利用幂级数详细讨论了初等复变函数的性质。达朗贝尔于1752年得出复变函数可微的必要条件(即“柯西—黎曼条件”)。拉普拉斯也考虑过复变函数的积分。 复变函数的全面发展是在19世纪。1825年，柯西讨论了虚限定积分，1831年他实质上推出了柯西积分公式，并在此基础上建立了一整套复变函数微分和积分的理论。黎曼1851年的博士论文《复变函数论的基础》，奠定了复变函数论的基础。他推广了单位解析函数到多位解析函数；引入了“黎曼曲面”的重要概念，确立了复变因数的几何理论基础；证明了保角映射基本定理。威尔斯特拉斯完全摆脱了几何直观，以幂级数为工具，用严密的纯解析推理展开了函数论。定义解析函数是可以展开为幂级数的函数，围绕着奇点研究函数的性质。近几十年来，复变函数论又有很大的推进。 复变函数论是解决工程技术问题的有力工具，飞机飞行理论、热运动理论、流体力学理论、电场和弹性理论等中的很多问题。 实变函数的发展较晚，其中积分论是它的重要组成部分。容度和测度是线段长度概念的推广，是为了推广积分的概念而建立起来的。1893年，约当给出了“约当容度”的概念，并用于讨论积分。1894年，斯提捷首先推广了积分概念，得到了“斯提捷积分”。1898年，波莱尔改进了容度的概念，他称之为‘测度”。下一步决定性的进展是1902年勒贝格改进了测度理论，建立了“勒贝格测度”、“勒贝格积分”等概念。1904年，他完全解决了黎曼可积性的问题。后来，数学家们对积分的概念又作了种种推广和探索。 实变函数的另一个领域是函数构造论。1885年，威尔斯特拉斯证明：连续函数必可表示为一致收敛的多项式级数。这一结果和切比雪夫斯基最佳逼近论，是函数构造论的开端。近年来，这个方向的研究十分活跃。 5、泛函分析 本世纪初，出现了一个广阔的新领域——泛函分析，它是古典分析观点的推广。近几十年来，由于分析学中许多新分支的形成，从而发现在代数、几何、分析中不同领域之间的某些方面的类似。其次，几何与集合论的结合产生了抽象空间的理论，将函数看成函数空间中的点。再加上实变函数论以及近世代数的感念和方法的影响，就产生了泛函分析。它综合函数论，几何和代数的观点，研究无穷维向量空间上的函数、算子和极限理论。 19世纪末，弗尔太拉和二十世纪初阿达玛的著作中已出现泛函分析的萌芽。随后希尔伯特、海令哲开创了“希尔伯将空间”的研究，黎斯、冯·诺伊曼等人在这方面都有重要的建树。 转自：https://www.douban.com/note/246430462/]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[泊松分布]]></title>
    <url>%2F2016%2F10%2F18%2F%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83%2F</url>
    <content type="text"><![CDATA[日常生活中，大量事件是有固定频率的。 某医院平均每小时出生3个婴儿某公司平均每10分钟接到1个电话某超市平均每天销售4包xx牌奶粉某网站平均每分钟有2次访问 它们的特点就是，我们可以预估这些事件的总数，但是没法知道具体的发生时间。已知平均每小时出生3个婴儿，请问下一个小时，会出生几个？有可能一下子出生6个，也有可能一个都不出生。这是我们没法知道的。泊松分布就是描述某段时间内，事件具体的发生概率。上面就是泊松分布的公式。等号的左边，P 表示概率，N表示某种函数关系，t 表示时间，n 表示数量，1小时内出生3个婴儿的概率，就表示为 P(N(1) = 3) 。等号的右边，λ 表示事件的频率。接下来两个小时，一个婴儿都不出生的概率是0.25%，基本不可能发生。接下来一个小时，至少出生两个婴儿的概率是80%。泊松分布的图形大概是下面的样子。可以看到，在频率附近，事件的发生概率最高，然后向两边对称下降，即变得越大和越小都不太可能。每小时出生3个婴儿，这是最可能的结果，出生得越多或越少，就越不可能。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sinθ/θ在θ->0的极限]]></title>
    <url>%2F2016%2F10%2F12%2Fsin%CE%B8%E9%99%A4%E4%BB%A5%CE%B8%E5%9C%A8%CE%B8%E8%B6%8B%E4%BA%8E0%E7%9A%84%E6%9E%81%E9%99%90%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[永恒的对称：阿尔罕布拉宫的回忆]]></title>
    <url>%2F2016%2F10%2F11%2F%E6%B0%B8%E6%81%92%E7%9A%84%E5%AF%B9%E7%A7%B0%EF%BC%9A%E9%98%BF%E5%B0%94%E7%BD%95%E5%B8%83%E6%8B%89%E5%AE%AB%E7%9A%84%E5%9B%9E%E5%BF%86%2F</url>
    <content type="text"><![CDATA[http://iscientists.baijia.baidu.com/article/517755]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>数学</tag>
        <tag>对称</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《苦难辉煌》读书笔记]]></title>
    <url>%2F2016%2F09%2F22%2F%E3%80%8A%E8%8B%A6%E9%9A%BE%E8%BE%89%E7%85%8C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[“透过落地玻璃窗，看见13年前走掉的儿子被带到门前、宋美龄满面微笑地迎上去的时候，他坐在客厅的沙发上纹丝不动。这个在战场上东征西讨南攻北伐的战争枭雄，此刻却在用报纸挡住湿润的双眼。”这本惊涛骇浪的史书，难得有一幕这么温馨的时刻。蒋介石一直耿耿于怀，如果不是西安事变（1936年12月12日），那离剿灭红军就差两个星期了。1936年11月的时候，因为红军为打通连通苏联方案的宁夏战役失利，中央已经做好了万一在陕北无法立足的这种最坏情况下的打算，那时候形势确实是岌岌可危。西安事变之后，随后国共达成了一致抗日的第二次国共合作。在抗日战争中，中国共产党在这场战争中得到了极大的发展。直到后来的国内战争，共产党已经非之前的那个吴下阿蒙了。孙中山说过：历史潮流浩浩荡荡，顺之者昌，逆之者亡。所以，1911年革命党人发动辛亥革命，推翻了爱新觉罗王朝；所以，在1919年发起五四运动，开始了新民主主义革命；所以，第一次国共合作发动北伐，消灭了北洋军阀。一切都顺应着历史的潮流，直到1927年蒋介石发起了四一二反革命政变。共产党在一片迷雾中，寻找着前进的道路。而长征，就是共产党及红军图生存、求发展的唯一选择了。中共党史上最为重要的一步，莫过于出发长征。中国共产党人和中国工农红军最深重的困难与最耀眼的辉煌，皆出于此。说是苦难，中国红军于1934年10月开始长征，在敌人的前堵后追之下，湘江之战时红军由出发时的8.6万人锐减为4万余人，损伤过半；四渡赤水到过金沙江时，红军人数已减到2万余人，又减了一半；1935年9月，中央红军到达吴起镇时，只剩下7200人。说是辉煌，中国红军在长征途中找到了适合中国国情的革命路线和方向，找到了适合中国条件下的领导人。1935年1月15日遵义会议，毛泽东进入了核心决策层（五常委，张闻天、周恩来、毛泽东、博古、陈云），排名第三。二渡赤水后，3月12日，刚刚成立新的三人团确立毛泽东的实际领导地位。从此，中国的红军在毛主席的领导下，走向了辉煌。尽管中途有四渡赤水毛主席指挥的土城及鲁班场两次败仗（毛主席一生有四次败仗），但这也是红军为了寻找根据地过程中，面对不可预知的前程、实力强大的敌人，也是不能避免的。尽管中途有1935年9月9日，张国焘在卓木雕成立伪中央，使红军因内部分裂面临覆灭的可能。但在这过程中，也考验了真正共产党人的党性和纪律。纵观整个长征，最令人惊叹的除了领袖人物的领导艺术和指挥技巧，还有中国工农红军空前顽强战胜死亡的决心和寻找胜利之意志。四渡赤水、巧夺金沙江、飞夺泸定桥、过草地、爬雪山，中国工农红军的精神力量战胜了一切困难险阻。中国的红色政权为什么能够存在？为什么能够在两万五千里的长征中坚持到了最后？当然，除了共产党人的因素之外，毛泽东指出其中“白色政权之间的战争”即军阀混战是根本的一条。在国民党围剿过程中，中央军内部矛盾重重、地区军阀割据一方显露无疑。湘军、桂军、黔军、川军都是防蒋重于防共，他们认为“有匪有我，无匪无我”，所以，对红军的围剿本着驱逐出境、保持实力为根本。而蒋介石也是想通过围剿红军的名义把势力范围扩大到西南几省，或者借机歼灭相关的军阀。所以，白色政权之间的勾心斗角成了共产党最好的生存缓冲空间。当然，西安事变的发生，在全国抗日统一战线的压力下，国共实现了第二次合作，抵抗日寇侵略，共产党获得了更好的发展空间。蒋介石可能还一直念念不忘那两个星期，但是，共产党人的无畏精神，不怕苦、不怕死的精神，为人民谋福利的主义，这也是蒋公可能忽略了的要素。 纵横捭阖（zòng héng bǎi hé）：“纵横”即竖和横；“捭阖”是开和合，字面上理解成“自如地横竖开合”（达到操纵控制对方的目的）。不过，“纵横”有其特殊含义，是指战国时的“合纵”与“连横”的谋毠。战国时有七国争霸，齐、楚、燕、韩、赵、魏等六国采取了联合对抗强秦的作法谓之“合纵”；秦国则执行分化六国，使其服从秦国而个个击破谓“连横”。因此，这成语用“纵横”（合纵和连横）两大策略指称国际间错综复杂的政治和外交斗争。 广雅书院校友：杨匏（páo）安 建立一个党，巩固一个党，发展一个党，需要理想，需要主义，也还需要经费。富于理想的中国共产党人，争论了很长时间才承认了这个现实。 “打土豪、分田地”既是红色政权政治动员的基础，也是中国共产党人经济独立的基础。 斯大林：胜利者是不受指责的，这是一般公理。 甲午战争后中国士大夫阶层痛定思痛，终于认识到不是“器不如人”，而是“制不如人”。 同盟会党人朱执信翻译了《共产党宣言》。 个人注：朱执信于1919年去世，广州的执信中学，就是孙中山为了纪念他而创立。 马克思、恩格斯的著名论断：到目前为止的一切社会历史都是阶级斗争的历史。 英国文学家塞缪尔的那句名言：爱国心在不少场合，是被流氓当做隐身衣来使用的。 自从人类被划分为阶级以后，阶级的核心就是政党。政党的核心是领袖。领袖的核心是什么？是意志和思想。 个人注：领导者也是这样。 毛泽东说：革命不是请客吃饭，不是做文章，不是绘画绣花，不能那样雅致，那样从容不迫，文质彬彬，那样温良恭俭让。革命是暴动，是一个阶级推翻一个阶级的暴烈的行动。 黄埔军校门口有一副铿锵作响的对联：升官发财，请往他处；贪生怕死，勿入斯门。 鲁迅说过：“革命被头挂退的事是很少的。” 正统的历史，从来就不一定就是信史。 “四二一”反革命事变前，严重辞职，将二十一师交给陈诚代管。蒋召见陈诚，问其对国内形势的基本态度。陈诚只一句话：绝对服从蒋总司令。 朱德的话语中已经包含两条政治纲领：共产主义必然胜利；革命必须自愿。这两条纲领后来成为人民军队政治宣传工作的基础。 西方领导科学认为领导力的形成依赖三大要素：一曰恐惧，二曰利益，三曰信仰。恐惧迫使人们服从，利益引导人们服从，信仰则产生发自内心的服从。 陈毅：“一个真正的革命者，不仅经得起胜利的考验，能做胜利时的英雄，也要经得起失败的考验，做失败时的英雄。” 一句名言：人的一生虽然漫长，但关键时刻只有几步。 彭德怀是一团烈火。毛泽东一句“谁敢横刀立马，唯我彭大将军。” 凡事预则立，不预则废。 那是一张白纸，好画最新最美的图画。 希特勒的啤酒馆暴动。 那是一个根本不考虑毛泽东讲话时间、地点的时代（文革期间），翻开就念，念完就用，而且主要是对别人而念而用。 孙中山借助一部分军阀的力量打击另一部分军阀的做法不可靠。 中国的热血青年推翻了爱新觉罗王朝，实现了1911年辛亥革命并在1919年的五四运动之后开始了新民主主义革命； 工农红军中那个多次出人敢死队长的许世友。 只有两条道路，中间道路是没有的。一切想在革命和反革命中间找出第三条出路的分子，必然遭到残酷的失败，而变为反革命进攻革命的辅助工具。 中共党史上最为重要的一步，莫过于出发长征。中国共产党人和中国工农红军最深重的困难与最耀眼的辉煌，皆出于此。 虔诚使领袖人物的个别结论变成普通真理。但共产党人的首要条件却不是虔诚。 所谓决策，往往是面对十字路口的选择。 胜利从来不是鼓掌出来的，不管掌声有多么热烈。它也不是计划制定出来的，不管计划有多么翔实。 中原大战之后，林蔚提出“高官少兵”原则，即对归降的西北军将领官可以给得很大，兵却编得很少。 中国有三个半军事家：蒋百里、杨杰、白崇禧、刘伯承（1916年3月，在攻打丰都时候，有一颗子弹射穿了一只眼睛，因为瞎了一只眼，算半个） 给人以火星者，必怀火炬。 佛家称世界从生成到毁灭的过程为一劫。万劫，言谓时间，之漫长。万劫不复，意为永远不能复活。 越在困难的时候，作为领导人越要冷静，要敢于负责。 1935年12月，工农红军第一方面军长征结束，毛泽东说：长征是宣言书，长征是宣传队，长征是播种机。 失败孕育着胜利的种子，胜利也包含着失败的基因。 真理在大多数时候，并不是一轮光芒四射的红日。更多的时候，它可能只是黑夜中一道闪电，甚至是遥远的前方一缕若明若暗的微光。发现真理，需要智慧。跟随真理，则需要勇气。 四渡赤水在后人看是伟大的，但伟大从来以苦难为代价。 我们总结自己的历史，辉煌是财富，教训也是财富。甚至是更值得珍惜的财富。 以退为进，这是近代中国政治中屡见不鲜的手法。 毛泽东写的《纪念白求恩》，称赞白求恩是一个高尚的人，一个纯粹的人，一个有道德的人，一个脱离了低级趣味的人，一个有益于人民的人。 1888年诞生的《国际歌》就唱到：从来没有什么救世主。 1975年4月5日，蒋介石逝世，享年89岁；1938年张国焘脱离共产党，后来加入戴笠的军统，1979年12月在多伦多逝世。2001年10月14日张学良在檀香山逝世，享年101岁。2003年10月23日，宋庆龄在美国纽约逝世，享年106岁。 师哲问，我们和王明的真正分歧在哪里？毛泽东沉默片刻，这样说了一句：他为别人（个人注：指苏联）考虑得太多了，为我们自己考虑得太少了。 需要热血的时代，便只能是年轻人的时代。 幸福是安宁。这块土地什么也不缺，恰恰是缺安宁。 蒋经国（蒋与原配毛福梅的儿子），曾经在苏联莫斯科中山大学读书（与邓小平是同学），并加入共产党。年轻的时候，还在报纸撰文写信大骂其父，大有势不两立的意思。后来，还是回到蒋介石身边当起太子了。 遵义会议是中共党史上一个生死攸关的转折点，同时也是中国革命与共产国际关系史上的一个意义重大的转折点。 从1934年10月10日开始长征，到1935年9月27日的榜罗镇会议，终于确定最终的根据地为陕北，长征的战略目标终于最终选择完成。 四渡赤水，并非指挥若定，神机妙算，基本上还是相机而动，一次次的寻找，又一次失去，就是因为失去根据地的红军，迫切需要找到新的落脚点而皆未实现，所有的目的都是一个，为了打破第二的围追堵截。并且，毛泽东一生中打了四次败仗（高兴圩、南雄、土城战役、茅台战役），有两次就发生在四渡赤水期间，包括一渡赤水之前的土城战役，三渡赤水前的茅台那次战役（鲁班场战役）。 1935年6月25日，中央红军、红四面军在懋功会合。但之后，1935年9月9日，张国焘在卓木雕成立伪中央（1936年9月26日结束分裂），使红军因内部分裂面临覆灭的可能。 1991年，91岁的张学良在美国纽约实事求是地回忆了当年的一幕：“是我们东北军自己选择不抵抗的。我当时的判断是日本人不会占领全中国，我没认清他们的侵略意图，所以尽量避免刺激日本人，不给他们扩大战事的借口。打不还手，骂不还手。是我下的指令。” 阅读长征的故事将使人们再次认识到，人类的精神一旦唤起，其威力将是无穷无尽的。 刘志丹等人创立的陕北根据地，使中共中央和中央红军在前后整整一年二万五千里的寻找中，终于找到了一个落脚点。 大姑娘上轿—头一回 覆巢之下，安得完卵。 血脉偾张：fèn 嬗变：shàn，变迁，更替，古同“禅”。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《建筑的永恒之道》读书笔记]]></title>
    <url>%2F2016%2F09%2F18%2F%E3%80%8A%E5%BB%BA%E7%AD%91%E7%9A%84%E6%B0%B8%E6%81%92%E4%B9%8B%E9%81%93%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20%2F</url>
    <content type="text"><![CDATA[有人说过，读书是获得第二人生的过程。《建筑的永恒之道》是一本很有哲学感的讲述建筑的书，作者试图探究建筑的永恒之道，探究什么样的建筑能给人们带来活力、带来生机。作者认为，建筑是为人服务的，一个和谐的、自然的，能让你感觉到自己、感觉到生活气息、有活力的地方是建筑追求的目标。本书先是介绍了永恒建筑应该具有的特质（作者命名为无名特质，因为无法确切的用某个词语来下定义），然后为了满足这些特质，作者联系我们的语言、自然的进化，提出了用一种模式语言来构建满足这种无名特质的建筑，从私人住宅、到街区、到城市，一切都能涵盖在这种模式语言中。在这本书之后，作者还写了一本专门介绍建筑模式语言的书——《建筑模式语言（上下册）》，其中共记录了253个模式，具体描述了各种具体建筑的模式。作者认为，一种建筑形式能抵消各种系统内的作用力（例如内在精神力、社会和心理作用力、经济作用力、结构作用力等等，见本书P195），那就是具有无名特质的形式。建筑也像一个生命体，各个环节都体现出生命的特质，系统系统的完整性。而在模式语言方面，也像生物界一样，有对应的遗传密码、变异。保证了模式语言的传承和发展。作者提到理想话的模式语言设计，做到所有的建筑符合个性的的要求、符合心灵的要求，设计师不能做出任何妥协。但在实际生活中，特别是现在工业化的时代，效率、成本（时间、人工）的考虑，要求设计师做出更多模式化的、千篇一律的建筑产品，而不是艺术品。 电影《英雄》中秦始皇说过剑有三重境界： 第一重境界，手中有剑，心中亦有剑； 第二重境界，手中无剑，心中有剑； 第三重境界，手中无剑，心中亦无剑；独孤求败的木剑级就像秦始皇所说的第二重境界，讲求手中无剑，剑在心中虽赤手空拳，却能以剑气杀敌于百步之外，而剑法的最高境界，则是手中无剑，心中也无剑，是以大胸怀包容一切那便是不杀便是和平。 个人注：人最难的是克服对未来的恐惧，包括对死亡、财产、安全等的恐惧，当你放下这一切的时候，就能成为另外一个自己。 每个地方的特征是由不断发生在那里的事件（自然的事件+生活的事件？）的模式所赋予的。（个人注：一个人的特质是由他经历过的事情所赋予的） 个人注：一个城市的特质也和你用哪一种眼光去审视这个城市有关，有人在广州找到了繁华的都市气质，有人在广州上下九找到了千年古都的简朴气质，有人在广州的城中村找到了广州的亲和感。 空间中给的每一个模式都是有与之联系的事件模式。 在原子尺度的规模上，他们是作为可统一的重复整体出现的。 如果有一个有顶但却开敞的外廊或走廊的转换空间，这转换空间（个人注：如果的过渡空间）就是一个室内、室外间的心理上的过渡，它更自然地把你从室内带出而进入庭院。 没有死的存在和对死的意识，自然的特征就不能出现。 无名特质不能创造，只能由一个过程来产生。（个人注：就像一个人的气质，腹有诗书气自华） 每一个模式就是一个规则，它描述了产生它所限定的整体，你所必须要做的事情。个人注：建筑设计 类比：1、胎儿（整体的展开） 2、语言 （要素+规则+创造力）从数学的观点看，最简单的语言是一个包括两个系列的系统：1.一系列要素或符号。2.组合这些符号的一系列规则。 所有的好毛毯都遵从这一规则：不管两块并列的颜色再哪儿，它们之间总有第三种不同颜色的细线条。 个人注：特别的特点，反而容易发现，普通的，反而容易让人熟视无睹。 像两侧采光这种特定模式从人们的建筑知识中消失了。 圆的严格数学定义：各点同中心点等距。 为使设计有意义，需要遵从模式的精神，而不是字面的意义。 寻找一个名字是创造或发现一个模式的基本部分。 不是建筑使这个小客栈趣味盎然的，而是发生在那儿的事情— 是你遇见的人，你在那做的事情，人们入睡前讲给你的故事。个人注：建筑反映了当时、当地人们对某种生活方式的憧憬。 庭院、城市的中心广场是人们交流聚会的地点。 判断一个模式的好坏，我们总可以自问，一个模式给我们何种感觉，而且我们也总可以同样询问他人。一个人的感受是直接和明确的 然后我们看到了，一个个平衡模式的概念深深扎根于感觉的概念。但尽管如此，感觉本身并非事物的实质。 这一陈述是用宗教的热情来表现的。 当一个小孩从父母或从周围的人那里“学习”语言，他没有学他们语言之中的所有的规则—因为他不能看到或者听到规则。他只听到他们说出的句子。而他所做的就是为自己创造规则的系统，规则完全是第一次由他创造的。他不断的改变这些规则，直到用这些规则，他能够产生出同他听到的语言相像的语言。在这一阶段，我们说，他“掌握”了语言。 城市是个有生命的东西，其模式即是活动模式，有是空间模式。 个人注：一切事物都是在发展的，管理也一样。不同的环境、不同的技术、不同的人群、不同的材料，都需要我们探究不同的管理方式和科学。但是管理也像生物体一样，有些本质的DNA是不变的，是可以传承的。 设计常常被想成一个综合的过程，把东西放到一起的过程，结合的过程。但我预先的部分加起来不可能形成有自然特征的任何东西。但是设计就像胚胎的发展一样，在发展的每个阶段，新的结构出现于已经出现的结构之上。发展的过程本质上是一个操作序列，每个操作分化了由以前的操作所作出的结构。一个婴儿，从目前怀孕的第一天起，就作为一个整体，每天都是一个胎儿的整体直至诞生。它不是把部分加起来的一个顺序，而是一个本身的扩展、卷曲、分化着的整体。（个人注：设计的步骤也大概如此：先总体后局部，整体比细节重要，因为他控制了整个设计，设计分层进行，每层的整体又控制了对应层的细节）。 个人注：设计时先用心去想，你想象中的住宅是怎么样的，从功能的角度、从将来要发生的事件的角度来想，而不是具体的构件。 一张画，甚至一个粗略的草图，都是非常刻板的—— 当设计还在胚胎状态的时候，它具体化了远远超出设计本身所要求的细节处理。 人们常说，一组人不能够创造一件艺术作品，或任何完整的东西，因为不同的人各执己见，因而使最终的作品成了不具特色的折衷物。 一段时间，人们认为城市必须由规划师做出规划或蓝图。据说，如果城市的秩序不是这样产生，城市将不会有秩序。于是，人们竟不顾所有传统社会建设的美丽的城市和村庄都没有规划图的明显事实而恪守这一信条，人们已经让自己放弃自由。个人注：作者反对城市规划，但是其实古时美丽的城市并不代表没有规划，只是说以前的城市规模比较小，在心里想好就行了，不需要复杂的蓝图之类的，但我认识还是有规划的。规划，作为宏观的定位，类似大动脉的性质。细节，类似毛细血管，再由人们生活过程中自发修补完成，这也是一个城市发展的合理的途径。 我们只有在无我时，才能使建筑有活力。 不畏死的人，是自由生活的人，因为他可以接受即将发生的事情，而不是总在通过努力控制它而扼杀他。 译者注：痛楚的人生产生了强烈的忧患意识。十多年来我一直思考人生周围的一切。我拼命的读书，我不断的旅行，我思考人生的意义，我了解苦难的中国。渐渐的，我发现，一个人的思索只有转化为社会的思索才能真正的推动文化的前进。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>哲学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《沉思录》读书笔记]]></title>
    <url>%2F2016%2F09%2F13%2F%E3%80%8A%E6%B2%89%E6%80%9D%E5%BD%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[奥勒留：古罗马皇帝+苦修哲学家，以一世英主而身兼苦修哲学家的人历史唯一一个。本书是作者的随笔，在行军中记录人生的感悟，所以结构比较零散、内容重复，也没有分主题归门别类。作者重点记录了如何为人处世、如何理性思考、如何秉承自然之道等等的感悟。比较特别的是，作者在理性以及自然之道之上，讲述了人应该如何坦然面对死亡的问题，作者认为死亡也是自然变化的结果，死亡也是元素之间的转换，这是自然之道。关于死亡，早在两千多年前，有人问孔老夫子死是怎么回事，孔子回答说，“未知生，焉知死。”；而法国哲学家蒙田说过：“学习哲学即是学习如何去死。”所以，学习哲学让人能更平静的面对死亡。对于哲学，作者说到，哲学就像亲娘，在你需要慰藉的时候，可以投入它的怀里。确实是，哲学能让人从更高的境界、更高的角度去思考和看待问题，能让人从日常的短视的观念中解脱出来。像作者一直强调的“你遭遇外界挫折而烦恼的时候，使你困扰的不是那件事情的本身，而是你自己对那件事情的判断。”在做人方面，有一点作者讲得非常好，我们要追求人性中美好的部分，而不是成功。 犬儒学派（希腊语：κυνισμός，英语：Cynicism）是古希腊一个哲学学派，由苏格拉底的学生安提西尼创立，其信奉者被称为犬儒（希腊语：Κυνικοί, 拉丁语：Cynici，英语：Cynics）。该学派否定社会与文明，提倡回归自然，清心寡欲，鄙弃俗世的荣华富贵；要求人克己无求，独善其身，近于中国的道家。最著名的犬儒学派人士是安提西尼的弟子狄奥根尼。由于中文里本无现成的对应词汇，在中国大陆犬儒主义常被理解为“讥诮嘲讽、愤世嫉俗、玩世不恭”。 夙(sù)愿：夙：素有的，旧有的。付梓（zǐ）：把稿件交付排印。慰藉（jiè） 所谓一个国家，祭祀根据个人平等与言论自由以制定一套法律，适用于所有的人；所谓君主，其最高理想乃是人民的自由。 主意打定之前仔细考虑，主意打定之后坚决不移。 每日清晨对你自己说：我将要遇到好管闲事的人、忘恩负义的人、狂妄无理的人、欺骗的人、骄傲的人。他们所以如此，乃是因为他们不能分辨善恶。 你是个老人了，不要再做奴隶，不要再做被各种私欲所牵挂的傀儡，不要再令他怨恨现世的命运，并且恐惧未来的命运。 如果根本没有神，或者神不管人间事，那么生存在一个没有神或没有神意的宇宙又有何益呢？ 要记取，一切事物均取决于我们的看法。 人生即主观：There is nothing either good or bad, but thinking makes it so. 没有一桩不幸的事，不可以由于勇敢承担而变成为幸事。 有人对他无理挑剔，他一律予以容忍，绝不反唇相讥。 训练你自己“细心听取别人讲话”，尽可能地深入他的内心。 太阳之下没有新的事物。《圣经.传道书》第一章第九节上的话，意思是：在阳光底下没有新鲜的东西，我们每天看到的事情都是以前做过的，已经有的事情今后还会有，历史是一种不断地循环，不断地重复。 不要为将来担忧。如果你必须去到将来 ，你会带着同你到现在时一样的理由去的。 对事发怒毫无用处。 自然总不比艺术差，因为艺术乃是模仿自然者。 伊菲索斯人的作品里记载着一则劝告，要经常怀想一位道德高尚的古人。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>哲学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三段论]]></title>
    <url>%2F2016%2F09%2F13%2F%E4%B8%89%E6%AE%B5%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[三段论在传统逻辑中，是在其中一个命题（结论）必然地从另外两个命题（叫做前提）中得出的一种推论。这个定义是传统的，可以宽松地从亚里士多德的《前分析篇》Book I, c. 1中推出来。希腊语“sullogismos”的意思是“演绎”。三段论由三个部分组成：大前提、小前提和结论，它在逻辑上是从大前提和小前提得出来的。大前提是一般性的原则。小前提是一个特殊陈述。在逻辑上，结论是从应用大前提于小前提之上得到的。这个例子是亚里士多德给出的经典的“Barbara”三段论：1、如果所有人（M）都是必死的（P），（大前提）2、并且所有希腊人（S）都是人（M），（小前提）3、那么所有希腊人（S）都是必死的（P）。（结论） 如，1、所有人都是必死的。（普遍原理）2、苏格拉底是人。（特殊陈述）3、苏格拉底是必死的。[把特殊（小）代换入一般（大）] 又如，1、金属可以导电。（大前提）2、铜是金属。（小前提）3、铜可以导电。（结论）]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>逻辑</tag>
        <tag>古希腊</tag>
        <tag>三段论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[芝诺悖论]]></title>
    <url>%2F2016%2F09%2F13%2F%E8%8A%9D%E8%AF%BA%E6%82%96%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[芝诺悖论是古希腊数学家芝诺（Zeno of Elea）（盛年约在公元前464-前461）提出的一系列关于运动的不可分性的哲学悖论。这些悖论由于被记录在亚里士多德的《物理学》一书中而为后人所知。芝诺提出这些悖论是为了支持他老师巴门尼德关于“存在”不动、是一的学说。这些悖论是芝诺反对存在运动的论证其中最著名的两个是：“阿基里斯追乌龟”和“飞矢不动”。这些方法现在可以用微积分（无限）的概念解释。运动是不可能的。由于运动的物体在到达目的地前必须到达其半路上的点，若假设空间无限可分则有限距离包括无穷多点，于是运动的物体会在有限时间内经过无限多点。这里的“运动”不是距离的概念，而是速度的概念。从A点到B点的运动不仅仅涉及到距离，并且涉及到时间。从A到B的运动如果发生在无限长的时间内，那么悖论就为真，因为此时速度为0。速度这个概念虽然可以被表示为距离除以时间，但是速度是一个自然界的固有概念，并不依赖于时间和距离。所以庄子的万世不竭反倒成为一个真实的叙述，而不是悖论。“动得最慢的物体不会被动得最快的物体追上。由于追赶者首先应该达到被追者出发之点，此时被追者已经往前走了一段距离。因此被追者总是在追赶者前面。”——亚里士多德，物理学 VI:9, 239b15如柏拉图描述，芝诺说这样的悖论，是兴之所至的小玩笑。首先，巴门尼德编出这个悖论，用来嘲笑“数学派”所代表的毕达哥拉斯的“1&gt;0.999…, 1-0.999…&gt;0”思想。然后，他又用这个悖论，嘲笑他的学生芝诺的“1=0.999…, 但1-0.999…&gt;0”思想。最后，芝诺用这个悖论，反过来嘲笑巴门尼德的“1-0.999…=0, 或1-0.999…&gt;0”思想。譬如说，阿基里斯速度是10m/s，乌龟速度是1m/s,乌龟在前面100m。追乌龟要涉及到极限问题： 而极限是个无限过程，这涉及到潜无限问题，即无限过程无法完成，即1只能无限逼近，不能达到1，乌龟是不能被追上的。为此，潜无限只能假设空间不可以无限分割，这样悖论就不存在了。但实无限认为，无限过程可以完成，即极限可以达到1，乌龟可以追上。现在的实数，极限，微积分都建立在实无限上。对潜无限来说，实数，极限等都不成立，只能无限逼近。P.S.目前数学界有”0.9999999999…….=1”之证明如下pf: 令 S=0.99999999999…….—❶則10S=9.9999999999…….—❷❷-❶ 10S-S=9.9999999999………..-0.999999999……….9S=9S＝1故得証0.9999999………=1悖论的解决理论说得令人头头是道，但为何实际却不是如此? 原因见下。不妨令阿基里斯步行的速度为每秒10m, 乌龟爬行的速度为每秒0.1m, 并且在比赛之前, 阿基里斯让乌龟先爬999m, 在这种条件下, 阿基里斯追赶乌龟所用的时间为:999 ÷ 10 = 99.9秒(99.9 × 0.1) ÷ 10 = 0.999秒(0.999 × 0.1) ÷ 10 = 0.00999秒· · · · · ·这些数字, 按其先后排列, 可以构成一个无限序列:99.9, 0.999, 0.00999, · · · 其和為:S = 99.9/(1 −1/100) = 100.909090…秒所以其实阿基里斯只要跑101秒，即可超越乌龟。换个角度说，阿基里斯之所以追不上乌龟，原因在题目的背面已经限制了阿基米斯追赶的时间。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>悖论</tag>
        <tag>无限</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《数据仓库工具箱：维度建模权威指南》读书心得]]></title>
    <url>%2F2016%2F09%2F07%2F%E3%80%8A%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%B7%A5%E5%85%B7%E7%AE%B1%EF%BC%9A%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[一本介绍了数据仓库（DW）和商业智能（BI）的建模过程，不过因为主要的难度是在后端的ETL过程，所以本书理论上说重点还是介绍了DW的建模过程，BI更多指向的是前端的报表开发，技术上难度没有后端的ETL大。本书最大的特点是，针对我们常见行业重点业务过程的建模进行了详细描述，让用户对数据建模有个直观的了解。在启动BI项目之前，我们必须明白，BI的主要收益是，获得高质量的决策。 1、数据仓库的核心架构ETL： 获取（Extract）、转换（Transform）、加载（Load）E:连接不同的数据源，通过任务调度获取数据源数据，并对数据源的数据做简单的检查；T：进行数据质量检查及清理、数据转换、一致性维度的检查及转换；L：把清理转换后的数据加载到目标表，供BI报表工具使用。在加载过程需要考虑相关的代理键生成、一致性检查等。 架构设计就像建房子的蓝图，因为没有架构的结构无法承受压力。架构在需求的基础上，重点关注的涉及时间、可用性和性能方面的需求。例如发布的频率，就涉及相关的同步的频率、时间要求。加载对服务器、带宽等方面的需求。 2、Kimball DW/BI生命周期 3、4步骤维度设计过程 1）选择业务过程 2）声明粒度 3）确认维度 4）确认事实 4、维度表和事实表事实表（Fact Table）+ 维度表（Dimensional Table）维度属性支持报表过滤和标识，事实表支持报表中的数字数值。事实表一般只包括： 主键 退化维度 外键 事实值（性能度量） 事实表的分类： 事务事实表 周期快照事实表 累积快照事实表 维度表的缓慢变化技术： 技术0：不变化 技术1：直接修改值 技术2：(最常用的技术)增加新行，增加：生效日期、失效日期、目前状态3个列 技术x：略 事实表通常像下图一样，采用星型模型事实表，一般是数值性，针对需要汇总的数据； 5、数据集成和一致性维度数据集成：企业全景视图。一致性维度以为着跨不同数据库建立公共维度属性，只有这样才能使用这些属性构建横向钻取报表，才能是得KPI等关键指标能通过计算差异和比率来开展数学比较工作。（例如收入、支出的维度必须一致，才能计算利润）。维护一个总线矩阵来保证一致性维度。 6、建模过程常见的原则及问题1）建表原则 事实表的粒度应该一致 事实表一般不包括文本字段 建议采用最细粒度（灵活性+可扩展性），然后通过汇总聚集、通过总线矩阵保持一致性的维度（避免烟筒式的孤岛）。 事实表一般采用代理键（自然键作为退化维度）主键最好是无意义的字段便于以后扩展，假设以标书编码为主键,以后标书编码填错需要改的时候,关联表都需要跟着改.如果是一个无意义的自增字段是主键就无此原因. 维度表一般采取明确的文本说明，而不是一些代码和神秘值报表的分组也是，最好不要利用键值某几个字节的隐含含义来分组，最好利用明确的属性。这样，在某些业务修改对应标签属性，但是键值没有修改的情况下，不会出错。 维度表，需要约束查询或者分类分析的信息； 多数商业模型的维度包括5-20个维度之间。（只要不改变事实表，维度能方便的增加） 维度模型的设计应反映组织的主要业务过程事件，不应该被设计成仅能发布特定报表或回答特定问题。 维度建模注重简单化、易用性、性能，所以严格抵制3NF(数据库建模的第3范式)第3范式会导致查询复杂化、连接导致性能低效、影响用户的理解。规范化非常适合支持事务处理并保证参照的完整性，但在维度模型主要是用于支持分析处理，所以查询的性能、可理解性反而是最需看重的。 建议采用最细粒度（灵活性+可扩展性） 通过总线矩阵保持多过程的一致性维度。 关系数据库中不能存在多对多关系。用来消除多对多关系的最常用方法是通过添加桥接表来创建两个一对多关系。 每个事实表必须有一个指向日期维度的外键，主要用于上卷和过滤。 最好将事务代码当成退化维度来处理。 维度表通常不能随事实表同时变化的情况存在。一般维度表是相对稳定的。 尽量避免使用雪花模式（应该使用星型模型），偶尔使用支架模型可以接受，但是要严格评估。 2）需要避免的常见维度建模错误： 错误10：在事实表中放入文本属性。 错误9：限制使用冗长的描述符以节省空间。 错误8：将层次划分为多个维度 错误7：忽略对维度变化跟踪的需要。 错误6：使用更多的硬件解决所有的性能问题。（通过创建聚集、建立分区、建立索引等） 错误5：使用操作型键连接维度和事实。 错误4：忽视对事实粒度的声明并混淆事实粒度。 错误3：使用报表设计维度模型。 错误2：希望用户查询规范化的原子数据。 错误1：违反事实和维度的一致性要求 3）ETL重要的瓶颈问题：（通过ETL工作流监视器来监控性能）考虑ETL的瓶颈，有两个来源，一是从客户的反馈获取，二是通过监控的工具监控性能和容量的趋势。 针对源系统或者中间表的低效索引查询； SQL语法导致优化器做出错误的选择； 随机访问内存（RAM）不足导致的内存颠簸 在RDBMS中进行的排序操作； 缓慢的转换步骤； 过多的I/O操作； 不必要的读写； 重新开始删除并重建聚集而不是增量式的执行这一操作； 在流水线中过滤（改变数据获取）操作应用太迟； 未利用并行化和流水线方式； 不必要的事务日志，特别是在更新时存在的事务日志； 网络通信及文件传输的开销。 4）项目成功评估要素 1）强有力的业务责任人； 2）项目强烈的动机；（获取竞争性资源） 3）项目可行性（技术可行性、资源可行性、数据可行性） 本书重点内容图片摘选]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库锁]]></title>
    <url>%2F2016%2F09%2F06%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81%2F</url>
    <content type="text"><![CDATA[一、概念1、排它锁和共享锁在数据库中有两种基本的锁类型：排它锁（Exclusive Locks，即X锁）和共享锁（Share Locks，即S锁）。当数据对象被加上排它锁时，其他的事务不能对它读取和修改。加了共享锁的数据对象可以被其他事务读取，但不能修改。数据库利用这两种基本的锁类型来对数据库的事务进行并发控制。 2、表级锁和行级锁DML锁的目的在于保证并发情况下的数据完整性，主要包括TM锁和TX锁，其中TM锁称为表级锁，TX锁称为事务锁或行级锁。当Oracle执行DML语句时，系统自动在所要操作的表上申请TM类型的锁。当TM锁获得后，系统再自动申请TX类型的锁，并将实际锁定的数据行的锁标志位进行置位。这样在事务加锁前检查TX锁相容性时就不用再逐行检查锁标志，而只需检查TM锁模式的相容性即可，大大提高了系统的效率。 3、活锁和死锁活锁：当事务T1封锁数据R，事务T2请求数据R于是T2等待。T1释放了R上的封锁，系统首先批准了T3的请求，T2继续等待，之后系统批准了T4的请求……依此类推，T2可能永久等待。这种现象称为活锁。死锁：是指两个以上事务分别请求封锁对方已经封锁的数据，导致长期等待而无法继续进行下去的现象叫死锁。 二、数据库脏读、不可重复读和幻读锁就是防止其他事务访问指定的资源的手段。锁是实现并发控制的主要方法，是多个用户能够同时操纵同一个数据库中的数据而不发生数据不一致现象的重要保障。 一般来说，锁可以防止脏读、不可重复读和幻觉读。 1、事务并发产生的问题1)脏读：一个事务读取到了另外一个事务没有提交的数据事务1：更新一条数据——————-&gt;事务2：读取事务1更新的记录事务1：调用commit进行提交—此时事务2读取到的数据是保存在数据库内存中的数据，称为脏读。—读到的数据为脏数据 详细解释：脏读就是指:当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。 2)不可重复读：在同一事务中，两次读取同一数据，得到内容不同事务1：查询一条记录———————&gt;事务2：更新事务1查询的记录———————&gt;事务2：调用commit进行提交事务1：再次查询上次的记录—此时事务1对同一数据查询了两次，可得到的内容不同，称为不可重复读 3)幻读：同一事务中，用同样的操作读取两次，得到的记录数不相同事务1：查询表中所有记录———————&gt;事务2：插入一条记录———————&gt;事务2：调用commit进行提交事务1：再次查询表中所有记录—此时事务1两次查询到的记录是不一样的，称为幻读详细解释：幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。 三、处理以上隔离级别的问题采用如下方式： 1、事务隔离五种级别 TRANSACTION_NONE 不使用事务。 TRANSACTIONREADUNCOMMITTED 允许脏读。 TRANSACTIONREADCOMMITTED 防止脏读，最常用的隔离级别,并且是大多数数据库的默认隔离级别 TRANSACTIONREPEATABLEREAD 可以防止脏读和不可重复读， TRANSACTION_SERIALIZABLE 可以防止脏读，不可重复读取和幻读，（事务串行化）会降低数据库的效率 以上的五个事务隔离级别都是在Connection接口中定义的静态常量，使用setTransactionIsolation(int level) 方法可以设置事务隔离级别。如:con.setTransactionIsolation(Connection.REPEATABLE_READ);注意：事务的隔离级别受到数据库的限制，不同的数据库支持的的隔离级别不一定相同 2、具体原理1）脏读：修改时加排他锁，直到事务提交后才释放，读取时加共享锁，读取完释放事务1读取数据时加上共享锁后（这 样在事务1读取数据的过程中，其他事务就不会修改该数据），不允许任何事物操作该数据，只能读取，之后1如果有更新操作，那么会转换为排他锁，其他事务更 无权参与进来读写，这样就防止了脏读问题。 但是当事务1读取数据过程中，有可能其他事务也读取了该数据，读取完毕后共享锁释放，此时事务1修改数据，修改 完毕提交事务，其他事务再次读取数据时候发现数据不一致，就会出现不可重复读问题，所以这样不能够避免不可重复读问题。 2)不可重复读：读取数据时加共享锁，写数据时加排他锁，都是事务提交才释放锁。读取时候不允许其他事物修改该数据，不管数据在事务过程中读取多少次，数据都是一致的，避免了不可重复读问题 3)幻读问题：采用的是范围锁RangeS RangeS_S模式，锁定检索范围为只读，这样就避免了幻影读问题。 3、举例说明在这里有个描述范围锁的文章：当执行不同的隔离级别时，可能会发生各种各样不同的问题。下面对它们进行总结并举例说明：1）幻读 ：幻读发生在当两个完全相同的查询执行时，第二次查询所返回的结果集跟第一个查询不相同。发生的情况：没有范围锁。例子：如何避免：实行序列化隔离模式，在任何一个低级别的隔离中都可能会发生。 2）不可重复读：在基于锁的并行控制方法中，如果在执行select时不添加读锁，就会发生不可重复读问题。在多版本并行控制机制中，当一个遇到提交冲突的事务需要回退但却被释放时，会发生不可重复读问题。在上面这个例子中，事务2提交成功，它所做的修改已经可见。然而，事务1已经读取了一个其它的值。在序列化和可重复读的隔离级别中，数据库管理系统会返回旧值，即在被事务2修改之前的值。在提交读和未提交读隔离级别下，可能会返回被更新的值，这就是“不可重复读”。有两个策略可以防止这个问题的发生：推迟事务2的执行，直至事务1提交或者回退。这种策略在使用锁时应用。而在多版本并行控制中，事务2可以被先提交。而事务1，继续执行在旧版本的数据上。当事务1终于尝试提交时，数据库会检验它的结果是否和事务1、事务2顺序执行时一样。如果是，则事务1提交成功。如果不是，事务1会被回退。 3）脏读：脏读发生在一个事务A读取了被另一个事务B修改，但是还未提交的数据。假如B回退，则事务A读取的是无效的数据。这跟不可重复读类似，但是第二个事务不需要执行提交。 四、参考资料1、那什么是乐观锁，什么是悲观锁。悲观锁：需要使用数据库的锁机制，如数据库有表级排它锁，有行级排它锁。假定一切操作都可能发现并发冲突，所以采取悲观态度。通过加锁，屏蔽一切可能违反数据完整性的操作比方select from table for update; 就是表锁，select from table where x = 1 for update; 就是行锁。当使用for update后，其它会话还是可以执行select操作，但无法执行select xx for update操作，只有当前会话commit后，其它for update操作才会被执行。典型例子可以参考quartz集群的锁机制：http://blog.itpub.net/11627468/viewspace-1764753/当然，此时也不可以update，update需要等select xx for update 所在会话commit后才能执行。注：mysql需要设置autocommit=0乐观锁：其实不是真实的去锁住记录不让访问，或者不让更新。假定操作很少发生冲突，一般对于读多写少的情况。只在提交操作时检查是否违反数据完整性。[1] 乐观锁不能解决脏读的问题。可以通过版本号是否比上个版本号或者时间戳来实现。对于冲突检测后的处理，需要业务逻辑去处理。 2、参考的网址以上悲观锁和乐内容参考:http://www.cnblogs.com/guyufei/archive/2011/01/10/1931632.htmlspring锁实现参数：http://blog.itpub.net/12158104/viewspace-374745关于隔离级别可以参考：http://blog.itpub.net/11627468/viewspace-1793036/关于数据库的锁可以参考：http://zhidao.baidu.com/link?url=zRnaslJ8INtEviT--BzrT2bMOqf4LJQzL-NQg2ECu6l-s-xPHi11bBlNjN2_zyNrwd9M0ZnbelQntmfYPB0ifq]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 业务表添加时间戳触发器]]></title>
    <url>%2F2016%2F09%2F06%2FOracle%20%E4%B8%9A%E5%8A%A1%E8%A1%A8%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3%E8%A7%A6%E5%8F%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[/Oracle 业务表添加时间戳触发器/1234567891011121314151617181920CREATE OR REPLACE PROCEDURE "P_ADD_KETTLE" ( table_name VARCHAR2) ASBEGIN DBMS_OUTPUT.PUT_LINE(table_name); --添加时间戳列 EXECUTE IMMEDIATE 'Alter Table "'|| table_name || '" add KETTLE_LASTMODIFY TIMESTAMP (6) DEFAULT current_timestamp'; COMMIT; --添加触发器 EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER KL_'|| SUBSTR('KL_' || table_name,4,27) || ' BEFORE Insert or Update ON "'|| table_name || '" FOR EACH ROW DECLARE -- local variables here BEGIN :NEW.KETTLE_LASTMODIFY := current_timestamp; END;'; COMMIT; DBMS_OUTPUT.PUT_LINE('PROCESS OK...');END p_add_kettle;]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle生成代理键的方法]]></title>
    <url>%2F2016%2F09%2F06%2FOracle%E7%94%9F%E6%88%90%E4%BB%A3%E7%90%86%E9%94%AE%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[这里代理键指使用非business column作为主键字段的情况，通常就是我们想给每条记录添加的ID。 一．MSSqlServer的代理键 最简单的方法是使用自增字段，这样就不必在代码中处理自增字段。缺点：用过的值删除后不会很难再被使用 采用最大值表的方法保存所有代理键的最大值。可以将处理算法放在服务器端的存储过程中，也可以采用客户端算法生成代理键，但这都就需要在代码中明确给代理键字段赋值。采用这种方法还要注意防止同时读写代理键候选值。 二．Oracle的代理键1. Oracle中没有自增字段，所以不管采取什么方法，都免不了要明确处理代理键字段。最接近MSSqlServer自增字段的方法步骤如下： a. 针对表创建一个序列 se_tablename_idcolnameb. 为表创建一个触发器12345678910Create Or Replace Trigger tg_tablename_idcolname Before Insert ON tablenameReferencing New AS New Old AS Old For Each RowDeclare nTmpID number(10,0);Begin Select se_tablename_idcolname.NEXTVAL into nTmpID from dual; :new.idcolname:=nTmpID;End; 这种方法的缺点是：需要为每个表创建一个对应的序列和一个对应的触发器。 序列：虽然一个序列可以为多个表提供值但这样会使数值增加速度以及达到最大值的速度成倍增长。因此还是需要为每个表创建一个序列。序列值会在生成过程中产生漏洞，同样用过的值删除后也不难再被使用。触发器：上面的触发器如果不被disable，则无法由序列以外的其它途径指定代理键值，而事实上当从其它数据库复制已存在的数据或通过后台管理工具手工输入记录的时候，我们是不希望序列来提供值的。为了解决触发器的这一问题，可以稍加改进，将触发器代码改为123456Begin if :new.idcolname is null then Select se_tablename_idcolname.NEXTVAL into nTmpID from dual; :new.idcolname:=nTmpID; end if;End; 这样，就可以在记录的代理键已指定的情况下不在由触发器/序列提供值了。 2. 只使用触发器生成代理键上面的方法中需要为每个表创建一个对应的序列和一个对应的触发器，这显然比较麻烦，我们可以采用下面的方法进行改进。 a. 创建一个存储过程，用于计算指定表的可用键值（如果有漏洞则返回最小的一个，否则返回最大值的下一个值）。该过程只需要创建一个，就可以被所有表的触发器调用。1234567891011121314151617181920212223242526272829303132333435PROCEDURE SP_FINDIDHOLE( sTable IN varchar2, sIDColName IN varchar2, nIDHole Out Number, nMin IN Number:=1)IS/*function:查找ID字段中的空缺数，如果没有就返回最大值加1.从指定的最小值开始查找，忽略比指定的最小值还小的ID值。algorithm：对半查找法/插值法*/ l_min Number(38); l_max Number(38); actual_count Number(38); expected_count Number(38); half Number(38); sDynSql varchar(1000);begin sDynSql:='select max('||sIDColName||'),min('||sIDColName||'),count('||sIDColName||') From '||sTable||' Where '||sIDColName||'&gt;='||To_Char(nMin); execute immediate sDynSql into l_max,l_min,actual_count; l_min:=nMin; expected_count := l_max - l_min + 1; if expected_count = actual_count then nIDHole:=l_max+1; return; end if; while l_max - l_min &gt;= 1 loop -- try lower half of range half := trunc(expected_count/2); expected_count := expected_count - half; sDynSql:='select count('||sIDColName||') From '||sTable||' Where '||sIDColName||' between '||To_Char(l_min)||' and '||To_Char(l_max - half); execute immediate sDynSql into actual_count; exit when actual_count = 0; if actual_count = expected_count then -- missing value must be in upper half l_min := l_min + half; else l_max := l_max - half; end if; end loop; nIDHole:=l_min;END; -- Procedure b. 为表创建一个触发器12345678910Create Or Replace Trigger tg_tablename_idcolname Before Insert ON tablenameReferencing New AS New Old AS Old For Each RowDeclare nTmpID number(10,0);Begin if :new.idcolname is null then sp_FindIDHole(' tablename ',' idcolname ',:new.idcolname);end if;End; 这种方法优点是：只需要为每个表创建一个触发器各个表的触发器调用同一存储过程，触发器中代码少。存储过程每次先查找表中的键值漏洞以供使用，可以减少表中的键值漏洞，删除后的键值将被重复使用。这种方法缺点是：如果不指定键值，则只能用于使用Insert Into Values进行单行插入时生成键值，如果使用了Insert Into Select插入，则会出现错误：ora-04091表正在修改中，函数/过程/触发器不能读取。这是因为Insert Into Select执行过程可能涉及多条记录，而每条记录引起触发器调用的存储过程又要读取该表数据。 3. 最完善的方法上面的方法都有一定的局限性，下面的方法通用性较强，局限小 a. 创建一个存储过程（用于查找漏洞，同上）b. 创建一个存储过程（用于替换临时键值）123456789101112131415161718192021PROCEDURE SP_SETNEWROWID( sTable IN varchar2, sIDColName IN varchar2)IS/*function: 为临时标识的新行替换代理键值*/nNewID number;nMin number(10,0);nMax number(10,0);i number(10,0);Begin Execute Immediate 'Select Min('||sIDColName||'),Max('||sIDColName||') From '||sTable||' Where '||sIDColName||'&lt;=-10' Into nMin,nMax; if nMin is null then return; end if; i:=nMax; while i&gt;=nMin Loop if i&lt;=-10 then sp_FindIDHole(sTable,sIDColName,nNewID); Execute Immediate 'Update '||sTable||' Set '||sIDColName||'='||To_Char(nNewID)||' Where '||sIDColName||'='||To_Char(i); end if; i:=i-1; end loop;End; c. 创建一个序列，用于为任意表的新增行提供临时的键值1CREATE SEQUENCE se_multiinsert_newrow_tmpid INCREMENT BY -1 START WITH -10 MINVALUE -9999999999 MAXVALUE -10 CYCLE NOORDER CACHE 20 d. 为每个表创建两个触发器i. 行触发器（用于给每个新增的行赋一个临时的键值以标识所有新增行）12345678910111213Create Or Replace Trigger tg_tablename_idcolname Before Insert ON tablenameReferencing New AS New Old AS Old For Each RowDeclare nTmpID number(10,0);Begin if :new.idcolname is null then Select se_MultiInsert_NewRow_TmpID.NEXTVAL into nTmpID from dual; :new.idcolname:=nTmpID;end if;End; ii. 表触发器（用于在Insert语句执行后，对每个带有临时键值的新增行依次赋予由存储过程计算出的最终的键值）1234Create Or Replace Trigger tg_tablename_idcolname_A After Insert ON tablenameReferencing New AS New Old AS OldBegin sp_SetNewRowID(' tablename ',' idcolname ');End; 这种方法的优点：可以通用于所有插入记录的情况。这种方法的缺点：需要为每个表创建两个触发器触发器的执行可能使数据库性能下降（但总体消耗原本就是必须的） 三．Oracle方法说明和选择 方法的选择：a) 如果确认在不指定键值的情况下，只使用Insert Into Values向表中插入记录，则可以对该表采用第2种方法。（如果指定了键值，触发器实际上不起作用，因此可以一次插入多条记录，例如通过导入进行插入记录）b) 如果在不指定键值的情况下，有可能使用Insert Into Select向表中插入记录，则应该采用第3种方法。c) 如果表的键值要求不能重复使用（删除的不能再重用），则应该采用第1种方法。如果不介意多表共用一个序列，可以只创建一个序列以尽量减少工作量。 方法说明a) 以上方法中的示例代码，均默认键值为正数，因此采用－10以下的负数来临时标识新增行。如果需要负数作为键值，应对相关代码进行适当修改。主要涉及的是sp_FindIDHole中的查找范围的确定和排除，se_MultiInsert_NewRow_TmpID的生成值范围。b) 以上通用的对象（如存储过程和序列）可用于多个表，如果多个表的情况不同，可将表按情况分组，每组采用一个方法，使用一套通用对象。个别的表也可以个别处理。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CDC概念和组成]]></title>
    <url>%2F2016%2F09%2F06%2FCDC%E6%A6%82%E5%BF%B5%E5%92%8C%E7%BB%84%E6%88%90%2F</url>
    <content type="text"><![CDATA[ODI：Oracle Data IntegratorCDC概念：CDC全称Changed Data Capture，顾名思义就是捕获变化的数据。换句话说，这也可用于增量的ETL，否则的话，每次ETL都要进去全量抽取的话，效率必然极大的下降，实用性也不高。CDC其实是增量抽取的概念，但在ODI中，却意味着ODI独特的增量抽取方法。（事实上，ODI照样可以通过ETL工具通用的记录时间字段，流水号的最新值等方式来进行增量抽取）至于ODI的CDC与通用方式的不同，接下来会谈到。ODI的CDC由日志记录来推动，日志是CDC的一部分，用于记录在数据源上改变（insert、delete、update）的数据。日志记录的方式有两种：简单日志：记录单一数据源（比如说一张表格）的数据变化一致性日志：记录的是一组数据源的数据变化。日志的组成日志记录机制包括四种要素Journals、Capture processes、Subscribers、Journalizing views。Journals：日志，存储变化的数据的地方，在关系型数据库中一般指的就是表格。Capture processes：捕获进程，用来捕获数据源上的数据变化并写入Journals中，通常指的就是触发器；也可用数据源上可用的专门的捕获程序（例如支持从数据源服务器log获取数据的程序）。Subscribers：订阅者，通常是ODI元资料库的条目，记录的是需要使用CDC数据的使用者；只有所有的订阅者都使用了CDC数据后，日志内容才能被清除。Journalizing views：日志查看程序，可用于查看日志内的数据内容，并且可获取CDC数据以支持ODI将新数据写入目标数据存储中。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle中表空间、段、区、块及方案详解]]></title>
    <url>%2F2016%2F09%2F05%2FOracle%E4%B8%AD%E8%A1%A8%E7%A9%BA%E9%97%B4%E3%80%81%E6%AE%B5%E3%80%81%E5%8C%BA%E3%80%81%E5%9D%97%E5%8F%8A%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[oracle中的表空间(tablespace)、方案(schema)、段(segment)、区(extent)、块(block)详解 数据文件和日志文件是数据库中最重要的文件。它们是数据存储的地方。每个数据库至少有一个与之相关的数据文件，通常情况下不只一个，有很多。数据在数据文件中是如何组织的？要了解这些内容我们首先必须理解什么是表空间（tablespace）、段（segment）、区（extent）、块（block），这些都是oracle数据库在数据文件中组织数据的基本单元。现在我们来理解这些概念。 补充资料：逻辑存储结构 (1).块(Data Block)：数据库数据存放在数据块中，一个数据块对应特定磁盘上字节数。块是数据库最小的逻辑存储单元。 (2).区(Extend)：由一系列连续的块组成的，其分配是单一分配的。区也是系统分配空间和回收空间的基本单位。 (3).段(Segment)：表空间中特定类型的逻辑单位，由一个或多个区构成。包括数据段(Data Segment)、回滚段(Rollback Segment)、临时段(Temporary Segment)和索引段(Index Segment) (4).表空间：逻辑磁盘空间，由数据文件组成，是最大的逻辑存储单元。 块块是数据存储的物理单位，也是数据文件中最基础的单位，数据直接存储在块上。是oracle空间分配的最小单位。oracle中的块大小常见的有三种，2KB、4KB、8KB。块的大小在数据库创建时就已经固定下来，数据库中每个块的大小都是相同的，而且所有的块都有相同的格式，由“块头＋表目录＋行目录＋空闲空间＋数据空间”组成。块头包含着块类型（比如是表块、还是索引块）的信息、磁盘上块的位置等信息。表目录（table directory），如果有的话，包含着此块中存储各行的表的信息（如果一个块中存有多个表中的数据）。行目录（row directory）包含着数据行的描述信息，它是一个指针数组，指示了每一行在数据块中的物理位置。块头、表目录、行目录统称为块开销（block overhead），是oracle原来统计、管理块本身的。剩下的两部分很简单，已经存有数据的就是数据空间，暂时没存的就是空闲空间。 区区又叫盘区，是数据文件中一个连续的分配空间，它比块要大，由块组成。有些对象分配空间时可能至少需要两个盘区，比如回滚段，而这两个盘区不一定要求相连。区的大小从一个块到2GB不等 段段是oracle数据库中的分配单位，对象如表、索引等都是以段为单位进行分配。当创建一个表时将创建一个表段，创建一个索引时就创建一个索引段。每一个消耗存储空间的对象最终被存储到一个单一的段中。有回滚段、临时段、聚簇段、索引段等。段(SEGMENT)存在于表空间中，是包含于表空间中的一种指定类型的逻辑存储结构，段由一组区组成。按照段中所存储数据的特性以及为优化系统性能的需要，将段分成4类，即数据段、索引段、回退段、临时段。例如，对于每个表，Oracle都分配一个或多个区以构成该表的数据段；而对于每个索引，Oracle则分配一个或多个区以构成索引段。 表空间表空间是一个逻辑容器，它和数据文件关联起来，一个表空间至少有一个数据文件与之关联。一个表空间可以有多个段，一个段只能属于一个表空间。 方案（schema）方案（schema）又叫模式，是比表空间小一级的逻辑概念，它也是一个逻辑容器。多个用户可能共用一个表空间，那如何区分开每一个用户？那么在表空间中对每个用户都有一个对应的方案，用于保存单个用户的信息。 oracle中存储的层次结构总结 数据库由一个或多个表空间组成 表空间由一个或多个数据文件组成，一个表空间包含多个段 段由一个或多个区组成 区是数据文件中一个连续的分配空间，由一个或多个块组成 块是数据库中最小、最基本的单位，是数据库使用的最小的I/O单元 每个用户都有一个对应的方案 要注意，数据表段区块的概念集合，很容易与schema的结构相混淆。schema是一个组织概念，是来自于经典数据库理论范畴。在oracle中，Schema就是一个组织概念，一个user对应的就是一个schema。schema是逻辑对象的集合组织，同表空间等概念不是一个层面的。在一个schema里，是可以将对象建立在任何数据表空间内的，只有一个默认表空间的概念default tablespace。指定默认表空间是在创建用户的时候指定的。 数据库的物理组件数据库的物理组件是指从物理角度分析数据库的组成，也就是Oracle数据库创建后使用的操作系统物理文件。Oracle数据库的物理文件可分为3类，即数据文件、日志文件和控制文件。数据文件(.DBF)数据文件(Data File)是用于存储数据库数据的文件。如表、索引数据等都存储在数据文件中。每个Oracle数据库有一个或多个物理数据文件。一个数据文件只能与一个数据库关联。数据文件以可检索的格式存储数据，这些数据可以通过SQL语句进行访问。日志文件(.LOG)日志文件(Redo Log File)用于记录对数据库进行的修改信息，对数据库所作的全部修改都被记录在日志中，修改信息包括用户对数据的修改和管理员对数据库结构的修改。日志文件主要用于在数据库出现故障时实施数据库恢复。控制文件(*.CTL)控制文件(Control Files)是记录数据库物理结构的二进制文件。该文件包含维护和验证数据库完整性的必要信息。每个Oracle数据库都含有一个控制文件，它包含下列信息。数据库名称和数据库唯一标识当前日志顺序号有关检查点的信息数据文件和日志文件的路径和名称数据库创建时间]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>存储</tag>
        <tag>结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分析的前提—数据质量]]></title>
    <url>%2F2016%2F09%2F05%2F%E5%88%86%E6%9E%90%E7%9A%84%E5%89%8D%E6%8F%90%E2%80%94%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[数据质量（Data Quality）是数据分析结论有效性和准确性的基础也是最重要的前提和保障。数据质量保证（Data Quality Assurance）是数据仓库架构中的重要环节，也是ETL的重要组成部分。 我们通常通过数据清洗（Data cleansing）来过滤脏数据，保证底层数据的有效性和准确性，数据清洗一般是数据进入数据仓库的前置环节，一般来说数据一旦进入数据仓库，那么必须保证这些数据都是有效的，上层的统计聚合都会以这批数据作为基础数据集，上层不会再去做任何的校验和过滤，同时使用稳定的底层基础数据集也是为了保证所有上层的汇总和多维聚合的结果是严格一致的。但当前我们在构建数据仓库的时候一般不会把所有的数据清洗步骤放在入库之前，一般会把部分数据清洗的工作放在入库以后来执行，主要由于数据仓库对数据处理方面有自身的优势，部分的清洗工作在仓库中进行会更加的简单高效，而且只要数据清洗发生在数据的统计和聚合之前，我们仍然可以保证使用的是清洗之后保留在数据仓库的最终“干净”的基础数据。 前段时间刚好跟同事讨论数据质量保证的问题，之前做数据仓库相关工作的时候也接触过相关的内容，所以这里准备系统地整理一下。之前构建数据仓库基于Oracle，所以选择的是Oracle提供的数据仓库构建工具——OWB（Oracle Warehouse Builder），里面提供了比较完整的保证数据质量的操作流程，主要包括三块： Data Profiling Data Auditing Data Correcting 一、data-profiling Data Profiling，其实目前还没找到非常恰当的翻译，Oracle里面用的是“数据概要分析”，但其实“Profiling”这个词用概要分析无法体现它的意境，看过美剧Criminal Minds（犯罪心理）的同学应该都知道FBI的犯罪行为分析小组（BAU）每集都会对罪犯做一个Criminal Profiling，以分析罪犯的身份背景、行为模式、心理状态等，所以Profiling更多的是一个剖析的过程。维基百科对Data Profiling的解释如下：Data profiling is the process of examining the data available in an existing data source and collecting statistics and information about that data. 这里我们看到Data Profiling需要一个收集统计信息的过程（这也是犯罪心理中Garcia干的活），那么如何让获取数据的统计信息呢？ 熟悉数据库的同学应该知道数据库会对每张表做Analyze，一方面是为了让优化器可以选择合适的执行计划，另一方面对于一些查询可以直接使用分析得到的统计信息返回结果，比如COUNT(*)。这个其实就是简单的Data Profiling，Oracle数据仓库构建工具OWB中提供的Data Profiling的统计信息更加全面，针对建立Data Profile的表中的每个字段都有完整的统计信息，包括： 记录数、最大值、最小值、最大长度、最小长度、唯一值个数、NULL值个数、平均数和中位数，另外OWB还提供了six-sigma值，取值1-6，越高数据质量越好，当six-sigma的值为7的时候可以认为数据质量近乎是完美的。同时针对字段的唯一值，统计信息中给出了每个唯一值的分布频率，这个对发现一些异常数据是非常有用的，后面会详细介绍。 看到上面这些Data Profile的统计信息，我们可能会联想到统计学上面的统计描述，统计学上会使用一些统计量来描述一些数据集或者样本集的特征，如果我们没有类似OWB的这类ETL工具，我们同样可以借助统计学的这些知识来对数据进行简单的Profiling，这里不得不提一个非常实用的图表工具——箱形图（Box plot），也叫箱线图、盒状图。我们可以尝试用箱形图来表现数据的分布特征： 箱线图有很多种表现形式，上面图中的是比较常见的一种箱线图。一般中间矩形箱的上下两边分别为数据集的上四分位数（75%，Q3）和下四分位数（25%，Q1），中间的横线代表数据集的中位数（50%，Media，Q2），同时有些箱线图会用“+”来表示数据集的均值。箱形的上下分别延伸出两条线，这两条线的末端（也叫“触须”）一般是距离箱形1.5个IQR（Q3-Q1，即箱形的长度），所以上端的触须应该是Q3+1.5IQR，下端的触须是Q1-1.5IQR；如果数据集的最小值大于Q1-1.5IQR，我们就会使用最小值替换Q1-1.5IQR作为下方延伸线末端，同样如果最大值小于Q3+1.5IQR，用最大值作为上方延伸线的末端，如果最大或者最小值超出了Q1-1.5IQR到Q3+1.5IQR这个范围，我们将这些超出的数据称为离群点（Outlier），在图中打印出来，即图中在上方触须之外的点。另外，有时候我们也会使用基于数据集的标准差σ，选择上下3σ的范围，或者使用置信水平为95%的置信区间来确定上下边界的末端值。 其实箱线图没有展现数据集的全貌，但通过对数据集几个关键统计量的图形化表现，可以让我们看清数据的整体分布和离散情况。 既然我们通过Data profiling已经可以得到如上的数据统计信息，那么如何利用这些统计信息来审核数据的质量，发现数据可能存在的异常和问题，并对数据进行有效的修正，或者清洗，进而得到“干净”的数据，这些内容就放到下一篇文章吧。 二、Data Auditing 前一篇文章介绍了数据质量的一些基本概念，数据质量控制作为数据仓库的基础环节，是保障上层数据应用的基础。数据质量保证主要包括数据概要分析（Data Profiling）、数据审核（Data Auditing）和数据修正（Data Correcting）三个部分，前一篇文章介绍了Data Profiling的相关内容，从Data Profiling的过程中获得了数据的概要统计信息，所以下面就要用这些数据统计信息来审核数据的质量，检查数据中是否存在脏数据，所以这一篇主要介绍数据审核（Data Auditing）的内容。数据质量的基本要素 如何评估数据的质量或者说怎么样的数据才是符合要求的数据？可以从4个方面去考虑，这4个方面共同构成了数据质量的4个基本要素。 完整性数据的记录和信息是否完整，是否存在缺失的情况。数据的缺失主要有记录的缺失和记录中某个字段信息的缺失，两者都会造成统计结果的不准确，所以完整性是数据质量最基础的保障，而对完整性的评估相对比较容易。 一致性数据的记录是否符合规范，是否与前后及其他数据集合保持统一。数据的一致性主要包括数据记录的规范和数据逻辑的一致性。数据记录的规范主要是数据编码和格式的问题，比如网站的用户ID是15位的数字、商品ID是10位数字，商品包括20个类目、IP地址一定是用”.”分隔的4个0-255的数字组成，及一些定义的数据约束，比如完整性的非空约束、唯一值约束等；数据逻辑性主要是指标统计和计算的一致性，比如PV&gt;=UV，新用户比例在0-1之间等。数据的一致性审核是数据质量审核中比较重要也是比较复杂的一块。 准确性数据中记录的信息和数据是否准确，是否存在异常或者错误的信息。导致一致性问题的原因可能是数据记录的规则不一，但不一定存在错误；而准确性关注的是数据记录中存在的错误，比如字符型数据的乱码现象也应该归到准确性的考核范畴，另外就是异常的数值，异常大或者异常小的数值，不符合有效性要求的数值，如访问量Visits一定是整数、年龄一般在1-100之间、转化率一定是介于0到1的值等。对数据准确性的审核有时会遇到困难，因为对于没有明显异常的错误值我们很难发现。 及时性数据从产生到可以查看的时间间隔，也叫数据的延时时长。虽然说分析型数据的实时性要求并不是太高，但并不意味了就没有要求，分析师可以接受当天的数据要第二天才能查看，但如果数据要延时两三天才能出来，或者每周的数据分析报告要两周后才能出来，那么分析的结论可能已经失去时效性，分析师的工作只是徒劳；同时，某些实时分析和决策需要用到小时或者分钟级的数据，这些需求对数据的时效性要求极高。所以及时性也是数据质量的组成要素之一。 data-auditing 基于数据质量的4个要素，可以对数据进行审核，以评估数据是否满足完整性、一致性、准确性和及时性这4方面的要求，其中数据的及时性主要跟数据的同步和处理过程的效率相关，更多的是通过监控ETL任务的方式来保证数据的及时性，所以这里的数据审核主要指的是评估数据的完整性、一致性和准确性。 完整性我们从Data Profiling得到的数据统计信息里面看看哪些可以用来审核数据的完整性。首先是记录的完整性，一般使用统计的记录数和唯一值个数。比如网站每天的日志记录数是相对恒定的，大概在1000万上下波动，如果某天的日志记录数下降到了只有100万，那很有可能记录缺失了；或者网站的访问记录应该在一天的24小时均有分布，如果某个整点完全没有用户访问记录，那么很有可能网站在当时出了问题或者那个时刻的日志记录传输出现了问题；再如统计访客的地域分布时，一般会包括全国的32个省份直辖市，如果统计的省份唯一值个数少于32，那么很有可能数据也存在缺失。完整性的另一方面，记录中某个字段的数据缺失，可以使用统计信息中的空值（NULL）的个数进行审核。如果某个字段的信息理论上必然存在，比如访问的页面地址、购买的商品ID等，那么这些字段的空值个数的统计就应该是0，这些字段我们可以使用非空（NOT NULL）约束来保证数据的完整性；对于某些允许空的字段，比如用户的cookie信息不一定存在（用户禁用cookie），但空值的占比基本恒定，比如cookie为空的用户比例通常在2%-3%，我们同样可以使用统计的空值个数来计算空值占比，如果空值的占比明显增大，很有可能这个字段的记录出现了问题，信息出现缺失。 一致性如果数据记录格式有标准的编码规则，那么对数据记录的一致性检验比较简单，只要验证所有的记录是否满足这个编码规则就可以，最简单的就是使用字段的长度、唯一值个数这些统计量。比如对用户ID的编码是15位数字，那么字段的最长和最短字符数都应该是15；或者商品ID是P开始后面跟10位数字，可以用同样的方法检验；如果字段必须保证唯一，那么字段的唯一值个数跟记录数应该是一致的，比如用户的注册邮箱；再如地域的省份直辖市一定是统一编码的，记录的一定是“上海”而不是“上海市”、“浙江”而不是“浙江省”，可以把这些唯一值映射到有效的32个省市的列表，如果无法映射，那么字段通不过一致性检验。一致性中逻辑规则的验证相对比较复杂，很多时候指标的统计逻辑的一致性需要底层数据质量的保证，同时也要有非常规范和标准的统计逻辑的定义，所有指标的计算规则必须保证一致。我们经常犯的错误就是汇总数据和细分数据加起来的结果对不上，导致这个问题很有可能的原因就是数据在细分的时候把那些无法明确归到某个细分项的数据给排除了，比如在细分访问来源的时候，如果我们无法将某些非直接进入的来源明确地归到外部链接、搜索引擎、广告等这些既定的来源分类，但也不应该直接过滤掉这些数据，而应该给一个“未知来源”的分类，以保证根据来源细分之后的数据加起来还是可以与总体的数据保持一致。如果需要审核这些数据逻辑的一致性，我们可以建立一些“有效性规则”，比如A&gt;=B，如果C=B/A，那么C的值应该在[0,1]的范围内等，数据无法满足这些规则就无法通过一致性检验。 准确性数据的准确性可能存在于个别记录，也可能存在于整个数据集。如果整个数据集的某个字段的数据存在错误，比如常见的数量级的记录错误，这种错误很容易发现，利用Data Profiling的平均数和中位数也可以发现这类问题。当数据集中存在个别的异常值时，可以使用最大值和最小值的统计量去审核，或者使用箱线图也可以让异常记录一目了然。还有几个准确性的审核问题，字符乱码的问题或者字符被截断的问题，可以使用分布来发现这类问题，一般的数据记录基本符合正态分布或者类正态分布，那么那些占比异常小的数据项很可能存在问题，比如某个字符记录占总体的占比只有0.1%，而其他的占比都在3%以上，那么很有可能这个字符记录有异常，一些ETL工具的数据质量审核会标识出这类占比异常小的记录值。对于数值范围既定的数据，也可以有效性的限制，超过数据有效的值域定义数据记录就是错误的。如果数据并没有显著异常，但仍然可能记录的值是错误的，只是这些值与正常的值比较接近而已，这类准确性检验最困难，一般只能与其他来源或者统计结果进行比对来发现问题，如果使用超过一套数据收集系统或者网站分析工具，那么通过不同数据来源的数据比对可以发现一些数据记录的准确性问题。 上面已经从Data Profiling的统计信息中，通过Data Auditing发现了数据质量上存在的一些问题，那么接下来就要针对这些问题对数据进行清洗和修正，也就是下一篇文章中要介绍的内容——Data Correcting，数据修正。 三、data-correcting 前面的两篇文章——分析的前提—数据质量1和分析的前提—数据质量2分别介绍了通过Data Profiling的方法获取数据的统计信息，并使用Data Auditing来评估数据是否存在质量问题，数据的质量问题可以通过完整性、准确性和一致性三个方面进行审核。这篇文章介绍最后一块内容——数据修正（Data Correcting）。 数据审核帮助我们发现数据中存在的问题，而这些问题有时候可以利用一些方法就行修正，从而提升数据的整体质量，数据修正就是为了完成这个任务，可以从以下几个方面进行修正： 填补缺失值 对于记录缺失的问题，最简单的办法就是数据回补。一般而言统计指标数据缺失可以从原始数据中重新统计获取，而原始数据缺失可以从抽取的数据源或者备份数据中回补。如果原始数据完全丢失，基本就回天无力了。 对于字段值的缺失，很多资料都会介绍使用一些统计学的方法进行修补，其实就是对缺失值的预测或者估计，一般会使用平均数、众数、前后值取平均等方法，或者使用回归分析的方法拟合指标的变化趋势后进行预测。这些方法在缺失值无法使用其他途径找回或者重新统计计算，并且在缺失值有变化规律可循的前提下都是可取的，当某天的指标值丢失时可以通过这类方法根据前几天的数据来预估该天的数值。但很多时候网站分析中如果底层的日志存在缺失值，我们很难预测具体的缺失值，因为访问的细节几乎是无迹可寻的，所以对于访问记录存在缺失值并且这些字段的缺失会明显影响一些统计指标的计算时，最简单的方法就是舍弃该记录，但这种直接过滤掉缺失记录的方法一些只会用于访问日志等不需要非常精确的数据上，如果是网站的运营、交易等这些需要保证完全计算准确的数据绝对是不能直接舍弃的，而且对于访问日志中缺失或者异常记录的过滤也需要基于对这类数据的统计基础上，一般的原则是不太重要的字段如果缺失或者异常的记录占比小于1%或者5‰的情况下可以选择过滤这些记录，如果占比比较高，需要进一步排查日志记录是否存在问题。 删除重复记录 数据集里面某些字段的值必然是唯一的，比如按天统计的指标值中的日期字段，用户信息表的用户ID等，这些需要保证唯一的规则可以对数据库设置唯一约束，但我们在做ETL处理时，有时为了保证数据加载全过程可以不因为违反唯一约束而中断（有时Load的过程需要较长的时间或处理成本，ETL需要有容错能力以保证整个过程不被中断）会先忽略重复记录，待整个ETL过程结束后再对需要保证唯一的字段进行去重处理。 这些重复记录可以比对Data Profiling中数据统计信息的唯一值个数和记录总数是否一致进行审核，而进行修正的最简单办法就是重复记录仅保留一条，删除其他记录。这个需要根据现实情况，有时也可能使用把重复记录的统计量相加的方法进行去重。 转化不一致记录 数据的转化是数据仓库抽取数据过程中最常见的处理，因为数据仓库“集成性”的特征，需要把来自多个数据源的数据集中存入数据仓库，而不同数据源对某些含义相同的字段的编码规则会存在差异，比如用户ID，虽然是相同的用户，但可能A系统的ID是u1001，B系统是1001，C系统是100100，来源于这三套系统的用户ID就需要统一，比如我们将A数据源的u前缀去除，C系统ID除100后统一成B系统的编码方式一起导入数据库；即使是来源于同一套日志，也可能存在记录的不一致，比如之前遇到较早发布的产品版本记录的日志中移动操作系统是Android，而版本更新后记录改成了android，新老版本的日志打到了一起，于是也会涉及数据的转化，但这种记录的不一致性无疑会增加ETL的处理成本。 上面举例的转化规则是比较简单的，在数据仓库的ETL处理数据转化时可能会遇到一些很BT的规则，这个时候最关键的还是对数据源记录方式足够的熟悉，这样才能保证进入数据仓库的数据是一致的。最好的做法就是数据仓库的开发工程师与其他前台系统的开发人员能事先约定一套统一的数据记录和编码的方式，这样可以减少后期的协调沟通和转化处理成本。 处理异常数据 异常数据大部分情况是很难修正的，比如字符编码等问题引起的乱码，字符被截断，异常的数值等，这些异常数据如果没有规律可循几乎不可能被还原，只能将其直接过滤。 有些数据异常则可以被还原，比如原字符中参杂了一些其他的无用字符，可以使用取子串的方法，用trim函数可以去掉字符串前后的空格等；字符被截断的情况如果可以使用截断后字符推导出原完整字符串，那么也可以被还原，比如移动操作系统的记录一般包括Symbian、Android、iPhone、BlackBerry等，如果某些记录的是And，那么可以被还原成Android，因为其他的移动操作系统被截断不可能出现And这种记录。数值记录中存在异常大或者异常小的值是可以分析是否数值单位差异引起的，比如克和千克差了1000倍，美元和人民币存在汇率的差异，时间记录可能存在时区的差异，百分比用的是小于1的小数还是已经乘了100等等，这些数值的异常可以通过转化进行处理，数值单位的差异也可以认为是数据的不一致性，或者是某些数值被错误的放大或缩小，比如数值后面被多加了几个0导致了数据的异常。 最后，总结一下数据可修正的前提：1) 数据质量的问题可以通过Data Auditing的过程被审核出来；2) 数据的问题必须有迹可循，可以通过趋势进行预测或者可以通过一些规则进行转换还原。否者，对于异常数据只能直接进行删除丢弃，但进行数据过滤之前必须评估异常记录的比例，当占比过高时需要重新审核原始数据的记录方式是否存在问题。 转自：http://webdataanalysis.net/data-collection-and-preprocessing/data-quality-1/]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql分区功能详细介绍]]></title>
    <url>%2F2016%2F09%2F05%2Fmysql%E5%88%86%E5%8C%BA%E5%8A%9F%E8%83%BD%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[一、什么是数据库分区mysql数据库中的数据是以文件的形势存在磁盘上的，默认放在/mysql/data下面（可以通过my.cnf中的datadir来查看），一张表主要对应着三个文件，一个是frm存放表结构的，一个是myd存放表数据的，一个是myi存表索引的。如果一张表的数据量太大的话，那么myd,myi就会变的很大，查找数据就会变的很慢，这个时候我们可以利用mysql的分区功能，在物理上将这一张表对应的三个文件，分割成许多个小块，这样呢，我们查找一条数据时，就不用全部查找了，只要知道这条数据在哪一块，然后在那一块找就行了。如果表的数据太大，可能一个磁盘放不下，这个时候，我们可以把数据分配到不同的磁盘里面去。 二、分区的二种方式1、横向分区什么是横向分区呢？就是横着来分区了，举例来说明一下，假如有100W条数据，分成十份，前10W条数据放到第一个分区，第二个10W条数据放到第二个分区，依此类推。也就是把表分成了十分，根用merge来分表，有点像哦。取出一条数据的时候，这条数据包含了表结构中的所有字段，也就是说横向分区，并没有改变表的结构。 2、纵向分区什么是纵向分区呢？就是竖来分区了，举例来说明，在设计用户表的时候，开始的时候没有考虑好，而把个人的所有信息都放到了一张表里面去，这样这个表里面就会有比较大的字段，如个人简介，而这些简介呢，也许不会有好多人去看，所以等到有人要看的时候，在去查找，分表的时候，可以把这样的大字段，分开来。感觉数据库的分区好像是切苹果，到底是横着切呢，还是竖着切，根据个人喜好了，mysql提供的分区属于第一种，横向分区，并且细分成很多种方式。 三、分区优点 分区可以分在多个磁盘，存储更大一点 根据查找条件，也就是where后面的条件，查找只查找相应的分区不用全部查找了 进行大数据搜索时可以进行并行处理。 跨多个磁盘来分散数据查询，来获得更大的查询吞吐量]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DML触发器(dml trigger)]]></title>
    <url>%2F2016%2F09%2F05%2FDML%E8%A7%A6%E5%8F%91%E5%99%A8(dml%20trigger)%20%2F</url>
    <content type="text"><![CDATA[Oracle DML触发器实现功能：很多时候我们或者客户有如下需求：在A.B表上添加触发器.触发事件：UPDATE,DELETE,INSERT 后触发；对表的每一行触发器执行一次；记录用户名，操作类型，操作时间，修改或删除前的数据，新增的数据。/①、确认该表没有失效的触发器以及没有已经存在重复的日志表名②、创建对应表的触发器日志表，并添加 记录用户名，操作类型，操作时间等列③、修改trigger里对日志表插入的内容创建trigger④、查看触发器状态，使其enable⑤、测试触发器是否可用或者报错 / 1、创建日志表并增加审计列1234567891011121314151617CREATE TABLE TEST.TEST1_LOGAS SELECT * FROM TEST.TEST1 WHERE 1 = 0;ALTER TABLE TEST.TEST1_LOG ADD t_operator VARCHAR2 (100);ALTER TABLE TEST.TEST1_LOG ADD t_action VARCHAR2 (100);ALTER TABLE TEST.TEST1_LOG ADD t_date date;ALTER TABLE TEST.TEST1_LOG ADD t_remark VARCHAR2 (100); 2、创建触发器1CREATE OR REPLACE TRIGGER TEST.TRG_TEST1 《《《《《注意这里最好提起查是否有之前的重复trigger名，避免误replace12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061AFTER INSERT OR DELETE OR UPDATE ON TEST.TEST1 FOR EACH ROWDECLARE v_havenew BOOLEAN := FALSE; v_haveold BOOLEAN := FALSE; v_action VARCHAR2 (32);BEGIN IF INSERTING THEN v_havenew := TRUE; v_action := 'INSERT'; END IF; IF UPDATING THEN v_havenew := TRUE; v_action := 'UPDATE'; v_haveold := TRUE; END IF; IF DELETING THEN v_action := 'DELETE'; v_haveold := TRUE; END IF; IF TRUE = v_haveold THEN INSERT INTO TEST.TEST1_LOG (id, -----/*注意这里insert日志表的列要参照日志的列补充上，我这里的测试表只有id一个列*/ t_operator, t_action, t_date, t_remark) VALUES (:old.id, USER, v_action, SYSDATE, 'old'); END IF; IF TRUE = v_havenew THEN INSERT INTO TEST.TEST1_LOG (id, -----/*注意这里insert日志表的列要参照日志的列补充上，我这里的测试表只有id一个列*/ t_operator, t_action, t_date, t_remark) VALUES ( :new.id, USER, v_action, SYSDATE, 'new'); END IF;EXCEPTION WHEN OTHERS THEN NULL;END TRG_TEST1; 3、创建完成后查看trigger状态：1234select trigger_name, status from dba_triggers where owner = 'TEST' and trigger_name = 'TRG_TEST1'; TRIGGER_NA STATUS---------- ------------------------TRG_TEST1 ENABLED 《《《《《《enable 如果不是enable手工enable如下1ALTER TRIGGER "TEST"."TRG_TEST1" ENABLE; 4、增删改测试1234567891011121314SQL&gt; update TEST.test1 set id=5 where id=2;1 row updated.SQL&gt; commit;Commit complete.---------------------------------------------------------SQL&gt; delete from TEST.test1 where id=8;1 row deleted.SQL&gt; commit;Commit complete.-----------------------------------------------------SQL&gt; insert into TEST.test1 values(10);1 row created.SQL&gt; commit;Commit complete. 5、查看日志表对应是否有记录。1select * from TEST.TEST1_LOG order by t_date desc; 转自：http://blog.itpub.net/31043804/viewspace-2119546/]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图书的分类法与主题法]]></title>
    <url>%2F2016%2F09%2F02%2F%E5%9B%BE%E4%B9%A6%E7%9A%84%E5%88%86%E7%B1%BB%E6%B3%95%E4%B8%8E%E4%B8%BB%E9%A2%98%E6%B3%95%2F</url>
    <content type="text"><![CDATA[一.图书分类 图书分类是图书馆将图书数据采购入馆后，由于搜藏的图书数据过于繁杂，因此图书馆都会依据图书分类法，将图书数据依其内容主题的不同，分别归类，给定分类号，以作为图书馆图书整理和提供利用的工具。 二.图书分类法 图书分类法是图书馆为了方便图书收藏和借阅而采取的一种分类方法。一般分类法分为： 1. 基本法，按主题分类 2. 附加法：按年代、地域、语言分类 3. 还可以人为按版本、规格等分类。 目前已经发展有好几种分类法，可提供适合于某一特定图书馆及其读者所需要的存取与管理方式。一般说来，每一种分类法都有一个按规定原则将知识编列入一个有大类、中类、小类的体制。 纯数字码分类法 杜威十进制图书分类法 通用十进制图书分类法 中国图书分类法 赖永祥中国图书分类法 何日章中国图书十进分类法 日本十进分类法 中国科学院图书馆图书分类法 英数字码分类法 美国国会图书馆图书分类法 中国图书馆图书分类法 1999年第四版已改名为《中国图书馆分类法》 冒号图书分类法 布立斯图书分类法 三．杜威十进图书分类法 杜威十进制图书分类法于1876年首次发表，历经22次的大改版后，内容已有相当程度的修改与扩充。最新的版本为2004年版。该分类法以三位数字代表分类码，共可分为10个大分类、100个中分类及1000个小分类。 除了三位数分类外，一般会有两位数字的附加码，以代表不同的地区、时间、材料或其他特性的论述，分类码与附加码之间则以小数点「.」隔开。例如 330 表经济学 + .9 表地区别论述 + .04 表欧洲 = 330.94 表欧洲经济学。 四．杜威十进图书分类法十个大分类 000 - 计算机科学、信息与总类 100 - 哲学与心理学 200 - 宗教 300 - 社会科学 400 - 语言 500 - 科学 (指自然科学) 600 - 技术应用科学 700 - 艺术与休闲 800 - 文学 900 - 历史、地理与传记 五．中国图书分类法 中国图书分类法初成于1927年完成，系南京金陵大学图书馆馆长刘国钧以「杜威分类法」为基础，扩增有关中国图书的类目以便适合中国的需要编制而成。 中国图书分类法首先在金陵大学图书馆试用，随后普及全国。经赖永祥增修的赖永祥中国图书分类法至今为台港澳各地图书馆所沿用。(两者的纲目大体一致，但详细的分号数码偶有分别。) 由于共产主义意识形态的因素，中国大陆地区图书馆后来采用中国图书馆图书分类法，而中国大陆一些图书馆较早时期的图书室仍然沿用中国图书分类法。 六．中国图书分类法十大分类 000 总类 100 哲学类 200 宗教类 300 科学类 400 应用科学类 500 社会科学类 600-700 史地类 600 中国史地 700 世界史地 800 语文类 900 艺术类 七．英数字码分类法 美国国会图书馆图书分类法 中国图书馆图书分类法 1999年第四版已改名为《中国图书馆分类法》 冒号图书分类法 布立斯图书分类法 八．主题法 主题法之意义： 主题法有两种含义，其一是指主题整序法，其二是指主题检索语言。 第一种含义，它是一种用语词标识处理文献、组织主题检索工具（或检索系统）的方法。即是将众多的文献根据其内容主题，强制性地用一个语词标识系统予以组织的过程。其过程有二：一是主题标引，即将文献的主题概念转换为经规范处理的语词标识（即主题词）；二是主题检索，即用户在检索时须将其提问的概念，转换为主题词表已规范的语词标识。 第二种含义：主题检索语言，它是指文献检索语言（简称检索语言）而言。 主题语言有两大类型，其一是以号码为文献主题标识的分类检索语言（分类语言），其二是以语词为文献主题标识的主题检索语言（主题语言）。 前者简称分类法，后者简称主题法。主题法的构成要素有四：语词标识、字顺系统、参照系统、主题检索工具（主题目录、主题索引、主题词倒排档？）。 主题法特点：无论主题检索语言，还是主题整序法，它们共同的基本特点有下列五点： 1. 按文献所论的事物（即主题）集中文献 2. 采用经过规范处理直接表达文献所论述的事物的语词 3. 以参照系统等间接显示事物概念间（即主题词之间）的关系 4. 以字顺序列提供按事物名称检索文献的途径（即主题检索途径） 5. 依主题词的字顺系统，排列款目词之顺序 主题法与分类法：主题法与分类法都是揭示文献主题内容的方法，在标引过程中，均需对文献进行主题分析，而且一般都要以预先编制好的、反映主题概念的工具 ─ 分类表或主题词表为依据。因而提供系统检索主题的分类法，也可视为广义的主题法。 九．主题法与分类法的不同 1. 标识符号的不同： 分类法通常以号码（数字或字母）作为文献主题内容的标识，标引或检索时都必须使用分类号。 主题法则是直接以自然语言中的语词（词或词组）作为文献内容主题的标识，标引或检索时都必须使用主题词。 由于主题法的标记符号系以自然语言中的语词为基础，因而在概念表达的直观性特点上，主题法较优于分类法。而分类法的标记符号系以号码为基础，基本上不受语言文字的束缚，不同语种的同一主题可使用相同的分类号来表达，所以在标识的通用性乃至标准化方面，主题法则逊于分类法。 2. 体系编排的不同： 分类法的标识符号既然是号码，其规范工具或检索工具自然依号码顺序（数序或字母顺）编排。主题法的标识符号既然是语词，其规范工具或检索工具自然依字顺（中文多依笔画或音序，西文依字母）编排。逻辑次序分类系统是分类体系结构的主体。这种体系结构,是为了充分揭示事物之间的关系,便于读者从学科门类进行系统性(族性)检索。字顺系统是主题法体系结构的主体,这种体系结构是为了满足事物进行专指性(特性)检索的需要。 3. 揭示事物的角度不同 主题法着眼于特定事物,具体问题和对象,它不管学科的分野,也不管学科之间的逻辑关系,只是对特定事物及其它各部方面的问题进行探讨和研究。分类法则是着眼事物的学科性质,揭示事物属于什么学科门类,便于读之中进行研究和探索。比如说;“(肥料)”,分类法把有关肥料的资料集中在“肥料”这一类目之中,然后再按肥料的成分,性质、作用等层层划分。但在主题法中,却把有关各种肥料的资料却分散到各个肥料的名字下面,而在肥料这个标题下只有关于肥料的一般性著作。 4. 语义关系的不同： 分类法主题的内在关系主要通过上下位类、同位类以及交替类目、参见类目和注释来显示。尤其在体系分类表中，类目间等级关系可以通过类目排列的位置、缩格形式，乃至字体直接且明显地展示出来。因而分类法的系统性、等级性较强，便于族性检索，并可根据检索需要进行扩检或缩检。 主题法的主题内在关系，主要通过广义词、狭义词和相关词等词间参照系统的方式来显示，此外也通过词族索引、范畴索引等进行分类显示。所以，主题词表中相关主题之间的关系比较难以直接地、一目了然地展示出来，因而在族性检索，尤其是较大范围课题检索中，不如分类法。 5. 集中分散的不同： 对图书资料的集中与分散方面的不同 分类法由于受到学科体系的制约,这就必然将同一事物或同一主题的图书资料分散在各个不同的学科门类之下,将同主题的图书分散,但把同一学科性质的图书资料集中,而主题法则是把同一主题的图书资料集中,把同一学科性质的图书资料分散。分类法以学科内在联系为基础来组织主题概念，将具有同一学科性质的、研究不同对象的文献聚集在一起。例如将茶、稻、麦等各种农作物的栽培方面文献聚集在农艺类下，而将有关这些农作物的加工和营业方面文献聚集在农产加工和农产品业之类下。即同一对象的文献，因其研究角度的不同，因而在分类检索系统中分散至各处。主题法系以事物主题名称的字面形式来组织文献，将从不同角度研究同一对象的文献按主题词聚集在一起。例如将有关茶的栽培、运销、价格、营业、加工等各方面的文献都集中于“茶”这个主题词之下。 总之，分类法按学科集中，而主题法则按事物集中。因此可以说，在分类检索系统中集中于某一类目之下的文献，在主题检索系统中往往分散在不同的主题词之下；反之，在主题检索系统中集中于某一主题词之下的文献，在分类检索系统中往往分散在不同的类目之下。 6. 适应性能的不同： 分类法因受学科体系及标记符号的束缚，增添新主题或改变原有主题位置的难度都比较大，更无法合理安置那些学科关系不明或关复杂的主题，分类检索系统中所容纳的知识体系也往往落于科技发展之后。主题检索系统中的主题标识按字顺排列，增删主题词不会影响整个系统的结构，只需变更个别主题词之间的参照关系，因此可随时根据学术文化的发展与文献实际情况增补新词，删除和调整旧词，使系统中所容纳的主题容易与学术保持同步。 7. 组织文献的不同： 利用分类法和主题法皆可以建立检索工具或检索系统，但是由于分类法系统性强，分类标记简短、易写、易排，因而可以发挥其系统组织文献的功能，用于分类排架、编制文献通报及分类统计等。主题法基本上缺乏这方面的功能。 8. 号码组配的方法不同 主题法组配由于直接采用自然语言的名词术语作为组配标识,其组配是词与词的结合,所以使用起来比较直观,灵活如“国际内燃机会议”可以用内燃机——国际会议。 分类法的单线性逻辑序列,很难反映边缘学科,交叉学科和综合学科的图书资料,为了满足这一需要,现代许多分类法则采用通用复分组配,专用复分组配和主类号组配等有力措施,来补救这一缺点。分类法的组配进行由于受到号码形式的限制,其组配的深度是有限的组配的层次多了,号码则特别长,这对检索图书资料是很复杂和困难的,《国际十进分类法》对“国际内燃机会议”的组配号码是; 621•43:061•3 (100)(内燃机主类号)(会议通过复分号)(世界国际通用复分号) 9. 适用自动化程度不同 主题法能很好地适用于各种机诫设备,有利于计算机检索,便于实现图书资料检索工作的自动化、网络化。分类法虽然也可用于计算机检索,但它主要擅长编制手工检索工具。在应用于就计算机方面,不如主题法来的快,见效好。主题法与分类法,跟任何事物一样,都是一分为二的。它们各有所长短。主题法的长处正是分类法的短处,分类法的优点正是主题法的不足,因此,主题法与分类法要取长补短、相辅相成。 十．关于主题目录和分类目录 主题目录较分类目录稳定,因为分类目录随着分类法的修改而变化,而主题目录则影响而架位同样不受影响。过去图书馆界一直把主题目录视为是对分类目录的一种补充,属辅助目录,这种传统的看法,随着科学技术越来越高。从文献检索工作的发展前景看,主题法今后必将发展为一种占主导地位的目录。如果我们把分类目录比作左手,则主题目录就可比作右手。主题目录独特的优点在于:它即不受科学体系的制约,又不受人为的读者很难掌握的分类规则的束缚,读者对自己所需的有关某一主题方面的资料,无须考虑在哪一类,只要按主题字顺去查就行了。 十一.总结 分类法的基本特征是知识的系统性,主题法的基本特征是知识的特指性。分类法根据科学领域划分门类,归类的标准是知识的科学性质,而不是知识的对象。由于同一对象可以从不同的科学角度去研究它,因而关于同一对象的资料便分入不同的学科、不同的类。但用同样方法。同样观点研究不同事物的资料,却可以集中在一处。主题法归类的标准是知识对象的本身,而不是知识的科学性质,这样就集中了不同观点、不同方法去研究同一对象的资料。但是,用同样方法、同样观点研究不同对象的资料却被分散了。分类法和主题法的差异形成了各自的特点,显示出二者互有长短、各有千秋。但它们并不是互不联系,而是在发展中互相渗透、互相结合、互相取长补短,为全国采用统一的检索方法创造条件。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>方法</tag>
        <tag>图书</tag>
        <tag>分类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Analytics数据分析帮你解决的9个问题]]></title>
    <url>%2F2016%2F09%2F02%2FGoogle%20Analytics%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B8%AE%E4%BD%A0%E8%A7%A3%E5%86%B3%E7%9A%849%E4%B8%AA%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1、监测广告效果上图是我在百度里搜索「京东」后，在展示结果里点的一个连结，我们看到：来源 source=baidu-search，也就是说由百度搜索而来；媒介 medium=cpc，就是说广告形式是cpc，京东在百度投放了按点击付费的广告；广告编码 campaign=XXX，就是这条广告的编码是XXX，是京东自己设计的复杂的编码系统，因为京东肯定投放了很多形式的广告。简单的说，就是我可以为我的广告设计一条监测连结，只要是通过这条广告点击而来的流量，都可以让我监测到，包括这些用户到达我的网站后所有的行为。 2、发现网站流程问题举栗，我做了一次推广活动，带来1000个流量，这1000个人里面点击注册按钮的有5人，注册成功的有3人。这个数据意味着什么，1000个人里面点击注册按钮只有5人，也就是千分之五，从点击注册到完成注册的有3人，也就是60%，后者是个比较正常的数字。但为什么1000个人里面只有5人点击了注册按钮？我们看到这个网站转化漏斗突然缩窄。导致了KPI无法达成。我们分析可能是：1) 这个「注册」的按钮放的位置不大好，不明显，用户找不到，所以他不会点击;2) 这个「注册」按钮本身有程序错误，完成不了一次请求，无法到达注册页面，没有被监测到；……这些数据可以告诉我们，网站的某个设计流程有问题。简单的说，任何产品转化过程我们都可以画一个上图的漏斗图像，如果发现其中某个环节突破缩窄，说明这个环节肯定有问题。 3、监测目标达成结果（goal）GA（Google Analytics）可以设置20种目标，每个目标达成都是用户一步一步走过来的。比如注册，第一步是用户来到着陆页；第二步是用户点击注册按钮；第三步是用户来到注册页面，填写相关信息；第四步是点击注册按钮；第五步是来到注册成功的页面。这五步里面用户必须都完成，才能完成最终「注册成功」这个KPI，在每一步里面都会有用户流失，但是每一层里面数据到底是什么样子，哪一层出现了问题，这些都需要通过数据分析实现，Ok？当我们学习了数据分析之后，再也不要把文章曝光量、阅读量、转发量等作为KPI了，这些表层数据和转化关系真的不大。总之，一定要想好你的KPI到底是啥，尤其做领导的。KPI一旦定错了，就会导致后面所有营销行为都变形。 4、找到最多流量的媒介来源或渠道举栗：某网站一天到访UV1000个，其中：1) 微博粉丝通带来200次访问，花费100元；2) 百度竞价带来300次访问，花费600远；3) 微信大号推广带来500次访问，花费3000元可以明显看出性价比最好的是粉丝通，成本是0.5元/次；最不好的是微信大号，那我是否可以把微信大号推广去掉，把费用全部投放到粉丝通里面去；同时百度竞价这边继续调整优化。 5、知道用户用什么流量器和设备访问你的网站这个特么太重要了，我们都知道随着智能型手机发展，移动端访问总体已占到60%，如果你的网站没有做移动端适配（也就是说用户用手机打开你那个闪大不留点的网站，乱七八糟，页面根本看不全那种……），移动端跳出率就会很高，60%的流量和推广费用就完全浪费了。通过GA后台，我们可以查看到用户使用什么浏览器和设备访问你的网站： 6、找到最有价值的访客来自哪里（访问行为）渠道流量大并不代表着渠道的价值大，需要关注的是最终的转化。如果你做5个渠道，每个渠道有5个维度，这样其实就有25个小渠道。你需要确定的是哪个渠道哪个维度价值最大。如图，知乎带来的流量最多对吧！然后你需要确定的是知乎哪个维度（具体到哪个问题）给你带来的价值最大： 7、了解用户在你的网站上喜欢什么谷歌分析提供网页内分析，即你可以看到你的网页上用户对每个按钮点击率，通过分析可以知道用户最喜欢点哪些按钮，哪些网页和内容是用户最喜欢的。这样你是否可以对用户喜欢的按钮进行调节，变大，放在更明显的位置，漂色，调节内容等。 8、测试不同版本广告，看哪个用户最喜欢举栗子，你在广点通做某广告位或在微博里搞活动，你不能说你觉得你做出的这个内容创意特别好，用户肯定会喜欢。那只是你觉得……你需要制作出五个版本内容，每个版本都设定相应的监测连结，且每个版本都用2天的时间投放测试，通过GA后台得知哪个版本的内容效果最好，转化率最高。营销工作中测试思维要贯穿始终！ 9、知道用户付款前都做了什么你需要清晰的知道付费用户付款前在你的网站上都做了什么，这些对你的网站优化很重要。下图是GA里的行为流，通过图可以清晰看出用户在付款之前都做了哪些动作，进行了哪些操作或互动。 另外：不同产品转化周期和难度是不同。从轻到难依次可能会是：产品本身转化（理想状态）—注册试用转化—需要客服介入—需要电销—需要见面谈；时间周期可能从几小时，1天，到1周，甚至1个月。盆友，你测试了没？ 原文网址：https://kknews.cc/tech/pqylr2.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[COOKIE和SESSION有什么区别？]]></title>
    <url>%2F2016%2F09%2F01%2FCOOKIE%E5%92%8CSESSION%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。 一、Session由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。 二、Cookie思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。 缺点：1、cookie的存储是自愿的，一个客户端不一定要去接受或存储cookie。 事实上，所有的浏览器都让用户自己控制 是否接受cookies。 如果你想知道cookies对于Web应用有多重要，你可以试着打开这个浏览器的 选项：尽管cookies广为使用，但仍被认为是不可靠的的。 这意味着，开发者使用cookies之前必须 检查用户是否可以接收cookie。2、 Cookie(特别是那些没通过HTTPS传输的)是非常不安全的。 因为HTTP数据是以明文发送的，所以 特别容易受到嗅探攻击。 也就是说，嗅探攻击者可以在网络中拦截并读取cookies，因此你要 绝对避免在cookies中存储敏感信息。 这就意味着您不应该使用cookie来在存储任何敏感信息。3、还有一种被称为”中间人”的攻击更阴险，攻击者拦截一个cookie并将其用于另一个用户。 第19章将深入讨论这种攻击的本质以及如何避免。3即使从预想中的接收者返回的cookie也是不安全的。 4. 在大多数浏览器中您可以非常容易地修改cookies中的信息。有经验的用户甚至可以通过像mechanize(http://wwwsearch.sourceforge.net/mechanize/) 这样的工具手工构造一个HTTP请求。5、 因此不能在cookies中存储可能会被篡改的敏感数据。 在cookies中存储 IsLoggedIn=1 ，以标识用户已经登录。 犯这类错误的站点数量多的令人难以置信； 绕过这些网站的安全系统也是易如反掌。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多对多维度或多值维度-桥接表]]></title>
    <url>%2F2016%2F08%2F30%2F%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%BB%B4%E5%BA%A6%E6%88%96%E5%A4%9A%E5%80%BC%E7%BB%B4%E5%BA%A6-%E6%A1%A5%E6%8E%A5%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[多对多维度或多值维度维度表和事实表之间的标准关系是一对多关系，这意味着维度表中的一行记录会连接事实表中的多行记录，但是事实表中的一行记录在维度表中只关联一行记录。这种关系很重要，因为它防止了重复计数。幸运的是，在大多数情况下都是这种一对多关系。在现实世界中还存在比一对多关系更复杂的两种常见情况：事实表和维度表之间的多对多关系。维度表之间的多对多关系。这两种情况本质是相同的，但事实表和维度表之间的多对多关系少了唯一描述事实和维度组的中间维度。对于这两种情况，我们介绍一种称为桥接表的中间表，以支持更复杂的多对多关系。 1. 事实表和维度表之间的多对多关系在多个维度表的值可以赋给单个事实事务时，事实表和维度表之间通常是多对多关系。一个常见的示例是多个销售代表可以参与给定的销售事务，这种情形经常发生在涉及大宗交易的复杂销售事件中(例如计算机系统)。精确地处理这种情况需要创建一个桥接表，将销售代表组合成一个组。SalesRepGroup桥接表如图2-4所示。ETL过程需要针对每条引入的事实表记录中的销售代表组合，在桥接表中查找相应的销售代表组键。如果该销售代表组键不存在，就添加一个新的销售代表组。注意图2-4所示的桥接表有重复计数的风险。如果按照销售代表累加销售量，那么每个销售代表都会对总销售量做出贡献。对某些分析而言结果是正确的，但对于其他情况仍会有重复计数的问题。要解决这个问题，可以向桥接表中添加加权因子列。加权因子是一个分数值，所有的销售代表组的加权因子累加起来为1。将加权因子和累加事实相乘，以按照每个销售代表在分组中的比重分配事实。注意可能需要在Orders和SalesRepGroup之间添加一个SalesRepGroupKey表，以支持真正的主键-外键关系。这会把这个事实-维度实例变成维度-维度实例。 2．维度之间的多对多关系从分析的角度来看，维度之间的多对多关系是一个很重要的概念，大多数维度都不是完全相互独立的。维度之间的独立性是连续的，而不是有或没有这两种截然不同的状态。例如在连续的一端，零售店这条链状关系的库存维度和产品维度是相对独立的，而不是绝对独立的。一些库存方式不适合某些产品。其他维度之间的关系则紧密得多，但是由于存在多对多关系，因此很难将其组合成单个维度。例如在银行系统中，账户和顾客之间有直接关系，但不是一对一的关系。一个账户可以有一个或多个签名确认的顾客，一个顾客也可有多个账户。银行通常从账户的角度来处理数据；MonthAccountSnapshot(月账快照)是金融机构中常见的一种事实表。因为账户和顾客之间存在的多对多关系，这种更多关注账户的系统就很难按照顾客来查看账户。一种方法是创建CustomerGroup桥接表来连接事实表，例如前面多对多示例中的SalesRepGroup表。较好的方法是利用账户和顾客之间的关系，如图2-5所示。账户和顾客维度之间的AccountToCustomer桥接表可以捕获多对多关系，并且有几个显著的优点。首先，源系统中的关系是已知的，因此创建桥接表比手动构建SalesRepGroup维度表更容易。其次，账户-顾客关系自身就非常有趣。AccountToCustomer桥接表可以回答诸如”每个顾客的平均账户数量是多少？”这样的问题，而无须连接任何事实表。桥接表经常是底层业务过程的标志，特别是在需要跟踪桥接表随时间而产生的变化(即关系本身是类型2变化)时。对顾客和账户来说，业务过程可能称为账户维护，其中一项事务可能称作”添加签名人”。如果3个顾客与同一个账户关联，在源系统中该账户就会有3个”Add(添加)”事务。通常这些事务和它们表示的业务过程还不是很重要，不需要在DW/BI系统中通过它们自身的事实表来跟踪。然而，这些关系和它们产生的变化对分析业务来说是相当重要的。我们在维度模型中把它们包含为渐变维度，在一些情况下包含为桥接表。 注意：Analysis Services的功能支持多对多关系的维度。Analysis Services希望处理与本节所述相同的结构。它将桥接表称为中间事实表，其实是同一个概念。资源：下面是多对多关系的一些补充资料：The Data Warehouse Toolkit，Second Edition(Wiley, 2002)中的第262到265页介绍了事实和维度之间的多对多关系，第205和206页介绍了维度之间的多对多关系。 转自：http://book.51cto.com/art/201207/346074.htm]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[协调世界时(zulu time)]]></title>
    <url>%2F2016%2F08%2F30%2F%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6(zulu%20time)%20%2F</url>
    <content type="text"><![CDATA[协调世界时(zulu time)，又称世界标准时间或世界协调时间，简称UTC（英文“Coordinated Universal Time”／法文“Temps Universel Coordonné”），是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间(GMT)。UTC基于国际原子时，并通过不规则的加入闰秒来抵消地球自转变慢的影响.在军事中，协调世界时区会使用“Z”来表示。而在航空上，所有使用的时间划一规定是协调世界时。而且Z在无线电中应以北约音标字母读作“Zulu”，协调世界时也会被称为“Zulu time”。比如说飞机在香港时间（UTC+8）18:00整起飞，就会写成1000z，又或者读作“1000Zulu”。]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>时间</tag>
        <tag>时区</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[选择主键：自然键还是代理键？]]></title>
    <url>%2F2016%2F08%2F30%2F%E9%80%89%E6%8B%A9%E4%B8%BB%E9%94%AE%EF%BC%9A%E8%87%AA%E7%84%B6%E9%94%AE%E8%BF%98%E6%98%AF%E4%BB%A3%E7%90%86%E9%94%AE%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[本文概述关系数据库中为表指定主键的策略。主要关注于何时使用自然键或者代理键的问题。有些人会告诉你应该总是使用自然键，而另外一些人会告诉你应该总是使用代理键。这些人总是被证明是错误的，通常他们仅仅是与你分享了他们“数据信仰”的偏见。事实上自然键与代理键具有各自的优缺点，没有在所有情况下都完美的策略。也就是说，你必须清楚你要做的事情才能做好它。本文讨论以下内容： 常用的术语 代理键实现策略 有效选键的技巧 做出了“错误”选择时如何应对 1、常用的术语让我们从描述一些关于键的常用术语开始，然后再看一个示例。这些术语包括：键。键是唯一标识一个实体的一个或者多个数据属性。在物理数据库中，键可以由表的一个或者多个列组成，它们的值唯一标识关系表中的一行。复合键。由两个或者多个属性组成的键。自然键。由现实世界中已经存在的属性组成的键。例如，美国公民被分配了一个唯一（不保证一定正确，但实际上非常接近唯一）的社会保险号（SSN）。如果隐私法允许的话，SSN可能被用作Person实体的自然键（假设组织的人员范围仅限于美国）。代理键。不具有业务含义的键。候选键。在逻辑数据模型中的实体类型可能具有0或多个候选键，简称为唯一标识（注解：某些人不主张在逻辑数据模型中标识候选键，因此没有固定标准）。例如，假设我们只涉及美国公民，那么SSN是Person实体类型的一个候选键，同时姓名与电话号码的组合（假设组合是唯一的）是第二个可能的候选键。这两个键都被称作候选键是因为它们是物理数据模型中主键、次键或者非键的候选目标。主键。实体类型的首选键。备用键。也就是次键，是表中行的另一个唯一标识。外键。在一个实体类型中表示另一个实体类型的主键或者次键的一个或多个属性。图1显示了使用UML符号描述的实际地址的物理数据模型。在图1中，表Customer使用CustomerNumber作为主键而SocialSecurityNumber作为备用键。这就意味着访问顾客信息的首先方法是通过一个人的顾客编号，虽然软件使用社会保险号也能够获得相同的信息。表CustomerHasAddress拥有一个复合键，由CustomerNumber与AddressID组成。外键是一个实体类型中，代表另一个实体类型的主键或者次键的一个或多个属性。外键用于维护数据行之间的关联。例如，表CustomerHasAddress与表Customer中行之间的关联通过表CustomerHasAddress的CustomerNumber列进行维护。有趣的是列CustomerNumber既是表CustomerHasAddress主键的一部分，又是表Customer的外键。同样，列AddressID既是表CustomerHasAddress主键的一部分，又是表Address的外键，维护这两个表中行的关联。 2、比较自然键与代理键策略为表指定键的策略有两种：自然键。自然键是已经存在的一个或多个属性，它在业务概念中是唯一的。对于表Customer来说，存在两个候选键，CustomerNumber与SocialSecurityNumber。代理键。引入一个不具有业务含义的列作为键，称作代理键。例如图1中表Address的列AddressID。地址不具有一个“简单”的自然键，因为需要使用Address表的所有列组成一个键（取决于你的问题域，可能仅仅需要组合Street和ZipCode列），所以此时引入一个代理键是一个更好的选择。 自然键的优点是它们已经存在，不需要在数据模式中引入一个新的“非自然”列。 自然键的缺点**自然键的缺点是由于具有业务含义，它们与业务直接耦合：你可能在业务需求变更时重新指定键。例如，当你的用户决定将CustomerNumber列从数字型改为字母数字型，除了更新表Customer的模式（这个是不可避免的）外，你还需要修改每一个使用CustomerNumber作为外键的表。** 代理键的优点 首先，它们不与业务耦合，因此更容易维护（假设你选择了一个好的实现策略）。例如，如果表Customer改为使用代理键，修改只需要在表Customer内部进行（此时CustomerNumber只是表的一个非键列）。当然，如果你需要针对代理键策略做相似的变更，可能是由于用完了所有的值而需要增加几个位数，将会面临同样的问题。 其次，一个大多数表，最好是全部表，通用的键策略能够减少需要编写的源码数量，减少系统的总体拥有成本（TCO）。 代理键的缺点它们通常不是“人可读的”，导致终端用户难以使用。这意味着你可能仍然需要实现代理键用于查找、编辑等等。 根本问题在于键是关系模式中重要的耦合源，因此它们很难更改。这意味着你通常想要避免具有业务含义的键，因为业务含义存在变化。话虽如此，我倾向于使用自然键查找/引用表，尤其当我认为键值在最近不会改变时，如下文所述。从根本上讲，是否应该优先使用自然键没有明确的答案，不管这个宗教之争的另外一方狂热者如何声称，最好的策略是只要有意义就可以使用任何一个策略。 3、代理键实现策略实现代理键有几个常用的选择： 使用数据库赋值。大多数主要的数据库供应商—例如Oracle、Sybase以及Informix—实现了被称为递增键的代理键策略。基本理念是在数据库服务器中维护一个计数器，将当前值写入一个隐藏的系统表来维护一致性，并用于赋值一个新建的数据行。每创建一行，计数器递增并将值作为该行的键值。不同供应商的实现策略不同，有时候值在所有表之间都是唯一的，有时候只在单个表内部是唯一的，但是基本概念相同。 MAX() + 1。一个常用的策略是使用整数列，第一条记录从1开始，然后新行的值设置为该列的最大值加1，最大值用SQL函数MAX获得。虽然这个方法简单，但是对于大表存在性能问题，而且它只能确保表内部的唯一键值。 全局唯一标识符（UUIDs）。GUIDs是128位值，来自以太网卡ID或等价的软件表示以及系统当前时间的哈希值。该算法是由开放软件基金会定义的。 全球唯一标识（GUIDs）。GUIDs是微软扩展UUIDs后的标准，遵从相同的策略，如果存在以太网卡使用网卡ID，如果不存在，使用软件ID与当前时间计算一个哈希值，确保在机器内部唯一。 高低位策略。它的基本思想是键值，通常称为持久化对象标识符（POID）或者简称对象标识符（OID），分为两个逻辑部分：从指定来源获取的唯一HIGH值和应用自身分配的N为LOW值。每获取一个HIGH值，LOW值设置为0。例如，应用请求一个HIGH值并被赋予1701。假设LOW值的位数N为4，那么赋予对象的POID将会由17010000、17010001、17010002等等直到17019999组成。此时，再获取一个新的HIGH值，LOW值设置为0，再次重复。如果另一个应用在之后立即请求了一个HIGH值，它将获得1702，而它创建的对象被赋予OIDs将会是17020000、17020001等等。正如你所看到的，只要HIGH值唯一，所有的POID值将会唯一。在www.theserverside.com上可以找到一个HIGH-LOW发生器的实现。 **根本问题在于键是关系模式中重要的耦合源，因此它们很难重构。这意味着你通常想要避免具有业务含义的键，因为业务含义存在变化。然而，同时你需要记住某些数据通常是通过唯一标识进行访问，例如通过顾客编号访问顾客信息，通过社会保险号访问美国雇员信息。在这种情况下你可能想要使用自然键而不是UUID或者POID这样的代理键。** 4、有效选键技巧如何有效地选择键？参考以下提示： 避免“智能”键。“智能”键是由一个或多个具有业务含义的部分组成的键。例如，美国邮政编码的前两位表示它所在的州。智能键的第一个问题是它具有业务含义。其次是它们的使用通常随着时间变得很复杂。例如，一些大的州拥有多个代码，加利福尼亚的邮编以90和91开头，导致基于州编码的查询更加复杂。第三个问题是它们通常增加了策略需要进行扩展的可能性。考虑长度为9位数字的邮编（后4位数字由建筑所有者自行决定，建筑由邮编唯一标识），在用完2位州代码前用完9位数字的可能性更小。 考虑为简单的“查找”表指定自然键。“查找”表是用于关联代码与详细信息的表。例如，你可能拥有一个列出了颜色代码对应颜色名称的查找表。例如，代码127代表“郁金香黄色”。简单的查找表通常包含一个代码列和一个描述/名称列，而复杂的查找表包含一个代码列和几个信息列。 自然键并非总是适用于“查找”表。另一个例子是一个查找表包含北美洲的州、省或者地区。例如美国的加利福尼亚州以及加拿大的安大略省。该表的主要目的是为这些地理位置提供一个正式的列表，它不会随时间变化（最近一次变化是90年代后期，加拿大的西北地区分割为努勒维特和西北地区）。该表的一个有效自然键可以是州代码，一个值唯一的两字符代码—例如加利福尼亚的CA以及安大略的ON。不幸的是这种方法并不适合，因为加拿大政府决定为西北地区两个州使用相同的代码NW。 应用必须仍然支持“自然键搜索”。如果选择采用代理键，必须不能忘了应用需要支持基于地域列（仍然唯一标识数据行）的搜索。例如，Customer表可能拥有一个Customer_POID的代理键，以及一个Customer_Number列和Social_Security_Number列。你很可能需要支持基于顾客编号和社会保险号的搜索。搜索在关系数据库对象检索最佳实践中详细讨论。 不要自然化代理键。一旦你向终端用户显示了代理键的值，或者更坏的是允许他们使用该值（例如搜索该值），实际上你已经给它们赋予了业务含义。这实际上是自然化了代理键从而失去了代理键的优点。 5、做出了“错误”选择时如何应对首先，不用为此担心：不论你多么擅长数据库设计都可能会犯错。好消息是正如我在数据库重构过程中所说，虽然可能需要许多工作，还是可以使用代理键替换自然键的（反之亦然）。要使用代理键替换自然键，你需要应用引入代理键重构，如图2所示。要使用自然键替换代理键，你需要应用使用自然键替换代理键重构，如图3所示。 原文地址：http://www.agiledata.org/essays/keys.html]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据清洗工具——DataWrangler、Google Refine]]></title>
    <url>%2F2016%2F08%2F26%2F%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94DataWrangler%E3%80%81Google%20Refine%2F</url>
    <content type="text"><![CDATA[在进行数据分析和可视化之前，经常需要先“清洗”数据。这意味着什么？可能有些词条列表里是“New York City”，而其他人写成“New York, NY”。然而，你在看到某些模式前得将各种各样的输入词汇标准化。又或者，出现一些数值输入错误，错别字什么的。有很多工具都可以实现你想要的功能，但大多都是付费的。对于专业人士来说，这些成本是值得的，但对于时不时才使用的业余人士来说，未免有些浪费。下面介绍的两个工具最伟大的地方就是——它们是免费的！ 1、DataWrangler 它是做什么的：这个基于网络的服务是斯坦福大学的可视化组设计来清洗和重排数据的，因此，它的格式适用于电子表格等应用程序。点击一行或一列，DataWrangler会有修改的建议。例如，你点击了一行空行，一些建议就出弹出来，像“删除行”或“删除空行”等。同时，DataWrangler有一个历史记录，允许你很容易地实现撤消功能。 优点：文本编辑非常简单。例如，当我选择大标题为“Reported crime in Alabama”的样本数据的某行的“Alabama”，然后选择另一组数据的“Alaska”，它会建议提取每州的名字。把鼠标停留在建议上，就可以看到用红色突出显示的行。 缺点：我发现当我试图探索DataWrangler的选项时会发生一些预料之外的变化。我不得不经常点击“清空”进行重设。还有，有的建议是没用的（当某行是空行的时候，“把行提到标题行”似乎是个奇怪的建议），还有，有的建议很难理解（”fold split 1 using 2 as key”）。 DataWrangler是基于网络的服务，非常方便使用。但不要忘记，代价是必须把数据上传到外部网站。也就是说，对于敏感的内部数据，DataWrangler就不是合适的选择了。不过，未来会有独立的桌面版本。另一个必须考虑的事情是，DataWrangler是用现行的alpha码编写的，它的创建者说它（alpha码）还在改进中。 技能水平：高级新手 运行环境：任何网络浏览器 2、Google Refine 它是做什么的：第一眼看Google Refine的文本和数字时，可以将它描述为电子表格。像Excel一样，它可以导入导出多种格式的数据，如标签或逗号分隔的文本文件、Excel、XML和JSON文件。Refine设有内置算法，可以发现一些拼写不一样但实际上应分为一组的文本。导入你的数据后，选择编辑单元格-&gt;聚类，编辑，然后选择要用的算法。Refine运行后，你得决定接受或不接受每条建议。例如，你可以同意将Microsoft和Microsoft Inc作为同个组合，但不同意将Coach Inc 和CQG Inc作为同个组合。假如它提供太少或太多的建议，你可以更改建议功能的强度。还有数据选项，提供快速简单的数据分布概貌。这个功能可以揭示那些可能由于输入错误导致的异常——例如，工资记录不是80,000美元而竟然是800,000美元；或指出不一致的地方——例如薪酬数据记录之间的差异，有的是计时工资，有的是每周支付，有的是年薪。除了数据管家功能，Google Refine还提供了一些有用的分析工具，例如排序和筛选。 优点：一旦熟悉Refine的命令和功能，它将是一个强大的数据处理和分析工具，既功能强大又易用。每个操作的撤消/重做列表让你随时回到想要的状态。文本编辑应用Java正则表达式，允许你查找模式（例如，3个数字后跟着两个数位）或特定的字符串或数值。最后，虽然Refine是一个基于浏览器的应用程序，但适用于桌面文件，因此你的数据可以保留在本地。 缺点：尽管Refine看起来像电子表格，但你无法用它实现典型的电子表格计算。因此，你必须将数据导出到常见的电子表格应用。如果你的数据集很大，得留出一些时间仔细检查Refine的建议，这需要好些时间。还有，这点因数据集而异，当你准备合并一些文本项时，很有可能会得到一些错的建议或忽略一些问题——或两者兼有。 技能水平：高级新手。 运行环境：Windows、Mac OS、Linux]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CRM的度量对客户进行分析-- FRI方法]]></title>
    <url>%2F2016%2F08%2F26%2F%E4%BD%BF%E7%94%A8CRM%E7%9A%84%E5%BA%A6%E9%87%8F%E5%AF%B9%E5%AE%A2%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90--%20FRI%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[在进行客户关系管理（CRM）分析时，通常有三个客户行为分析值，分别是最近访问时间、访问频率和交易数量。最近访问时间指我们和客户最后一次接触的一些信息，包括最后访问时间或者最后一次接触到目前的时间间隔等。访问频率指我们和客户的接触频率。交易数量是我们和客户交互量的度量，例如购买量或者访问站点网页的总量等。在实际构建系统，每一个都需要进行细化。通常这种针对最近访问时间（recency）、访问频率（frequency）和交易数量（intencity）的分析称为RFI分析。通过对这三个数字数据的收集，我们可以建立一个三维的Cube。数据挖掘人员可以根据这三个数值将客户进行聚类分析，通常的聚类结果为如下八类：A．购买频率高、信誉好，很少退货。B．购买频率高、信誉好，但有很多退货。C．新客户、尚未建立信用情况。D．偶尔购买的客户、信誉好。E．偶尔购买的客户、信誉不好。F．曾经的好客户、最近没交易。G．经常看到的客户、但很少有交易。H．其他。 这八个类别就是我们对客户的定性分析。在实际的分析中，我们经常会需要进行时间序列的分析，例如某个客户每个月的情况可能会发生如下的变化。约翰：C C C D D A A A B B这个时间序列成功的分析了客户从新客户到偶尔购买，到好客户，到有退货的一个变化过程。 下面讨论在数据仓库的设计时，我们应该如何来对这样的客户聚类分析来进行建表保存，并支持上面提到的分析报告。对于这类的基于时间序列的文本描述信息的保存，我们有三种设计方法。1．建立事实表，粒度为每个客户每个月一条记录，描述信息已文本保存。2．采用SCD TYPE 2技术保存在客户维度表中。3．在客户维度表中建立24个字段保存最近24个月的客户分类描述信息。前两种方法都会将客户的不同时点的描述信息保存在不同的记录中，对于跨记录的比较和约束查询会比较麻烦。综合来说，第三个方法的效率会高一些。首先，生成的记录数要少很多。其次，因为在同一条记录上，查询变得容易。最后，和客户的其他事实表进行组合分析变得容易。它的缺点是需要添加很多字段。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[星型模型与OLAP多维数据库模型比较]]></title>
    <url>%2F2016%2F08%2F25%2F%E6%98%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B%E4%B8%8EOLAP%E5%A4%9A%E7%BB%B4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[OLAP分析的基础是多维数据集,按照其数据存储格式的不同可以分为关系型OLAP(Relational OLAP,ROLAP)和多维型OLAP(Multidimensional OLAP,MOLAP). (一)ROLAP采用关系数据库和相似的关系查询工具进行多维数据的存储和分析.在ROLAP中,数据预处理程序一般不高,所以查询响应较慢,但灵活性较好,用户可动态定义计算和统计方式,系统的可移植性较好.在多维分析的商业智能解决方案中，根据事实表和维度表的关系，ROLAP设计模型可分为星型模型和雪花型模型。在设计逻辑型数据的模型的时候，就应考虑数据是按照星型模型还是雪花型模型进行组织。 1、星型模型由一个包含大量记录并且不含冗余的中心表（事实表）和若干个小的维表（每个维一个维表）组成。维表通过外键与事实表关联。如图1星型架构是一种非正规化的结构，多维数据集的每一个维度都直接与事实表相连接，不存在渐变维度，所以数据有一定的冗余，如在地域维度表中，存在国家 A 省 B 的城市 C 以及国家 A 省 B 的城市 D 两条记录，那么国家 A 和省 B 的信息分别存储了两次，即存在冗余。 2、雪花模型当有一个或多个维表没有直接连接到事实表上，而是通过其他维表连接到事实表上时，其图解就像多个雪花连接在一起，故称雪花模型。雪花模型是对星型模型的扩展。它对星型模型的维表进一步层次化，原有的各维表可能被扩展为小的事实表，形成一些局部的 “ 层次 “ 区域，这些被分解的表都连接到主维度表而不是事实表。如图 2，将地域维表又分解为国家，省份，城市等维表。它的优点是 : 通过最大限度地减少数据存储量以及联合较小的维表来改善查询性能。雪花型结构去除了数据冗余。 3、两种模型比较星型模型因为数据的冗余所以很多统计查询不需要做外部的连接，因此一般情况下效率比雪花型模型要高。星型结构不用考虑很多正规化的因素，设计与实现都比较简单。雪花型模型由于去除了冗余，有些统计就需要通过表的联接才能产生，所以效率不一定有星型模型高。正规化也是一种比较复杂的过程，相应的数据库结构设计、数据的 ETL、以及后期的维护都要复杂一些。因此在冗余可以接受的前提下，实际运用中星型模型使用更多，也更有效率。如果事实表很大，优选选择星型模型。 (二)MOLAP采用多维数据库(MDDB)来存储器和分析多维数据.多维数据库使用专门的技术把数据存储在类似矩阵的n维阵列中.多维数据库管理系统的终端用户把存储的数据看做是三维的立方体,称为数据立方体(Data Cube).数据立方体可以扩展到n维,成为超立方体.数据立方体的一个重要牲就是它们是静态的,也就是必须在使用之前建立,不能即席查询来建立.比如,销售立方体包括产品、地区和时间维度，那就只能查询这些维度。为了加快访问数据的速度，数据立方体通常被存储在内存中，称该内存为立方体缓存。MOLAP也采用客房/服务器体系结构，立方体缓存可以放置在服务器端或客户端，或者同时放置在两端。在内存里获取数据立方体可以提供更快的响应时间，但是它也使得多维数据库比关系数据库更耗费资源（内存、存储器、处理器）。由于数据立方体预定义了一系列维，要加入新的维就必须重新建立整个立方体，这个建立过程很耗费时间，因此，不应该频繁创建数据立方体。而且，为了避免访问数据时间过长，也必须限制数据立方体的大小。此外，多维数据库由于使用的数据存储技术，也需要使用专门的多维查询语言进行数据访问。 (三)概述**总的来说，ROLAP的优点是灵活性强，集成性高，用户可以动态定义计算和统计方式；缺点是分析处理的响应时间较长。MOLAP的优点是分析处理的响应时间较快，缺点是灵活性较差，限制了集成的弹性，处理细节数据的能力较差。**]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用会计凭证格式]]></title>
    <url>%2F2016%2F08%2F25%2F%E5%B8%B8%E7%94%A8%E4%BC%9A%E8%AE%A1%E5%87%AD%E8%AF%81%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[基于会计凭证不仅为会计工作的第一要素，也是推动业务工作,监控其运作和完成进程的工具，故经济发达、法制完善国家，在相关的公司法、票据法、商业会计法和企业会计制度中，对会计凭证的内容、格式，一般都有统一的规定。兹按理论与实际结合的原则，特将一般常用的主要会计凭证的内容、格式、规格、填制方法，以及如何发挥推动、监控业务工作进行的作用，扼要说明并图示如后，以供国人深化会计体制改革及企业实际应用参考。 （一） 收款凭证系专供办理现金、银行存款（包括支票、汇票等票据）收入事项使用的记账凭证，其内容、格式如证式6-1，并按白纸红字（线条）印刷，以符传统会计惯例。在会计实务中，系根据交款人缴纳的现金、银行支票等票据及有关足以说明交款数额、内容、性质或事由的原始凭证编制。如为人民币，直接填入“记账本位币”栏即可；若为外币，应注明“币种”，并将外币金额填入“原币”栏，再按“记账汇率”折合为人民币，填入“记账本位币”栏。收款凭证的现金科目本身为借，填于凭证的左上方；对应的贷方科目、金额及摘要，分别填于相应栏的同一行；“记账本位币”栏的合计数，为借方现金科目的金额。 （二）付款凭证系专供办理现金、银行存款（包括支票、汇票等票据）支付事项使用的记账凭证，其内容、格式如证式6—2，并按白纸兰字（线条）印刷，以符传统会计惯例。在会计实务中，系根据有关足以说明应予付现（包括支票、本票等票据）原因、性质及金额的原始凭证编制之。如为人民币，直接填入“记账本位币”栏即可；若为外币，则应注明“币种”，并将外币金额填入“原币”栏，再按“记账汇率”折合为人民币，填入“记账本位币”栏。付款凭证的现金科目本身为贷，填于凭证的左上方；对应的借方科目、金额及摘要，分别填于相应栏的同一行；“记账本位币”栏的合计数，为贷方现金科目的金额。 (三）转账凭证系专供办理非现金交易事项账务处理使用的记账凭证，其内容、格式如证式6-3，并按白纸绿字（线条）印刷，以符传统会计惯例。主要系根据经济个体内部的交易事项，如因生产产品领用原材料，产成品的入库与出库，资产折旧、折耗计提与摊销，应收应付、预收预付账项的整理调整、结算，以及会计错误的更正等具体工作需要而填制。另外，如年终结算时涉及外汇资产、负债账项的调整，则应将外币的“币种”、金额，在摘要或备注栏内注明；其借、贷科目及金额，分别填入相应各栏的同一行。 （四）旅差费报销单系专供员工因公出差，报支差旅费使用的原始凭证，并兼代记账凭证，其内容、格式如证式6-4；并按白纸兰字（线条）印刷。根据出差的实际情况，及有关事宜的原始单证，和规定的补贴标准等，依格式界定的项目，分别计算汇总填列。如涉及外币支付，应另单填报，并在备注栏注明“币种”，以便识别。凭证右上角的戳子，系供代记账凭证的借贷分录及编号使用，以简化记账凭证的填制手续。 （五）费用报销单系供除旅差费以外的其他各种费用报销专用，其内容格式如证式6—5，并按白纸兰字（线条）印刷。根据实际发生费用、耗费支出的原始凭证，依费用性质，分别按其明细目（参见会计科目表或科目内容说明）予以汇总填入借方科目及同行金额栏；其对应贷方科目，填于凭证的左上方，一如“付款凭证”的情况同，合计金额数即为贷方科目的金额。本凭证既是内部原始凭证，又是记账凭证，兼代付款或转账凭证。 （六）采购通知单系供办理原材料、商品、物资采购业务，及会计工作使用的一式五联内部凭证，其内容、格式如证式6-6；第一、五联用白纸绿字（线条）、第二联兰字（线条），第三、四联粉红色字（线条）印刷，以资识别。本凭证由专责原材料采购业务部门经办，根据供应客户的发票等结算单证，与订货合同核对无误后，按格式、项目内容和要求，一次套写产生；其使用方法及在业务和会计工作上的作用，可概述如下：1、第一联：“采购通知单”由经办留存备查，然后将第五联“提货通知单”及供应客户的发货清单，交提运部门凭以作好提货准备工作，及办理提货送交收料仓库；另将第二、三、四联，连同发票账单等原始凭证，移送财务会计部门；2、财务会计部门对业务部门转来的“采购通知单”，经与随附账单审核无误后，将第二联（代付款凭证）及附件留以办理付款手续，将付款日期填入“付款日期”栏，在“分录戳记”上填入应借应贷的会计科目，由出纳于付款后填注日期及编号，据以登记相关明细账；另将第三、四联“入库通知单”，经材料会计员转送收货仓库，以便作好仓储验收的准备工作；3、仓库收到提运部门送来的原材料、货物后，应根据“入库通知单”所列货品目录，逐一点数、计量，验收入库，经核实无误后将实收数，以套写方式填入第三、四联“入库通知单”的“实收”栏，据以登记仓库存货明细账，并将入库单留于各该账页之上（或下）；4、上述存货明细账经材料会计稽核后，将第三联入库单留仓库存查；第四联入库单按原材料类别分类整理，定期或月终汇总编制“入库汇总表”，一并移送财务会计部门，凭以进行有关材料会计总账的账务处理工作。由上述可知，“采购通知单”实为组织、安排、了解和控制采购业务工作进行过程，加强业务与财务的联系，以及作为相关材料会计处理的依据和工具。 （七）供应结算单系专供办理商品、产品、物资销售业务，和会计工作使用的一式六联内部凭证，其内容、格式如证式6—7；第一、二联用白纸浅兰字（线条），第三、四联红字（线条），第五、六联绿字（线条）印刷，以资识别。本凭证由专责销售业务部门经办，根据客户购货订单、销货合同等商业文件，按格式、项目内容和要求，一次套写产生。其使用方法及在业务和会计工作上的作用，可概述如：1、第一联：“供应结算单”由经办留存备查；然后将二至六联交买主，持以到财务部门办理付款提货手续。如采用先提货后付款的销售结算方式，买主即可持以向发货仓库办理提货（或委托代办送货及托收承付结算）手续。2、仓库根据手续完备的“发货通知单（第二联）”，即行点数、计量、整理、包装，完成发货手续，将核实无误的发货数字，以套写的方式填入二至六联的“实发”栏，将第二联留仓库存查，并据以登记存货明货账；将三～六联交买主持以到财务部门（或材料会计员）办理付款（或托收承付）结算手续。3、如采用先付款后提货结算方式，财务部门根据实发数、销售单价、核计销货总额无误后，第三联“代收款凭证”交出纳凭以办理收款入账手续；第五联“出库单”按产品物资类别分类整理，定期或月终汇总编制“出库汇总表”（亦即销货成本表）；第四联(代发票)、第六联(代发货清单)交购客户收执，凭以向发货仓库办理提货手续。4、如为委托收款结算方式，仓库发货后将三至五联转销售财务部门，即凭第四联“代发票”及“委托收款证书”，办理“托收承付”结算手续；第六联交购货客户凭以向单位收货仓库交货。由上述可知，供应结算单，同样在业务和会计工作上，可以作为组织、安排、了解、掌握销售业务工作进行过程和完成进度，以及货款结算情况的管理控制工具。 （八)工程结算单系供建筑安装等基建工程项目办理收、付款结算业务，和相关双方账务处理使用的一式五联单，其内容、格式如证式6－8；第一联用白纸绿字（线条），第二、三联兰字（线条）、第四、五联红字（线条）印刷，以资识别。 本凭证由建设单位工程监理部门，根据承建单位的“工程进度（或竣工）付款（结算）通知单”等有关资料，经审查核实后按格式、项目内容，由地盘监理部门经办，一次套产生（其中：“本期应付”系指施工单位“工程进度付款通知单”列之金额），其使用方法及在业务和会计工作上的作用，可概述如下：1、第一联，工程付款结算单：经地盘监理、工程部门经办、主管审核，及总经理（或经授权之总工程师）审批后，由经办留存备2、将第二、三联“付款通知单”交本单位财务部门，凭以备款待付，并于付款后将第三联转预算主管部门，作为监察预算执行，及控制拨款的依据；将第四、五联“收款通知单”，转交收款单位经办，凭以向税收部门洽办开出“工程结算发票”，并交付营业税及附加。3、收款单位财务部门开妥“建筑安装专用发票”后，凭以向付款单位财务部门，办理工程款项结算手续；第四联代收款通知单，据以收款，第五联转交负责工程价款结算经办存查，并凭以作为办理次期工程（进度）价款结算通知单的依据。从证式6—8的内容及其使用办法可知，工程结算单不仅对建设、施工单位的工程预算的执行，施工计进度和会计工作的进行，而且对建筑行业的税收入库，也起着严格的监控作用。 （九）商品房预售结算通知单系供房地产企业及物业代理公司预售楼花业务，办理签订“认购书”阶段使用的一式五联单，其内容、格式如证式6—9；第一、五联用白纸绿字（线条）、第二——四联白纸红字（线条）印刷，以资识别。本结单由售楼业务员，根据“认购书”（或“置业计划书”）列明之预售事项，以套写方式产生，其使用方法及在业务和会计工作上的作用，可以概述如下：1、第一联：由售楼业务经办人员留存备查；然后将二至五联交客户持以到财务部门办理付款手续。2、财务部门办妥收款手续，并加盖收讫财务专用印章后，将第二联付款通知单（代收据）交客户收执留存，并持以向售楼业务员领取认购书。3、第三联收款通知单（代收款凭证）留财务部门凭以作借记“现金”，贷记“存入保证金（如为首期款贷记应收账款）”的收现分录。4、第四联收款通知单，由财务部主管售楼业务会计人员留存，凭以了解售楼业务进展、掌握楼款催收、资金回笼、做好资金调度工作的工具，和备供收到首期款后，作为认列“应收账款”的原始凭证。5、第五联转交营销部门主管，凭以了解掌握售楼业务进展、资金回笼情况，和做好正式签订商品房买卖合同的准备工作。由此可见，“商品房预售结算单”在了解掌握售楼业务进展，加强财务管理，做好楼款催收以及业务工作，都将起到良好促进作用。客户交定金（或首期）后之楼款结算，改以一般通用的“收款收据”办理之。 （十）加油站交接班（日销量）记录单系供经营液体燃料业务企业，对加油站交接班工作记录及日销量统计，供作办理销售业务和财务结算的计算依据的一式二联单；其内容、格式如证式6—10，并用白纸绿字（线条）印刷；“机号”栏可根据其加油机数量及轮班的班数，作适当的调整变动。本单由加油站业务统计员，根据交接班的原始记录，整理分析填列，套写产生；经班长审核无误，站长签章后，一联存查，凭以登记销货台账；一联交财会部门，凭以办理销售业务的账务处理。 （十一）会计凭证在业务与会计工作上的作用综合以上一般常用会计凭证格式的论述，想再次强调指出的是：会计凭证，无论是在企业的业务经营活动，还是企业财务会计工作上，都占有十分重要的地位，起着关键性的作用，主要是：1、在业务上，可用以作为要求企业内部各部门采取行动的命令，组织、安排、推动各项业务工作进行，了解掌握其过程与完成进度的控制工具。2、在会计工作上，可作为财务与业务工作联系的书面证据，凭以进行账务处理（如审核、收、付款），据以记录业务活动的过程与结果的工具，并对财务报表资讯的真实性、有用性产生决定性影响，是达成“对生产过程的控制和观念总结”的簿记任务的主要保证。 （十二）凭证的规格与一式多联单的名称上述各证式的规格大小，除证式8及10，可根据实际需要适当加宽（或长）外，其余证式均为：长24cm×宽12cm，以便凭证的归档保管。又一式多联单各联的凭证名称，应视其具体的功能作用而异其名]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>财务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[位图索引原理（BitMap index）]]></title>
    <url>%2F2016%2F08%2F22%2F%E4%BD%8D%E5%9B%BE%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%EF%BC%88BitMap%20index%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1. 案例 有张表名为table的表，由三列组成，分别是姓名、性别和婚姻状况，其中性别只有男和女两项，婚姻状况由已婚、未婚、离婚这三项，该表共有100w个记录。现在有这样的查询： select * from table where Gender=‘男’ and Marital=“未婚”; 1）不使用索引 不使用索引时，数据库只能一行行扫描所有记录，然后判断该记录是否满足查询条件。 2）B树索引** 对于性别，可取值的范围只有’男’,’女’，并且男和女可能各站该表的50%的数据，这时添加B树索引还是需要取出一半的数据， 因此完全没有必要。相反，如果某个字段的取值范围很广，几乎没有重复，比如身份证号，此时使用B树索引较为合适。事实上，当取出的行数据占用表中大部分的数据时，即使添加了B树索引，数据库如oracle、mysql也不会使用B树索引，很有可能还是一行行全部扫描。 2. 位图索引出马如果用户查询的列的基数非常的小， 即只有的几个固定值，如性别、婚姻状况、行政区等等。要为这些基数值比较小的列建索引，就需要建立位图索引。对于性别这个列，位图索引形成两个向量，男向量为10100…，向量的每一位表示该行是否是男，如果是则位1，否为0，同理，女向量位01011。 对于婚姻状况这一列，位图索引生成三个向量，已婚为11000…，未婚为00100…，离婚为00010…。 当我们使用查询语句“select * from table where Gender=‘男’ and Marital=“未婚”;”的时候 首先取出男向量10100…，然后取出未婚向量00100…，将两个向量做and操作，这时生成新向量00100…，可以发现第三位为1，表示该表的第三行数据就是我们需要查询的结果。 3.位图索引的适用条件 上面讲了，位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。 此外，位图索引适合静态数据，而不适合索引频繁更新的列。举个例子，有这样一个字段busy，记录各个机器的繁忙与否，当机器忙碌时，busy为1，当机器不忙碌时，busy为0。 这个时候有人会说使用位图索引，因为busy只有两个值。好，我们使用位图索引索引busy字段！假设用户A使用update更新某个机器的busy值，比如update table set table.busy=1 where rowid=100;，但还没有commit，而用户B也使用update更新另一个机器的busy值，update table set table.busy=1 where rowid=12; 这个时候用户B怎么也更新不了，需要等待用户A commit。 原因：用户A更新了某个机器的busy值为1，会导致所有busy为1的机器的位图向量发生改变，因此数据库会将busy＝1的所有行锁定，只有commit之后才解锁。 转载自：http://www.cnblogs.com/LBSer]]></content>
  </entry>
  <entry>
    <title><![CDATA[OLTP和OLAP的区别[转]]]></title>
    <url>%2F2016%2F08%2F12%2FOLTP%E5%92%8COLAP%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[联机事务处理OLTP（on-line transaction processing）主要是执行基本的、日常的事务处理，比如数据库记录的增、删、改、查。比如在银行存取一笔款，就是一个事务交易。OLTP的特点一般有： 实时性要求高； 数据量不是很大； 交易一般是确定的，所以OLTP是对确定性的数据进行存取；(比如存取款都有一个特定的金额) 并发性要求高并且严格的要求事务的完整,安全性。(比如这种情况:有可能你和你的家人同时在不同的银行取同一个帐号的款)， 联机分析处理OLAP（On-Line Analytical Processing）是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。典型的应用就是复杂的动态的报表系统。OLAP的特点一般有： 实时性要求不是很高，很多应用的顶多是每天更新一下数据； 数据量大，因为OLAP支持的是动态查询，所以用户也许要通过将很多数据的统计后才能得到想要知道的信息，例如时间序列分析等等，所以处理的数据量很大; 因为重点在于决策支持，所以查询一般是动态的，也就是说允许用户随时提出查询的要求。所以在OLAP中通过一个重要概念“维”来搭建一个动态查询的平台（或技术），供用户自己去决定需要知道什么信息。 以下是大致的区分这些概念（或技术）都是应用层面的，这个和用什么数据库系统是无关的。有兴趣的朋友如果愿意了解OLAP的具体应用而又不愿意花太大的力气，不妨到科研、教育、文化和卫生系统去看一看，他们那里一般都有一个叫做SPSS的统计分析软件，这是一个和SQLSERVER在同一层次上的世界级的、最权威的统计分析软件，其菜单上有一个“分析”项目，其下拉的第一个项目就是OLAP，当然也可以自己装一个试试。简单的说：OLTP即联机事务处理，就是我们经常说的关系数据库，意即记录即时的增、删、改、查，就是我们经常应用的东西，这是数据库的基础；TPCC(Transaction Processing Performance Council)属于此类。OLAP即联机分析处理，是数据仓库的核心部心，所谓数据仓库是对于大量已经由OLTP形成的数据的一种分析型的数据库，用于处理商业智能、决策支持等重要的决策信息；数据仓库是在数据库应用到一定程序之后而对历史数据的加工与分析，读取较多，更新较少，TPCH属于此类，对于OLAP，列存储模式比通常的行存储模式可能更具优势。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《忒修斯之船》读书笔记]]></title>
    <url>%2F2016%2F08%2F09%2F%E3%80%8A%E5%BF%92%E4%BF%AE%E6%96%AF%E4%B9%8B%E8%88%B9%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[蛋蛋(00)后推荐的一本书。拆封这本书时，不得不惊叹于其精致及特别，整本书散发着一股旧书的味道（musty smell），还附带着一堆设计特别、材质各异的明信片、海报、老照片等配件。象出版社所宣称，这是一本推理小说加实体版解谜游戏的综合体（注意，是综合体，不是书），代表了一种新的阅读形式，让读者深入到书本的情节中去。这个综合体总的来说有三条线。第一条线：书本正文讲述的是失忆主人公在追寻自己身份的过程中，卷入了一系列反抗独裁军火商韦沃达家族的过程，书中有工人暴动、暗杀、背叛、爱情（这点有点模糊）等等。第二条线：本书翻译（所谓的译者）柯岱拉那充满玄机的译注，让关于石察卡的真实身份、她和石察卡的感情更显得扑朔迷离。第三条线：本书两位素不相识的读者Eric和Jen，在书中空白处互动批注了探索、研究作者石察卡真实身份的关键资料。当然，还少不了这两位恋人（后来成为恋人）在空白处玩的类似互递小纸条的爱情游戏。（此处想起《岛上书店》说的，人的一生最幸运的是能找到有共同阅读兴趣的人。）原书的结局是开放性的（类似诺兰最喜欢玩的把戏），S原来的身份是谁？韦沃达有给杀死吗？石察卡的真正身份是谁？正如本书的预告片最后一句台词“the book is just the beginning”，真正的探险旅程将从第二遍开始。按照攻略，本书要至少要读五遍，还包括整理Eric和Jen的注解之类，才能真正把整个谜底解开。一个真正烧脑的历程，作为只是路人粉的我只看了一遍，还是放弃了。 回归原书的本身，书中的一切都在忒修斯之船的悖论下延伸。书中反复出现的船，在一次次的毁坏中重修，还是原来的船吗？S组织的旧成员死去，新成员一个个加入，就如忒修斯之船一般，那还是原来的S组织吗？甚至，一个找不回身份的失忆人士还是原来的自己吗？ 书中一直强调，人生就是这样，某一段时间你到达一个地方，以为到了终点。结果发现其实又回了起点，然后循环着。就像爬到了一个山头发现还有另一个山头。同时，在个人意识和集体意识层面，S也一直在摇摆，对抗集权还是追求自己的缪斯？S一直在反思自己的选择，诘问自己当时的选择是否错了，或者是否另一种才会更好。但是，在集体无意识的控制下，在群体的推动下，S还是无意识的选择了集体意识。 不过话说回来，看完本书的最大帮助，就是教会了自己读书做笔记的N种自娱自乐的方式;-)。 忒修斯之船 忒修斯之船亦称为忒修斯悖论，是一种同一性的悖论。假定某物体的构成要素被置换后，但它依旧是原来的物体吗？公元1世纪的时候普鲁塔克提出一个问题：如果忒修斯的船上的木头被逐渐替换，直到所有的木头都不是原来的木头，那这艘船还是原来的那艘船吗？因此这类问题现在被称作“忒修斯之船”的问题。有些哲学家认为是同一物体，有些哲学家认为不是。在普鲁塔克之前，赫拉克利特、苏格拉底、柏拉图都曾经讨论过相似的问题。近代霍布斯和洛克也讨论过该问题。这个问题的有许多变种，如“祖父的斧头”。 缪斯 缪斯（希腊语：Μουσαι、拉丁语：Muses）是希腊神话中主司艺术与科学的九位古老文艺女神的总称。她们代表了通过传统的音乐和舞蹈、即时代流传下来的诗歌所表达出来的神话传说。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>读书心得</tag>
        <tag>玄幻</tag>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于看书的感想]]></title>
    <url>%2F2016%2F08%2F08%2F%E5%85%B3%E4%BA%8E%E7%9C%8B%E4%B9%A6%E7%9A%84%E6%84%9F%E6%83%B3%2F</url>
    <content type="text"><![CDATA[看书虽然不一定能改变你的命运，但是一定能改变你的内心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《人性的弱点》读书笔记]]></title>
    <url>%2F2016%2F08%2F08%2F%E3%80%8A%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[本书英文名是《How to win friends an d influence people》，直译应该是《如果赢得朋友和影响别人》，书中讲的也是待人处世的道理。中文译名《人性的弱点》有误导读者之嫌，不过这倒不影响这本书的超高销量。大学时就看过这本书，现在重看一遍，感悟却完全不一样，里面说的很多朴素的道理都能联系到实际生活、工作中的事情。书中通过很多案例来说明如何待人处世的方方面面，其实也是一本提高情商、管理情绪方面的书。里面说的一些道理都是很常见、很通俗易懂的（有心灵鸡汤之嫌;-)），但是所谓的知易行难，如何让这些道理在现实生活中得到贯彻，才是这本书真正的意义。 所以，建议学习本书最好的方法应该是采用类似MBA的教学方法，结合案例，提出自己的观点和别人深入讨论，然后再与书中的观点、方法比较，这样就能找出自己思维的误区以及加深对本书所讲述道理的印象。题外话：感觉这本书还是很中庸的，不像美国这个民族的性格，反而和论语里面的很多论点相近。话说回来，本书讲了很多道理，但是个人认为本书的核心其实还是：“你希望别人怎么对待你，你就应该怎样去对待别人。”在你做任何事情、做任何决策之前，想想如果对方是你，你想对方怎么对你，这样，所有的事情都豁然开朗了。 文章摘录 卡耐基对于演讲有自己的看法，他觉得每个人在情绪激动的时候都能够大声的表达自己的看法。假如一拳直接打倒街上看起来最软弱的人，他的愤怒和他说话的表情，也几乎和大演说家威利姆相差无几。卡耐基说：“每个人，只要他有热烈的情绪，都是可以在公众面前发表热烈的演讲的。” 在讲到如何培养自信心时，他说：“只要你去做一件自己害怕做的事，并且取得了成功，那么，你的自信心也就建立起来你了。” 99%的情况下，无论你犯了多么严重的错误，你都不会指责自己。批评的成效微乎其微，因为人们习惯性地在受到批评时，竭力替自己辩护，从而给自己建造一层防御壁垒。 苛责和批评对于别人都是无济于事的。 罗斯福总统曾说，在他任职期间，但凡遇到解决不了的问题时，他就会抬头看写字台壁上的巨大的林肯画像，想象着如果是林肯遇到和自己一样的难题，他会怎么去做，他们解决这些问题。 我们在进行人际交往的时候，需要牢记一点，我们面对的是感性动物而不是理性的动物，所以，人情世故有时候逼逻辑道理强上一万倍。 对他人随意指责、批评、抱怨是愚蠢的人的通病，而能够克制自己，以宽容、平和的心态与他人相处的，往往是具有人格魅力的人的高尚之处。 激发别人的热情的能力、发挥每个人才能的能力是一个管理者最重要的能力之一。 如果成功也是有方法的话，那么这个方法就是把握对方的需求，并照顾到对方的需求。 个人注：但是难点在于你要能找到对方的需求和立场，才能根据这个来思考问题。 了解对方的立场，并从对方的立场想问题，把这个立场放到第一位。 个人注；就像下围棋也是同一个道理。 快乐是自己心里的内在状态，而不需要向外界求得的。 恩特•卡耐基 是钢铁大王，和本书的作者戴尔•卡耐基不是同一个人。 如果记住别人的姓名：没有特殊的技巧，方法其实很简单，如果他听得不清楚，他就说：“对不起，我没有听清楚，你能不能再说一遍？”如果是个很少见到的姓名，他就会问：“对不起，这个字怎么拼？”在谈话过程中，他会不厌其烦的把对方姓名记忆数次。同时，在他的脑海里，把UI放的姓名和他的脸孔、表情、外形连贯起来。如果这个人对他很重要，拿破仑三世就把这个人的名字写在纸上，仔细的看然后记住，接着把纸撕了。 这个世界上最重要的一条铁律：你希望别人怎么对待你，你就应该怎样去对待别人。 赞同对方的观点，然后自然引出自己的观点。而不要通过否定对方的观点来说出自己的观点。 释伽牟尼曾经这样说过：“恨永远无法终止恨，唯有爱可以止恨。” 个人注：耶稣应该也说过，爱你的敌人，如果你不爱你的敌人，和你的敌人也就没什么差别了。 与其跟一只狗一起走，不如让狗先走一步。如果你给狗咬了一口，你即使把这只狗打死，也无法治好你的伤口。 你可以比别人聪明，但是你不能直接告诉他你比他聪明。 个人注：扮猪吃老虎 :-) 在基督生前2200年，埃及国王教训他的儿子说：“一定要用外交的手腕，这样才能帮助你达到你所希望的目的。” 别忘了这样一句话：“用争夺的方法，你永远都无法得到满足。可是当你谦让的时候，你所得到的比你所期望的更多。” 个人注：例如六尺巷也是这个道理。 100年前的林肯说过：“一滴蜂蜜，比一加仑的胆汁，捕捉到的苍蝇更多。” 苏格拉底辩论法：他提出问题，都是他的反对者愿意接受并且同意的。他不断的获得对方的承认，到最后，反对者在不知不觉中就接受了他在几分钟前还坚持否认的结论。 个人注：通过迂回的战术来达到自己的目的，有点类似围棋里面的声东击西，东是对方所好，西是你的目的。 发过哲学家洛希夫克曾经这样说过：“如果你想获得更多仇人，你就战胜你的朋友，但是，如果想获得更多的朋友，那么就让你的朋友胜过你。” 所以，别让我们显得硕果累累，我们要处处低调、谦虚，那样就会有越来越多的人喜欢你，谁都愿意跟你相处。 银行家摩根说过：“人做任何一件事，都存在两种理由，一种是好听的，一种是真实的。”他人会经常想到那个真实的理由，而我们则较喜欢那个好听的动机。所以要改变一个人的意念，你就需要激发出他高尚的动机。 如果你想要某人改变他的某些缺点，那你就要表现出他拥有这些优点。就像莎士比亚说的——若是你缺乏某种特长，那就假设你有这个特长。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[需求分析的编写要求]]></title>
    <url>%2F2016%2F08%2F05%2F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E7%9A%84%E7%BC%96%E5%86%99%E8%A6%81%E6%B1%82%2F</url>
    <content type="text"><![CDATA[以下是需要分析的一些要点。其实公司也有需求说明书的模板，员工实际工作会根据需求说明书的模板来编写需求。 1、业务流程多少个流程，列出流程清单通过泳道图说明流程是怎么跑起来的：人在不同系统做什么事，并通过流程图串起来。 2、每个功能的时序图具体功能的交易过程（时序图）要具体分析应用场景，系统间的交互 3、数据对象的数据模型（数据对象的关系）4、纵向维度具体业务的流程 5、横向维度站在对象的维度：例如客户、用户的视角来分析需求，分析数据的分布。例如：从客户的角度来说，需要呈现什么：投诉、签约、付款、租赁等等例如：项目总的角度来说，需要呈现什么：销售情况、项目进度、质量、成本、问题、资金等等。 6、友好程度用户的友好性，通过原型评审，提前确认。 7、考虑移动访问Portal、OA（协同、审批）、手机等 8、原型的确认评审会评审：原型界面、后台逻辑等]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[史上最浅显易懂的Git教程]]></title>
    <url>%2F2016%2F08%2F05%2F%E5%8F%B2%E4%B8%8A%E6%9C%80%E6%B5%85%E6%98%BE%E6%98%93%E6%87%82%E7%9A%84Git%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Git教程史上最浅显易懂的Git教程（廖雪峰的官方网站）http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Head First 设计模式》读后感]]></title>
    <url>%2F2016%2F08%2F03%2F%E3%80%8AHead%20First%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[这是一本连目录都很有趣的书。作者以四人帮（Gof）的《Design Patterns: Elements of Reusable Object-Oriented Software》为基础，妙趣横生、深入浅出的介绍了相关的设计模式。软件开发有两大难点：1、复杂度：因为软件模式整个现实的世界，而显示世界是复杂的、无序的；2、变化：变化是唯一不变的真理。所以软件管理就是管理软件的复杂度和变化。设计模式让我们从以往的代码重用，上升到经验的重用，让我们的思考架构提升到模式的层面，而不是仅仅停留在琐碎的对象上。建立一种弹性的、可维护的、可以应对变化的软件，其核心原则就是“封装变化”，封装对象的创建、方法的调用、复杂的接口等等。封装变化就是要把变的和不变的部分分开，概括来说有三点：1、找出变化的部分；2、分离变化的部分；3、封装变化的部分。以下是根据本书整理了的一些知识点。 说明：以下的类图摘录自：rc008-designpatterns_online.pdf文件 设计模式1：策略模式（Strategy Pattern） 定义了算法族，分别封装起来，让它们之间可以互相替换，模式让算法的变化独立于使用算法的客户。 设计原则1：封装变化找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起；其实就是封装的概念，让系统变得更有弹性。 设计原则2：针对接口编程，而不是针对实现编程；其实就是通过多态的方式，在执行的时候改变相关的函数绑定。把经常变化的行为（可以视同是一种算法）单独封装成接口类，通过set方法，而已在执行的时候改变对应的行为。 设计原则3：多用组合，少用继承；同设计原则2,也是针对接口进行编程，然后母类组合了这些行为类（算法），在运行的时候动态的改变行为，提高了系统的弹性。 设计模式2：观察者模式（Observer Pattern） 定了了对象之间的一对多的依赖，这样依赖，当一个对象改变状态的时候，它的所有依赖者都会收到通知并自动更新。 类似出版社+订阅者的关系，其中包括了了Subject与Observer接口的类。 观察者模式支持推（Push）和拉（Pull）的模式！ 观察者模式的代表MVC。 设计原则4：为了交互对象之间的松耦合设计而努力。 设计模式3：装饰者模式（Decorator Pattern） 动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。 装饰者和被装饰者必须是一样的类型，利用继承达到“类型匹配”。 设计原则5： 类应该对扩展开放，对修改关闭。 设计模式4：工厂模式（Factory Pattern）工厂方法模式（Factory Method Pattern） 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法把实例化推迟到了子类。 抽象工厂模式(Abstract Factory) 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。 工厂模式能将对象的创建封装起来，是应用程序解耦，并降低其对特定实现的依赖。 在子类中实例化，就可以横向扩展子类而不需要修改超类以及对超类调用的代码。 工厂方法将生产知识封装锦各个创建者，这样的做法也可以被视为是一个框架。框架的概念就是搭好框架之后，直接在里面加内容（产品）就可以了。 如果代码是针对接口而写，那么通过多态，它可以与任何新类实现该接口。 设计原则6： 要依赖抽象，不要依赖具体类。 设计模式5：单件模式（Singleton Pattern） 确保一个类只有一个实例，并提供一个全局访问点。 实现单件模式，需要私有的构造器、一个静态方法和一个静态变量。 可以采用延迟实例化的方式创建单件，同时，需要考虑解决多线程的问题，例如可以通过同步synchronized来处理方法。 设计模式6：命令模式（Command Pattern） 将“请求”封装成对象，一遍使用不同的请求、队列或者日志来参数化其它对象。命令模式也支持可撤销的操作。 命令对象包括：特定的接受者+一组动作（excute（）方法） 调用者包括：持有一个命令对象+setCommand（）方法+调用执行的方法 命令模式将发出请求你的对象和执行请求的对象解耦。 调用者可以接受命令当做参数，甚至在运行时动态地进行。 设计模式7：适配器模式（Adapter Pattern） 和 外观模式（Facade Pattern） 适配器模式是将一个类的接口，转换成客户期望的另一个接口。适配器让原本不兼容的类可以合作无间。 外观模式是是提供了一个统一的接口，用来访问子系统中的一群接口。外观定了一个高层接口，让子系统更容易使用。 适配器将一个对象包装起来以改变其接口； 装饰者将一个对象包装起来以增加新的行为和责任； 外观将一群对象“包装”起来以简化其接口 设计原则7：最少知识原则（Least Knowledge）：只和你的密友谈话。只使用和本类直接相关的对象的方法。 设计模式8：模板方法模式（Template method Pattern） 在一个方法中定义了一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。 Hook（钩子）我们将“默认不做事的方法”称为钩子。类似，实际中的钩子，需要的时候就挂上，不需要的就放着不做事。钩子可以作为条件控制，影响抽象类中的算法流程。如果在在子类中，这个算法是可选的，就使用钩子。子类可以选择是否哦实现这个钩子方法。 模板方法模式和适合创建框架。固化算法结构（把方法申明为final），具体的某些步骤实现由子类动态处理。 模板方法的抽象类可以定义具体的方法、抽象方法和钩子。 工厂方法是模板方法的一种特殊版本。 设计原则8：好莱坞原则（Hollywood Principle）别调用（打电话给）我们，我们会调用（打电话给）你。由超类主控一切，当他们需要的时候，自然会去调用子类，这就跟好莱坞一样。 设计模式9：状态模式（State Pattern） 允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。 这个模式将状态封装成独立的类，并将动作委托到代表当前状态的对象，我们知道行为会随着内部状态而改变。 工作步骤：1、判断当前状态；2、执行对应状态的动作；3、动作之后对应的状态（可能变、也可能不变）；循环以上3步。 策略模式：可以通过组合不同的对象来改变行为； 状态模式：通过状态的改变来委托给不同的状态类来执行不同的行为； 和程序状态机（PSM）不同，状态模式用类代表状态。 设计原则9：类应该只有一个改变的理由。 设计模式10：代理模式（Proxy Pattern） 为另一个对象提供一个替身或者占位符以访问这个对象。 包括： 远程代理：控制访问远程对象； 虚拟代理：控制访问创建开销大的资源； 保护代理：基于权限控制对资源的访问，动态代理，是运行时才将Proxy类创建出来。 装饰者模式为对象加上行为，而代理则是控制访问。 设计模式11：复合模式（Compound Pattern） 复合模式是结合两个或以上的模式，组成给一个解决方案，解决一再发生的一般性问题。 MVC（Model-View-Controller） Model 2：Web开发人员也都在适配MVC，使它复合浏览器/服务器模型，并使用Servlet和JSP技术的结合，来达到MVC的分离效果。 文章摘录 当两个对象之间松耦合，它们依然可以交互，但是不太清楚彼此的细节。 改变主题或者观察者其中一方，并不会影响另一方。因为两者是松耦合的，所以只要它们之间的接口仍被遵守，我们就可以自由地改变它们。 不管是在什么时候，只要我们有一大堆东西，很自然地就会想到要为他们分类，这可以帮助我们在更抽象的层次上思考这些东西。例如汽车的分类就是这样。 其它书本的截图]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP POST GET 本质区别详解【转】]]></title>
    <url>%2F2016%2F08%2F02%2FHTTP%20POST%20GET%20%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB%E8%AF%A6%E8%A7%A3%E3%80%90%E8%BD%AC%E3%80%91%2F</url>
    <content type="text"><![CDATA[另外一篇比较好的说明Get、Post区别的文章！http://blog.csdn.net/darxin/article/details/4944225 以下转自 http://blog.csdn.net/gideal_wang/article/details/4316691 一、原理区别一般在浏览器中输入网址访问资源都是通过GET方式；在FORM提交中，可以通过Method指定提交方式为GET或者POST，默认为GET提交Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETEURL全称是资源描述符，我们可以这样认 为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查 ，改 ，增 ，删 4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询 资源信息，而POST一般用于更新 资源信息(个人认为这是GET和POST的本质区别，也是协议设计者的本意，其它区别都是具体表现形式的差异 )。 根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的 。 1.所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。 * 注意：这里安全的含义仅仅是指是非修改信息。 2.幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等 这个概念： 幂等 （idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。 幂等有以下几种定义： 对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a) =abs(abs(a)) 。 对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x 。看完上述解释后，应该可以理解GET幂等的含义了。 但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操 作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。 根据HTTP规范，POST表示可能修改变服务器上的资源的请求 。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。 上面大概说了一下HTTP规范中，GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说： 1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。 2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。 3.另外一个是，早期的但是Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计 。还有一个较为严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。 * 简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。 以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。 二、表现形式区别搞清了两者的原理区别，我们再来看一下他们实际应用中的区别：为了理解两者在传输过程中的不同，我们先看一下HTTP协议的格式：HTTP请求：1234&lt;request line&gt;&lt;headers&gt;&lt;blank line&gt;&lt;request-body&gt;] 在HTTP请求中，第一行必须是一个请求行（request line），用来说明请求类型、要访问的资源以及使用的HTTP版本。紧接着是一个首部（header）小节，用来说明服务器要使用的附加信息。在首部之后是一个空行，再此之后可以添加任意的其他数据[称之为主体（body）]。 GET与POST方法实例：123456789101112131415GET /books/?sex=man&amp;name=Professional HTTP/1.1Host: www.wrox.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)Gecko/20050225 Firefox/1.0.1Connection: Keep-AlivePOST / HTTP/1.1Host: www.wrox.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)Gecko/20050225 Firefox/1.0.1Content-Type: application/x-www-form-urlencodedContent-Length: 40Connection: Keep-Alive （----此处空一行----）name=Professional%20Ajax&amp;publisher=Wiley 有了以上对HTTP请求的了解和示例，我们再来看两种提交方式的区别：（1）GET提交，请求的数据会附在URL之后（就是把数据放置在请求行（request line）中），以?分割URL和传输数据，多个参数用&amp;连接；例如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。Url的编码格式采用的是ASCII码，而不是Unicode，这也就是说你不能在Url中包含任何非ASCII字符，所有非ASCII字符均需要编码再传输，关于Url编码可参考：http://kb.cnblogs.com/page/133765/。POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中 name=Professional%20Ajax&amp;publisher=Wiley 标明的就是实际的传输数据因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变(2)传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。 而在实际开发中存在的限制主要有： GET:特定浏览器和服务器对URL长度有限制，例如IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。 因此对于GET提交时，传输数据就会受到URL长度的限制。 POST:由于不是通过URL传值，理论上数据不受限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。 (3)安全性： .POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这 里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存， (2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击 （4）Http get,post,soap协议都是在http上运行的1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的 查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form-urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。 但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式 Content-type设置为: text/xml 任何数据都可以xml化 三 HTTP响应1．HTTP响应格式：1234&lt;status line&gt;&lt;headers&gt;&lt;blank line&gt;[&lt;response-body&gt;] 在响应中唯一真正的区别在于第一行中用状态信息代替了请求信息。状态行（status line）通过提供一个状态码来说明所请求的资源情况。 HTTP响应实例：123456789101112HTTP/1.1 200 OKDate: Sat, 31 Dec 2005 23:59:59 GMTContent-Type: text/html;charset=ISO-8859-1Content-Length: 122＜html＞＜head＞＜title＞Wrox Homepage＜/title＞＜/head＞＜body＞＜!-- body goes here --＞＜/body＞＜/html＞ 2．最常用的状态码有： ◆200 (OK): 找到了该资源，并且一切正常。◆304 (NOT MODIFIED): 该资源在上次请求之后没有任何修改。这通常用于浏览器的缓存机制。◆401 (UNAUTHORIZED): 客户端无权访问该资源。这通常会使得浏览器要求用户输入用户名和密码，以登录到服务器。◆403 (FORBIDDEN): 客户端未能获得授权。这通常是在401之后输入了不正确的用户名或密码。◆404 (NOT FOUND): 在指定的位置不存在所申请的资源。 四 完整示例： 例子： HTTP GET 发送12GET /DEMOWebServices2.8/Service.asmx/CancelOrder?UserID=string&amp;PWD=string&amp;OrderConfirmation=string HTTP/1.1Host: api.efxnow.com 回复12345678910111213HTTP/1.1 200 OKContent-Type: text/xml; charset=utf-8Content-Length: length&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;objPlaceOrderResponse xmlns="https://api.efxnow.com/webservices2.3"&gt;&lt;Success&gt;boolean&lt;/Success&gt;&lt;ErrorDescription&gt;string&lt;/ErrorDescription&gt;&lt;ErrorNumber&gt;int&lt;/ErrorNumber&gt;&lt;CustomerOrderReference&gt;long&lt;/CustomerOrderReference&gt;&lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt;&lt;CustomerDealRef&gt;string&lt;/CustomerDealRef&gt;&lt;/objPlaceOrderResponse&gt; HTTP POST 发送123456POST /DEMOWebServices2.8/Service.asmx/CancelOrder HTTP/1.1Host: api.efxnow.comContent-Type: application/x-www-form-urlencodedContent-Length: lengthUserID=string&amp;PWD=string&amp;OrderConfirmation=string 回复12345678910111213HTTP/1.1 200 OKContent-Type: text/xml; charset=utf-8Content-Length: length&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;objPlaceOrderResponse xmlns="https://api.efxnow.com/webservices2.3"&gt;&lt;Success&gt;boolean&lt;/Success&gt;&lt;ErrorDescription&gt;string&lt;/ErrorDescription&gt;&lt;ErrorNumber&gt;int&lt;/ErrorNumber&gt;&lt;CustomerOrderReference&gt;long&lt;/CustomerOrderReference&gt;&lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt;&lt;CustomerDealRef&gt;string&lt;/CustomerDealRef&gt;&lt;/objPlaceOrderResponse&gt; SOAP 1.2 发送123456789101112131415POST /DEMOWebServices2.8/Service.asmx HTTP/1.1Host: api.efxnow.comContent-Type: application/soap+xml; charset=utf-8Content-Length: length&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soap12:Body&gt; &lt;CancelOrder xmlns="https://api.efxnow.com/webservices2.3"&gt; &lt;UserID&gt;string&lt;/UserID&gt; &lt;PWD&gt;string&lt;/PWD&gt; &lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt; &lt;/CancelOrder&gt;&lt;/soap12:Body&gt;&lt;/soap12:Envelope&gt; 回复12345678910111213141516171819HTTP/1.1 200 OKContent-Type: application/soap+xml; charset=utf-8Content-Length: length&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soap12:Body&gt; &lt;CancelOrderResponse xmlns="https://api.efxnow.com/webservices2.3"&gt; &lt;CancelOrderResult&gt; &lt;Success&gt;boolean&lt;/Success&gt; &lt;ErrorDescription&gt;string&lt;/ErrorDescription&gt; &lt;ErrorNumber&gt;int&lt;/ErrorNumber&gt; &lt;CustomerOrderReference&gt;long&lt;/CustomerOrderReference&gt; &lt;OrderConfirmation&gt;string&lt;/OrderConfirmation&gt; &lt;CustomerDealRef&gt;string&lt;/CustomerDealRef&gt; &lt;/CancelOrderResult&gt; &lt;/CancelOrderResponse&gt;&lt;/soap12:Body&gt;&lt;/soap12:Envelope&gt;]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server的聚集索引和非聚集索引]]></title>
    <url>%2F2016%2F08%2F02%2FSQL%20Server%E7%9A%84%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[转自：http://www.cnblogs.com/tuyile006/archive/2009/08/28/1555615.html看了下文之后，考虑PM的成本数据库是否考虑对日期使用聚集索引。因为成本数据库主要是要出每个月的成本报表，通过时间的聚集索引能快速定位到当月的小数据量，再来统计报表。 一、聚集索引和非聚集索引微软的SQL SERVER提供了两种索引：聚集索引(clustered index，也称聚类索引、簇集索引)和非聚集索引(nonclustered index，也称非聚类索引、非簇集索引)…… (一)深入浅出理解索引结构 实际上，您可以把索引理解为一种特殊的目录。微软的SQL SERVER提供了两种索引：聚集索引(clustered index，也称聚类索引、簇集索引)和非聚集索引(nonclustered index，也称非聚类索引、非簇集索引)。下面，我们举例来说明一下聚集索引和非聚集索引的区别： 其实，我们的汉语字典的正文本身就是一个聚集索引。比如，我们要查“安”字，就会很自然地翻开字典的前几页，因为“安”的拼音是“an”，而按 照拼音排序汉字的字典是以英文字母“a”开头并以“z”结尾的，那么“安”字就自然地排在字典的前部。如果您翻完了所有以“a”开头的部分仍然找不到这个 字，那么就说明您的字典中没有这个字;同样的，如果查“张”字，那您也会将您的字典翻到最后部分，因为“张”的拼音是“zhang”。也就是说，字典的正 文部分本身就是一个目录，您不需要再去查其他目录来找到您需要找的内容。 我们把这种正文内容本身就是一种按照一定规则排列的目录称为“聚集索引”。 如果您认识某个字，您可以快速地从自典中查到这个字。但您也可能会遇到您不认识的字，不知道它的发音，这时候，您就不能按照刚才的方法找到您要 查的字，而需要去根据“偏旁部首”查到您要找的字，然后根据这个字后的页码直接翻到某页来找到您要找的字。但您结合“部首目录”和“检字表”而查到的字的 排序并不是真正的正文的排序方法，比如您查“张”字，我们可以看到在查部首之后的检字表中“张”的页码是672页，检字表中“张”的上面是“驰”字，但页 码却是63页，“张”的下面是“弩”字，页面是390页。很显然，这些字并不是真正的分别位于“张”字的上下方，现在您看到的连续的“驰、张、弩”三字实 际上就是他们在非聚集索引中的排序，是字典正文中的字在非聚集索引中的映射。我们可以通过这种方式来找到您所需要的字，但它需要两个过程，先找到目录中的 结果，然后再翻到您所需要的页码。 我们把这种目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚集索引”。 通过以上例子，我们可以理解到什么是“聚集索引”和“非聚集索引”。 进一步引申一下，我们可以很容易的理解：每个表只能有一个聚集索引，因为目录只能按照一种方法进行排序。 (二)何时使用聚集索引或非聚集索引 下面的表总结了何时使用聚集索引或非聚集索引(很重要)。 事实上，我们可以通过前面聚集索引和非聚集索引的定义的例子来理解上表。如：返回某范围内的数据一项。比如您的某个表有一个时间列，恰好您把 聚合索引建立在了该列，这时您查询2004年1月1日至2004年10月1日之间的全部数据时，这个速度就将是很快的，因为您的这本字典正文是按日期进行 排序的，聚类索引只需要找到要检索的所有数据中的开头和结尾数据即可;而不像非聚集索引，必须先查到目录中查到每一项数据对应的页码，然后再根据页码查到 具体内容。 (三)结合实际，谈索引使用的误区 理论的目的是应用。虽然我们刚才列出了何时应使用聚集索引或非聚集索引，但在实践中以上规则却很容易被忽视或不能根据实际情况进行综合分析。下面我们将根据在实践中遇到的实际问题来谈一下索引使用的误区，以便于大家掌握索引建立的方法。 1、主键就是聚集索引 这种想法笔者认为是极端错误的，是对聚集索引的一种浪费。虽然SQL SERVER默认是在主键上建立聚集索引的。 通常，我们会在每个表中都建立一个ID列，以区分每条数据，并且这个ID列是自动增大的，步长一般为1。我们的这个办公自动化的实例中的列 Gid就是如此。此时，如果我们将这个列设为主键，SQL SERVER会将此列默认为聚集索引。这样做有好处，就是可以让您的数据在数据库中按照ID进行物理排序，但笔者认为这样做意义不大。显而易见，聚集索引的优势是很明显的，而每个表中只能有一个聚集索引的规则，这使得聚集索引变得更加珍贵。 从我们前面谈到的聚集索引的定义我们可以看出，使用聚集索引的最大好处就是能够根据查询要求，迅速缩小查询范围，避免全表扫描。在实际应用中， 因为ID号是自动生成的，我们并不知道每条记录的ID号，所以我们很难在实践中用ID号来进行查询。这就使让ID号这个主键作为聚集索引成为一种资源浪 费。其次，让每个ID号都不同的字段作为聚集索引也不符合“大数目的不同值情况下不应建立聚合索引”规则;当然，这种情况只是针对用户经常修改记录内容， 特别是索引项的时候会负作用，但对于查询速度并没有影响。 在办公自动化系统中，无论是系统首页显示的需要用户签收的文件、会议还是用户进行文件查询等任何情况下进行数据查询都离不开字段的是“日期”还有用户本身的“用户名”。 通常，办公自动化的首页会显示每个用户尚未签收的文件或会议。虽然我们的where语句可以仅仅限制当前用户尚未签收的情况，但如果您的系统已 建立了很长时间，并且数据量很大，那么，每次每个用户打开首页的时候都进行一次全表扫描，这样做意义是不大的，绝大多数的用户1个月前的文件都已经浏览过 了，这样做只能徒增数据库的开销而已。事实上，我们完全可以让用户打开系统首页时，数据库仅仅查询这个用户近3个月来未阅览的文件，通过“日期”这个字段 来限制表扫描，提高查询速度。如果您的办公自动化系统已经建立的2年，那么您的首页显示速度理论上将是原来速度8倍，甚至更快。 在这里之所以提到“理论上”三字，是因为如果您的聚集索引还是盲目地建在ID这个主键上时，您的查询速度是没有这么高的，即使您在“日期”这个 字段上建立的索引(非聚合索引)。下面我们就来看一下在1000万条数据量的情况下各种查询的速度表现(3个月内的数据为25万条)： (1)仅在主键上建立聚集索引，并且不划分时间段： Select gid,fariqi,neibuyonghu,title from tgongwen 用时：128470毫秒(即：128秒) (2)在主键上建立聚集索引，在fariq上建立非聚集索引： select gid,fariqi,neibuyonghu,title from Tgongwen where fariqi&gt; dateadd(day,-90,getdate()) 用时：53763毫秒(54秒) (3)将聚合索引建立在日期列(fariqi)上： select gid,fariqi,neibuyonghu,title from Tgongwen where fariqi&gt; dateadd(day,-90,getdate()) 用时：2423毫秒(2秒) 虽然每条语句提取出来的都是25万条数据，各种情况的差异却是巨大的，特别是将聚集索引建立在日期列时的差异。事实上，如果您的数据库真的有 1000万容量的话，把主键建立在ID列上，就像以上的第1、2种情况，在网页上的表现就是超时，根本就无法显示。这也是我摒弃ID列作为聚集索引的一个 最重要的因素。 得出以上速度的方法是：在各个select语句前加： declare @d datetime set @d=getdate() 并在select语句后加： select [语句执行花费时间(毫秒)]=datediff(ms,@d,getdate()) 2、只要建立索引就能显著提高查询速度 事实上，我们可以发现上面的例子中，第2、3条语句完全相同，且建立索引的字段也相同;不同的仅是前者在fariqi字段上建立的是非聚合索引，后者在此字段上建立的是聚合索引，但查询速度却有着天壤之别。所以，并非是在任何字段上简单地建立索引就能提高查询速度。 从建表的语句中，我们可以看到这个有着1000万数据的表中fariqi字段有5003个不同记录。在此字段上建立聚合索引是再合适不过了。在 现实中，我们每天都会发几个文件，这几个文件的发文日期就相同，这完全符合建立聚集索引要求的：“既不能绝大多数都相同，又不能只有极少数相同”的规则。 由此看来，我们建立“适当”的聚合索引对于我们提高查询速度是非常重要的。 3、把所有需要提高查询速度的字段都加进聚集索引，以提高查询速度 上面已经谈到：在进行数据查询时都离不开字段的是“日期”还有用户本身的“用户名”。既然这两个字段都是如此的重要，我们可以把他们合并起来，建立一个复合索引(compound index)。 很多人认为只要把任何字段加进聚集索引，就能提高查询速度，也有人感到迷惑：如果把复合的聚集索引字段分开查询，那么查询速度会减慢吗?带着这 个问题，我们来看一下以下的查询速度(结果集都是25万条数据)：(日期列fariqi首先排在复合聚集索引的起始列，用户名neibuyonghu排在 后列) (1)select gid,fariqi,neibuyonghu,title from Tgongwen where fariqi&gt;’2004-5-5’ 查询速度：2513毫秒 (2)select gid,fariqi,neibuyonghu,title from Tgongwen where fariqi&gt;’2004-5-5’ and neibuyonghu=’办公室’ 查询速度：2516毫秒 (3)select gid,fariqi,neibuyonghu,title from Tgongwen where neibuyonghu=’办公室’ ``` 查询速度：60280毫秒 从以上试验中，我们可以看到如果仅用聚集索引的起始列作为查询条件和同时用到复合聚集索引的全部列的查询速度是几乎一样的，甚至比用上全部的复 合索引列还要略快(在查询结果集数目一样的情况下);而如果仅用复合聚集索引的非起始列作为查询条件的话，这个索引是不起任何作用的。当然，语句1、2的 查询速度一样是因为查询的条目数一样，如果复合索引的所有列都用上，而且查询结果少的话，这样就会形成“索引覆盖”，因而性能可以达到最优。同时，请记住：无论您是否经常使用聚合索引的其他列，但其前导列一定要是使用最频繁的列。 (四)其他书上没有的索引使用经验总结1、用聚合索引比用不是聚合索引的主键速度快 下面是实例语句：(都是提取25万条数据) select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=’2004-9-16’ 使用时间：3326毫秒 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where gid&lt;=250000 使用时间：4470毫秒 这里，用聚合索引比用不是聚合索引的主键速度快了近1/4。 2、用聚合索引比用一般的主键作order by时速度快，特别是在小数据量情况下 select gid,fariqi,neibuyonghu,reader,title from Tgongwen order by fariqi 用时：12936 select gid,fariqi,neibuyonghu,reader,title from Tgongwen order by gid 用时：18843 这里，用聚合索引比用一般的主键作order by时，速度快了3/10。事实上，如果数据量很小的话，用聚集索引作为排序列要比使用非聚集索引速度快得明显的多;而数据量如果很大的话，如10万以上，则二者的速度差别不明显。 3、使用聚合索引内的时间段，搜索时间会按数据占整个数据表的百分比成比例减少，而无论聚合索引使用了多少个 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi&gt;’2004-1-1’ 用时：6343毫秒(提取100万条) select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi&gt;’2004-6-6’ 用时：3170毫秒(提取50万条) select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=’2004-9-16’ 用时：3326毫秒(和上句的结果一模一样。如果采集的数量一样，那么用大于号和等于号是一样的) select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi&gt;’2004-1-1’ and fariqi&lt;’2004-6-6’ 用时：3280毫秒 4 、日期列不会因为有分秒的输入而减慢查询速度 下面的例子中，共有100万条数据，2004年1月1日以后的数据有50万条，但只有两个不同的日期，日期精确到日;之前有数据50万条，有5000个不同的日期，日期精确到秒。 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi&gt;’2004-1-1’ order by fariqi 用时：6390毫秒 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi&lt;’2004-1-1’ order by fariqi 用时：6453毫秒 (五)其他注意事项 “水可载舟，亦可覆舟”，索引也一样。索引有助于提高检索性能，但过多或不当的索引也会导致系统低效。过多的索引甚至会导致索引碎片。 索引是从数据库中获取数据的最高效方式之一。95%的数据库性能问题都可以采用索引技术得到解决。 1. 不要索引常用的小型表 不要为小型数据表设置任何键，假如它们经常有插入和删除操作就更别这样作了。对这些插入和删除操作的索引维护可能比扫描表空间消耗更多的时间。 2. 不要把社会保障号码(SSN)或身份证号码(ID)选作键 永远都不要使用 SSN 或 ID 作为数据库的键。除了隐私原因以外，SSN 或 ID 需要手工输入。永远不要使用手工输入的键作为主键，因为一旦你输入错误，你唯一能做的就是删除整个记录然后从头开始。 3. 不要用用户的键 在确定采用什么字段作为表的键的时候，可一定要小心用户将要编辑的字段。通常的情况下不要选择用户可编辑的字段作为键。这样做会迫使你采取以下两个措施： 4. 不要索引 memo/notes 字段和不要索引大型文本字段(许多字符) 这样做会让你的索引占据大量的数据库空间 5. 使用系统生成的主键 假如你总是在设计数据库的时候采用系统生成的键作为主键，那么你实际控制了数据库的索引完整性。这样，数据库和非人工机制就有效地控制了对存储数据中每一行的访问。 采用系统生成键作为主键还有一个优点：当你拥有一致的键结构时，找到逻辑缺陷很容易。 二、改善SQL语句 很多人不知道SQL语句在SQL SERVER中是如何执行的，他们担心自己所写的SQL语句会被SQL SERVER误解。比如： select * from table1 where name=’zhangsan’ and tID &gt; 10000 和执行: select * from table1 where tID &gt; 10000 and name=’zhangsan’ 一些人不知道以上两条语句的执行效率是否一样，因为如果简单的从语句先后上看，这两个语句的确是不一样，如果tID是一个聚合索引，那么后一句 仅仅从表的10000条以后的记录中查找就行了;而前一句则要先从全表中查找看有几个name=’zhangsan’的，而后再根据限制条件条件 tID&gt;10000来提出查询结果。 事实上，这样的担心是不必要的。SQL SERVER中有一个“查询分析优化器”，它可以计算出where子句中的搜索条件并确定哪个索引能缩小表扫描的搜索空间，也就是说，它能实现自动优化。 虽然查询优化器可以根据where子句自动的进行查询优化，但大家仍然有必要了解一下“查询优化器”的工作原理，如非这样，有时查询优化器就会不按照您的本意进行快速查询。 在查询分析阶段，查询优化器查看查询的每个阶段并决定限制需要扫描的数据量是否有用。如果一个阶段可以被用作一个扫描参数(SARG)，那么就称之为可优化的，并且可以利用索引快速获得所需数据。 SARG的定义：用于限制搜索的一个操作，因为它通常是指一个特定的匹配，一个值得范围内的匹配或者两个以上条件的AND连接。形式如下： 列名 操作符 &lt;常数 或 变量&gt; 或 &lt;常数 或 变量&gt; 操作符列名 列名可以出现在操作符的一边，而常数或变量出现在操作符的另一边。如： Name=’张三’ 价格&gt;5000 5000&lt;价格 Name=’张三’ and 价格&gt;5000 如果一个表达式不能满足SARG的形式，那它就无法限制搜索的范围了，也就是SQL SERVER必须对每一行都判断它是否满足WHERE子句中的所有条件。所以一个索引对于不满足SARG形式的表达式来说是无用的。 介绍完SARG后，我们来总结一下使用SARG以及在实践中遇到的和某些资料上结论不同的经验： 1、Like语句是否属于SARG取决于所使用的通配符的类型 如：name like ‘张%’ ，这就属于SARG 而：name like ‘%张’ ,就不属于SARG。 原因是通配符%在字符串的开通使得索引无法使用。 2、or 会引起全表扫描 如：Name=’张三’ and 价格&gt;5000 符号SARG， 而：Name=’张三’ or 价格&gt;5000 则不符合SARG。 使用or会引起全表扫描。 3、非操作符、函数引起的不满足SARG形式的语句 不满足SARG形式的语句最典型的情况就是包括非操作符的语句，如：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT EXISTS、NOT IN、NOT LIKE等，另外还有函数。下面就是几个不满足SARG形式的例子： ABS(价格)&lt;5000 Name like ‘%三’ 有些表达式，如： WHERE 价格*2&gt;5000 SQL SERVER也会认为是SARG，SQL SERVER会将此式转化为： WHERE 价格&gt;2500/2 但我们不推荐这样使用，因为有时SQL SERVER不能保证这种转化与原始表达式是完全等价的。 4、IN 的作用相当与OR 语句： Select from table1 where tid in (2,3) 和 Select from table1 where tid=2 or tid=3 是一样的，都会引起全表扫描，如果tid上有索引，其索引也会失效。 5、尽量少用NOT6、exists 和 in 的执行效率是一样的 很多资料上都显示说，exists要比in的执行效率要高，同时应尽可能的用not exists来代替not in。但事实上，我试验了一下，发现二者无论是前面带不带not，二者之间的执行效率都是一样的。因为涉及子查询，我们试验这次用SQL SERVER自带的pubs数据库。运行前我们可以把SQL SERVER的statistics I/O状态打开。 (1)select title,price from titles where title_id in (select title_id from sales where qty&gt;30) 该句的执行结果为： 表 ‘sales’。扫描计数 18，逻辑读 56 次，物理读 0 次，预读 0 次。 表 ‘titles’。扫描计数 1，逻辑读 2 次，物理读 0 次，预读 0 次。 (2)select title,price from titles where exists (select * from sales where sales.title_id=titles.title_id and qty&gt;30) 第二句的执行结果为： 表 ‘sales’。扫描计数 18，逻辑读 56 次，物理读 0 次，预读 0 次。 表 ‘titles’。扫描计数 1，逻辑读 2 次，物理读 0 次，预读 0 次。 我们从此可以看到用exists和用in的执行效率是一样的。 7、用函数charindex()和前面加通配符%的LIKE执行效率一样 前面，我们谈到，如果在LIKE前面加上通配符%，那么将会引起全表扫描，所以其执行效率是低下的。但有的资料介绍说，用函数charindex()来代替LIKE速度会有大的提升，经我试验，发现这种说明也是错误的： select gid,title,fariqi,reader from tgongwen where charindex(‘刑侦支队’,reader)&gt;0 and fariqi&gt;’2004-5-5’ 用时：7秒，另外：扫描计数 4，逻辑读 7155 次，物理读 0 次，预读 0 次。 select gid,title,fariqi,reader from tgongwen where reader like ‘%’ + ‘刑侦支队’ + ‘%’ and fariqi&gt;’2004-5-5’ 用时：7秒，另外：扫描计数 4，逻辑读 7155 次，物理读 0 次，预读 0 次。 8、union并不绝对比or的执行效率高 我们前面已经谈到了在where子句中使用or会引起全表扫描，一般的，我所见过的资料都是推荐这里用union来代替or。事实证明，这种说法对于大部分都是适用的。 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=’2004-9-16’ or gid&gt;9990000 用时：68秒。扫描计数 1，逻辑读 404008 次，物理读 283 次，预读 392163 次。 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=’2004-9-16’ union select gid,fariqi,neibuyonghu,reader,title from Tgongwen where gid&gt;9990000 用时：9秒。扫描计数 8，逻辑读 67489 次，物理读 216 次，预读 7499 次。 看来，用union在通常情况下比用or的效率要高的多。 但经过试验，笔者发现如果or两边的查询列是一样的话，那么用union则反倒和用or的执行速度差很多，虽然这里union扫描的是索引，而or扫描的是全表。 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=’2004-9-16’ or fariqi=’2004-2-5’ 用时：6423毫秒。扫描计数 2，逻辑读 14726 次，物理读 1 次，预读 7176 次。 select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=’2004-9-16’ union select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=’2004-2-5’ 用时：11640毫秒。扫描计数 8，逻辑读 14806 次，物理读 108 次，预读 1144 次。 9、字段提取要按照“需多少、提多少”的原则，避免“select *” 我们来做一个试验： select top 10000 gid,fariqi,reader,title from tgongwen order by gid desc 用时：4673毫秒 select top 10000 gid,fariqi,title from tgongwen order by gid desc 用时：1376毫秒 select top 10000 gid,fariqi from tgongwen order by gid desc 用时：80毫秒 由此看来，我们每少提取一个字段，数据的提取速度就会有相应的提升。提升的速度还要看您舍弃的字段的大小来判断。 10、count(*)不比count(字段)慢 某些资料上说：用*会统计所有列，显然要比一个世界的列名效率低。这种说法其实是没有根据的。我们来看： select count(*) from Tgongwen 用时：1500毫秒 select count(gid) from Tgongwen 用时：1483毫秒 select count(fariqi) from Tgongwen 用时：3140毫秒 select count(title) from Tgongwen 用时：52050毫秒 从以上可以看出，如果用count()和用count(主键)的速度是相当的，而count()却比其他任何除主键以外的字段汇总速度要 快，而且字段越长，汇总的速度就越慢。我想，如果用count(*)， SQL SERVER可能会自动查找最小字段来汇总的。当然，如果您直接写count(主键)将会来的更直接些。 11、order by按聚集索引列排序效率最高 我们来看：(gid是主键，fariqi是聚合索引列) select top 10000 gid,fariqi,reader,title from tgongwen 用时：196 毫秒。 扫描计数 1，逻辑读 289 次，物理读 1 次，预读 1527 次。 select top 10000 gid,fariqi,reader,title from tgongwen order by gid asc 用时：4720毫秒。 扫描计数 1，逻辑读 41956 次，物理读 0 次，预读 1287 次。 select top 10000 gid,fariqi,reader,title from tgongwen order by gid desc 用时：4736毫秒。 扫描计数 1，逻辑读 55350 次，物理读 10 次，预读 775 次。 select top 10000 gid,fariqi,reader,title from tgongwen order by fariqi asc 用时：173毫秒。 扫描计数 1，逻辑读 290 次，物理读 0 次，预读 0 次。 select top 10000 gid,fariqi,reader,title from tgongwen order by fariqi desc 用时：156毫秒。 扫描计数 1，逻辑读 289 次，物理读 0 次，预读 0 次。 从以上我们可以看出，不排序的速度以及逻辑读次数都是和“order by 聚集索引列” 的速度是相当的，但这些都比“order by 非聚集索引列”的查询速度是快得多的。 同时，按照某个字段进行排序的时候，无论是正序还是倒序，速度是基本相当的。 12、高效的TOP 事实上，在查询和提取超大容量的数据集时，影响数据库响应时间的最大因素不是数据查找，而是物理的I/0操作。如： select top 10 * from ( select top 10000 gid,fariqi,title from tgongwen where neibuyonghu=’办公室’order by gid desc) as a order by gid asc 这条语句，从理论上讲，整条语句的执行时间应该比子句的执行时间长，但事实相反。因为，子句执行后返回的是10000条记录，而整条语句仅返回 10条语句，所以影响数据库响应时间最大的因素是物理I/O操作。而限制物理I/O操作此处的最有效方法之一就是使用TOP关键词了。TOP关键词是 SQL SERVER中经过系统优化过的一个用来提取前几条或前几个百分比数据的词。经笔者在实践中的应用，发现TOP确实很好用，效率也很高。但这个词在另外一 个大型数据库ORACLE中却没有，这不能说不是一个遗憾，虽然在ORACLE中可以用其他方法(如：rownumber)来解决。在以后的关于“实现千 万级数据的分页显示存储过程”的讨论中，我们就将用到TOP这个关键词。 到此为止，我们上面讨论了如何实现从大容量的数据库中快速地查询出您所需要的数据方法。当然，我们介绍的这些方法都是“软”方法，在实践中，我们还要考虑各种“硬”因素，如：网络性能、服务器的性能、操作系统的性能，甚至网卡、交换机等。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java RMI]]></title>
    <url>%2F2016%2F08%2F02%2FJava%20RMI%2F</url>
    <content type="text"><![CDATA[RMI 介绍：http://blog.csdn.net/u011491148/article/details/9982771 【定义】Java RMI：Java远程方法调用，即Java RMI（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。我们知道远程过程调用（Remote Procedure Call, RPC）可以用于一个进程调用另一个进程（很可能在另一个远程主机上）中的过程，从而提供了过程的分布能力。Java 的 RMI 则在 RPC 的基础上向前又迈进了一步，即提供分布式对象间的通讯。RMI（Remote Method Invocation）为远程方法调用，是允许运行在一个Java虚拟机的对象调用运行在另一个Java虚拟机上的对象的方法。这两个虚拟机可以是运行在相同计算机上的不同进程中，也可以是运行在网络上的不同计算机中。 【工作原理】RMI能让一个Java程序去调用网络中另一台计算机的Java对象的方法，那么调用的效果就像是在本机上调用一样。通俗的讲：A机器上面有一个class，通过远程调用，B机器调用这个class 中的方法。RMI，远程方法调用（Remote Method Invocation）是Enterprise JavaBeans的支柱，是建立分布式Java应用程序的方便途径。RMI是非常容易使用的，但是它非常的强大。RMI的基础是接口，RMI构架基于一个重要的原理：定义接口和定义接口的具体实现是分开的。下面我们通过具体的例子，建立一个简单的远程计算服务和使用它的客户程序]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP/IP，http，socket小结]]></title>
    <url>%2F2016%2F08%2F01%2FTCPIP%20http%20socket%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[thomescai http://blog.csdn.net/thomescai(转载请保留)先看图：TCP/IP是什么？ TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层。 在网络层有IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议。 在传输层中有TCP协议与UDP协议。 在应用层有FTP、HTTP、TELNET、SMTP、DNS等协议。Socket是什么呢？ Socket是应用层与TCP/IP协议族通信的中间软件抽象层，一组接口，把复杂的TCP/IP协议族隐藏在Socket接口后面。 所以HTTP就是TCP/IP应用层的协议。Socket是他们的软件抽象层。Socket协议的形象描述 socket的英文原义是“孔”或“插座”。在这里作为4BDS UNIX的进程通信机制，取后一种意思。socket非常类似于电话插座。以一个国家级电话网为例。电话的通话双方相当于相互通信的2个进程，区号是它的网络地址；区内一个单位的交换机相当于一台主机，主机分配给每个用户的局内号码相当于socket号。任何用户在通话之前，首先要占有一部电话机，相当于申请一个socket；同时要知道对方的号码，相当于对方有一个固定的socket。然后向对方拨号呼叫，相当于发出连接请求(假如对方不在同一区内，还要拨对方区号，相当于给出网络地址)。对方假如在场并空闲(相当于通信的另一主机开机且可以接受连接请求)，拿起电话话筒，双方就可以正式通话，相当于连接成功。双方通话的过程，是一方向电话机发出信号和对方从电话机接收信号的过程，相当于向socket发送数据和从socket接收数据。通话结束后，一方挂起电话机相当于关闭socket，撤消连接。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[System.exit(0)和System.exit(1)区别]]></title>
    <url>%2F2016%2F08%2F01%2FSystem.exit(0)%E5%92%8CSystem.exit(1)%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1.解析查看java.lang.System的源代码，我们可以找到System.exit(status)这个方法的说明，代码如下：1234567891011121314151617181920212223/** * Terminates the currently running Java Virtual Machine. The * argument serves as a status code; by convention, a nonzero status * code indicates abnormal termination. * &lt;p&gt; * This method calls the &lt;code&gt;exit&lt;/code&gt; method in class * &lt;code&gt;Runtime&lt;/code&gt;. This method never returns normally. * &lt;p&gt; * The call &lt;code&gt;System.exit(n)&lt;/code&gt; is effectively equivalent to * the call: * &lt;blockquote&gt;&lt;pre&gt; * Runtime.getRuntime().exit(n) * &lt;/pre&gt;&lt;/blockquote&gt; * * @param status exit status. * @throws SecurityException * if a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt; * method doesn&apos;t allow exit with the specified status. * @see java.lang.Runtime#exit(int) */ public static void exit(int status) &#123; Runtime.getRuntime().exit(status); &#125; 注释中说的很清楚，这个方法是用来结束当前正在运行中的java虚拟机。如何status是非零参数，那么表示是非正常退出。System.exit(0)是将你的整个虚拟机里的内容都停掉了 ，而dispose()只是关闭这个窗口，但是并没有停止整个application exit() 。无论如何，内存都释放了！也就是说连JVM都关闭了，内存里根本不可能还有什么东西System.exit(0)是正常退出程序，而System.exit(1)或者说非0表示非正常退出程序System.exit(status)不管status为何值都会退出程序。和return 相比有以下不同点：return是回到上一层，而System.exit(status)是回到最上层 2.示例在一个if-else判断中，如果我们程序是按照我们预想的执行，到最后我们需要停止程序，那么我们使用System.exit(0)，而System.exit(1)一般放在catch块中，当捕获到异常，需要停止程序，我们使用System.exit(1)。这个status=1是用来表示这个程序是非正常退出。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript框架jQuery简介]]></title>
    <url>%2F2016%2F08%2F01%2FJavaScript%E6%A1%86%E6%9E%B6jQuery%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[jQuery项目是由John Resig在5年前创建的，最初的想法是实现跨浏览器的DOM遍历和操纵。目前的jQuery 1.4.2中包含了越来越多的工具以简化JavaScript的开发工作。根据BuiltWith的使用统计，开源项目jQuery在世界前10,000名站点中的使用率超过了30%。jQuery API的设计初衷就是简单与直观，可以实现如下功能： 遍历DOM 操纵DOM元素 处理CSS 处理事件 Ajax交互 辅助功能 一个UI库 一个效果库 jQuery框架使用了简单的选择器来获取并操纵DOM元素。一旦获得DOM中的某个元素，它就成为一个jQuery对象，可以使用库中的任何方法来操纵该对象。jQuery框架还支持使用复杂的选择器，比如基于父子关系、属性和过滤器的元素等。 Traversing（或是在DOM元素中导航）API包含的方法可以过滤已选择的元素集合，如filter()、is()、not()和slice()等。 还有一些Traversing API可以根据元素之间的关系（这一点不同于使用id或class选择器）找到特定的元素，比如children()、find()、contents()、next()、prev()、parents()和siblings()等，这些方法能够极大简化元素的查找操作。 一旦选择了DOM元素（要么选择，要么创建），接下来就可以使用jQuery来操纵这些元素了，这些操作有： 向文档中插入元素设定inner HTML或Text、在其他元素的首或尾、前或后以及周围插入内容替换匹配的元素移除元素克隆元素CSS组件提供了一套工具来获取和设定任何元素或元素集合的CSS属性。该类别中的工具还有width()和height()方法以及用于获取任意指定元素相对偏移量的offset()方法。 jQuery框架为事件处理提供了跨浏览器的实现，提供了定义与触发客户化事件的方法，还可以绑定到标准的DOM事件上。它还提供了大量的事件辅助方法，可以用jQuery函数包装标准的DOM元素，开发者可以通过这些函数用最少的代码响应特定元素的事件，如click等，而且无需检测浏览器。 jQuery Ajax API所包含的方法可以通过get或post请求加载远程页面、数据和脚本，可以轻松访问JSON数据，此外还有一套客户化的AJAX事件来处理success、complete、start、stop和error事件。 若想上手jQuery框架或是学习一些高级的插件，可以参考相关的文档和指南。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java中的随机数Random]]></title>
    <url>%2F2016%2F07%2F31%2Fjava%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0Random%2F</url>
    <content type="text"><![CDATA[java中一般有两种随机数，一个是Math中random()方法，一个是Random类。一、Math.random()随即生成0&lt; x]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript和Java Applet有什么区别]]></title>
    <url>%2F2016%2F07%2F31%2FJavaScript%E5%92%8CJava%20Applet%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[JavaScript 是一种描述性语言，它可以被嵌入 HTML 的文件之中。通过 JavaScript 可以做到响应用户的需求事件(如表单的输入)，这样当一位使用者输入一项信息时，它不需要通过网络传送到服务器端进行处理再传回来的过程，而可以直接在客户端进行事件的处理。你也可以想像成有一个可执行程序在你的客户端上执行一样(但这种执行程序是有限的，它对客户端电脑的控制力很差)! JavaScript 和 Java 很相似，但它们却是完全不同的语言! Java 是由 Sun Microsystem 公司开发的一种面向对象的程序设计语言，类似于C++，它需要多种编译器和支持文件才能运行;但于 C++ 不同的是，Java 可以独立于任何操作平台，因此它就在当今 Internet 网络各种操作平台的基础上得以迅速发展。但它是一种比 JavaScript 复杂得多的标准程序语言。JavaScript 则是相对容易了解的函数式语言，JavaScript 创作者可以不那么注重编程技巧，例如声明所有的变量、类和方法，您也不必关心诸如 public、 private 或 protected 之类的费解的东西;更重要的是，它只能存在于一个 HTML 脚本中，而且只有在装入一个兼容的浏览器时才能运行，所以许多 Java 的特性在 JavaScript 中并不支持。现在，JavaScript 分为三类:核心版、客户方和服务器方 JavaScript(微软也有一个 JavaScript 的变种，称之为 JScript)。 applet是一种小程序，它需要编译才能执行。是个CLASS。applet应该是属于JavsSwing系列，但这门技术sun公司早在多年前就已经放弃了。因为它的性能实在不如JavaScript框架。 比较案例：这样的系统是使用javaScript还是java applet?工业上的应用，做一个远程监控的网页界面，页面有五个左右。平时没啥操作，就是盯着看它就行了，数据从数据库中定时读出来。请问如果做这样的一个应用，是使用javaScript做网页界面好呢？还是使用java做个 applet嵌到网页中去？各有什么利弊？答案：用JQuery DWR这样的JavaScript框架做吧，Applet要求客户端必须要装JRE的浏览器插件，Applet这个技术已经没有多少人用了。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AJAX工作原理及其优缺点]]></title>
    <url>%2F2016%2F07%2F31%2FAJAX%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E4%BC%98%E7%BC%BA%E7%82%B9%2F</url>
    <content type="text"><![CDATA[1.什么是AJAX?AJAX全称为“Asynchronous JavaScript and XML”（异步JavaScript和XML），是一种创建交互式网页应用的网页开发技术。它使用：使用XHTML+CSS来标准化呈现；使用XML和XSLT进行数据交换及相关操作；使用XMLHttpRequest对象与Web服务器进行异步数据通信；使用Javascript操作Document Object Model进行动态显示及交互；使用JavaScript绑定和处理所有数据。 2.与传统的web应用比较传统的Web应用交互由用户触发一个HTTP请求到服务器,服务器对其进行处理后再返回一个新的HTHL页到客户端, 每当服务器处理客户端提交的请求时,客户都只能空闲等待,并且哪怕只是一次很小的交互、只需从服务器端得到很简单的一个数据,都要返回一个完整的HTML页,而用户每次都要浪费时间和带宽去重新读取整个页面。这个做法浪费了许多带宽，由于每次应用的交互都需要向服务器发送请求，应用的响应时间就依赖于服务器的响应时间。这导致了用户界面的响应比本地应用慢得多。与此不同，AJAX应用可以仅向服务器发送并取回必需的数据，它使用SOAP或其它一些基于XML的Web Service接口，并在客户端采用JavaScript处理来自服务器的响应。因为在服务器和浏览器之间交换的数据大量减少，结果我们就能看到响应更快的应用。同时很多的处理工作可以在发出请求的客户端机器上完成，所以Web服务器的处理时间也减少了。 3.AJAX的工作原理Ajax的工作原理相当于在用户和服务器之间加了—个中间层(AJAX引擎),使用户操作与服务器响应异步化。并不是所有的用户请求都提交给服务器,像—些数据验证和数据处理等都交给Ajax引擎自己来做, 只有确定需要从服务器读取新数据时再由Ajax引擎代为向服务器提交请求。Ajax其核心有JavaScript、XMLHTTPRequest、DOM对象组成，通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用JavaScript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。让我们来了解这几个对象。(1).XMLHTTPRequest对象Ajax的一个最大的特点是无需刷新页面便可向服务器传输或读写数据(又称无刷新更新页面),这一特点主要得益于XMLHTTP组件XMLHTTPRequest对象。(2).JavaScriptJavaScript是一在浏览器中大量使用的编程语言。(3).DOM Document Object ModelDOM是给HTML和XML文件使用的一组API。它提供了文件的结构表述，让你可以改变其中的內容及可见物。其本质是建立网页与Script或程序语言沟通的桥梁。所有WEB开发人员可操作及建立文件的属性、方法及事件都以对象来展现（例如，document就代表“文件本身“这个对像，table对象则代表HTML的表格对象等等）。这些对象可以由当今大多数的浏览器以Script来取用。一个用HTML或XHTML构建的网页也可以看作是一组结构化的数据，这些数据被封在DOM（Document Object Model）中，DOM提供了网页中各个对象的读写的支持((。 (4).XML可扩展的标记语言（Extensible Markup Language）具有一种开放的、可扩展的、可自描述的语言结构，它已经成为网上数据和文档传输的标准,用于其他应用程序交换数据 。 (5).综合Ajax引擎，实际上是一个比较复杂的JavaScript应用程序，用来处理用户请求，读写服务器和更改DOM内容。JavaScript的Ajax引擎读取信息，并且互动地重写DOM，这使网页能无缝化重构，也就是在页面已经下载完毕后改变页面内容，这是我们一直在通过JavaScript和DOM在广泛使用的方法，但要使网页真正动态起来，不仅要内部的互动，还需要从外部获取数据，在以前，我们是让用户来输入数据并通过DOM来改变网页内容的，但现在，XMLHTTPRequest，可以让我们在不重载页面的情况下读写服务器上的数据，使用户的输入达到最少。 Ajax使WEB中的界面与应用分离（也可以说是数据与呈现分离），而在以前两者是没有清晰的界限的，数据与呈现分离的分离，有利于分工合作、减少非技术人员对页面的修改造成的WEB应用程序错误、提高效率、也更加适用于现在的发布系统。也可以把以前的一些服务器负担的工作转嫁到客户端，利于客户端闲置的处理能力来处理。** 4.AJAX的优缺点(1).AJAX的优点 .无刷新更新数据。AJAX最大优点就是能在不刷新整个页面的前提下与服务器通信维护数据。这使得Web应用程序更为迅捷地响应用户交互，并避免了在网络上发送那些没有改变的信息，减少用户等待时间，带来非常好的用户体验。 .异步与服务器通信。AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间及降低网络上数据流量。 .前端和后端负载平衡。AJAX可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。 .基于标准被广泛支持。AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。随着Ajax的成熟，一些简化Ajax使用方法的程序库也相继问世。同样，也出现了另一种辅助程序设计的技术，为那些不支持JavaScript的用户提供替代功能。 .界面与应用分离。Ajax使WEB中的界面与应用分离（也可以说是数据与呈现分离），有利于分工合作、减少非技术人员对页面的修改造成的WEB应用程序错误、提高效率、也更加适用于现在的发布系统。 (2).AJAX的缺点 .AJAX干掉了Back和History功能，即对浏览器机制的破坏。在动态更新页面的情况下，用户无法回到前一个页面状态，因为浏览器仅能记忆历史记录中的静态页面。一个被完整读入的页面与一个已经被动态修改过的页面之间的差别非常微妙；用户通常会希望单击后退按钮能够取消他们的前一次操作，但是在Ajax应用程序中，这将无法实现。后退按钮是一个标准的web站点的重要功能，但是它没法和js进行很好的合作。这是Ajax所带来的一个比较严重的问题，因为用户往往是希望能够通过后退来取消前一次操作的。那么对于这个问题有没有办法？答案是肯定的，用过Gmail的知道，Gmail下面采用的Ajax技术解决了这个问题，在Gmail下面是可以后退的，但是，它也并不能改变Ajax的机制，它只是采用的一个比较笨但是有效的办法，即用户单击后退按钮访问历史记录时，通过创建或使用一个隐藏的IFRAME来重现页面上的变更。（例如，当用户在Google Maps中单击后退时，它在一个隐藏的IFRAME中进行搜索，然后将搜索结果反映到Ajax元素上，以便将应用程序状态恢复到当时的状态。）但是，虽然说这个问题是可以解决的，但是它所带来的开发成本是非常高的，并与Ajax框架所要求的快速开发是相背离的。这是Ajax所带来的一个非常严重的问题。一个相关的观点认为，使用动态页面更新使得用户难于将某个特定的状态保存到收藏夹中。该问题的解决方案也已出现，大部分都使用URL片断标识符（通常被称为锚点，即URL中#后面的部分）来保持跟踪，允许用户回到指定的某个应用程序状态。（许多浏览器允许JavaScript动态更新锚点，这使得Ajax应用程序能够在更新显示内容的同时更新锚点。）这些解决方案也同时解决了许多关于不支持后退按钮的争论。 .AJAX的安全问题。AJAX技术给用户带来很好的用户体验的同时也对IT企业带来了新的安全威胁，Ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。Ajax的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击。还有Ajax也难以避免一些已知的安全弱点，诸如跨站点脚步攻击、SQL注入攻击和基于Credentials的安全漏洞等等。 .对搜索引擎支持较弱。对搜索引擎的支持比较弱。如果使用不当，AJAX会增大网络数据的流量，从而降低整个系统的性能。 .破坏程序的异常处理机制。至少从目前看来，像Ajax.dll，Ajaxpro.dll这些Ajax框架是会破坏程序的异常机制的。关于这个问题，曾在开发过程中遇到过，但是查了一下网上几乎没有相关的介绍。后来做了一次试验，分别采用Ajax和传统的form提交的模式来删除一条数据……给我们的调试带来了很大的困难。 .违背URL和资源定位的初衷。例如，我给你一个URL地址，如果采用了Ajax技术，也许你在该URL地址下面看到的和我在这个URL地址下看到的内容是不同的。这个和资源定位的初衷是相背离的。 .AJAX不能很好支持移动设备。一些手持设备（如手机、PDA等）现在还不能很好的支持Ajax，比如说我们在手机的浏览器上打开采用Ajax技术的网站时，它目前是不支持的。 .客户端过肥，太多客户端代码造成开发上的成本。编写复杂、容易出错 ；冗余代码比较多（层层包含js文件是AJAX的通病，再加上以往的很多服务端代码现在放到了客户端）；破坏了Web的原有标准。 5.AJAX注意点及适用和不适用场景(1).注意点Ajax开发时，网络延迟——即用户发出请求到服务器发出响应之间的间隔——需要慎重考虑。不给予用户明确的回应，没有恰当的预读数据，或者对XMLHttpRequest的不恰当处理，都会使用户感到延迟，这是用户不希望看到的，也是他们无法理解的。通常的解决方案是，使用一个可视化的组件来告诉用户系统正在进行后台操作并且正在读取数据和内容。(2).Ajax适用场景 .表单驱动的交互 .深层次的树的导航 .快速的用户与用户间的交流响应 .类似投票、yes/no等无关痛痒的场景 .对数据进行过滤和操纵相关数据的场景 .普通的文本输入提示和自动完成的场景(3).Ajax不适用场景 .部分简单的表单 .搜索 .基本的导航 .替换大量的文本 .对呈现的操纵]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最精简的java 线程池与任务队列[转]]]></title>
    <url>%2F2016%2F07%2F28%2F%E6%9C%80%E7%B2%BE%E7%AE%80%E7%9A%84java%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%8E%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[具体的代码请阅读全文。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class WorkQueue &#123; private final int nThreads;// 线程池的大小 private final PoolWorker[] threads;// 用数组实现线程池 private final LinkedList queue;// 任务队列 public WorkQueue(int nThreads) &#123; this.nThreads = nThreads; queue = new LinkedList(); threads = new PoolWorker[nThreads]; for (int i = 0; i &lt; nThreads; i++) &#123; threads[i] = new PoolWorker(); threads[i].start();// 启动所有工作线程 &#125; &#125; public void execute(Runnable r) &#123;// 执行任务 synchronized (queue) &#123; queue.addLast(r); queue.notify(); &#125; &#125; private class PoolWorker extends Thread &#123;// 工作线程类 public void run() &#123; Runnable r; while (true) &#123; synchronized (queue) &#123; while (queue.isEmpty()) &#123; // 如果任务队列中没有任务，等待 try &#123; queue.wait(); &#125; catch (InterruptedException ignored) &#123; &#125; &#125; r = (Runnable) queue.removeFirst(); // 有任务时，取出任务 &#125; try &#123; r.run();// 执行任务 &#125; catch (RuntimeException e) &#123; // You might want to log something here &#125; &#125; &#125; &#125; public static void main(String args[]) &#123; WorkQueue wq = new WorkQueue(10);// 10个工作线程 Mytask r[] = new Mytask[20];// 20个任务 for (int i = 0; i &lt; 20; i++) &#123; r[i] = new Mytask(); wq.execute(r[i]); &#125; &#125;&#125;class Mytask implements Runnable &#123;// 任务接口 public void run() &#123; String name = Thread.currentThread().getName(); try &#123; Thread.sleep(100);// 模拟任务执行的时间 &#125; catch (InterruptedException e) &#123; &#125; System.out.println(name + " executed OK"); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java线程同步：synchronized锁住的是代码还是对象[转]]]></title>
    <url>%2F2016%2F07%2F28%2FJava%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%EF%BC%9Asynchronized%E9%94%81%E4%BD%8F%E7%9A%84%E6%98%AF%E4%BB%A3%E7%A0%81%E8%BF%98%E6%98%AF%E5%AF%B9%E8%B1%A1%5B%E8%BD%AC%5D%20%2F</url>
    <content type="text"><![CDATA[转载请注明出处：http://blog.csdn.net/xiao__gui/article/details/8188833Java线程同步：synchronized锁住的是代码还是对象在Java中，synchronized关键字是用来控制线程同步的，就是在多线程的环境下，控制synchronized代码段不被多个线程同时执行。synchronized既可以加在一段代码上，也可以加在方法上。关键是，不要认为给方法或者代码段加上synchronized就万事大吉，看下面一段代码：123456789101112131415161718192021222324252627282930class Sync &#123; public synchronized void test() &#123; System.out.println("test开始.."); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println("test结束.."); &#125; &#125; class MyThread extends Thread &#123; public void run() &#123; Sync sync = new Sync(); sync.test(); &#125; &#125; public class Main &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 3; i++) &#123; Thread thread = new MyThread(); thread.start(); &#125; &#125; &#125; 运行结果：test开始..test开始..test开始..test结束..test结束..test结束.. 可以看出来，上面的程序起了三个线程，同时运行Sync类中的test()方法，虽然test()方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。将test()方法上的synchronized去掉，在方法内部加上synchronized(this)： 1234567891011public void test() &#123; synchronized(this)&#123; System.out.println("test开始.."); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println("test结束.."); &#125; &#125; 运行结果：test开始..test开始..test开始..test结束..test结束..test结束.. 一切还是这么平静，没有看到synchronized起到作用。实际上，synchronized(this)以及非static的synchronized方法（至于static synchronized方法请往下看），只能防止多个线程同时执行同一个对象的同步代码段。回到本文的题目上：synchronized锁住的是代码还是对象。答案是：synchronized锁住的是括号里的对象，而不是代码。对于非static的synchronized方法，锁的就是对象本身也就是this。当synchronized锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。即使两个不同的代码段，都要锁同一个对象，那么这两个代码段也不能在多线程环境下同时运行。所以我们在用synchronized关键字的时候，能缩小代码段的范围就尽量缩小，能在代码段上加同步就不要再整个方法上加同步。这叫减小锁的粒度，使代码更大程度的并发。原因是基于以上的思想，锁的代码段太长了，别的线程是不是要等很久，等的花儿都谢了。当然这段是题外话，与本文核心思想并无太大关联。再看上面的代码，每个线程中都new了一个Sync类的对象，也就是产生了三个Sync对象，由于不是同一个对象，所以可以多线程同时运行synchronized方法或代码段。为了验证上述的观点，修改一下代码，让三个线程使用同一个Sync的对象。1234567891011121314151617181920212223class MyThread extends Thread &#123; private Sync sync; public MyThread(Sync sync) &#123; this.sync = sync; &#125; public void run() &#123; sync.test(); &#125; &#125; public class Main &#123; public static void main(String[] args) &#123; Sync sync = new Sync(); for (int i = 0; i &lt; 3; i++) &#123; Thread thread = new MyThread(sync); thread.start(); &#125; &#125; &#125; 运行结果：test开始..test结束..test开始..test结束..test开始..test结束.. 可以看到，此时的synchronized就起了作用。 那么，如果真的想锁住这段代码，要怎么做？也就是，如果还是最开始的那段代码，每个线程new一个Sync对象，怎么才能让test方法不会被多线程执行。 解决也很简单，只要锁住同一个对象不就行了。例如，synchronized后的括号中锁同一个固定对象，这样就行了。这样是没问题，但是，比较多的做法是让synchronized锁这个类对应的Class对象。1234567891011121314151617181920212223242526272829303132class Sync &#123; public void test() &#123; synchronized (Sync.class) &#123; System.out.println("test开始.."); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println("test结束.."); &#125; &#125; &#125; class MyThread extends Thread &#123; public void run() &#123; Sync sync = new Sync(); sync.test(); &#125; &#125; public class Main &#123; public static void main(String[] args) &#123; for (int i = 0; i &lt; 3; i++) &#123; Thread thread = new MyThread(); thread.start(); &#125; &#125; &#125; 运行结果：test开始..test结束..test开始..test结束..test开始..test结束..上面代码用synchronized(Sync.class)实现了全局锁的效果。 最后说说static synchronized方法，static方法可以直接类名加方法名调用，方法中无法使用this，所以它锁的不是this，而是类的Class对象，所以， **static synchronized方法也相当于全局锁，相当于锁住了代码段。**]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA三大特性之多态[转]]]></title>
    <url>%2F2016%2F07%2F25%2FJAVA%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%A4%9A%E6%80%81%2F</url>
    <content type="text"><![CDATA[面向对象的三大特性封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。 多态的定义指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用） 实现多态的技术实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。 多态的作用消除类型之间的耦合关系。 现实中，关于多态的例子不胜枚举。比方说按下F1键这个动作，如果当前在Flash界面下弹出的就是AS3的帮助文档；如果当前在Word下弹出的就是Word帮助；在Windows下弹出的就是Windows帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。 多态存在的三个必要条件一、要有继承；二、要有重写；三、父类引用指向子类对象。 多态的特性1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。 2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。 3.接口性（interface-abilit）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实 现多态，完善或者覆盖这两个接口方法。 4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。 5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。 具体列子：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283/** * 游戏类 * * @author joker.chan */public static class PlayGame &#123; protected void playGame() &#123; System.out.println("Play Game"); &#125;&#125;/** * 子类Dota1 * @author joker.chan * */public static class Dota1 extends PlayGame &#123; @Override protected void playGame() &#123; // TODO Auto-generated method stub super.playGame(); System.out.println("DOTA1菜B!"); &#125;&#125;/** * 子类Dota2 * @author joker.chan * */public static class Dota2 extends PlayGame &#123; @Override protected void playGame() &#123; // TODO Auto-generated method stub super.playGame(); System.out.println("DOTA2小菜B!"); &#125;&#125;/** * 子类Lol * @author joker.chan * */public static class Lol extends PlayGame &#123; @Override protected void playGame() &#123; // TODO Auto-generated method stub super.playGame(); System.out.println("根本不会玩!"); &#125;&#125;调用过程:/** * * java 三大特性之多态 * * @author joker.chan * @param args * */public static void main(String[] args) &#123; // TODO Auto-generated method stub PlayGame[] games = new PlayGame[3]; games[0] = new Dota1(); games[1] = new Dota2(); games[2] = new Lol(); for (int i = 0; i &lt; games.length; i++) &#123; if (games[i] != null) &#123; games[i].playGame(); &#125; &#125;&#125; 输出结果： Play GameDOTA1菜B!Play GameDOTA2小菜B!Play Game根本不会玩!]]></content>
  </entry>
  <entry>
    <title><![CDATA[《零年：1945 现代世界诞生的时刻》读后感]]></title>
    <url>%2F2016%2F07%2F23%2F%E3%80%8A%E9%9B%B6%E5%B9%B4%EF%BC%9A1945%20%E7%8E%B0%E4%BB%A3%E4%B8%96%E7%95%8C%E8%AF%9E%E7%94%9F%E7%9A%84%E6%97%B6%E5%88%BB%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%20%2F</url>
    <content type="text"><![CDATA[大部分书籍的视角停留在胜利之前的英雄故事，但作者却着眼点于胜利那一年1945年，发生在欧洲、亚洲的光复国、战败国关于欢腾、饥饿、复仇的故事，以及人民创造新世界的努力。1945年那时，各国景象都差不多，不管是光复国还是战败国，一样都是满目疮痍、食不果腹、百废待兴，可能不同的只是人们不同的心里以及对未来的期望。战争胜利之后，除了让之前被囚禁的人们获得人身自由、解决温饱问题之外，作者的笔触也不忘在人性方面进行着笔，例如： 对那些女囚犯来说，帮助最大的是口红，当他们把嘴唇涂得红彤彤的，她们总算变成了人，而不是文在手臂上的号码。他们终于有心思关心起自己的外表来，是口红率先把人性还给了他们。 战后的一项工作是让大家回家，可是，经过多年的战乱，家也已经不是那个家了，每个人都需要面对着那个家破人亡的陌生的“家”。而对于犹太人，家更是难以定义。所以，战后一项重要的事情就是犹太人的复国历程，是整个犹太人在集体寻找回家的路。在每个民族都应有自己的国家，甚至，每个国家都只应有一个民族的旗帜下，德国人、克罗地亚人、哥萨克人纷纷被遣送回本民族的国家。而犹太人，在复国主义的推动下，在为犹太人身份认同的理念下，他们心目中上帝的应允之地“巴勒斯坦”就成了他们回家的唯一目标。在建设新国家过程，少不了清洗和夺权，有政治上的夺权也有军事上的夺权。清洗涉及到对战前伪政府、通敌分子、军国主义、纳粹党等等的清洗，但是，对这些精英分子的打击，从维持国家的运作、恢复国家经济、重建国家的角度来看，基本是使用了最低限度的打击。很多时候，清洗的行为更多是消除政治上的敌对势力或异己分子，为此来获取权利。 德国人犯有集体罪行，大规模的清洗将导致教育和社会服务走向崩溃。没过多久，盟军便把经济复苏看成比伸张正义更重要的目标。 当然，正义只有看得见才算得到了伸张，所以，对一些“禽兽”、“恶魔”的审判是必不可少的，这也是能让社会迅速转向经济建设的必要手段之一。但是，在反思二战的时候，从某种程度上来说，震惊于个别“禽兽”、“恶魔”的恶行，其实是没有看到本质，即他们背后的罪恶体制让他们的行为显得稀松平常。1945年，也是零年，是在废墟上建设完美社会的最好时机。在1945年，当时的人们为了建设自由的世界而倾尽毕生精力。他们努力创立了联合国、他们尝试着建立国家资本主义、他们建立了社会主义国家，他们为了全人类的理想社会在探索。当然，像作者说的，这样的世界不会长久，没有什么是永恒的。但这不是我们不向1945年的男男女女，向他们的苦难、憧憬和抱负致敬的理由，纵然许多期待终将化为灰烬，一如世间万物。 文章摘录 我对人类能以史为鉴的看法一直将信将疑，至少从认识到过去的愚蠢行为可以防止未来再犯同样错误这点来看，我的质疑不是没有道理。 官方给出的欧战结束的时间，即欧洲胜利日（V-E Day),是在5月8日。 有些人在战争中失去了太多，已经不爱说笑了。 所有少数派都会同强大的外来者结盟，借别人之手摆脱多数派的欺凌，这点是一切殖民社会的共通之处。 所谓的‘最终解决方案’，其实旨在肉体消灭几百万人。 饿殍(piǎo)遍野:殍：人饿死后的尸体。到处是饿死的人。形容老百姓因饥饿而大量死亡的悲惨景象。先秦·孟轲《孟子·梁惠王上》：“庖有肥肉，厩有肥马，民有饥色，野有饿莩，此率兽而食人也。” 战争一结束，一切突然显得那么空虚、病态和没有意义！我们一蹶不振，生活穷苦潦倒，灰头土脸，而在众志成城抵抗外敌时，却可以全然忘记这些困难。我们的所有努力最终只收获了破坏，却无力在废墟上建立起我们赖以为生的东西。 饥荒、荒芜、疾病会酝酿动乱，催生共产主义的幽灵。饥民是反上帝学说的肥沃土壤，他们很容易被那些企图将全能国家等同于上帝的人的蛊惑。 指责别人正是大多数人的做法。 人更容易对自己的遭遇顾影自怜。 食色性也：语出《孟子·告子上》：孟子与告子辩论，告子曰：“食、色，性也。仁，内也，非外也。义，外也，非内也。”是告子的论点之一。 过去，因为摄于危险，没有挺身而出，如今报复成了掩饰良心不安的一种做法。这种现象具有普遍性，而且穿越时空。 他过去没做过什么亏心事，所以现在也没有必要靠手指别人来证明自己是个英雄。 长久以来，波兰人只要“头顶上有只拳头”，就会表现得规规矩矩，但“有朝一日他们有机会爬到别人头上作威作福了”，就变得“野蛮了”。 华人常被叫做“亚洲的犹太人”。 个人注：华人像早期犹太人一样，勤奋、踏实，不参与政治，因为国内落后而遍布各国，在经济上的地位比较高，很多国家的经济命脉都- 掌握在华人手里，所以也容易受到像犹太人一样的迫害，特别是在东南亚地区。 流血只会换来更多的流血。 他们中间可能有真正的爱国者……但是，就这帮举着旗子、满大街乱窜的乌合之众而言，里面尽是些罪犯和低能儿，只要一看到五六支枪，他们立马就会龟缩到鼠洞里。 有些地方也暗示着我父亲害怕回家的原因————担心自己变成陌生人。 虚与委蛇（yí）：虚：假；委蛇：随便应顺。指对人虚情假意，敷衍应酬。《庄子·应帝王》：“乡吾示之以未始出吾宗，吾与之虚而委蛇。” 不，我们出生在波兰，但我们不是波兰人；我们曾在立陶宛落脚，但我们不是立陶宛人；虽然我们在罗马尼亚见到了生平第一缕曙光，但我们不是罗马尼亚人。我们是犹太人！！！ 犹太复国主义是为了犹太人的身份认同而战。 流亡的自由政府，维系着形式上的存在。 但是，总要做点什么，好让人们觉得正义得到了伸张。 麦克阿瑟将军并未同意裕仁天皇主动承担战争责任的请求，因为他确信，有必要保全天皇，避免发生骚乱。 德国人犯有集体罪行，大规模的清洗将导致教育和社会服务走向崩溃。没过多久，盟军便把经济复苏看成比伸张正义更重要的目标。 要想在一个满目疮痍的国家恢复合法性，一种方法是找个具有象征意义的人物，并团结在其周围。 个人注：有点像辛亥革命的孙中山。 共产党的军民关系搞得更好：他们意识到，要打赢战争，部分靠的是宣传。被老百姓视为一支英雄的人民之师是他们的一笔宝贵财富。 何应钦曾在东京的陆军士官学校就读，和冈村宁次是师生关系。 中国内战的关键其实在于东北。日本人在这里建立重工业，开发矿产，谁率先夺取这块心脏地带，谁就可以居于一种几乎坚不可摧的地位。 戴高乐意识到，一方面，正义只有看得见才算得到了伸张；另一方面，法国已经伤痕累累，禁不起大规模的清洗了，否则社会将面临难以忍受的压力。 个人注：有点像文革时候，邓小平在打倒四人帮之后，也没有进行大规模的清洗。 只有国家才有权成为惩罚的主体。 要让国家重新垄断对武力的使用权。 中共为什么要坚持举行审判？干嘛不直接枪毙了流氓恶棍？很明显，他们希望这些处决在人们眼里是合法的。建立某种形式的法制是获取合法性的必要条件。但在摆样子、走过场的公审中，法律的概念是完全政治化的。 然后，被审判的不光是人，还有这些人所代表的体制。 《复仇女神》神山传说战神山受理的第二桩谋杀案，乃是迈锡尼国王阿迦门农之子俄瑞斯忒斯杀母案。这也是人类历史上的第一个法庭。神话中，阿迦门农之妻克吕泰涅斯忒拉勾结情夫艾奎斯托斯，杀死了自己的丈夫阿迦门农。若干年后，阿迦门农与克吕泰涅斯忒拉的儿子俄瑞斯忒斯为报父仇杀死了自己的生母，并因此受到复仇女神厄里尼厄斯的惩罚与迫害，丧失心智，发疯发狂，痛苦不堪。俄瑞斯忒斯的守护神——太阳神阿波罗提示他去向雅典求助。于是，雅典人在战神山上受理了这起血亲谋杀案。该法庭的法官是智慧与战争女神雅典娜，陪审团由十二位德高望重的雅典市民组成，原告人是克吕泰涅斯忒拉（已死，灵魂未到场），原告律师及代理人是复仇三女神厄里尼厄斯，被告人是俄瑞斯忒斯，被告律师则是太阳神阿波罗。法官与陪审团在听取了原告与被告双方的申诉后，通过投票的方式裁判该案。黑石子代表有罪，白石子代表无罪。十二名陪审团员投票后，发现黑、白石子各六枚，最后雅典娜本人投入一枚关键性的白色石子，从而使白石子的数目超过了黑石子，并因此宣判俄瑞斯忒斯无罪。本次审判的规格与流程，即是后来西方法庭的原始雏形。 结束血债血偿的恶性循环依旧是举行审判的最大理由。 麦克阿瑟：当兵打仗这个传统源远流长，充满荣耀。其根植于人类最崇高的品质————也就是牺牲精神。 你们可以整死我，但你们无权诽谤我！ 主导审判的是公众的情绪；法律知识在回应街谈巷议。 认识到人类作恶的能力能引导其余人向善；了解人性最坏的一面是一种文明教化的过程。这两点认识是后来进行战争审判的主要动机之一。 我们永远不能忘记，我们审判这些被告的依据将被明日历史来评价我们。 这些实干家对自由民主体制的优柔寡断、扯皮推诿和混乱无序早就失去了耐心。 个人注：所以说民主制度不是一个最好的制度，但却是一个最不坏的制度。 再也不会有明媚而自信的早晨了。 改造原住民这一策略也许最早可以追溯至古罗马人的教化行为。一些人认为这一策略源自启蒙主义观念，即人生来理性，而且可以通过正确的教育加以引导。 先给我们吃的，然后再来谈道德 在见识过某物的真容后，伴随而来的通常是幻灭。 “日本鬼子”是野蛮人的形象在战时深入人心。投在广岛和长崎的两枚原子弹导致20万人死亡，事后，杜鲁门总统在给友人的信中写到：“对付畜生就要用畜生的方法。” 德谟克拉西：Democracy 民主的意思 人类四大自由：言论自由、信仰自由、免于匮乏的自由、免于恐惧的自由。 1944年，货币体系在“布雷顿森林”度假酒店成立了。 Bretton Woods 战争是“终极邪恶”。 1945年也是“零年”，是在废墟上建设新社会的完美时机。 当然，这样的世界不会长久，没有什么是永恒的。但这不是我们不向1945年的男男女女，向他们的苦难、憧憬和抱负致敬的理由，纵然许多期待终将化为灰烬，一如时间万物。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《安全模式最佳实践》读后感]]></title>
    <url>%2F2016%2F07%2F19%2F%E5%AE%89%E5%85%A8%E6%A8%A1%E5%BC%8F%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[写得比较晦涩的一本书。比较全面的介绍了安全方面的内容，强调安全的整体性。不过，说是最佳实践，更多是从设计的角度的最佳实践，而不是整体案例的最佳实践。里面举的案例零散，不成体系。比较一般的一本书，比较大的收获就是，在看书的过程当中，一些常用的术语、技术上网进行了了解。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云计算的三种服务模式：IaaS，PaaS和SaaS]]></title>
    <url>%2F2016%2F07%2F19%2F%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E4%B8%89%E7%A7%8D%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F%EF%BC%9AIaaS%EF%BC%8CPaaS%E5%92%8CSaaS%2F</url>
    <content type="text"><![CDATA[云计算的三种服务模式：IaaS，PaaS和SaaS 云服务”现在已经快成了一个家喻户晓的词了。如果你不知道PaaS, IaaS 和SaaS的区别，那么也没啥，因为很多人确实不知道。 “云”其实是互联网的一个隐喻，“云计算”其实就是使用互联网来接入存储或者运行在远程服务器端的应用，数据，或者服务。 任何一个使用基于互联网的方法来计算，存储和开发的公司，都可以从技术上叫做从事云的公司。然而，不是所有的云公司都一样。不是所有人都是CTO，所以有时候看到云技术背后的一些词可能会比较头疼。云也是分层的 任何一个在互联网上提供其服务的公司都可以叫做云计算公司。其实云计算分几层的，分别是Infrastructure（基础设施）-as-a-Service，Platform（平台）-as-a-Service，Software（软件）-as-a-Service。基础设施在最下端，平台在中间，软件在顶端。别的一些“软”的层可以在这些层上面添加。 IaaS: Infrastructure-as-a-Service（基础设施即服务） 第一层叫做IaaS，有时候也叫做Hardware-as-a-Service，几年前如果你想在办公室或者公司的网站上运行一些企业应用，你需要去买服务器，或者别的高昂的硬件来控制本地应用，让你的业务运行起来。 但是现在有IaaS，你可以将硬件外包到别的地方去。IaaS公司会提供场外服务器，存储和网络硬件，你可以租用。节省了维护成本和办公场地，公司可以在任何时候利用这些硬件来运行其应用。 一些大的IaaS公司包括Amazon, Microsoft, VMWare, Rackspace和Red Hat.不过这些公司又都有自己的专长，比如Amazon和微软给你提供的不只是IaaS，他们还会将其计算能力出租给你来host你的网站。 PaaS: Platform-as-a-Service（平台即服务） 第二层就是所谓的PaaS，某些时候也叫做中间件。你公司所有的开发都可以在这一层进行，节省了时间和资源。 PaaS公司在网上提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统。这节省了你在硬件上的费用，也让分散的工作室之间的合作变得更加容易。网页应用管理，应用设计，应用虚拟主机，存储，安全以及应用开发协作工具等。 一些大的PaaS提供者有Google App Engine,Microsoft Azure，Force.com,Heroku，Engine Yard。最近兴起的公司有AppFog, Mendix 和 Standing Cloud SaaS: Software-as-a-Service（软件即服务） 第三层也就是所谓SaaS。这一层是和你的生活每天接触的一层，大多是通过网页浏览器来接入。任何一个远程服务器上的应用都可以通过网络来运行，就是SaaS了。 你消费的服务完全是从网页如Netflix, MOG, Google Apps, Box.net, Dropbox或者苹果的iCloud那里进入这些分类。尽管这些网页服务是用作商务和娱乐或者两者都有，但这也算是云技术的一部分。 一些用作商务的SaaS应用包括Citrix的GoToMeeting，Cisco的WebEx，Salesforce的CRM，ADP，Workday和SuccessFactors。 Iaas和Paas之间的比较PaaS的主要作用是将一个开发和运行平台作为服务提供给用户，而IaaS的主要作用是提供虚拟机或者其他资源作为服务提供给用户。接下来，将在七个方面对PaaS和IaaS进行比较： 1) 开发环境： PaaS基本都会给开发者提供一整套包括IDE在内的开发和测试环境，而IaaS方面用户主要还是沿用之前比较熟悉那套开发环境，但是因为之前那套开发环境在和云的整合方面比较欠缺，所以使用起来不是很方便。2) 支持的应用：因为IaaS主要是提供虚拟机，而且普通的虚拟机能支持多种操作系统，所以IaaS支持的应用的范围是非常广泛的。但如果要让一个应用能跑在某个PaaS平台不是一件轻松的事，因为不仅需要确保这个应用是基于这个平台所支持的语言，而且也要确保这个应用只能调用这个平台所支持的API，如果这个应用调用了平台所不支持的API，那么就需要对这个应用进行修改。3) 开放标准：虽然很多IaaS平台都存在一定的私有功能，但是由于OVF等协议的存在，使得IaaS在跨平台和避免被供应商锁定这两面是稳步前进的。而PaaS平台的情况则不容乐观，因为不论是Google的App Engine，还是Salesforce的Force.com都存在一定的私有API。4) 可伸缩性：PaaS平台会自动调整资源来帮助运行于其上的应用更好地应对突发流量。而IaaS平台则需要开发人员手动对资源进行调整才能应对。5) 整合率和经济性： PaaS平台整合率是非常高，比如PaaS的代表Google App Engine能在一台服务器上承载成千上万的应用，而普通的IaaS平台的整合率最多也不会超过100，而且普遍在10左右，使得IaaS的经济性不如PaaS。6) 计费和监管：因为PaaS平台在计费和监管这两方面不仅达到了IaaS平台所能企及的操作系统层面，比如，CPU和内存的使用量等，而且还能做到应用层面，比如，应用的反应时间（Response Time）或者应用所消耗的事务多少等，这将提高计费和管理的精确性。7) 学习难度：因为在IaaS上面开发和管理应用和现有的方式比较接近，而PaaS上面开发则有可能需要学一门新的语言或者新的框架，所以IaaS学习难度更低。 未来的PK在当今云计算环境当中，IaaS是非常主流的，无论是Amazon EC2还是Linode或者Joyent等，都占有一席之地，但是随着Google的App Engine，Salesforce的Force.com还是微软的Windows Azure等PaaS平台的推出，使得PaaS也开始崭露头角。谈到这两者的未来，特别是这两者之间的竞争关系，我个人认为，短期而言，因为IaaS模式在支持的应用和学习难度这两方面的优势，使得IaaS将会在短期之内会成为开发者的首选，但是从长期而言，因为PaaS模式的高整合率所带来经济型使得如果PaaS能解决诸如通用性和支持的应用等方面的挑战，它将会替代IaaS成为开发者的“新宠”。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[REST和SOAP Web Service的比较]]></title>
    <url>%2F2016%2F07%2F18%2FREST%E5%92%8CSOAP%20Web%20Service%E7%9A%84%E6%AF%94%E8%BE%83%20%2F</url>
    <content type="text"><![CDATA[自己总结特点 REST：面向资源、采用Http的方法、无状态; 优点： 面向资源、采用Http的方法：使得构建成本低，继承了Web的优点； 无状态：容错、扩展性增强了。 缺点： 无法处理事务，还需要采用SOAP的协议来处理。 REST和SOAP Web Service的比较（写得非常清晰易懂，转载于此） 本文转载自他人的博客，ArcGIS Server 推出了 对 SOAP 和 REST两种接口（用接口类型也许并不准确）类型的支持,本文非常清晰的比较了SOAP和Rest的区别联系！ REST似乎在一夜间兴起了，这可能引起一些争议，反对者可以说REST是WEB诞生之始甚而是HTTP出现之日就相伴而生的原则。但是毋庸置疑的事实是，在Google和Yahoo等网络巨头发布的相同功能的Web Service API中，REST无疑受到更多的青睐，因此是不是可以这样说：RPC在一夜之间衰落了？ 在一篇作业的小文章里讨论整套RPC的原理，无疑太过庞大了，况且RPC在Web Service领域的应用也无过XML-RPC以及由此延伸的SOAP而已。在原理上唯一重要的，是传统程序的函数调用和返回在RPC中被请求和应答代替了而已。既然如此，在讨论REST之前先阐述SOAP，可能是合乎逻辑的顺序。 什么是SOAP?SOAP (Simple Object Access Protocol) 顾名思义，是一个严格定义的信息交换协议，用于在Web Service中把远程调用和返回封装成机器可读的格式化数据。事实上SOAP数据使用XML数据格式，定义了一整套复杂的标签，以描述调用的远程过程、参数、返回值和出错信息等等。而且随着需要的增长，又不得增加协议以支持安全性，这使SOAP变得异常庞大，背离了简单的初衷。另一方面，各个服务器都可以基于这个协议推出自己的API，即使它们提供的服务及其相似，定义的API也不尽相同，这又导致了WSDL的诞生。WSDL (Web Service Description Language) 也遵循XML格式，用来描述哪个服务器提供什么服务，怎样找到它，以及该服务使用怎样的接口规范，简言之，服务发现。现在，使用Web Service的过程变成，获得该服务的WSDL描述，根据WSDL构造一条格式化的SOAP请求发送给服务器，然后接收一条同样SOAP格式的应答，最后根据先前的WSDL解码数据。绝大多数情况下，请求和应答使用HTTP协议传输，那么发送请求就使用HTTP的POST方法。 什么是REST？REST (REpresentational State Transfort) 形式上应该表述为客户端通过申请资源来实现状态的转换，在这个角度系统可以看成一台虚拟的状态机。抛开R. T. Fielding博士论文里晦涩的理论不说，REST应该满足这样的特点： 1)客户端和服务器结构； 2)连接协议具有无状态性； 3)能够利用Cache机制增进性能； 4)层次化的系统； 5)按需代码。 说到底，REST只是一种架构风格，而不是协议或标准。但这种新的风格（也许已经历史悠久？）对现有的以SOAP为代表的Web Service造成的冲击也是革命性的，因为它面向资源，甚至连服务也抽象成资源，因为它和HTTP紧密结合，因为它服务器无状态。 REST与SOAP的区别因为SOAP并不假定传输数据的下层协议，因此必须设计为能在各种协议上运行。即使绝大多数SOAP是运行在HTTP上，使用URI标识服务，SOAP也仅仅使用POST方法发送请求，用一个唯一的URI标识服务的入口。 举一个图书馆在线查询管理系统为例，服务提供者必须为每一本书提供一个内部标识，然后可能定义一个listBooks操作来返回一系列图书，一个getBook操作来返回指定的图书，一个createBook操作来向数据库加入新增的图书，一个deleteBook操作来删除作废的图书，每个操作都有各自的参数，尤其是用内部标识来标识操作的图书。这种设计被诟病之处，在于deleteBook操作也要用POST方法来发送，而其实HTTP协议有更和逻辑的DELETE方法可用。REST正是这样设计的，REST为每一个资源（此处是图书）指定一个唯一的URI，而用HTTP的4种方法GET、POST、PUT、DELETE直观地表示获取、创建、更新和删除图书。同时图书集合也是和单本的图书不同的资源，如果用/books来代表图书列表，/books/ID来代表标识为ID的图书，那么对/books的GET操作就代表返回整个图书列表，对/books/ID的DELETE操作代表删除指定的图书，等等。 REST的优点REST简单而直观，把HTTP协议利用到了极限，在这种思想指导下，它甚至用HTTP请求的头信息来指明资源的表示形式（如果一个资源有多种形式的话，例如人类友善的页面还是机器可读的数据？），用HTTP的错误机制来返回访问资源的错误。由此带来的直接好处是构建的成本减少了，例如用URI定位每一个资源可以利用通用成熟的技术，而不用再在服务器端开发一套资源访问机制。又如只需简单配置服务器就能规定资源的访问权限，例如通过禁止非GET访问把资源设成只读。 服务器无状态带来了更多额外好处，因为每次请求都包含响应需要的所有信息，所有状态信息都存储在客户端，服务器的内存从庞大的状态信息中解放出来。而且现在即使一台服务器突然死机对客户的影响也微乎其微，因为另一台服务器可以马上代替它的位置，而不需要考虑恢复状态信息。更多的缓存也变成可能，而之前由于服务器有状态，对同一个URI的请求可能导致完全不同的响应。 总体结果是，网络的容错性和延展性都增强了，这些本来是WEB设计的初衷，日趋复杂和定制的WEB把它们破坏了，现在REST又返璞归真，试图把Web Service带回简单的原则中来。 REST是万能的吗？但是REST就是万能的吗？无状态带来了巨大的优势，同时也带来了难以解决的问题，例如，怎样授权特定用户才能使用的服务？怎样验证用户身份？如果坚持服务器无状态，也就是不记录用户登录状态，势必要求每一次服务请求都包含完整的用户身份和验证信息。在这种情况下，怎样避免冒认？怎样避免用户信息泄漏？事实上，构建REST附属的安全机制已经在讨论中，其结果无非导致另一个SOAP：复杂的需求摧残了易用性。 REST的支持者声称REST的请求和应答数据简单可读，而SOAP则需要一系列繁琐的封装；即使如此，SOAP仍然不能达到接口的一致性，不同的厂商有各自的接口，而REST只使用HTTP定义的方法，因此是通用的。事实确实如此吗？试想用REST实现两数求和的服务，如果按照建议的做法，把服务（此处是加法）作为一个资源，参数（此处是两个加数）作为请求的参数，结果以XML或JSON语法返回，是否比SOAP更简单易用？通用接口仍然没法达到，因为资源的名称、参数的名称、结果的格式仍然是服务提供者定义的。 为了解决这个问题，提出了WASL(Web Application Description Language)来描述REST接口。WADL就像是WSDL的REST版，随着REST被应用到复杂的领域，SOAP的影子无处不在。 面向资源和面向事务（非常明显的说明了Rest的试用范围，请求地图数据就可以认为主要是请求一种特殊的资源） REST在面向资源的应用中左右逢源，但在面向事务的应用中却未如人意。面向资源的应用操作简单，无非创建、读取、改变、删除几项，但是面向事务的应用不允许用户直接操作资源，用户只需向系统提交一个事务说明要求，然后等待事务的完成，就如一个网上银行的用户不直接修改账户和存款，而是提交一个事务告诉银行自己要转账。如果把这样的服务看成一种资源，通过向资源发送POST请求完成事务，那不过是SOAP的翻版而已，无论是这样，还是通过PUT来创建事务，都改变了系统的状态（资源本身未改变，此处是改变了用户的余额），显然违背了REST直观的初衷。 事实上，一些Web Service提供者提供的REST API只有REST的外壳，传输的请求和应答全然是简化了的SOAP，这种新瓶装旧酒的做法只是加深了标准的分歧而已。归根结底REST无法简单地解决一些应用，因此我们只能看到SOAP在REST外壳下的借尸还魂。没有一项技术能一劳永逸地解决所有问题，只需要在预定的约束下优美地解决所在领域的问题就足够了。一项新技术推出的时候总是引来无数的跟风和吹捧，只有当尘埃落定之后才能得到中肯的评价。好文要顶 关注我]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CORBA服务]]></title>
    <url>%2F2016%2F07%2F18%2FCORBA%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[CORBA（Common Object Request Broker Architecture,公共对象请求代理体系结构，通用对象请求代理体系结构）是由OMG组织制订的一种标准的面向对象应用程 序体系规范。或者说 CORBA体系结构是对象管理组织（OMG）为解决分布式处理环境(DCE)中，硬件和软件系统的互连而提出的一种解决方案；OMG组织是一个国际性的非盈利组织，其职责是为应用开发提供一个公共框架，制订工业指南和对象管理规范，加快对象技术的发展。最重要的服务有三个：命名服务、事件服务、通知服务。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对称加密、非对称加密、Hash算法]]></title>
    <url>%2F2016%2F07%2F18%2F%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81Hash%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[散列函数或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。 散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。常用算法有：MD5、SHA1 加密算法对称加密常用算法有：DES、3DES、Blowfish、IDEA、RC4、RC5、RC6和AES 非对称加密常用算法有：RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用） PS：哈希算法是不可逆的，而加密算法是可逆的。 常见的加密算法可以分成三类，对称加密算法，非对称加密算法和Hash算法。对称加密指加密和解密使用相同密钥的加密算法。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。假设两个用户需要使用对称加密方法加密然后交换数据，则用户最少需要2个密钥并交换使用，如果企业内用户有n个，则整个企业共需要n×(n-1) 个密钥，密钥的生成和分发将成为企业信息部门的恶梦。对称加密算法的安全性取决于加密密钥的保存情况，但要求企业中每一个持有密钥的人都保守秘密是不可能的，他们通常会有意无意的把密钥泄漏出去——如果一个用户使用的密钥被入侵者所获得，入侵者便可以读取该用户密钥加密的所有文档，如果整个企业共用一个加密密钥，那整个企业文档的保密性便无从谈起。常见的对称加密算法有DES、3DES、Blowfish、IDEA、RC4、RC5、RC6和AES非对称加密指加密和解密使用不同密钥的加密算法，也称为公私钥加密。假设两个用户要加密交换数据，双方交换公钥，使用时一方用对方的公钥加密，另一方即可用自己的私钥解密。如果企业中有n个用户，企业需要生成n对密钥，并分发n个公钥。由于公钥是可以公开的，用户只要保管好自己的私钥即可，因此加密密钥的分发将变得十分简单。同时，由于每个用户的私钥是唯一的，其他用户除了可以可以通过信息发送者的公钥来验证信息的来源是否真实，还可以确保发送者无法否认曾发送过该信息。非对称加密的缺点是加解密速度要远远慢于对称加密，在某些极端情况下，甚至能比非对称加密慢上1000倍。常见的非对称加密算法有：RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）Hash算法Hash算法特别的地方在于它是一种单向算法，用户可以通过Hash算法对目标信息生成一段特定长度的唯一的Hash值，却不能通过这个Hash值重新获得目标信息。因此Hash算法常用在不可还原的密码存储、信息完整性校验等。常见的Hash算法有MD2、MD4、MD5、HAVAL、SHA加密算法的效能通常可以按照算法本身的复杂程度、密钥长度（密钥越长越安全）、加解密速度等来衡量。上述的算法中，除了DES密钥长度不够、MD2速度较慢已逐渐被淘汰外，其他算法仍在目前的加密系统产品中使用。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MPLS vpn和IPSEC VPN的比较( 转)]]></title>
    <url>%2F2016%2F07%2F17%2FMPLS%20vpn%E5%92%8CIPSEC%20VPN%E7%9A%84%E6%AF%94%E8%BE%83(%20%E8%BD%AC)%2F</url>
    <content type="text"><![CDATA[MPLS vpn和IPSEC VPN的比较( 转)本文摘要 电信的VPN是MPLS VPN，是一种基于MPLS(Multiprotocol Label Switc hing,多协议标记交换 )技术的IP-VPN，是在网络路由和交换设备上应用MPLS技术，简化核心路由器的路由选择方式，利用结合传统路由技术的标记交换实现的IP虚拟专用网络(IP VPN)，可用来构造宽带的Intranet、Extranet，满足多种灵活的业务需求。 电信的VPN是MPLS VPN，是一种基于MPLS(Multiprotocol Label Switc hing,多协议标记交换 )技术的IP-VPN，是在网络路由和交换设备上应用MPLS技术，简化核心路由器的路由选择方式，利用结合传统路由技术的标记交换实现的IP虚拟专用网络(IP VPN)，可用来构造宽带的Intranet、Extranet，满足多种灵活的业务需求。 MPLS VPN有它优越的一方面，但也有很大的缺点。下面从几个方面对MPLS VPN与IPSEC VPN进行对比。 一、系统的可靠性 MPLS VPN是基于电信的网络进行构建，本身属于电信的一项数据业务.， IPSEC VPN是完全基于INTERNET构建的，因此它的可靠性依赖于两个方面：线路的可靠性和设备的稳定性。 从设备可靠性来看，IPSEC作为主流的VPN协议，它的技术比较完善。目前基于ipsec的vpn技术已经成熟，很多产品都能够运行非常稳定可靠。 目前Internet的接入已经非常普及，由于长期的投入建设，整个Internet线路已经达到了很高的水平，不仅带宽有保证，而且提供的接入方式多样。一旦某一条线路出错，可以使用其他备份线路接入internet。MPLS是依靠单一的电信运营商，如果运营商的网络出问题就等于整个网络的停用。IPSET由于随时可以使用的其他线路作备份，因此系统具有很强的容错能力。这一点，是MPLS链路无法达到的。 二、投入成本 从投入成本上分析，MPLS可以免除设备投资，但是大多数情况下，用户还是需要购买路由器之类的设备。 另外，MPLS长期的租金累计起来，也不是一个小数目，如果是国际链路，那么就会更加昂贵。 采用IPSEC VPN，是利用原来公网线路。但一次性设备投入比较大。但从长远看来，费用分摊以后，那么它的费用实际是比MPLS VPN要低很多。 三、接入方便性 MPLS VPN连接比较简单，只要求客户把客户设备(CE) 连接到运营商的网络边缘设备(PE)就可以了，运营商同时负责二层的数据传输工作和三层的路由工作，这种三层MPLS VPN对客户的要求比较低，客户负担较小，但这种做法常见的问题就是接入缺少灵活性。因为MPLS VPN是单一运营商提供的，跨运营商的连接常常存在很大问题，例如：联通提供的MPLS服务和电信提供的MPLS，彼此就很难连接。而大型客户往往在全国各地都有自己的分支机构，如果寄希望这些分支机构所在城市都有同一家运营商并且都提供MPLS VPN的服务，显然很不现实，特别是在偏远地区和移动用户。MPLS具有地域性，现在许多地方的MPLS服务没有推出。 IPSEC VPN则是完全利用互联网，做到了只要接入Internet，就可以利用IPSEC VPN来组建企业自己的网络。随着电信“最后一公里”技术的实现，Internet真的做到了无处不在。利用Internet的资源，采用IPSEC VPN技术可以非常方便的在全球范围内，组建企业的虚拟专网。 随着业务的不断发展，移动用户和在家办公的用户也越来越多，vpn客户端的支持也非常重要，使用IPSEC客户端可以让移动用户随时随地都能够跟企业内部进行信息交换。这点MPLS VPN显然是做不到的。对于接如点比较多的用户来说，特别分布广泛用户，对于用户来讲无论是从时间还是从资金的投入来讲都是不可接受的。 四、安全性 MPLS VPN采用路由隔离、地址隔离等多种手段提供了抗攻击和标记欺骗的手段，因此人们认为，MPLS VPN完全能够提供与FR/ATM 相类似的线路安全保证。 但是MPLS VPN也没有解决所有管理型的共享网络普遍存在的非法访问受保护的网络元、错误配置以及内部(包括核心)攻击等安全问题。例如在MPLS VPN传递数据，只是标记了端点路由，对数据本身并不提供加密的防护手段。因此MPLS VPN的安全性一般。 IPSec VPN 的显着特点就是它的安全性，这是它保证内部数据安全的根本。IPSEC VPN为了实现在Internet上安全的传递数据，采用了对称密钥、非对称密钥以及摘要算法等多种加密算法，通过身份认证、数据加密、数据完整性校验等多种方式保证接入的安全，保证的数据的私密性。 五、可管理性 由于MPLS VPN通讯关系是由运营商指定的，用户配置的灵活性并不高。同时，由于运营商的网络往往是由多家设备厂商组成的，这样即使是运营商，对VPN设备的管理实际上也是很困难的。 IPSEC VPN通过数字证书等技术手段，实现了对整个VPN网络的“集中认证、统一监控、分级管理”的管理模式，既充分保障了整个网络的安全性，有效减轻了网络管理人员的负担，同时对技术力量比较薄弱的分支机构真正实现的设备的“零管理”。同时通过技术手段可以控制不同VPN设备之间的通信关系，充分体现了用户对VPN网络的可管理性。IPSEC可以牢牢的把网络放在自己手中，可以通过中心接点对整个网络的遥控。 最后，我们可以列出一个表格，总体比较MPLS和IPSEC两种vpn技术。 MPLSIPSEC(over internet)备注 接入方式电信isp链路到户任何连接到Internet的方式，包括小区宽带、移动上网、adsl、电话拨号等等显然后者能够更方便接入。 成本一次投入比较低，长期投入比较高一次投入比较高，长期投入很低。基本在企业的原有上网线路上运行，不需要增加另外接入。 稳定性稳定性很高，但是备份线路基本没有。稳定性依赖于接入链路，但是存在多种接入方式可以备份。 安全加密依赖于运营商的网络隔离IPsec自身强大的安全功能IPSET的VPN隧道更好些 移动客户端支持很难支持支持很好 运营管理模式电信或者ISP提供服务客户自行管理维护，与外部完全隔离。 应用性具有地域性，运营商分别建立MPLS网络。利用INTERNET。 摘自：http://net.zdnet.com.cn/security_zone/2011/0326/2024638.shtml 虚拟专用网络(VPN)已经成为了公司合作伙伴或员工远程安全访问公司资源的事实标准。在本文中，我们将试图解释两种特定的VPN类型，即IPSec VPN和SSL VPN，以及这两种类型应该如何选择。 然而，在深入研究这两个不同类型之前，需要首先对VPN技术进行一个简要的概述。VPN是指有利于远程访问公司资源的一系列技术。这种技术的主要用户，是试图在家或者其他公共场所访问公司资源的公司雇员，以及在公司的基础架构内支持各种系统的合作伙伴或第三方。VPN一般通过在远程站点和公司网络之间建立一个加密通道的方式，利用公共长途IP网络来进行数据传输，这些远程站点包括雇员的笔记本电脑或者第三方系统。 关键技术 当前，最为普及的两种VPN技术分别是基于传统网络安全协议(IPsec)的VPN技术和安全套接字层(SSL)VPN技术，前者主要作用于网络层，而后者主要作用于应用层。它们的不同之处在于：使用的底层技术不同，所服务的功能不同，以及潜在的VPN安全风险不同。 IPsec最初的设计是提供点到点的，在远程站点和中央办公室资源之间进行不间断的连接。在这种情况下，客户端可以是分公司或者供应商。这个协议被设计为工作在网络堆栈的更底层(第3层，网络层)，并可以用来传输任何基于IP的协议报文，而不用理会应用程序所产生的流量。随着移动办公时代的到来，IPsec已经得到扩展，用户通过使用一个安装在移动设备上的专用VPN应用程序(客户端)就可以进行远程访问。 另一方面，SSL VPN在设计时就考虑到了移动办公。它的预期目标是提供一个无缝连接的、无客户端的远程访问方式。这样，SSL VPN可以被看做一个应用程序代理，远程用户使用浏览器就可以以某种粒度访问公司的特定资源，而不再需要安装客户端。 优势与劣势 IPsec的关键优势在于它在站点之间提供一个永久连接的能力。工作在网络层(网络堆栈的第3层)也使其与应用程序无关：任何基于IP的协议都能够通过它进行传输。这使得IPsec相对于那些昂贵的租用线路或者专用线路，是一个相当有吸引力的替代品。它也可以作为一个备份链路，即在连接远程站点和中央办公室的主租用线路或专用线路崩溃时起作用。 然而，IPsec中与应用程序无关的设计也是它的弱点。虽然它提供了认证、授权和加密，同时还基本上把公司网络拓展到任何远程用户，但是它没有能在一定粒度级别上限制对资源的访问。一旦隧道建立，远程用户通常可以访问公司的任何资源，就像他们是直接连接到公司网络一样。因为移动办公需要允许诸如智能手机和家用电脑等非托管的IT设备访问公司资源，所以这些安全问题显得更加严重。IT部门对这些设备没有任何可视性和控制权，而且不能保证这些设备符合通常在托管设备上实施的安全水平。 另外，IPsec也需要更多的维护。除了需要建立终止通道的设备，还需要额外的配置和维护来支持远程用户群。在公司使用网络地址解析(NAT)的情况下，还需要特殊的配置确保IPsec与NAT设置充分协调。 相比之下，SSL VPNs从设计的一开始就支持远程访问。它们不需要安装任何特别的软件。远程访问是通过一个基于浏览器的使用安全套接层(SSL)的会话实现的。SSL VPNs还为企业提供粒度级访问控制的能力。特定的身份验证和访问应用程序的授权方案可以被限定在一个特定的用户群。内置的日志记录和审核能力能处理各种合规要求。SSL VPNs还具备在连接到企业的远程设备上运行主机合规性检查的能力，以验证它们配置了合适的安全软件，并安装了最新的补丁。 但这并非意味着SSL VPNs就是所有IPsec缺点的灵丹妙药。当一个远程站点需要与主办公室建立不间断连接时，SSL VPN不是合适的解决方案。与应用程序无关的IPsec能以最小的代价支持大量传统的协议和传统客户/服务应用程序。这与围绕基于Web应用构建的SSL VPNs是不同的。许多SSL VPNs通过在远程设备上安装一个Java或者基于ActiveX的代理控件来解决这个缺点。通常情况下，在远程设备成功通过SSL VPN设备的验证后，相关的安装会准确无误的实现，但是值得注意的是，ActiveX和Java都有其自身的安全缺陷，这也是攻击者通常试图利用的一点。 IPsec VPN还是SSL VPN? 在企业中，每种VPN方案都有其用处。理想情况下，因为SSL和IPsec VPNs服务于不同的目的且具有优势互补的特点，所以它们都应该被采用。IPsec应该在需要与远程办公地点或者合作伙伴/供应商建立不间断连接时使用。这种情况下，粒度访问控制限制和缺失的主机检查能力应该通过一个网络访问控制系统来增加，这就可以确保只有通过验证的远程主机才能连接到企业。在粒度访问控制能力，审核和日志记录，以及安全策略控制等因素至关重要的移动办公情况下，企业应该主要使用SSL VPNs作为远程访问方案。但是请记住，不管你的VPN选择或特定需要如何，一个VPN必须更新，测试并进行性能检测，而且它是作为利用综合性策略和各种网络安全技术的深度防护战略的一部分。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[认证与凭证：X.509证书]]></title>
    <url>%2F2016%2F07%2F17%2F%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%87%AD%E8%AF%81%EF%BC%9AX.509%E8%AF%81%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[转自：http://www.cnblogs.com/artech/archive/2011/05/23/authentication_022.html认证与凭证：X.509证书在《上篇》中，我们谈到了常用的认证方式：用户名/密码认证和Windows认证。在下篇中，我们着重来介绍另外一种重要的凭证类型：X.509证书，以及针对X.509证书的认证方式。不过为了让读者能够真正地全面地了解X.509证书，我们需要先了解一些关于非对称密码学的背景知识。 目录一、非对称密码学（Asymmetric Cryptography） 消息加密（Encryption） 数字签名（Digital Signature）二、数字证书 数字证书的颁发机制 创建数字证书三、通过凭证三个属性来分析X.509证书 一、 非对称密码学（Asymmetric Cryptography）按照维基百科的定义，密码学（Cryptography）一种关于信息隐藏（Hiding Information）的研究或者实践。当代密码学是一种跨学科的研究，涉及的学科主要包括数学、计算机科学和工程学。站在消息交换的角度，密码学就是帮助我们实现对整个消息或者对消息的某个部分进行数字签名和加密的理论和方法。 数字签名和加密依赖于相应的加密算法（Cryptographic Algorithm），从数学的角度来讲，加密算法是就是将被加密的数据和密钥作为自变量，将加密后的数据作为因变量的函数。与加密相对的操作是解密。按照加密和解密采用的密钥是否相同，我们将加密算法分为对称加密算法和非对称加密算法。前者采用相同的密钥进行加密和解密，后者则采用一组相互配对的密钥分别进行加密和解密。对于非对称加密，我们选择秘钥对中某一个密钥对消息进行加密，该密文只有通过另一个秘要方能解密。非对称密码学具有两个主要的应用： 直接通过对消息进行加密解决机密性问题； 通过数字签名实现身份认证和数据一致性的问题。 消息加密（Encryption）非对称加密依赖一组由公钥/私钥（Public Key /Private Key）组成的密钥对，所以采用非对称加密又被称为公钥加密（Public Key Cryptography）。具体来说，公钥和私钥均可以用于加密。如果密钥对中的其中一个用于加密，另一个则用于解密。公钥公诸于众，不具有隐私性，任何人均可以获取；而私钥专属于拥有该密钥对的实体，属于绝对隐私。 对于消息交换来说，通过非对称的方式对消息进行加密是能够确保消息的机密性。具体的做法是：消息的发送方采用接收方的公钥进行加密，接收方通过自己的私钥进行解密。由于私钥仅供接收方所有，所有其他人不能对密文进行解密。 数字签名（Digital Signature）我们所说的数字签名实际上包括两项主要的工作，签名（Signing）和检验（Verification），前者创建一个数字签名，后者验证签名的有效性。接下来，我们来简单介绍一下在消息交换场景下的签名和检验是如何实现的。 签名的过程其实很简单，整个流程如上图所示。整个流程包括两个步骤：首先，发送方首先采用某种算法对整个消息的内容实施哈希计算，得到一个哈希码。然后，发送使用自己的私钥对该哈希码就行加密，加密后得到的密文就是数字签名。该数字签名最终会连同发送方密钥对中的公钥（该公钥一般会内嵌于一个数字证书中）附加到原消息上一并发予接收方。 这三项被接收方接收之后，它就可以借助这个数字签名验证发送方的真实身份和消息的完整性，这个过程被称为数字签名的验证。整个数字签名检验流程如下图所示。首先，原消息被提取出来，通过相同的哈希算法得到一个哈希码。然后，数字签名被提取出来，采用相同的算法利用公钥对数字签名进行解密，得到生成数字签名的那个哈希码。两个哈希码进行比较，如果一致则可以证明数字签名的有效性以及消息本身的完整性。 采用非对称密码学对消息加密解决的是消息的机密性问题，而数字签名的作用则体现在如下三个方面： 身份认证（Authentication）：数字证书可以帮助我们验证消息发送源的真实身份，因为数字签名的内容是由一个私钥决定的，发送方只有通过专署于他的密钥对中的私钥生成数字签名，采用通过对方利用公钥实施的数字签名检验。而私钥是属于拥有者的私密信息，不对外公开的。对数字证书的检验实际上就确认消息的发送源是否是私钥的真正拥有者。 防止抵赖（Non-repudiation）：防止抵赖在这里的代表对于接收到的经过数字签名的消息，如果接收方采用某个实体的公钥对数字签名检验成功，那么这个实体就是消息的发送方，不容对方抵赖。原因很简单，能够通过公钥对某个数字签名成功检验，证明生成该数字签名使用的是正确的私钥。 消息一致性（Integrity）：而数字签名确实可以确保整个消息内容的一致性的，因为最初被用于私钥加密的哈希码是针对整个消息的内容进行哈希计算获得的。消息的内容一旦出现任何的改变，最终对数字签名的检验都将失败。在上面介绍数字签名的流程时，我们说发送方的公钥会连同生成的数字签名会附加到消息中，一并传送给接收方，以辅助接收方对发送进行身份验证。实际上，这个公钥在一般情况下是通过数字证书的形式进行传递的。数字证实在这里作为发送方的凭证，现在我们就来简单介绍一下数字证书。 二、数字证书证书，又称数字证书（Digital Certificate）或者公钥证书（Public Key Certificate），是一种数字签名的声明，它将公钥的值绑定到持有对应私钥的个人、设备或服务的标识。由于大多数普通用途的证书基于 X.509 V3 证书标准，所以我们有将其称为X.509证书。X.509证书广泛地被应用于加密（Encryption）和数字签名（Digital Signature），以提供认证的实现和确保数据的一致性（Integrity）和机密性（Confidentiality）。 站在公钥密码学的角度来讲，X.509证书就是一个将某个密钥对中的公钥与某个主题（Subject）进行绑定的文件。具体来讲，和公钥进行绑定的不仅仅包括相应主题的可辨别名称（DN：Distinguished Name），可以包括主题相关的其它可选名称，比如Email地址、DNS名称等。 下面的代码片断体现了一个X.509证书的大体结构。其中包括版本号（V3）、序列号（7829）、签名算法（md5WithRSAEncryption）、颁发者（CN=Root Agency）、有效日期（April ‎07, ‎2011 3:37:45 PM到January ‎01, ‎2040 7:59:59 AM）、主题信息（CN = www.artech.com）、公钥（00:b4:31:98:… 52:7e:41:8f）和公钥算法（rsaEncryption）以及颁发者的数字签名（93:5f:8f:5f:… b5:22:68:9f）。123456789101112131415161718 1: Certificate: 2: Data: 3: Version: V3 4: Serial Number: 7829 (0x1e95) 5: Signature Algorithm: md5WithRSAEncryption 6: Issuer: CN=Root Agency 7: Validity 8: Not Before: ‎Thursday, ‎April ‎07, ‎2011 3:37:45 PM 9: Not After : ‎Sunday, ‎January ‎01, ‎2040 7:59:59 AM10: Subject: CN = www.artech.com11: Subject Public Key Info:12: Public Key Algorithm: rsaEncryption13: RSA Public Key: (1024 bit)14: Modulus (1024 bit):15: 00:b4:31:98:... 52:7e:41:8f16: Exponent: 65537 (0x10001)17: Signature Algorithm: md5WithRSAEncryption18: 93:5f:8f:5f: ... b5:22:68:9f 数字证书的颁发机制数字证书在大部分场景中是作为证明某个实体身份的凭证被使用，而证书的主题部分的内容代表了该用户凭证所代表的身份。那么我们的第一个问题是，我们为什么要信任这个证书？ 我们可以通过与日常生活中使用的证书进行类比，进而加深对数字证书的理解。比如居民身份证就是一种典型的证书，它的一个重要的特征就是该证书是由官方认可的合法机构颁发，一般情况下身份证的办法机构就是户口所在地的公安机关。对于数字证书，尤其是用于商业用途的数字证书，也具有相应的官方办法机构，我们将这样的机构称之为认证权威机构（CA：Certification Authority，以下简称CA）。我们熟悉的CA包括VeriSign、Thawte（OpenSSL）等。证书的颁发机构体系是一个树形结构，每一个CA可以具有一到多个子CA，最上层的CA被称为根CA。 在日常生活中，人们对居民身份证的普遍认可来源于对颁发机构，即户口所在地的公安机关的信任。这种基于对颁发机构认可的方式同样适合对数字证书。在一般情况下，认证方通过检验数字证书的CA的信任程度而作出对证书合法性的判断。不过，现在的问题是：居民身份证具有若干防伪标识帮助认证方鉴别真伪，对于数字证书来说，我们采用怎样的方式来判断它是不是伪造的呢？验证数字证书的有效性，需要防止以下两种情况： 用户伪造一个证书以假冒与证书公钥绑定的那个身份，并且该证书具有一个我们普遍认可的CA； 用户对CA颁发的证书进行篡改，改变公钥或者其他身份信息。这两个问题都可以通过数字签名技术来解决。 从上面给出的数字证书我们知道，证书中不仅仅包括CA的基本信息，还包括一个数字签名和签名采用的算法。CA通过自己的私钥对证书的数据部分进行签名，并将此签名连同签名采用的算法置于证书之中。按照我们前面介绍的关于数字签名的原理，如果我们具有CA的公钥，我们不仅仅可以验证证书的CA，也能校验证书的内容是否被篡改。那么在对证书进行验证的时候，CA的公钥从何而来呢？ 实际上，CA的公钥也保存在一个数字证书之中，并被存储于一个受信任的证书存储之中。按照证书代表身份的不同，我们可以将其分为两种类型：CA证书（CA Certificate）和终端实体证书（End Entity Certificate），其中前者代表CA，后者代表接受CA证书的最终实体。实际上，CA证书和终端实体证书并没有本质的区别。除了最顶层的根CA，所有的CA证书颁发者是它的上一级CA，即上级的CA作为该CA证书的CA。CA的这种层级关系组成了一种信任链（Trust Chain）。 为了存储数字证书，Windows中具有相应的证书存储区（Certificate stores）。根据目的或者信任范围的不同，不同的证书被存储于不同的存储区。关于证书存储，由于篇幅所限，我不会做过多的介绍，有兴趣的朋友可以查阅MSDN在线文档。对于证书存储管理，MMC为你提供一个可视化的管理工具，你也可以通过Certmgr.exe工具已命令行的方式来进行。 在若干证书存储区中，有一个被称为“受信任的根证书颁发机构”(Trusted Root Certification Authorities)的存储区，它里面存储的所有CA证书代表所信任的证书颁发机构。在默认情况下，对于一个待验证的证书，如果基于该证书CA信任链上的任何一个CA在该存储区中存在一个证书，那么这个证书是合法的。 创建数字证书用户对数字证书的认可决定于对证书颁发机构的信任，所以证书颁发机构决定了数字证书的可用范围。由于官方认可的数字证书颁发机构，比如VeriSign、Thawte（OpenSSL），具有普遍的信任度，在大部分情况下是理想的选择。但是对于学习研究或者开发测试，我们没有必要去购买这些商用证书，采用利用一些工具以手工的方式创建证书。 由于WCF的安全机制广泛使用到数字证实，我们很有必要学会手工创建数字证书。微软为我们提供了一个强大的创建数字证书的工具MakeCert.exe，我们可以借助这个工具采用命令行的方式创建我们需要的数字证书。MakeCert.exe具有很多命令行开关，限于篇幅的问题不可能对它们一一介绍，在这里仅仅对几个常用的开关作一下简单的介绍，有兴趣的读者可以查阅MSDN在线文档了解MakeCert.exe所有命令行开关的含义，对应的地址为http://msdn.microsoft.com/zh-cn/library/bfsktky3(v=vs.80).aspx。 -n x509name：指定主题的证书名称。最简单的方法是在双引号中指定此名称，并加上前缀CN=，例如，”CN=My Name”；-pe：将所生成的私钥标记为可导出，这样可将私钥包括在证书中；-sr location：数字证书的存储位置，具有两个可选值：CurrentUser（和LocalMachine。前者基于当前登录用户，后者基于本机；-ss store：数字证书的存储区；-sky keytype：指定主题的密钥类型，必须是 signature、exchange 或一个表示提供程序类型的整数。默认情况下，可传入1表示交换密钥，传入2表示签名密钥。比如我通过下面的命令会创建一个主题名称为www.artech.com的数字证书，该证书具有交换密钥类型，并且包含私钥。11: MakeCert -n &quot;CN=www.artech.com&quot; -pe -sr LocalMachine -ss My -sky exchange 一旦上面的命令成功执行，生成的证书会自动保存到基于本机的个人（Personal）存储区中。你可以通过MMC的证书管理单元（Snap-in）查看该证书, 关于如何通过MMC查看证书，可以参考这个地址：http://msdn.microsoft.com/zh-cn/library/ms788967.aspx。下图是证书MMC管理单元的截图，你可以看到我们创建的数字证书已经被存储到了我们在命令行中指定的存储区，颁发机构被默认设定为Root Agency。 三、通过凭证三个属性来分析X.509证书在上面中我们站在非对称密码学得角度对数字证书进行了相应的介绍，在这里我们从用户凭证的角度进一步地认识数字证书。我们照例采用用户凭证的三个属性来分析数字证书。 凭证与申明的一致性：证书的申明反映在于公钥绑定的于主题相关的信息；持有人对凭证的拥有性：在绝大部分的认证过程中，都需要被认证方提供的数字证书具有相应的私钥。私钥的私有性在某种程度上证明了数字证书持有者就是该证书的拥有者； 证书的合法性：这可以通过颁发者对证书的数字签名来验证。如果被认证方通过一个数字证书作为用户凭证，认证方一般采用信任链（Trust Chain）模式对其实施认证。在该模式下，认证方从数字证书的直接颁发机构向上追溯，如果具有任何一个颁发机构是受信任的，那么认证成功。不过，有时我们还是会采用其他的认证模式，比如严格比较证书主题信息甚至是序列号。 对于WCF来说，不仅仅客户端可以将数字证书作为证明自己身份的凭证，提供给服务端对自己进行认证。也可以将服务和某个数字证书绑定起来，通过证书代表服务的身份，供客户端进行验证。总之，数字证书在WCF中具有十分广泛的应用。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[比喻]]></title>
    <url>%2F2016%2F07%2F17%2F%E6%AF%94%E5%96%BB%2F</url>
    <content type="text"><![CDATA[软件工程可以用盖房子来比喻；安全认证可以用登机来比喻。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSL/TLS协议运行机制的概述]]></title>
    <url>%2F2016%2F07%2F17%2FSSL%20TLS%E5%8D%8F%E8%AE%AE%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E7%9A%84%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[SSL/TLS协议运行机制的概述http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CRC卡及其应用]]></title>
    <url>%2F2016%2F07%2F16%2FCRC%E5%8D%A1%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[【面向对象程序设计之CRC】CRC卡及其应用 作者：gnuhpc出处：http://www.cnblogs.com/gnuhpc/ 1.什么是 CRC card？ CRC (Class-Responsibility-Collaborator) Card是目前比较流行的面向对象分析建模方法。在CRC建模中，用户、设计者、开发人员都有参与，完成对整个面向对象工程的设计。 CRC卡是一个标准索引卡集合，包括三个部分：类名、类的职责、类的协作关系，每一张卡片表示一个类。 · 类 代表一系列对象的集合，这些对象是对系统设计的抽象建模，可以是一个人、一件物品等等，类名写在整个CRC卡的最上方。 · 职责 包括这个类对自身信息的了解，以及这些信息将如何运用。诸如，一个人，他知道他的电话号码、地址、性别等属性，并且他知道他可以说话、行走的行为能力。这个部分在CRC卡的左边。 · 协作 指代另一个类，我们通过这个类获取我们想要的信息或者相关操作。这个部分在CRC卡的右边。 CRC卡片的背面往往记载着这个类的详细描述和在CEC设计中的一些注意事项。 2.如何使用CRC卡组织团队成员？ 我们可以使用CRC卡完成设计团队成员的组织工作，但是需要限制在6人以下以提高效率，否则可能会增加沟通成本。我们的成员组成一般有以下三类，职责、人数建议、及其特征描述如下： · 用户 o 人数：3-5 o 特征： § 丰富的行业知识 § 清晰的业务流程 § 逻辑思维和良好沟通 § 对系统设计感兴趣 · OO设计人员 o 人数：1-2 o 特征： § 通晓CRC建模流程和方法 § 通晓OO设计思路和方法 § 有实际开发OO系统的经验 · 项目协调人 o 人数：1 o 特征： § 良好的会议沟通和管理技巧 § 通晓CRC建模流程和方法 3.CRC分析流程 1）准备工作： 召集人员，拿到相关业务流程的需求——Statement of work，SOW工作陈述，从SOW中提炼出需求，以项目符号列表的形式表示每一个特定的需求。 2）CRC卡的建立： a.类对应于名词，读完需求分析后，你可以划出一些名词作为类设计的切入点。当然，要习惯于迭代的方式，一开始列出的名词并不见得都要最终设计为一个类，而后续可能因为可用性等需要设计额外的类。 b.我们可以通过这个名词列表进行一一筛选分析，适当把握抽象与具体的关系，比如一个司机、一个秘书、一个经理可能都能抽象为人这个类，但是在第一轮迭代中，若无明显的需求，我们可以先暂时不用去考虑。对于普通的一般的关系，我们可以考虑超类的设计，也可以考虑通过构造函数重载完成。 c.在设计中，我们要注意目标之一是保证可扩展性，重构也是我们要考虑的一个隐性需求。 d.通过第一轮迭代我们就找出了我们需要关注的类。接着我们需要明确类的职责。职责的一个切入点是动词，从动词的列表中就可以得到职责初步列表，然后就行迭代。在这个过程中，并不是每一个动词都会成为一个职责，几个动词可能组成一个职责，最终选择的一些职责可能并没有出现在最初的职责中，对于共享的职责我们要特殊标识，以便在后续的详细设计中特殊处理（比如Java中的接口）。 e.在完成类的职责分析后我们开始根据这些职责及其交互关系明确协作关系，我们此时可以通过用例场景（系统对用户请求或事件作出响应时完成的一个事务或相关操作序列），对于每一个用例，明确交换的对象和消息。在这个过程中，参与的人可以通过角色扮演的方式，既活跃了气氛，又能在沟通交互中体现每一个类职责与协作。 f.完成CRC后就可以通过UML完成正式的初步设计了。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java2平台J2SE、J2EE、J2ME三大版本的区别[转]]]></title>
    <url>%2F2016%2F07%2F16%2FJava2%E5%B9%B3%E5%8F%B0J2SE%E3%80%81J2EE%E3%80%81J2ME%E4%B8%89%E5%A4%A7%E7%89%88%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Java2平台J2SE、J2EE、J2ME三大版本的区别J2SE、J2EE、J2ME的区别多数编程语言都有预选编译好的类库以支持各种特定的功能，在Java中，类库以包（package）的形式提供，不同版本的Java提供不同的包，以面向特定的应用。Java2平台包括标准版（J2SE）、企业版（J2EE）和微缩版（J2ME）三个版本：J2SE就是Java2的标准版，主要用于桌面应用软件的编程；J2ME主要应用于嵌入是系统开发，如手机和PDA的编程；J2EE是Java2的企业版，主要用于分布式的网络程序的开发，如电子商务网站和ERP系统。◆StandardEdition(标准版)J2SE包含那些构成Java语言核心的类。比如：数据库连接、接口定义、输入/输出、网络编程◆EnterpriseEdition(企业版)J2EE包含J2SE中的类，并且还包含用于开发企业级应用的类。比如：EJB、servlet、JSP、XML、事务控制◆MicroEdition(微缩版)J2ME包含J2SE中一部分类，用于消费类电子产品的软件开发。比如：呼机、智能卡、手机、PDA、机顶盒他们的范围是：J2SE包含于J2EE中，J2ME包含了J2SE的核心类，但新添加了一些专有类应用场合，API的覆盖范围各不相同。笼统的讲，可以这样理解：J2SE是基础；压缩一点，再增加一些CLDC等方面的特性就是J2ME；扩充一点，再增加一些EJB等企业应用方面的特性就是J2EE。补充一点J2EE更恰当的说，应该是JAVA2企业开发的技术规范，不仅仅是比标准版多了一些类。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UML类图符号各种关系说明以及举例[转]]]></title>
    <url>%2F2016%2F07%2F16%2FUML%E7%B1%BB%E5%9B%BE%E7%AC%A6%E5%8F%B7%E5%90%84%E7%A7%8D%E5%85%B3%E7%B3%BB%E8%AF%B4%E6%98%8E%E4%BB%A5%E5%8F%8A%E4%B8%BE%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[用例图中的关系 看懂UML类图和时序图 自己的概括：1、依赖和关联 2、聚合和组合 3、泛化和实现 UML类图符号 各种关系说明以及举例UML中描述对象和类之间相互关系的方式包括：依赖（Dependency），关联（Association），聚合（Aggregation），组合（Composition），泛化（Generalization），实现（Realization）等。 依赖（Dependency）：元素A的变化会影响元素B，但反之不成立，那么B和A的关系是依赖关系，B依赖A；类属关系和实现关系在语义上讲也是依赖关系，但由于其有更特殊的用途，所以被单独描述。uml中用带箭头的虚线表示Dependency关系，箭头指向被依赖元素。 关联（Association）：元素间的结构化关系，是一种弱关系，被关联的元素间通常可以被独立的考虑。uml中用实线表示Association关系，箭头指向被依赖元素。 聚合（Aggregation）：关联关系的一种特例，表示部分和整体（整体 has a 部分）的关系。uml中用带空心菱形头的实线表示Aggregation关系，菱形头指向整体。 组合（Composition）：组合是聚合关系的变种，表示元素间更强的组合关系。如果是组合关系，如果整体被破坏则个体一定会被破坏，而聚合的个体则可能是被多个整体所共享的，不一定会随着某个整体的破坏而被破坏。uml中用带实心菱形头的实线表示Composition关系，菱形头指向整体。 泛化（Generalization）：通常所说的继承（特殊个体 is kind of 一般个体）关系，不必多解释了。uml中用带空心箭头的实线线表示Generalization关系，箭头指向一般个体。 实现（Realize）：元素A定义一个约定，元素B实现这个约定，则B和A的关系是Realize，B realize A。这个关系最常用于接口。uml中用空心箭头和虚线表示Realize关系，箭头指向定义约定的元素。 1.1.1 依赖（Dependency）:虚线箭头表示1、依赖关系也是类与类之间的联结2、依赖总是单向的。（#add 注意，要避免双向依赖。一般来说，不应该存在双向依赖。）3、依赖关系在 Java 或 C++ 语言中体现为局部变量、方法的参数或者对静态方法的调用。（软件开发中，往往会设计一些公用类，供别的类调用，如果这些公用类出问题了，那调用这些公用类的类都会因此而出问题。两个元素之间的一种关系，其中一个元素（提供者)的变化将影响另一个元素（客体)，或向它提供所需信息显示一个类引用另一个类） 方法参数示例：1234567public class Person&#123; void buy(Car car) &#123; ... &#125;&#125; 表示方法：虚线加箭头特点：当类与类之间有使用关系时就属于依赖关系，不同于关联关系，依赖不具有“拥有关系”，而是一种“相识关系”，只在某个特定地方（比如某个方法体内）才有关系。依赖关系可以分为以下四类：1） 使用依赖（Usage）表示客户使用提供者提供的服务以实现它的行为，包括：使用&lt;&gt;—声明使用一个类时需要用到已存在的另一个类。调用&lt;&gt;—声明一个类调用其他类的操作的方法。参数&lt;&gt;—声明一个操作和它的参数之间的关系。发送&lt;&gt;—声明信号发送者和信号接收者之间的关系。实例化&lt;&gt;—声明用一个类的方法创建了另一个类的实例。2） 抽象依赖（Abstraction）表示客户与提供者之间用不同的方法表现同一个概念，通常一个概念更抽象，一个概念更具体。包括：跟踪&lt;&gt;—声明不同模型中的元素之间存在一些连接但不如映射精确。精化&lt;&gt;—声明具有两个不同语义层次上的元素之间的映射。派生&lt;&gt;—声明一个实例可以从另一个实例导出。3） 授权依赖（Permission）表达提供者为客户提供某种权限以访问其内容的情形。包括：访问&lt;&gt;—允许一个包访问另一个包的内容。导入&lt;&gt;—允许一个包访问另一个包的内容并为被访问包的组成部分增加别名。友元&lt;&gt;—允许一个元素访问另一个元素，不管被访问的元素是否具有可见性。4） 绑定依赖（Binding）较高级的依赖类型，用于绑定模板以创建新的模型元素，包括：绑定&lt;&gt;—为模板参数指定值，以生成一个新的模型元素。 1.1.2 关联（Association）：实线箭头表示1、关联关系是类与类之间的联结，它使一个类知道另一个类的属性和方法。2、关联可以是双向的，也可以是单向的（#add还有自身关联）。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。3、在 Java 或 c++ 中，关联关系是通过使用成员变量来实现的。12345678public class 徒弟&#123; &#125;public class 唐僧&#123; protected: list&lt;徒弟&gt; tdlist;&#125; 表示方法：实线箭头 特征：表示类与类或类与接口之间的依赖关系，表现为“拥有关系”；具体到代码可以用实例变量来表示。（A类有一个成员变量保存的是B类的一个引用，也就是说由A类可以找到B类） 1.1.3 聚合（Aggregation）：带空心菱形头表示1、聚合关系是关联关系的一种，是强的关联关系。2、聚合是整体和部分之间的关系，例如汽车由引擎、轮胎以及其它零件组成。3、聚合关系也是通过成员变量来实现的。但是，关联关系所涉及的两个类处在同一个层次上，而聚合关系中，两个类处于不同的层次上，一个代表整体，一个代表部分。4、关联与聚合仅仅从 Java 或 C++ 语法上是无法分辨的，必须考察所涉及的类之间的逻辑关系。 12345678910111213public class 引擎 &#123; &#125;public class 轮胎 &#123; &#125;public class 汽车&#123; protected:引擎 engine; protected:轮胎 tyre[4];&#125; 表示方法：空心菱形头 特征：属于是关联的特殊情况，体现部分-整体关系，是一种弱拥有关系；整体和部分可以有不一样的生命周期；是一种弱关联； 1.1.4 组合（Composition）：带实心菱形头的实线表示1、合成关系是关联关系的一种，是比聚合关系还要强的关系。2、它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。 1234567class 肢 &#123; &#125; class 人 &#123; protected: 肢 limb[4]; &#125; 表示方法：一般是实心菱形加实线箭头表示 特征：属于是关联的特殊情况，也体现了体现部分-整体关系，是一种强“拥有关系”；整体与部分有相同的生命周期，是一种强关联； 1.1.5 泛化（Generalization）：带空心箭头的实线线表示 泛化（下图）表示一个更泛化的元素和一个更具体的元素之间的关系。泛化是用于对继承进行建模的UML元素。在Java中，用extends关键字来直接表示这种关系。泛化关系表示类与类之间的继承关系，接口与接口之间的继承关系。如下图： 1.1.6 实现（Realization）：空心箭头和虚线表示 实例关系指定两个实体之间的一个合同。换言之，一个实体定义一个合同，而另一个实体保证履行该合同。对Java应用程序进行建模时，实现关系可直接用implements关键字来表示。表达一种说明元素与实现元素之间的关系； 相互之间的区别1.聚合与组合（1）聚合与组合都是一种结合关系，只是额外具有整体-部分的意涵。 （2）部件的生命周期不同 聚合关系中，整件不会拥有部件的生命周期，所以整件删除时，部件不会被删除。再者，多个整件可以共享同一个部件。组合关系中，整件拥有部件的生命周期，所以整件删除时，部件一定会跟着删除。而且，多个整件不可以同时间共享同一个部件。 （3）聚合关系是“has-a”关系，组合关系是“contains-a”关系。 “弱”包含表示如果部门没有了，员工也可以继续存在；“强”包含表示如果部门没有了，员工也不再存在；在做软件需求时，往往会将所有的包含关系画成“弱”包含，后面发现某些关系可以表示为“强”包含是，才转为实心菱形。 2.关联和聚合（1）表现在代码层面，和关联关系是一致的，只能从语义级别来区分。 （2）关联和聚合的区别主要在语义上，关联的两个对象之间一般是平等的，例如你是我的朋友，聚合则一般不是平等的。 （3）关联是一种结构化的关系，指一种对象和另一种对象有联系。 （4）关联和聚合是视问题域而定的，例如在关心汽车的领域里，轮胎是一定要组合在汽车类中的，因为它离开了汽车就没有意义了。但是在卖轮胎的店铺业务里，就算轮胎离开了汽车，它也是有意义的，这就可以用聚合了。 3.关联和依赖（1）关联关系中，体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。 （2）依赖关系中，可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A。 4.泛化和实现实现表示类对接口的实现关系，表示方式：用一条带有空心三角箭头的虚线指向接口。 泛化表示类与类之间的继承关系、接口与接口之间的继承关系，表示方式一条带有空心三角箭头的实线指向基类（父接口）。 5.综合比较 这几种关系都是语义级别的，所以从代码层面并不能完全区分各种关系；但总的来说，后几种关系所表现的强弱程度依次为： 组合&gt;聚合&gt;关联&gt;依赖 其中依赖（Dependency）的关系最弱，而关联（Association），聚合（Aggregation），组合（Composition）表示的关系依次增强。换言之关联，聚合，组合都是依赖关系的一种，聚合是表明对象之间的整体与部分关系的关联，而组合是表明整体与部分之间有相同生命周期关系的聚合。 而关联与依赖的关系用一句话概括下来就是，依赖描述了对象之间的调用关系，而关联描述了对象之间的结构关系。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>UML</tag>
        <tag>符号</tag>
        <tag>关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[历史是个任人打扮的小姑娘]]></title>
    <url>%2F2016%2F07%2F16%2F%E5%8E%86%E5%8F%B2%E6%98%AF%E4%B8%AA%E4%BB%BB%E4%BA%BA%E6%89%93%E6%89%AE%E7%9A%84%E5%B0%8F%E5%A7%91%E5%A8%98%2F</url>
    <content type="text"><![CDATA[许多人都喜欢引用一句据称是胡适的名言：“历史是个任人打扮的小姑娘”。其实，胡适并没说过这样的话，它是由其它话演变来的，原话出自胡适的《实验主义》：“实在是我们自己改造过的实在。这个实在里面含有无数人造的分子。实在是一个很服从的女孩子，她百依百顺地由我们替她涂抹起来，装扮起来。好比一块大理石到了我们手里，由我们雕成什么像。”胡适原本在讲哲学，与历史毫无关系，后来竟然被以讹传讹。这个讹传的源头似为哲学家冯友兰在“胡适思想批判”运动中的一段话：“实用主义者的胡适，本来认为历史是可以随便摆弄的。历史像个‘千依百顺的女孩子’，是可以随便装扮涂抹的。”]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>胡适</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github博客的优势]]></title>
    <url>%2F2016%2F07%2F16%2FGithub%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BC%98%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[用了一个多月的Github博客，总结如下。Github 博客和普通第三方提供博客的优劣性分析：1、Github博客就像毛坯房，可以由你来定义；普通第三方就像装修好的房子，直接可以入住，但是你不能做任何的改动；2、Github博客知会存放你需要摆放的内容；普通第三方博客会插入服务商提供的默认的内容；3、Github博客没有任何广告，干净的让你心旷神怡；普通第三方博客会弹出很多广告；4、Github博客你掌握源代码，将来的迁移是非常方便的；普通第三方博客会有很多迁移的限制；不过话说回来，Github博客适合有开发经验的人士，对普通人还是太复杂了。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给老板的汇报]]></title>
    <url>%2F2016%2F07%2F16%2F%E7%BB%99%E8%80%81%E6%9D%BF%E7%9A%84%E6%B1%87%E6%8A%A5%2F</url>
    <content type="text"><![CDATA[昨天给老板汇报了。一开始我们准备了一堆PPT和具体的Excel数据。但汇报的时候，从第一页开始，老板就叫停了，反思如下： 汇报的时候需要站在老板的角度来考虑，老板关注什么； 我们准备的资料，基本是从系统功能的维度来考虑，但是老板关心的是整体； 总结老板的要求就是： 需要列出老板目前关注的问题、交代的问题有哪些？实现情况怎么样？用得怎么样？差异在哪里？准备怎么做（方案）？计划如何？系统能带来什么好处？ 老板近期关心的问题是： 1）管控点的实现情况（过程管理—生产运营） BI：总体（全流程＼体系化、一体化）管控红绿灯、管控点实现情况一览表（结合业务流程）实现一栏表； 2）投资经营分析的表格（事后管理—投资管理） BI：实现经营分析表、投资分析表等，让老板能看到运营和目标成本、全面预算、时间计划等的对标情况； 3）系统要成一个体系、系统要能用 要打通，不能总是半成品。其实总的来说，老板需要他的管控思路需要在系统落地，需要能看到运营情况和他要求的差异。不过从合道的角度来说，其实也存在重开发、轻实施；重开发、轻应用的问题。导致系统开发出来之后使用效果不好。还有就是目前把一个大系统拆分成几个小系统，然后通过接口来对接的方式是否合理？因为根据统计，接口发现的问题占比达到35%左右。太多接口给系统带来更多的复杂度。 下面是自己本来想提的问题，不过比较，还是站在做事情的角度，没有站在老板的角度来提出问题，见下面：目前信息化的8个困境及建议（业务方面）1、管控需求的问题 目前，老板的管控需求是否在系统落地，目前没有很完整的审计资料。 建议：有专门的部门，整理老板的管控要求，然后检查系统是否落地。2、需求提交的完整性 目前业务很难提交完整性的需求，在这基础上构建出的系统需要大量的修改； 建议：非核心的系统采用市面上成熟的成品；核心系统通过迭代方式进行开发；3、需求变更、不考虑成本 一换人就提出新的需求，随时提需求，不考虑成本； 建议：成立需求变更控制委员会，对需求的变更进行把控。 （业务+合道）4、系统的实施及数据清理问题 三分技术、七分实施、十二分数据 目前的困境是合道开发完成，所有的工作提交前台，而前台没有能力组织实施，业务的数据清理积极性不高，导致系统用不起来。 建议：合道也参与到系统实施中来，重视系统实施的工作、重视数据的初始化工作。5、系统的易用性有问题 建议：成立专门的业务、IT小组，对系统易用性进行优化；6、UCML平台落后、接口方式落后 UCML平台开发效率低，各系统之间的接口是星状结构，故障比较多。 建议：下定决心重构新PM，采用面向服务的接口方式； （合道管理）7、合道工作方式的问题 目前主要是被动接受前台的需求。 建议：做好规划（包括近期、远景），主动和前台沟通，推进相关的工作。要思考5-10年的房地产和技术发展趋势，提前做一些规划和应对的工作8、合道考核机制的问题目前大家都是干多干少一个样。 建议：要设立奖惩制度，奖励先进，调起大家的积极性。]]></content>
      <categories>
        <category>地产相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《代码大全2（Code Complete）》读后感]]></title>
    <url>%2F2016%2F07%2F15%2F%E3%80%8A%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A82%EF%BC%88Code%20Complete%EF%BC%89%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[终于啃完这本近900页的大块头，一本讲述软件构建的最佳实践方面的书。本书除了内容详实、通俗易懂之外，最大的一个优点就是翻译得特别好。像作者说的，人的智力是有限的，而软件需要构建的世界是凌乱的，所以降低复杂度是软件开发的核心。所以，如何降低复杂度是本书的核心，包括分层抽象、分解、复查、规范等等技术。例如： 将系统 “分解”，是为了使子更易于理解 进行复查，测试， 减少人为的失误 将子程序编写得短小，以减少大脑的负荷 基于问题而不是实现细节来编程，从而减少工作量 文章摘录 首先为人写程序，其次才是为机器。 子程序最佳的长度是50-150行。IBM曾经把子程序的长度限制在50行之内。 犯错不是罪过，从中学不到什么才是罪过。 在调试过程，设定时间，如果超过这个时间，就暂停或者放弃调错过程。知道何时放弃很难，但这是必须面对的问题。 与其它行业相比，软件开发行业的经验比书本知识的价值要小。 编程工作本质上是项无法监督的工作，因为没人清楚你正在干什么。 承认自己智力有限并通过学习来弥补，你会成为更好的程序员。 程序员都是大忙人，常常没有时间去考虑怎样改进自己的工作。 木匠谚语“瞄两次，切一次（Measure twice, cut once)”(三思而后行) 需求的关键是识别出用户的问题。 开发过程能够帮助客户更好地理解自己的需求，这是需求变更的主要来源。 如果你不能向一个六岁小孩解释某件事，那么你自己就没有真正理解它。 Albert Einstein。 如果你熟悉数据库术语的话，类与对象的关系就如同“模式(Schema)”与“实例（instance）”一样。 抽象可以让你用一种简化的观点来考虑复杂的概念。 用错误狐狸代码来处理预期会发生的状况，用断言来处理绝不应该发生的状况。 伪代码编程过程（Pseudocode Programming Process,PPP)，这种编程过程有助于减少设计和编写文档所需的工作量，同时提高这两项工作的质量。 不合理地初始化数据是产生编程错误的常见根源之一。 变量名的平均长度在10-16个字符之间。 做一项全局决策而不是做许多局部决策。 一条很好的经验就是，程序主体中仅能出现的文字量就是0和1，任何其他文字量应该换成有描述性的标示。 平均5小时写出220行的代码。 测试先行的编程是过去十年中所形成的最有用的软件开发实践之一。 将单元测试纳入测试框架。 如果一个错误无法重现，这通常是一个初始化的错误，或者是一个同时间有关的问题，或者是悬空指针的问题。 重视Pareto法则。 可以在程序执行开始的时候算出一张查询表，在之后每次需要的时候使用这一表格。 high-touch环境 ：人性、人情、人味 有效编程中最重要的工作是思考，而人思考时通常不会看上去很忙。 以新习惯来代替老习惯，要比干脆戒掉老习惯容易。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代码大全 - 个人性格]]></title>
    <url>%2F2016%2F07%2F15%2F%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8%20-%20%E4%B8%AA%E4%BA%BA%E6%80%A7%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[代码大全 - 个人性格编程过程是非常耗费脑力的。 人们都知道聚精会神地一天8小时工资是多么困难。 也许你有过某天精力过分集中，以至于第二天就无精打采的经历。编程工作本质上是项无法监督的工作，因为没人清楚你正在干什么。我们都有这样的经历：耗费80%的时间着力于项目的个别地方，而花费20%的时间来完成其余80%的工作。一旦决心成为出色的程序员，你的发展潜力是很大的。 各种研究发现，不同的程序员创建的某个程序所需要的时间差异可达10：1；同时还发现，不同程序员调试程序所需的时候，程序实现规模，速度，错误率和检测出的错误数目也能打带10：1.承认自己智力有限并通过学习来弥补，你会成为更好的程序员。 很好的编程做法能减轻你的脑力负担： 将系统 “分解”，是为了使子更易于理解 进行复查，测试， 减少人为的失误 将子程序编写得短小，以减少大脑的负荷 基于问题而不是实现细节来编程，从而减少工作量]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库中Schema（模式）概念的理解]]></title>
    <url>%2F2016%2F07%2F14%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%ADSchema%EF%BC%88%E6%A8%A1%E5%BC%8F%EF%BC%89%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[数据库中Schema（模式）概念的理解在学习SQL的过程中，会遇到一个让你迷糊的Schema的概念。实际上，schema就是数据库对象的集合，这个集合包含了各种对象如：表、视图、存储过程、索引等。为了区分不同的集合，就需要给不同的集合起不同的名字，默认情况下一个用户对应一个集合，用户的schema名等于用户名，并作为该用户缺省schema。所以schema集合看上去像用户名。如果把database看作是一个仓库，仓库很多房间（schema），一个schema代表一个房间，table可以看作是每个房间中的储物柜，user是每个schema的主人，有操作数据库中每个房间的权利，就是说每个数据库映射的user有每个schema（房间）的钥匙。我们访问一个表时，没有指明该表属于哪一个schema中的，系统就会自动给我们在表上加上缺省的sheman名。在数据库中一个对象的完整名称为schema.object，而不属user.object。在MySQL中创建一个Schema和创建一个Database的效果好像是一样的，但是在sqlserver和orcal数据库中效果又是不同的。在SQL Server 2000中，user和schema总有一层隐含的关系，让我们很少意识到其实user和schema是两种完全不同的概念，假如我们在某一数据库中创建了用户Bosco，那么此时后台也为我们默认的创建了schema【Bosco】，schema的名字和user的名字相同。在SQL Server 2005中，为了向后兼容，当用sp_adduser存储过程创建一个用户的时候，sqlserver2005同时也创建了一个和用户名相同的schema，然而这个存储过程是为了向后兼容才保留的，当我们用create user创建数据库用户时，我们可以用该用户指定一个已经存在的schema作为默认的schema，如果我们不指定，则该用户所默认的schema即为dbo schema，dbo房间（schema）好比一个大的公共房间，在当前登录用户没有默认schema的前提下，如果你在大仓库中进行一些操作，比如create table，如果没有制定特定的房间（schema），那么你的物品就只好放进公共的dbo房间（schema）了。但是如果当前登录用户有默认的schema，那么所做的一切操作都是在默认的schema上进行。在Oracle数据库中不能新建一个schema，要想创建一个schema，只能通过创建一个用户的方法解决，在创建一个用户的同时为这个用户创建一个与用户名同名的schem并作为该用户的缺省shcema。即schema的个数同user的个数相同，而且schema名字同user名字一一 对应并且相同。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式的来源，及其相混淆的模型、框架、架构区别]]></title>
    <url>%2F2016%2F07%2F14%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%9D%A5%E6%BA%90%EF%BC%8C%E5%8F%8A%E5%85%B6%E7%9B%B8%E6%B7%B7%E6%B7%86%E7%9A%84%E6%A8%A1%E5%9E%8B%E3%80%81%E6%A1%86%E6%9E%B6%E3%80%81%E6%9E%B6%E6%9E%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[转自：http://www.lai18.com/content/2398629.html设计模式的来源，及其相混淆的模型、框架、架构区别 例子：建筑现在这里有一堆的建筑材料，然后工程师会根据各方面的需求，将材料规整。确定各种材料的搭配和使用的地方，最后绘制出一幅（或者很多种）图纸。这一步，其实就是所谓的架构。然后工人们根据工程师给的这张图纸（可能是最终挑选出来的），开始利用这些材料，去搭建高楼。比如用钢筋，先架一个高楼的架子，这个就是框架。然后对框架进行砌砖灌注混泥土等，整个高楼就建好了。可是，这时候突然发现整体的框架是搭起来了了，但是出现了一些房间的偏小，不足。这时候，可能会在墙壁上装上一面镜子，利用光的原理来使房间隐形的增大，或者是一些别的方法等。在一个房间解决了问题，然后把这种方法应用到都出现了这一类问题的房间修筑中，这就是模式。当高楼建好了，楼盘开售，在观看楼盘的时候，在售楼中心，我们会看到这些高楼的缩小版，来决定是否购买。这些缩小版的高楼，就是这个楼盘的模型。 一、基本概念 1.1，模式（pattern） 在汉语词典中，模式一词的意思是：事物的标准样式。 在百度百科中，模式一词的意思是：是一种认识论意义上的确定思维方式。是人们在生产生活实践当经过积累的经验的抽象和升华。简单地说，就是从不断重复出现的事件中发现和抽象出的规律，是解决问题形成经验的高度归纳总结。只要是一再重复出现的事物，就可能存在某种模式。 1.2，设计模式 设计模式（Design pattern）：是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。 一个设计模式，是一个已被记录的最佳实践或一个解决方案。这个最佳实践或解决方案已被成功应用在许多环境中，它解决了在某种特定情境中重复发生的某个问题。Christopher Alexander的建筑模式：“针对在某个特定背景和作用力系统中发生的通用问题的常见解决方案”。背景：给定模式能够适用的条件；情境：作用力系统—-在这个特定背景下的约束条件集合。 二、设计模式的来源 2.1，建筑中的模式 20世纪70年代Christopher Alexander研究了为解决同一个问题而设计出的不同建筑结构。发现了那些高质量的设计中的相似性。用“模式语言“来指代这种相似性。–A Pattern Language: Towns, Buildings, Construction（牛津大学出版社，1977年） 由Alexander发现并记录的这些模式仅仅是涉及诸如建筑物、花园和道路之类的建筑学方面的模式。 2.2，从建筑学模式到软件设计模式 1987年，受Alexander作品的影响Kent Beck和Ward Cunningham把建筑学上的模式观点应用于软件设计和开发。他们利用Alexander的一些观点开发了一系列模式，用Smalltalk语言实现了雅致的用户界面。利用这个工作成果，他们在1987年召开的“面向对象的编程系统、语言和应用程序(OOPSIA)研讨会”上做了一个以《在面向对象编程中使用模式语言》为题的演讲。1994年，由ErichGamma、Richard Helm、Ralph Johnson和John Vlissides合作的以《设计模式—可复用的面向对象软件的基本原理》解释了模式的用处，同时也使得设计模式得到广泛的普及。 备注：设计模式并不等同与软件模式，而只是其中的一个分支。软件模式还包括：架构模式，体系结构模式等。 三、模式与模型 3.1，概念 模型：通过主观意识借助实体或者虚拟表现、构成客观阐述形态、结构的一种表达目的的物件(物件并不等于物体，不局限于实体与虚拟、不限于平面与立体)。在汉语词典中，模型最基本的意思，是样式。 提到模式，就很容易想到模型一词，那么模式与模型的区别是什么呢？ 3.2，区别 模式：从根本上来说，是对特定问题的一个解决方案。模型，则是对于问题的一种描述。 比如说：这里马上要举行一个航天模型大赛。你在脑海中形成的最终的飞机样式或者说最终形成的实体飞机样式，就是一种模型。而在建造模型的过程中，遇到各种问题，你解决这些问题的方式，可以算是一种模式。注意：模式是解决反复出现问题的解决方案。 四、模式与框架 4.1，概念 在学习设计模式这一本书的时候，在最后提到了一个MVC。但是，MVC确实作为一种框架存在的，而不是模式。那么，这是为什么，它的区别在哪里？ 框架（Framework）：是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法；另一种定义认为，框架是可被应用开发者定制的应用骨架。框架可以看做是对于解决问题的一个流程的描述。 4.2，区别 4.2.1，本质不同 设计模式：是在某种特定上下文中针对一个软件生命周期中出现的问题而给出的多次适用的解决方案。 框架：框架是一组软件组件，它们互相协作提供了针对某个给定的问题领域中的应用程序所用到的一种可复用的体系结构。 4.2.2，范围不同 一个框架中可能包含很多个设计模式，设计模式是比框架更小的元素。 4.2.3，具体实现不同 框架可以用代码表示，也能直接执行或复用，而对模式而言只有实例才能用代码表示。而且，框架一般是作为代码重用，而模式是作为设计重用。 五、框架和架构 架构，又名软件架构，是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。简单的说架构就是一个蓝图，是一种设计方案，将客户的不同需求抽象成为抽象组件，并且能够描述这些抽象组件之间的通信和调用。 区别：架构的抽象层级比之框架更高。框架更加倾向于技术，架构更倾向于设计，架构可以通过不同的框架来实现。 例子：建筑 现在这里有一堆的建筑材料，然后工程师会根据各方面的需求，将材料规整。确定各种材料的搭配和使用的地方，最后绘制出一幅（或者很多种）图纸。这一步，其实就是所谓的架构。然后工人们根据工程师给的这张图纸（可能是最终挑选出来的），开始利用这些材料，去搭建高楼。比如用钢筋，先架一个高楼的架子，这个就是框架。然后对框架进行砌砖灌注混泥土等，整个高楼就建好了。可是，这时候突然发现整体的框架是搭起来了了，但是出现了一些房间的偏小，不足。这时候，可能会在墙壁上装上一面镜子，利用光的原理来使房间隐形的增大，或者是一些别的方法等。在一个房间解决了问题，然后把这种方法应用到都出现了这一类问题的房间修筑中，这就是模式。当高楼建好了，楼盘开售，在观看楼盘的时候，在售楼中心，我们会看到这些高楼的缩小版，来决定是否购买。这些缩小版的高楼，就是这个楼盘的模型。 六、总结 架构（动词）&gt;框架&gt;设计模式。 软件通过架构，可以设计出很多不同的框架。在一个框架中，也可以使用很多的设计模式。设计模式不是哪儿哪儿都可以用的，只有当出现了某一特定的问题时，才利用设计模式去解决。设计模式不是用的越多越好，在维护的时候，过多的设计模式会极大的增添维护成本。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是冒烟测试]]></title>
    <url>%2F2016%2F07%2F14%2F%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%92%E7%83%9F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[关于冒烟测试，应该是微软首先提出来的一个概念，和微软一直提倡的每日build有很密切的联系。具体说，冒烟测试就是在每日build建立后，对系统的基本功能进行简单的测试。这种测试强调功能的覆盖率，而不对功能的正确性进行验证。从这一点看和所谓的“接受性（验收）测试（Acceptance Test）”非常相似。不同之处就在于他们执行的频率和被测的版本不同。 至于冒烟测试这个名称的来历，大概是从电路板测试得来的。因为当电路板做好以后，首先会加电测试，如果板子没有冒烟在进行其它测试，否则就必须重新来过。类似的如果冒烟测试没有通过，那么这个build也会返回给开发队伍进行修正，测试人员测试的版本必须首先通过冒烟测试的考验。 冒烟测试的说法据说是： 就象生产汽车一样，汽车生产出来以后，首先发动汽车，看汽车能否冒烟，如果能，证明汽车最起码可以开动了。说明完成了最基本的功能。 冒烟测试一般用于每日构建(Nightly build)，构建服务器首先从CVS服务器上，下载最新的源代码，然后编译单元测试，运行单元测试通过后，编译可执行文件，可执行文件若可运行，并能执行最基本的功能，则认为通过了冒烟测试，这时，构建服务器会把程序打包成安装文件，然后上传到内部网站，第二天一早，测试人员来了以后，会收到构建服务器发来的邮件提示昨晚是否构建成功。若构建成功，则测试人员进行相关的功能测试。所有这些功能的完成，一般是靠编写脚本完成的，目前比较常用的脚本有TCL，Perl，Python及功能弱弱的批处理。用这些可以完成系统的每日构建。 简单的说，就是先保证系统能跑的起来，不至于让测试工作做到一半突然出现错误导致业务中断。目的就是先通过最基本的测试，如果最基本的测试都有问题，就直接打回开发部了，减少测试部门时间的浪费。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新PM系统的痛点问题]]></title>
    <url>%2F2016%2F07%2F12%2F%E6%96%B0PM%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%97%9B%E7%82%B9%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[新PM系统目前最大的困难就是：成本管理的管控方式不断变化，而UCML平台的开发不支持快速响应、灵活性也不够。就像是：人民群众日益增长的物质文化需求与相对落后的社会生产力之间的矛盾。]]></content>
      <categories>
        <category>地产相关</category>
      </categories>
      <tags>
        <tag>PM</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初一总结]]></title>
    <url>%2F2016%2F07%2F09%2F%E5%88%9D%E4%B8%80%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[桐桐初一年级结束了，回顾初一一年的学习生活，总结如下： 学习 ：上下两个学期都是期中考得一般，期末努力点，还好，还是都保持到了第1期间。班主 任：欧阳敏嘉老师、李丽娟老师。欧阳老师休产假，李老师在第二个学期考试前接手。同桌 ：第一学期：陈尚礼；第二学期：张琳；第一学期末、第二学期开始，和关颖曦坐过短短一段时间。开心的事：1000米跑保持班级第一。好习惯 ：放学坚持跑步。需要努力：数学争取进入第1期间。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[外刊IT评论]]></title>
    <url>%2F2016%2F07%2F07%2F%E5%A4%96%E5%88%8AIT%E8%AF%84%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[一个很好的关于编程技术的刊物网站 。http://www.vaikan.com/ 不懂技术的人不要对懂技术的人说这很容易实现http://www.vaikan.com/im-sure-it-will-only-take-you-a-few-days-to-code/]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归和阶乘的效率比较]]></title>
    <url>%2F2016%2F07%2F06%2F%E9%80%92%E5%BD%92%E5%92%8C%E9%98%B6%E4%B9%98%E7%9A%84%E6%95%88%E7%8E%87%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[转自：https://www.pureweber.com/article/recursive-power-4/递归的力量（四）：递归效率前几天我们在讨论递归的过程中发现，递归在解决某些问题的时候使得我们思考的方式得以简化，代码也更加精炼，容易阅读。那么既然递归有这么多的优点，我们是不是什么问题都要用递归来解决呢？难道递归就没有缺点吗？今天我们就来讨论一下递归的不足之处。我们知道，递归调用实际上是函数自己在调用自己，而函数的调用开销是很大的，系统要为每次函数调用分配存储空间，并将调用点压栈予以记录。而在函数调用结束后，还要释放空间，弹栈恢复断点。所以说，函数调用不仅浪费空间，还浪费时间。这样，我们发现，同一个问题，如果递归解决方案的复杂度不明显优于其它解决方案的话，那么使用递归是不划算的。因为它的很多时间浪费在对函数调用的处理上。在C++中引入了内联函的概念，其实就是为了避免简单函数内部语句的执行时间小于函数调用的时间而造成效率降低的情况出现。在这里也是一个道理，如果过多的时间用于了函数调用的处理，那么效率显然高不起来。举例来说，对于求阶乘的函数来说，其迭代算法的时间复杂度为O(n)：12345678int fact(n)&#123; int i; int r = 1; for(i = 1; i &lt;= n; i++)&#123; r *= i; &#125; return r;&#125; 而其递归函数的时间复杂度也是O(n)：123456int fact_r(n)&#123; if(n == 0) return 1; else return n * f(n - 1);&#125; 但是递归算法要进行n次函数调用，而迭代算法则只需要进行n次迭代而已。其效率上的差异是很显著的。 我们再来看看之前我们讨论的费波纳契数列问题。 我们当时使用的是简单的用定义来求 fib(n)，也就是使用公式 fib(n) = fib(n-1) + fib(n-2)。这样的想法是很容易想到的，可是仔细分析一下我们发现，当调用fib(n-1)的时候，还要调用fib(n-2)，也就是说fib(n-2)调用了两次，同样的道理，调用f(n-2)时f(n-3)也调用了两次，而这些冗余的调用是完全没有必要的。可以计算这个算法的复杂度是指数级的。 那么计算费波纳契数列是否有更好的递归算法呢？ 当然有。让我们来观察一下费波纳契数列的前几项： 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 …注意到没有，如果我们去掉前面一项，得到的数列依然满足f(n) = f(n-1) – f(n-2), (n&gt;2)，而我们得到的数列是以1，2开头的。很容易发现这个数列的第n-1项就是原数列的第n项。怎么样，知道我们该怎么设计算法了吧？我们可以写这样的一个函数，它接受三个参数，前两个是数列的开头两项，第三个是我们想求的以前两个参数开头的数列的第几项。 int fib_i(int a, int b, int n);在函数内部我们先检查n的值，如果n为3则我们只需返回a+b即可，这是简单情境。如果n&gt;3，那么我们就调用f(b, a+b, n-1)，这样我们就缩小了问题的规模（从求第n项变成求第n-1项）。好了，最终代码如下：123456int fib_i(int a, int b , int n)&#123; if(n == 3) return a+b; else return fib_i(b, a+b, n-1);&#125; 这样得到的算法复杂度是 O(n) 的。已经是线性的了。它的效率已经可以与迭代算法的效率相比了，但由于还是要反复的进行函数调用，还是不够经济。 由以上分析我们可以看到，递归在处理问题时要反复调用函数，这增大了它的空间和时间开销，所以在使用迭代可以很容易解决的问题中，使用递归虽然可以简化思维过程，但效率上并不合算。效率和开销问题是递归最大的缺点。 虽然有这样的缺点，但是递归的力量仍然是巨大而不可忽视的，因为有些问题使用迭代算法是很难甚至无法解决的（比如汉诺塔问题）。这时递归的作用就显示出来了。 递归的效率问题暂时讨论到这里。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于友谊]]></title>
    <url>%2F2016%2F07%2F06%2F%E5%85%B3%E4%BA%8E%E5%8F%8B%E8%B0%8A%2F</url>
    <content type="text"><![CDATA[在期末考试前几天，桐桐最要好的朋友尚礼妈妈打电话给桐妈，投诉阿桐在学校调皮，乱搞尚礼，可能惹得尚礼有点不开心。尚礼妈让我们不要告诉桐。不过我们商量后，还是决定和桐桐严肃说了这件事，桐有点不开心。开始我们还有点担心，这些会不会影响他们的友谊.后来观察了一下，他们俩后来还是经常在一起，暑期还约了一起踢球，社会实践的车上还是坐在一起。友谊就是这样，虽然有磕磕碰碰，但是不影响之间的感情！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java ==和equals()的区别【详细版】]]></title>
    <url>%2F2016%2F07%2F06%2FJava%20%3D%3D%E5%92%8Cequals()%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%90%E8%AF%A6%E7%BB%86%E7%89%88%E3%80%91%2F</url>
    <content type="text"><![CDATA[Java ==和equals()的区别【详细版】==操作符专门用来比较变量的值是否相等。 比较好理解的一点是：12int a=10;int b=10; 则a==b将是true。 但不好理解的地方是：12String a=new String("foo");String b=new String("foo"); 则a==b将返回false。 根据前一帖说过，对象变量其实是一个引用，它们的值是指向对象所在的内存地址，而不是对象本身。a和b都使用了new操作符，意味着将在内存中产生两个内容为”foo”的字符串，既然是“两个”，它们自然位于不同的内存地址。a和b的值其实是两个不同的内存地址的值，所以使用”==”操作符，结果会是false。诚然，a和b所指的对象，它们的内容都是”foo”，应该是“相等”，但是==操作符并不涉及到对象内容的比较。对象内容的比较，正是equals方法做的事。 看一下Object对象的equals方法是如何实现的：123boolean equals(Object o)&#123; return this==o;&#125; Object对象默认使用了==操作符。所以如果你自创的类没有覆盖equals方法，那你的类使用equals和使用==会得到同样的结果。同样也可以看出，Object的equals方法没有达到equals方法应该达到的目标：比较两个对象内容是否相等。因为答案应该由类的创建者决定，所以Object把这个任务留给了类的创建者。 看一下一个极端的类：12345Class Monster&#123; private String content; ... boolean equals(Object another)&#123; return true;&#125;&#125; 我覆盖了equals方法。这个实现会导致无论Monster实例内容如何，它们之间的比较永远返回true。 所以当你是用equals方法判断对象的内容是否相等，请不要想当然。因为可能你认为相等，而这个类的作者不这样认为，而类的equals方法的实现是由他掌握的。如果你需要使用equals方法，或者使用任何基于散列码的集合（HashSet,HashMap,HashTable），请察看一下java doc以确认这个类的equals逻辑是如何实现的。Java面试宝典中是这样解释的 ==操作符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。 如果一个变量指向的数据是对象类型的，那么，这时候涉及了两块内存，对象本身占用一块内存（堆内存），变量也占用一块内存，例如Objet obj = new Object();变量obj 是一个内存，new Object()是另一个内存，此时，变量obj 所对应的内存中存储的数值就是对象占用的那块内存的首地址。对于指向对象类型的变量，如果要比较两个变量是否指向同一个对象，即要看这两个变量所对应的内存中的数值是否相等，这时候就需要用==操作符进行比较。 equals 方法是用于比较两个独立对象的内容是否相同，就好比去比较两个人的长相是否相同，它比较的两个对象是独立的。例如，对于下面的代码：12String a=new String("foo");String b=new String("foo"); 两条new 语句创建了两个对象，然后用a,b 这两个变量分别指向了其中一个对象，这是两个不同的对象，它们的首地址是不同的，即a 和b 中存储的数值是不相同的，所以，表达式a==b 将返回false，而这两个对象中的内容是相同的，所以，表达式a.equals(b)将返回true。 在实际开发中， 我们经常要比较传递进行来的字符串内容是否等， 例如， String input= …;input.equals(“quit”)，许多人稍不注意就使用==进行比较了，这是错误的，随便从网上找几个项目实战的教学视频看看，里面就有大量这样的错误。记住，字符串的比较基本上都是使用equals 方法。 如果一个类没有自己定义equals 方法，那么它将继承Object 类的equals 方法，Object 类的equals方法的实现代码如下：123boolean equals(Object o)&#123; return this==o;&#125; 这说明，如果一个类没有自己定义equals 方法，它默认的equals 方法（从Object 类继承的）就是使用==操作符，也是在比较两个变量指向的对象是否是同一对象，这时候使用equals 和使用==会得到同样的结果，如果比较的是两个独立的对象则总返回false。如果你编写的类希望能够比较该类创建的两个实例对象的内容是否相同，那么你必须覆盖equals 方法，由你自己写代码来决定在什么情况即可认为两个对象的内容是相同的。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库索引原理理解]]></title>
    <url>%2F2016%2F07%2F06%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3%20%2F</url>
    <content type="text"><![CDATA[转自：http://blog.csdn.net/coolzyt/article/details/4085678数据库索引原理理解清明节一个人在家，已经混了一天了，想想还是写点什么吧。以前对数据库的理解总是停留在使用的阶段，没有去研究过深层次的东西，这两天正好有空（其实也是工作需要），看了一下数据库索引的一些基础的东西，希望通过这篇博文，整理一下自己的思路。1.什么是索引？我想这个用过数据库的人都应该知道了，索引类似于书的目录，主要用于提高查询效率，也就是按条件查询的时候，先查询索引，再通过索引找到相关的数据，索引相当于记录了对某个关键词，指定到不同的文件，或者文件里的不同位置，当然索引自身也是通过文件来保存的。2.索引的类型有两种基本的索引结构，也就是索引文件的保存方式，一个是顺序索引，就是根据值的顺序排序的（这个文件里面的值，也就是为其建索引的字段值，是顺序的放在索引文件里面），另外一个是散列索引，就是将值平均分配到若干散列桶中，通过散列函数定位的。2.1.顺序索引顺序索引下面又有很多概念。如果被索引的字段本身按照一定的顺序排序，那么这种索引叫做聚集索引。否则叫做非聚集索引。如果被索引的字段的每个值都有一个索引与其对应，那么这种索引叫做稠密索引，否则叫做稀疏索引。顺序索引分为两类，单级索引（不怎么用）和多级索引（通常是B+树，大量使用）。单级索引就是把所有的索引字段以及对应的文件位置按顺序一个个的排列出来，这种索引查找起来比较慢，因为是顺序存储的，可以使用二分查找法，但是总体来说效率不高，这种索引是最基础的索引，一般不用，ORACLE里面好像不支持这种索引。多级索引实际上就是在单级索引之上再加索引（稀疏索引），也就是指向索引的索引，二级索引上面还可以再加三级索引，可以不停的加，加到最后最上层只剩下一个节点（根节点），就成了一个树状结构了。我们经常听到B+树就是这个概念，用这个树的目的和红黑树差不多，也是为了尽量保持树的平衡，当然红黑树是二叉树，但B+树就不是二叉树了，节点下面可以有多个子节点，数据库开发商会设置子节点数的一个最大值，这个值不会太小，所以B+树一般来说比较矮胖，而红黑树就比较瘦高了。关于B+树的插入，删除，会涉及到一些算法以保持树的平衡，这里就不详述了。ORACLE的默认索引就是这种结构的。如果经常需要同时对两个字段进行AND查询,那么使用两个单独索引不如建立一个复合索引，因为两个单独索引通常数据库只能使用其中一个，而使用复合索引因为索引本身就对应到两个字段上的，效率会有很大提高。2.2 散列索引第二种索引叫做散列索引，就是通过散列函数来定位的一种索引，不过很少有单独使用散列索引的，反而是散列文件组织用的比较多。散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。散列索引呢就是根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多了，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高。2.3 位图索引位图索引是一种针对多个字段的简单查询设计一种特殊的索引，适用范围比较小，只适用于字段值固定并且值的种类很少的情况，比如性别，只能有男和女，或者级别，状态等等，并且只有在同时对多个这样的字段查询时才能体现出位图的优势。位图的基本思想就是对每一个条件都用0或者1来表示，如有5条记录，性别分别是男，女，男，男，女，那么如果使用位图索引就会建立两个位图，对应男的10110和对应女的01001,这样做有什么好处呢，就是如果同时对多个这种类型的字段进行and或or查询时，可以使用按位与和按位或来直接得到结果了。 总结：B+树最常用，性能也不差，用于范围查询和单值查询都可以。特别是范围查询，非得用B+树这种顺序的才可以了。HASH的如果只是对单值查询的话速度会比B+树快一点，但是ORACLE好像不支持HASH索引，只支持HASH表空间。位图的使用情况很局限，只有很少的情况才能用，一定要确定真正适合使用这种索引才用（值的类型很少并且需要复合查询），否则建立一大堆位图就一点意义都没有了。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java参数传递（值传递还是引用传递）]]></title>
    <url>%2F2016%2F07%2F05%2Fjava%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%EF%BC%88%E5%80%BC%E4%BC%A0%E9%80%92%E8%BF%98%E6%98%AF%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%EF%BC%89%20%2F</url>
    <content type="text"><![CDATA[java参数传递（值传递还是引用传递）http://6924918.blog.51cto.com/6914918/1283761]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《悲壮的两小时》的故事及质疑]]></title>
    <url>%2F2016%2F07%2F05%2F%E3%80%8A%E6%82%B2%E5%A3%AE%E7%9A%84%E4%B8%A4%E5%B0%8F%E6%97%B6%E3%80%8B%E7%9A%84%E6%95%85%E4%BA%8B%E5%8F%8A%E8%B4%A8%E7%96%91%2F</url>
    <content type="text"><![CDATA[故事概要： 1967年8月23日，前苏联的联盟一号宇宙飞船在返回大气层时，突然发生了恶性事故—减速速降落伞无法打开。前苏联中央领导研究后决定：向全国实况转播这次事故。当电视台的播音员用沉重的语调宣布，宇宙飞船两个小时后将坠毁，观众将目睹宇航员弗拉迪米·科马洛夫殉难的消息后，举国上下顿时被震撼了，人们沉浸在巨大的悲痛之中。在电视台上，观众看到了宇航员科马洛夫镇定自若的形象，他面带微笑地对母亲说：”妈妈，您的图像我在这里看得清清楚楚，包括您的头上的每根白发，您能看清我吗？””能，能看清楚。儿啊，妈妈一切都很好，你放心吧！”这时，科马洛夫的女儿也出现在电视屏幕上，她只有12岁。科马少夫说：”女儿，你不要哭。””我不哭……”女儿已泣不成声，但她强忍悲痛说：”爸爸，您是苏联英雄，我想告诉您，英雄的女儿会像英雄那样生活的！”科马洛夫叮嘱女儿说：”学习时，要认真对待每一个小数点。联盟一号今天发生的一切，就是因为地面检查时忽略了一个小数点……”时间一分一秒地过去，距离宇宙飞船坠毁只有7分钟了，科马洛夫向全国的电视观众挥挥手说：”同胞们，请允许我在这茫茫的太空中与你们告别。”这是一次惊心动魄的告别仪式。科马洛夫永远地走了，他留下了对亲人对祖国永恒的爱。但更震撼人心的是他对女儿说的那番话。它警示着人们：对待人生不能有丝毫的马虎，否则，即使是一个细枝末节，也会让你付出深重的甚至是永远无法弥补的代价. 质疑的文章： 你学过的中小学教材中最坑爹的课文是哪一篇？ https://www.zhihu.com/question/22674044 摘录如下： 1.《悲壮的两小时》入选到人民教育出版社新版的中学初中语文教材第五册的课文《悲壮的两小时》来自《读者》1995年第2期，原标题为《宇航员之死》。教材的编撰者在将其编入教材的时候，对文章作了删节并改动了标题。《悲》文叙述：1967年8月23日，前苏联著名宇航员弗拉迪米尔·科马洛夫在驾驶“联盟1号”宇宙飞船归航的过程中，当宇宙飞船返回大气层后，需要打开降落伞以减慢飞船速度时，科马洛夫突然发现降落伞出现故障无法打开了。科马洛夫将和“联盟1号”一起在着陆基地附近坠毁。苏联当局在此过程中对于这一情况做了实况直播，并请科马洛夫的家人在科马洛夫生命中的最后两个小时与他告别。《悲》文对科马洛夫这一英雄人物做了极为生动的描写，对于他在生命中的最后两个小时的心理活动刻画入木三分。在语文教学网络上，记者看到，对这篇文章的教学经验和心得可谓汗牛充栋，教学大纲要求学生们认真学习文章中科马洛夫的爱国和科学精神。这篇宣传英雄主义和爱国主义的文章初读起来令人热血沸腾，异常感动。包括《南方周末》、凤凰卫视等媒体也曾就此事组织过报道。但似乎谁也没有意识到这是一篇编纂痕迹浓重，存在诸多明显硬伤的课文。网友指责文章共存在5处硬伤：其一：弗拉基米尔·科马洛夫驾驶的“联盟1号”宇宙飞船是在莫斯科时间1967年4月23日凌晨3：35在拜科努尔发射场升空的，而非《悲》文中所说1967年8月23日。其二：联盟1号的飞行是冷战期间前苏联为了与美国竞争登月项目而进行的绝密行动，将要实验人类第一次飞船太空对接，为登月舱的返回对接进行初步探索，为保证苏联在太空的领先地位，这一行动的内情在当时实行了绝对保密。苏联当局对于“联盟1号”宇宙飞船坠毁事件根本不可能进行现场电视直播。其三：网友根据飞船返回大气层的速度（每秒7000米左右）进行了计算，得出飞船进入大气层后到达地面所需时间只有十几分钟而非《悲》文中所说的两个小时。其四：《悲》文说科马洛夫向领导的汇报持续了70分钟。而网友认为飞船与地面的联系是受地面接收站控制范围限制的。在这70分钟里，大部分时间飞船不在地面接收范围内，那时根本无法进行所谓的70分钟“汇报”。其五：《悲》文中有一个细节是科马洛夫和女儿对话，科马洛夫叮嘱女儿要好好学习，并且说到“‘联盟1号’今天发生的一切，就因为地面检查时，忽略了一个小数点，这场悲剧，也可以叫作对一个小数点的疏忽。”网友指出“像航天器这样的高科技产物，经历了无数精英头脑的缜密设计和实验，任何数据不知要计算多少遍，才能发射上天。无论什么地方发生了故障，绝不是短时间之内就能查出原因的。”为核实该网友文章的真实性，记者查阅了中国大百科全书出版社出版的《简明不列颠全书》，书中第700页确实有关于科马洛夫———这位“为人类宇航事业献身第一人”的条目，据《简明不列颠全书》记述：“联盟1号”宇宙飞船起飞的准确时间的确是莫斯科时间1967年4月23日凌晨3：35而非1967年8月23日。《简明不列颠百科全书》（又称《大英百科全书》）至今已有230年，其权威性有口皆碑、毋庸质疑。这本工具书也是我国知识界最常用最熟悉的百科全书。记者注意到，在这本在知识界享有权威的辞书中，关于“联盟1号”的叙述非常谨慎地使用了“据报道”的字眼，而在另一本带有很强专业色彩的著作《勇闯太空》（丹尼斯·纽柯克著，上海科学普及出版社2001年第一版）中，在第66页至71页用了6个页码的篇幅对于这一事件进行了比较详尽的叙述，其中包括当时美国利用卫星跟踪拍摄到的图片，实际情形跟《悲》文的叙述也大相径庭。同时，对这段历史较为了解的著名作家叶永烈也告诉记者，除了时间的错误之外，其他的错误其实只要稍据科学常识就可以发现。“我对这篇文章如何过五关斩六将地入选语文教材感到非常奇怪。”叶永烈说。种种证据表明，《悲壮的两小时》确实是一篇不切实际的编造文章，但是，记者在向人民教育出版社求证此篇文章如何进入语文教材时，被婉言谢绝。```]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>语文</tag>
        <tag>教材</tag>
        <tag>质疑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机中10个0.1相加不等于1的问题]]></title>
    <url>%2F2016%2F07%2F05%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD10%E4%B8%AA0.1%E7%9B%B8%E5%8A%A0%E4%B8%8D%E7%AD%89%E4%BA%8E1%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[浮点运算中避免使用等量判断的原则。具体的理由见下文。http://www.dengshenyu.com/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2016/04/11/float-number.html通常的做法，写一个Equals（）函数，两个相减，如果值小于给定的精度值，就返回相等。 处理摄入误差的问题。使用BigDecimal进行精确运算http://www.cnblogs.com/chenssy/archive/2012/09/09/2677279.html]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么要探索宇宙【转】]]></title>
    <url>%2F2016%2F07%2F04%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8E%A2%E7%B4%A2%E5%AE%87%E5%AE%99%E3%80%90%E8%BD%AC%E3%80%91%20%2F</url>
    <content type="text"><![CDATA[事情的起因是， 1970年，赞比亚修女 Mary Jucunda 给 Ernst Stuhlinger 博士写了一封信，他因在火星之旅工程中的原创性研究，成为 NASA（美国航空航天局）Marshall 太空航行中心的科学副总监。信中，Mary Jucunda 修女问道：目前地球上还有这么多小孩子吃不上饭，他怎么能舍得为远在火星的项目花费数十亿美元。Stuhlinger 很快给Jucunda 修女回了信，同时还附带了一张题为“升起的地球”的照片，这张标志性的照片是宇航员 William Anders 于1968年在月球轨道上拍摄的（照片中可以看到月球的地面）。他这封真挚的回信随后由 NASA 以《为什么要探索宇宙》为标题发表。亲爱的Mary Jucunda修女：每天，我都会收到很多类似的来信，但这封对我的触动最深，因为它来自一颗慈悲的饱含探求精神的心灵。我会尽自己所能来回答你这个问题。首先，请允许我向你以及你勇敢的姐妹们表达深深的敬意，你们献身于人类最崇高的事业：帮助身处困境的同胞。在来信中，你问我在目前地球上还有儿童由于饥饿面临死亡威胁的情况下，为什么还要花费数十亿美元来进行飞向火星的航行。我清楚你肯定不希望这样的答案：“哦，我之前不知道还有小孩子快饿死了，好吧，从现在开始，暂停所有的太空项目，直到孩子们都吃上饭再说。”事实上，早在人类的技术水平可以畅想火星之旅之前，我已经对儿童的饥荒问题有所了解。而且，同我很多朋友的看法一样，我认为此时此刻，我们就应该开始通往月球、火星乃至其他行星的伟大探险。从长远来看，相对于那些要么只有年复一年的辩论和争吵，要么连妥协之后也迟迟无法落实的各种援助计划来说，我甚至觉得探索太空的工程给更有助于解决人类目前所面临的种种危机。在详细说明我们的太空项目如何帮助解决地面上的危机之前，我想先简短讲一个真实的故事。那是在400年前，德国某小镇里有一位伯爵。他是个心地善良的人，他将自己收入的一大部分捐给了镇子上的穷人。这十分令人钦佩，因为中世纪时穷人很多，而且那时经常爆发席卷全国的瘟疫。一天，伯爵碰到了一个奇怪的人，他家中有一个工作台和一个小实验室，他白天卖力工作，每天晚上的几小时的时间专心进行研究。他把小玻璃片研磨成镜片，然后把研磨好的镜片装到镜筒里，用此来观察细小的物件。伯爵被这个前所未见的可以把东西放大观察的小发明迷住了。他邀请这个怪人住到了他的城堡里，作为伯爵的门客，此后他可以专心投入所有的时间来研究这些光学器件。然而，镇子上的人得知伯爵在这么一个怪人和他那些无用的玩意儿上花费金钱之后，都很生气。“我们还在受瘟疫的苦，”他们抱怨道，“而他却为那个闲人和他没用的爱好乱花钱！”伯爵听到后不为所动。“我会尽可能地接济大家，”他表示，“但我会继续资助这个人和他的工作，我确信终有一天会有回报。”果不其然，他的工作（以及同时期其他人的努力）赢来了丰厚的回报：显微镜。显微镜的发明给医学带来了前所未有的发展，由此展开的研究及其成果，消除了世界上大部分地区肆虐的瘟疫和其他一些传染性疾病。伯爵为支持这项研究发明所花费的金钱，其最终结果大大减轻了人类所遭受的苦难，这回报远远超过单纯将这些钱用来救济那些遭受瘟疫的人。我们目前面临类似的问题。美国总统的年度预算共有2000亿美元，这些钱将用于医疗、教育、福利、城市建设、高速公路、交通运输、海外援助、国防、环保、科技、农业以及其他多项国内外的工程。今年，预算中的1.6%将用于探索宇宙，这些花销将用于阿波罗以计划、其他一些涵盖了天体物理学、深空天文学、空间生物学、行星探测工程、地球资源工程的小项目以及空间工程技术。为担负这些太空项目的支出，平均每个年收入10,000美元的美国纳税人需要支付约30美元给太空，剩下的9,970美元则可用于一般生活开支、休闲娱乐、储蓄、别的税项等花销。也许你会问：“为什么不从纳税人为太空支付的30美元里抽出5美元或3美元或是1美元来救济饥饿的儿童呢？”为了回答这个问题，我需要先简单解释一下我们国家的经济是如何运行的，其他国家也是类似的情形。政府由几个部门（如内政部、司法部、卫生部与公众福利部、教育部、运输部、国防部等）和几个机构（国家科学基金会、国家航空航天局等）组成，这些部门和机构根据自己的职能制定相应的年度预算，并严格执行以应对国务委员会的监督，同时还要应付来自预算部门和总统对于其经济效益的压力。当资金最终由国会拨出后，将严格用于经预算批准的计划中的项目。显然，NASA的预算中所包含的项目都是和航空航天有关的。未经国会批准的预算项目，是不会得到资金支持的，自然也不会被课税，除非有其他部门的预算涵盖了该项目，借此花掉没有分配给太空项目的资金。由这段简短的说明可以看出，要想援助饥饿的儿童，或在美国已有的对外援助项目上增加援助金额，需要首先由相关部门提出预算，然后由国会批准才行。要问是否同意政府实施类似的政策，我个人的意见是绝对赞成。我完全不介意每年多付出一点点税款来帮助饥饿的儿童，无论他们身在何处。我相信我的朋友们也会持相同的态度。然而，事情并不是仅靠把去往火星航行的计划取消就能轻易实现的。相对的，我甚至认为可以通过太空项目，来为缓解乃至最终解决地球上的贫穷和饥饿问题作出贡献。解决饥饿问题的关键有两部分：食物的生产和食物的发放。食物的生产所涉及的农业、畜牧业、渔业及其他大规模生产活动在世界上的一些地区高效高产，而在有的地区则产量严重不足。通过高科技手段，如灌溉管理，肥料的使用，天气预报，产量评估，程序化种植，农田优选，作物的习性与耕作时间选择，农作物调查及收割计划，可以显著提高土地的生产效率。人造地球卫星无疑是改进这两个关键问题最有力的工具。在远离地面的运行轨道上，卫星能够在很短的时间里扫描大片的陆地，可以同时观察计算农作物生长所需要的多项指标，土壤、旱情、雨雪天气等等，并且可以将这些信息广播至地面接收站以便做进一步处理。事实证明，配备有土地资源传感器及相应的农业程序的人造卫星系统，即便是最简单的型号，也能给农作物的年产量带来数以十亿美元计的提升。如何将食品发放给需要的人则是另外一个全新的问题，关键不在于轮船的容量，而在于国际间的合作。小国统治者对于来自大国的大量食品的输入会感到很困扰，他们害怕伴随着食物一同而来的还有外国势力对其统治地位的影响。恐怕在国与国之间消除隔阂之前，饥饿问题无法得以高效解决了。我不认为太空计划能一夜之间创造奇迹，然而，探索宇宙有助于促使问题向着良好的方向发展。以最近发生的阿波罗13号事故为例。当宇航员处于关键的大气层再入期时，为了保证通讯畅通，苏联关闭了境内与阿波罗飞船所用频带相同的所有广播通信。同时派出舰艇到太平洋和大西洋海域以备第一时间进行搜救工作。如果宇航员的救生舱降落到俄方舰船附近，俄方人员会像对待从太空返回的本国宇航员一样对他们进行救助。同样，如果俄方的宇宙飞船遇到了类似的紧急情况，美国也一定会毫不犹豫地提供援助。通过卫星进行监测与分析来提高食品产量，以及通过改善国际关系提高食品发放的效率，只是通过太空项目提高人类生活质量的两个方面。下面我想介绍另外两个重要作用：促进科学技术的发展和提高一代人的科学素养。登月工程需要历史上前所未有的高精度和高可靠性。面对如此严苛的要求，我们要寻找新材料，新方法；开发出更好的工程系统；用更可靠的制作流程；让仪器的工作寿命更长久；甚至需要探索全新的自然规律。这些为登月发明的新技术同样可以用于地面上的工程项目。每年，都有大概一千项从太空项目中发展出来的新技术被用于日常生活中，这些技术打造出更好的厨房用具和农场设备，更好的缝纫机和收音机，更好的轮船和飞机，更精确的天气预报和风暴预警，更好的通讯设施，更好的医疗设备，乃至更好的日常小工具。你可能会问，为什么先设计出宇航员登月舱的维生系统，而不是先为心脏病患者造出远程体征监测设备呢。答案很简单：解决工程问题时，重要的技术突破往往并不是按部就班直接得到的，而是来自能够激发出强大创新精神，能够燃起的想象力和坚定的行动力，以及能够整合好所有资源的充满挑战的目标。太空旅行无可置疑地是一项充满挑战的事业。通往火星的航行并不能直接提供食物解决饥荒问题。然而，它所带来大量的新技术和新方法可以用在火星项目之外，这将产生数倍于原始花费的收益。若希望人类生活得越来越好，除了需要新的技术，我们还需要基础科学不断有新的进展。包括物理学和化学，生物学和生理学，特别是医学，用来照看人类的健康，应对饥饿、疾病、食物和水的污染以及环境污染等问题。我们需要更多的年轻人投入到科学事业中来，我们需要给予那些投身科研事业的有天分的科学家更多的帮助。随时要有富于挑战的研究项目，同时要保证对项目给予充分的资源支持。在此我要重申，太空项目是科技进步的催化剂，它为学术研究工作提供了绝佳和实践机会，包括对月球和其他行星的研究、物理学和天文学、生物学和医学科学等学科，有它，科学界源源不断出现令人激动不已研究课题，人类得以窥见宇宙无比瑰丽的景象；为了它，新技术新方法不断涌现。由美国政府控制并提供资金支持的所有活动中，太空项目无疑最引人瞩目也最容易引起争议，尽管其仅占全部预算的1.6%，不到全民生产总值的千分之三。作为新技术的驱动者和催化剂，太空项目开展了多项基础科学的研究，它的地位注定不同于其他活动。从某种意义上来说，以太空项目的对社会的影响，其地位相当于3-4千年前的战争活动。如果国家之间不再比拼轰炸机和远程导弹，取而代之比拼月球飞船的性能，那将避免多少战乱之苦！聪慧的胜利者将满怀希望，失败者也不用饱尝痛苦，不再埋下仇恨的种子，不再带来复仇的战争。尽管我们开展的太空项目研究的东西离地球很遥远，已经将人类的视野延伸至月亮、至太阳、至星球、直至那遥远的星辰，但天文学家对地球的关注，超过以上所有天外之物。太空项目带来的不仅有那些新技术所提供的生活品质的提升，随着对宇宙研究的深入，我们对地球，对生命，对人类自身的感激之情将越深。太空探索让地球更美好。 随信一块寄出的这张照片，是1968年圣诞节那天阿波罗8号在环月球轨道上拍摄的地球的景象。太空项目所能带来的各种结果中，这张照片也许是其中最可贵的一项。它开阔了人类的视野，让我们如此直观地感受到地球是广阔无垠的宇宙中如此美丽而又珍贵。的孤岛，同时让我们认识到地球是我们唯一的家园，离开地球就是荒芜阴冷的外太空。无论在此之前人们对地球的了解是多么的有限，对于破坏生态平衡的严重后果的认识是多么的不充分。在这张照片公开发表之后，面对人类目前所面临的种种严峻形势，如环境污染、饥饿、贫穷、过度城市化、粮食问题、水资源问题、人口问题等等，号召大家正视这些严重问题的呼声越来越多。人们突然表示出对自身问题的关注，不能说和目前正在进行的这些初期太空探索项目，以及它所带来的对于人类自身家园的全新视角无关。太空探索不仅仅给人类提供一面审视自己的镜子，它还能给我们带来全新的技术，全新的挑战和进取精神，以及面对严峻现实问题时依然乐观自信的心态。我相信，人类从宇宙中学到的，充分印证了Albert Schweitzer那句名言：“我忧心忡忡地看待未来，但仍满怀美好的希望。”向您和您的孩子们致以我最真挚的敬意！您诚挚的，恩斯特·史都林格科学副总监]]></content>
      <categories>
        <category>文史数理</category>
      </categories>
      <tags>
        <tag>宇宙</tag>
        <tag>修女</tag>
        <tag>探索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重建还是重构？【转】]]></title>
    <url>%2F2016%2F07%2F04%2F%E9%87%8D%E5%BB%BA%E8%BF%98%E6%98%AF%E9%87%8D%E6%9E%84%EF%BC%9F%E3%80%90%E8%BD%AC%E3%80%91%2F</url>
    <content type="text"><![CDATA[重建还是重构？ 作者 Ben Linders ，译者 覃璐 发布于 2015年12月3日在 Agile Testing Days 2015大会上， Wouter Lagerweij谈到了如何重建一个遗留系统而不是重构它，来帮助团队采取敏捷实践，比如测试驱动开发，自动化测试，持续交付。他的谈话基于他的博客文章 Don’t Refactor. Rebuild. Kinda。 InfoQ采访了 Lagerweij关于是什么让重构如此困难，重建软件的风险是否比重构小，以及持续交付如何配合软件的重建。InfoQ同时请教了他关于重建和重构的建议。 InfoQ：您能解释一下是什么使得重构这么困难吗？ Lagerweij：只要你去做，重构是一项相当简单的实践。同样的例子是单元测试。只要你坚持为代码编写测试用例，或者清理代码中的设计问题，一小步一小步的，这并不困难。可是你越是把这些丢在一边，捡起来的时候就越困难。这就是为什么每个人都一直说“技术债务”。可是实际上它通常不是指 Ward Cunningham所创造的技术债务（参见 Ward Explains Debt Metaphor）。 软件行业并不是唯一发生这些事情的地方。只是询问一些活跃在医疗保健行业的专业医师。了解到外科医生坚持在手术前洗手能降低一半的手术并发症，但是即使有积极的宣传和结构化的清单，它依然很难被遵守。 所以，由于一些团队推迟重构，我们有一些混乱，或者说“遗留代码库”。由于这些团队几乎总是没有足够的重构经验（否则他们已经这样做了），他们无疑不能完成修复这些混乱代码的工作。 此时这些团队认识到他们应该为他们的“债务”做些事情，他们不得不接受一个系统，在其中努力学习用以提升自己系统的技能！当小的改动在系统的不同部位导致不可预知的结果时，是对重构中积极的学习经历不利的。而且任何开发人员都知道为封闭的，紧耦合的系统添加单元测试是一个困难和不愉快的经历。 我想我要说的是，如果你等到遇到这些麻烦才开始学习这些技能，很可能你将不会成功的应用它们。也就是说，在掌握它们之前，你更可能会先放弃它们。 InfoQ：在您看来重建软件比重构的风险更小？您能解释一下吗? Lagerweij：说实话，如果你的团队成员知道如何去改进一个遗留系统，重构始终是更好的选择。它的风险更小，并且比任何类型的重写的开销要少。 但是不幸的是这些技能仍然非常稀少。如果团队中的成员之前没有做过这类工作，之后你的所有工作都会慢于预期。你会在开发团队和公司中增加挫败感。 有一些组织发现自己陷入了困境。他们简直没有专业人员来解决他们的技术问题。他们不能构造有竞争力的新功能。甚至找到几个有经验的人也很难，常常是“太小，太迟”的情况。 这种情况下重写是更有吸引力的。 InfoQ：您能给出一些例子来展示团队如何来重建软件以及做持续交付吗？是什么让它们成为一个好的组合？ Lagerweij：重写的一个好处是你能重新开始。这意味着这次你能确保你这样做是正确的。当然，大多数时候，你不能。就像我之前说的，处理这些事情最好的方式，例如测试和重构，就是持续不断的做。但是如果你之前从来没有做好过，它怎么会突然就能工作？ 我在谈话中说过的，我们已经在我当前工作的团队试过。我们使用测试驱动开发（也叫做行为驱动开发），我们会保持代码的整洁，确保始终有100%的单元测试覆盖率。他们不再害怕他们的遗留系统，他们知道他们能够做到这一点。 我们也同意，确保我们不会受到放松控制的诱惑，我们从第一天起就做到完全的持续部署。这意味着开发者每次推送代码到 GitHub中时，它会自动构建，测试并部署一直到生产。这使得我们任何时候都能极好的关注在保持高质量上。你不能推迟那些测试，因为推送未测试的代码会破坏构建，使得整个团队等着你。但是你也不想跳过测试（或者写一个未检查的单元测试只是为了糊弄覆盖率），因为你实际上可能破坏生产。你自己，很明显。 还有一些简单的心理作用，没有人真正关心什么让测试覆盖率从2.1%到2.0%，但是当它从100%掉到99.9%时，整个团队会要求一个解释。 你仍然需要经历一个学习过程。重新开始并不会让你突然做的更好。它只是创造一个更大成功率的机会。 InfoQ：对于正在考虑用重建软件代替重构的团队，您有什么建议？ Lagerweij：首先，在发布之前不要尝试和重建任何东西。找到一种方式将新系统和老系统融合，并尽快为你的新系统的用户提供价值。有些东西比如 strangler pattern或 branch by abstractio能帮助你。如果你不这样做，你的项目要么在某个时候被取消，要么永远继续下去，但无疑不会有好的结果。 其次，停止糊弄自己。使用一个严格要求规定的工具，比如持续部署，会感觉在项目的表明需求上增加了额外的负担，但是这个规定会帮助你避免陷入和之前同样的陷阱，写出一个完全的新的遗留系统。它会促使你学习新技能，例如持续重构，如何测试驱动你的代码，有多少种不同类型的测试需要被掌握，如何自动化部署，如何处理监控和错误处理。所有的这些都是和到生产的途径变得短和直接紧密相关的。 最后，可能是最重要的，涉及到客户！尽管比通常的要多，重写的诱惑是得到“和老系统做同样的事”的响应，而不是因为客户交流有任何进一步的需要。但是我们需要知道客户现在需要什么。我们也需要知道他不再需要什么。我们都熟悉80/20法则关于被使用的功能。你看，重构不仅仅只是发生在代码层面，审查你的需求，业务流程甚至是商业模式都是同样的重要。 当然，它仍然会有大量的工作要做，但是如果你坚持这些原则，一旦你做到了，你会得到干净的代码，一个学习型团队，和高兴的客户。]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>信息系统</tag>
        <tag>重建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[下次老板让你重构系统，让他看看这篇文章【转】]]></title>
    <url>%2F2016%2F07%2F04%2F%E4%B8%8B%E6%AC%A1%E8%80%81%E6%9D%BF%E8%AE%A9%E4%BD%A0%E9%87%8D%E6%9E%84%E7%B3%BB%E7%BB%9F%EF%BC%8C%E8%AE%A9%E4%BB%96%E7%9C%8B%E7%9C%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E3%80%90%E8%BD%AC%E3%80%91%2F</url>
    <content type="text"><![CDATA[重建系统的有道理的一篇文章。 下次老板让你重构系统，让他看看这篇文章 上个月，有个以前的同事问我：“你在的时候，为什么不把原来的系统都重做了，我们明明有实力啊”。 我说：“我们也做了很多事情嘛，系统稳定性、安全性、增加冗余、理清各模块职责、API通讯机制的建立、内部分层的整理。” 他说：“对，但我还是想知道，你为什么不把系统重做了呢？” 于是我问：“我离职之后，后来似乎多投了不少人重做系统？结果怎么样呢？” 他说：“结果，结果就是做业务要同时操作三四套系统……” 就我所见，把原有系统“推倒重来”的喜好不只程序员有，使用者更有。拿我几年前的那份工作来说，刚入职老大们就来跟我讨论系统重做的打算：需要多少人，多少钱，多长时间，能把原有系统推翻重来。毕竟大家每天都忍受切肤之痛：速度慢、经常出错、不安全、客户抱怨、架构糟糕…… 所以都想拿出“敢叫日月换新天”的劲头，来个干脆的彻底解决。 这种心情可以理解，但在我任内“重做系统”一直没有被提上日程，整个技术团队所做的都是“改良”的工作，内容就像我上面说的：系统稳定性、安全性、增加冗余、理清各模块职责、API通讯机制的建立、内部分层的整理。这个选择我有充分把握，而且在我看来，如果断然“推倒重来”，我未必能比继任者做得更好，甚至可能更糟糕，因为“推倒重来”绝不是那么简单的事情。 众所周知，软件开发的难点之一就是控制复杂度。但是在不同的领域，复杂度有不同的表现。对于纯互联网业务，或者IT基础架构来说，其复杂度在于软件本身，架构的制定、类库的选择、编码的质量等等。对于其它IT系统——尤其是公司迅速成长，业务不断复杂化的IT系统——而言，其复杂度并不在于软件本身，安全、性能、负载的问题都套用现成的IT解决方案，真正的复杂度来自系统承载的业务本身，比如最简单的：系统里有哪些单据，各种单据承载什么信息，用在什么场景，这些单据是怎样流转的，各种单据存在怎样的约束关系，出现异常情况应当如何处理才能保证业务数据的一致性……这些问题没有准确而稳定的答案，IT再怎样努力也是白搭。 对于已经能在线下规范运行的业务，或者是有经典解决方案的工作（比如财务、仓库管理），这些知识都是现成的，可以直接拿来用。但对于新兴领域、新兴业务来说，往往不存在“经典解决方案”。加上很多公司成长速度飞快，一开始并没有构筑好的IT基础（其实是业务架构基础）。典型的情况就是：业务概念混乱不清，业务逻辑层也是杂乱无章，很多系统里干脆把数据库当作业务逻辑层（这可不是说笑，因为数据库无法推脱责任了）。结果，混乱的业务逻辑依附于糟糕的IT系统，乱上加乱最终成了一锅粥。对IT来说，已有业务的问题层出不穷，每次出问题都需要花费大量精力，寻找蛛丝马迹来“破案”；对业务来说，新增业务往往会影响到原有业务，但谁也不知道会不会影响，会如何影响。系统日渐庞大的另一面是内部日趋无序，复杂度和维护成本飞速增长，远远超过可控范围。 吊诡的是，许多人的解决办法不是针对问题的根本原因，评估业务复杂度、整理业务逻辑、整理业务关系，反而认为“推倒重来”、新做一套系统就能解决。持这种观点的人，通常对系统与业务的关系也有误解。 对希望“推倒重来”的人来说，系统和业务的关系，有点像车辆对人员：一辆车我开了一段时间觉得不好，就想换一辆车来开，这是很自然的。但是在信息化深入工作各个角落的今天，系统和业务的关系远不是“车辆对人员”那么疏远，而更像“心脏起搏器对人”，或者“人造骨骼与肌肉”的关系，已经如胶似漆缠在了一起，系统对业务的支持越多越广（暂时不论质量），双方纠缠得也就越紧密。更换心脏起搏器或者人造骨骼的难度，远远比换车的难度要大，所以需要慎重考虑，不能单纯因为心脏起搏器“不那么好”就轻率决定更换。对系统来说，也是如此。 如果要对基础不好的遗留系统做脱胎换骨的改造，我有几点经验可以参考： 第一，一定要有非常优秀的业务人员和开发人员。 对业务人员来说，不但要熟悉自己手头的操作，还必须明白操作背后的逻辑，并且需要超越本职工作，能从全局角度来思考自己的业务（有时甚至要让自己操作更复杂，来提高系统安全性等收益），这样才能真正把握住业务的复杂度。对开发人员来说，要能够完整理解领域知识，同时必须有高超的编程能力来应对遗留代码，敢于出手而不是畏缩不前，谨慎出手而不是贸然行动——如果原有系统开发人员的技术能力可以打30分，全新开发系统的技术要求是60分，那么要成功改造遗留系统的技术人员，往往需要有80以上的分数才能胜任。 第二，“推倒重来”往往不如“逐步改良”。 所谓“逐步改良”，指的是大家先通过讨论确认未来系统的设计蓝图，然后需要开发用于过渡的接口层。于是，新开发的模块一定要严格按照新的规范开发（这也就是我说的“理清各模块职责、API通讯机制的建立、内部分层的整理”），同时通过过渡的接口层与原有系统对接，原有的模块则在理清业务逻辑的情况下，按需切出合适的接口，逐部分在测试通过的情况下进行迁移。最终新的系统是像拼图一样慢慢拼出来到最后一天才成型的，而不是平底盖楼造起来的。在这个过程中，最关键的是找到合适的切入点，搭建出合适的接口或者接口层。这些工作就像盖房子的脚手架，哪怕之后不会用到，中途也不能省略，还必须仔细对待。当然，这是一个考验人的工作——我曾经遇到过数据库事务里跨库连表的查询，这个糟糕的设计严重阻碍了单数据库实例拆分成多实例的进展，回想起来真是如噩梦一般。 如果你对改造遗留系统有自己的见解，或者在这个过程中有什么有意思的经历，欢迎留言给我。 最后推荐一本有意思的书。其实不管是软件开发还是社会变革，对于不喜欢的现状，大家往往喜欢来个“干脆”、“彻底”的解决方案，但真正成功的往往不是这些方案。在第二次世界大战结束时，世界上到底发生了哪些事情，遇到了哪些问题，又是怎样重建社会秩序的呢？广西师大《理想国》丛书第9册《零年：1945现代世界诞生的时刻》，用翔实的文笔全面记录了“终战”之后的情景，许多画面相信会让读者大吃一惊——很多时候“文明”堪称被打回原形，“零年”这个名字可谓名副其实。]]></content>
      <categories>
        <category>管理相关</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>老板</tag>
        <tag>信息系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于什么是句柄(handle)【转】]]></title>
    <url>%2F2016%2F07%2F04%2F%E5%85%B3%E4%BA%8E%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%A5%E6%9F%84(handle)%E3%80%90%E8%BD%AC%E3%80%91%2F</url>
    <content type="text"><![CDATA[关于什么是句柄（经典） http://www.cnblogs.com/yellowyu/archive/2009/06/07/1497910.html]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java陷阱之assert关键字【转】]]></title>
    <url>%2F2016%2F06%2F28%2FJava%E9%99%B7%E9%98%B1%E4%B9%8Bassert%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%90%E8%BD%AC%E3%80%91%2F</url>
    <content type="text"><![CDATA[Java陷阱之assert关键字 一、概述 在C和C++语言中都有assert关键，表示断言。在Java中，同样也有assert关键字，表示断言，用法和含义都差不多。 二、语法在Java中，assert关键字是从JAVA SE 1.4 引入的，为了避免和老版本的Java代码中使用了assert关键字导致错误，Java在执行的时候默认是不启动断言检查的（这个时候，所有的断言语句都将忽略！），如果要开启断言检查，则需要用开关-enableassertions或-ea来开启。 assert关键字语法很简单，有两种用法： 1、assert 如果为true，则程序继续执行。如果为false，则程序抛出AssertionError，并终止执行。 2、assert : &lt;错误信息表达式&gt;如果为true，则程序继续执行。如果为false，则程序抛出java.lang.AssertionError，并输入&lt;错误信息表达式&gt;。 三、应用实例 下面给出一个例子，通过例子说明其用法：12345678910111213public class AssertFoo &#123; public static void main(String args[]) &#123; //断言1结果为true，则继续往下执行 assert true; System.out.println("断言1没有问题，Go！"); System.out.println("\n-----------------\n"); //断言2结果为false,程序终止 assert false : "断言失败，此表达式的信息将会在抛出异常的时候输出！"; System.out.println("断言2没有问题，Go！"); &#125;&#125; 保存代码到C:\AssertFoo.java，然后按照下面的方式执行，查看控制台输出结果： 1、编译程序：1C:\&gt;javac AssertFoo.java 2、默认执行程序，没有开启-ea开关：1C:\&gt;java AssertFoo 断言1没有问题，Go！ 断言2没有问题，Go！ 3、开启-ea开关，执行程序：1C:\&gt;java -ea AssertFoo 断言1没有问题，Go！ Exception in thread “main” java.lang.AssertionError: 断言失败，此表达式的信息将会在抛出异常的时候输出！ at AssertFoo.main(AssertFoo.java:10) 四、陷阱 assert关键字用法简单，但是使用assert往往会让你陷入越来越深的陷阱中。应避免使用。笔者经过研究，总结了以下原因： 1、assert关键字需要在运行时候显式开启才能生效，否则你的断言就没有任何意义。而现在主流的Java IDE工具默认都没有开启-ea断言检查功能。这就意味着你如果使用IDE工具编码，调试运行时候会有一定的麻烦。并且，对于Java Web应用，程序代码都是部署在容器里面，你没法直接去控制程序的运行，如果一定要开启-ea的开关，则需要更改Web容器的运行配置参数。这对程序的移植和部署都带来很大的不便。 2、用assert代替if是陷阱之二。assert的判断和if语句差不多，但两者的作用有着本质的区别：assert关键字本意上是为测试调试程序时使用的，但如果不小心用assert来控制了程序的业务流程，那在测试调试结束后去掉assert关键字就意味着修改了程序的正常的逻辑。 3、assert断言失败将面临程序的退出。这在一个生产环境下的应用是绝不能容忍的。一般都是通过异常处理来解决程序中潜在的错误。但是使用断言就很危险，一旦失败系统就挂了。 五、对assert的思考 assert既然是为了调试测试程序用，不在正式生产环境下用，那应该考虑更好的测试JUint来代替其做用，JUint相对assert关键的所提供的功能是有过之而无不及。当然完全可以通过IDE debug来进行调试测试。在此看来，assert的前途一片昏暗。 因此，应当避免在Java中使用assert关键字，除非哪一天Java默认支持开启-ea的开关，这时候可以考虑。对比一下，assert能给你带来多少好处，多少麻烦，这是我们选择是否使用的的原则。 以上仅仅代表我个人观点，欢迎大家留言讨论。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Compile、Make和Build的区别]]></title>
    <url>%2F2016%2F06%2F24%2FCompile%E3%80%81Make%E5%92%8CBuild%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Compile、Make和Build的区别 针对Java的开发工具，一般都有Compile、Make和Build三个菜单项，完成的功能的都差不多，但是又有区别。 编译，是将源代码转换为可执行代码的过程。编译需要指定源文件和编译输出的文件路径（输出目录）。Java的编译会将java编译为class文件，将非java的文件（一般成为资源文件、比如图片、xml、txt、poperties等文件）原封不动的复制到编译输出目录，并保持源文件夹的目录层次关系。 在Java的集成开发环境中，比如Eclipse、IDEA中，有常常有三种与编译相关的选项Compile、Make、Build三个选项。这三个选项最基本的功能都是完成编译过程。但又有很大的区别，区别如下：1、Compile：只编译选定的目标，不管之前是否已经编译过。 2、Make：编译选定的目标，但是Make只编译上次编译变化过的文件，减少重复劳动，节省时间。（具体怎么检查未变化，这个就不用考虑了，IDE自己内部会搞定这些的） 3、Build：是对整个工程进行彻底的重新编译，而不管是否已经编译过。Build过程往往会生成发布包，这个具体要看对IDE的配置了，Build在实际中应用很少，因为开发时候基本上不用，发布生产时候一般都用ANT等工具来发布。Build因为要全部编译，还要执行打包等额外工作，因此时间较长。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Google软件测试之道》读后感]]></title>
    <url>%2F2016%2F06%2F24%2F%E3%80%8AGoogle%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[一本关于测试传道授业解惑方面的书，书中阐述了Google主要采取的测试模型（ACC等）、自动化测试、探索式测试（Exploratory Testing）等方面，同时也讲述了Google在测试组织方面的进化及各岗位的职责分工及协作。经过努力，Google的测试部门已经从原先的测试服务部门进化为工程生产力部门（Engineering Productivity)。从本书能感觉到Google是把自动化测试、开发测试工具提高效率作为测试的首要任务。提高开发和测试的生产力是测试最为关注的问题，所以Google入职的测试员工在技术方面的能力是丝毫不亚于相关的开发人员。测试要在组织中持续灌输质量是全员负责的概念，在开发阶段就必须做好相关的单元测试，通过每日构建，能把问题提前发现、及时处理，不把有问题的代码带到代码库。为了支持这些，Google测试工程师在基础设施、测试框架（包括单元测试框架、自动化测试框架等）的设计、开发投入非常大的精力，主要目的就是方便开发同事能在测试框架内方便的进行相关测试、问题定位和修复。所以，在Google，产品进入手工测试的阶段的时候，大部分的单元测试、集成测试，甚至端到端的系统测试都已经处理完毕，在手工测试阶段更多的是进行一些探索性测试，发挥人的主观能动性。按照Google的经验值，测试的成本遵守70-20-10的原则，单元测试占70%，集成测试占20%，系统测试占10%。书中也提到了Google在测试分析、计划、编写测试用例、执行等方面的管理。Google采用的ACC矩阵表模型，能把测试需要关注的特质（A:Attribute）、组件（C:Component）、能力（C:Capability）三方面在一个矩阵中体现，相关的测试用例、风险分析也能整合在一起，方便了测试的过程管理，避免了目前测试计划对实际工作没有任何指导意义的弊病。 Google在测试工具方面的开发，包括BITE（Browser Integrated Test Environment）、QualityBot，BITE是Chrome的一个扩展，使工程师的注意力集中在实实在在的探索式测试和回归测试上，而不是流程和技术细节。它把测试、用例管理、BUG提交、BUG跟踪、录制/回访等功能整合在一起，避免了测试人员不断在应用和Bug管理平台之间切换的问题。质量机器人（QualityBot）能自动比较网页在不同Chrome版本之间显示和渲染的区别，能区别到像素层面，这样方便测试人员在Chrome版本升级的时候，快速发现对相关网页的影响。本书一个比较特别的地方就是，书中大量采用了对Google各层面员工的采访，在增加趣味性的同时，也使本书的结构显得有点凌乱。 参考资料12测试建模 Google ACC http://www.cnblogs.com/liangshi/archive/2012/04/23/2465897.htmlMake 命令教程 http://www.ruanyifeng.com/blog/2015/02/make.html 文章摘录 测试需要思考：如何在制约质量和快速发布之间寻找平衡。 变更Google测试的首要问题是重新定位身为测试人员的意义所在。…一个团队能编写出高质量软件的唯一途径就是全体成员共同对质量负责。 维持现状的惯性导致任何变革都变得非常困难。 这里是Google，如果你有想法，尽管去做就是。 把测试和开发割裂开来，看成两个单独的环节，甚至是两类截然不同的问题，这种做法是错误的，沿着这条路走下去意味着什么问题也解决不了。 Google是一家以创新和速度为基础的公司。 测试团队更像是小而精的特种部队，我们依靠的是出色的战术和高级武器。 质量不是被测试出来的—-这句话看似陈词滥调的话却包含一定的道理。 质量更像是一种预防行为，而不是检测。质量是开发过程的问题，而不是测试问题。我们已经成功的将测试实践融入为开发过程的一部分，并创建了一个增量上线的流程。如果一些项目在线上被证实的确是Bug重重，它将会被回滚到之前的版本。在确保不出现回滚级别Bug发生的前提下，预防了许多客户问题的同时，也很大程度降低了专职测试人员的数量。在Google，测试的目标就是来判断这种预防工作做的怎么样。 解铃还须系铃人：You build it,you break it. 这种测试人员在不同项目之间的借调模式，….另外还能保证一个好的测试想法可以快速在公司内部蔓延。 Google经常在最初的版本中只包含最基本的可用功能，然后后续快速迭代过程中得到内部和外部用户的反馈，而且每次迭代过程当中都非常注重质量。一个产品在发布给用户使用之前，一定要经理金丝雀版本、开发版本、测试版本、Beta版或正式版本。 小型测试涵盖单一的代码段，一般运行在完全虚假实现（Fake）的环境里。中型测试涵盖多个模块且重点关注在模块之间的交互上，一般运行在虚假实现环境或真实环境中。大型测试涵盖任意多个模块，一般运行在真实的环境中，并使用真正的用户数据和资源。 分别对应单元测试、集成测试、系统测试。 打包是一个过程，包括将源代码编译成二进制文件，然后把二进制文件统一封装在一个包里面。-为了保证单独的服务可以并行的开发，服务之间的接口需要在项目早期就要定下来。这样，开发者会依赖在协商好的接口上，而不是需要依赖在特定开发的库上。为了不影响服务级别之间的测试，这些接口早期一般做一个虚假的实现。 审阅设计文档的时候应该有一定的目的性：完整性、正确性、一致性、设计、接口与协议、测试。 可以做代码编译、测试执行、数据存储、报表展示的通用测试框架。Google工程师专注于测试程序的编写，运行的细节留给通用基础执行框架。 与其询问他们一个关于某个模糊概念的看法，不如拿一个明确的结论来引起大家的争论。通常来说，都是排除容易下定义难。 Bug的分级：P0 -Must have： 如果缺失，产品不能发布P1 -Should have： 如果缺失，产品能发布，但不能达到预定目标（功能/性能）P2 -Nice to have： 做了则更好P3 -Neutral： 对产品没有明显的好处，用户不在意 那些能反驳或者质疑规格说明书的人，往往在工作中有优异的表现。 Google管理的核心是领导力、洞察力、协商、外部沟通能力、技术水平、战略规划、招聘和面试、完成团队绩效考核。 在Google，我们关注可衡量指标，达到70%，意味着你制定了比较高的目标，然后努力工作去实现它。达到100%，意味着你可能在设定目标的时候不够有进取心。 我把自己变成用户，就这么简单。我认为，除非能以某种方式将自己置于用户的视角，否则就不可能真正有效的对一个应用进行测试。 测试的成本遵守70-20-10的原则，单元测试占70%，集成测试占20%，系统测试占10% 所以经验就是靠解决一些难题来赢得尊重。 我还是坚信只应该关注最重要的事情。 很多年轻的测试工程师，他们编写了很多的测试，但是忘记思考为什么要写这些测试，怎么让这些测试为整理目标，为产品服务。 团队建设完毕之后，我给他们定下了基表：创造价值，最好还能找到可以复制创造价值的方法。通过价值来驱动团队。 综合的测试方法：开发自动、脚本化测试、探索性测试、基于风险的测试、自动化功能测试等。 工程开发工具：集成开发环境、代码审查系统、构建系统、源码控制、静态检查、通用测试框架等等。 要超出自己习惯的舒适地带。 随着敏捷开发、持续构建、早期用户介入、总包测试、在线软件交付的不断兴起，软件开发的问题也已经彻底改变。 测试执行框架、自动构建系统、自动测试、持续集成、版本管理]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[跑步大事记]]></title>
    <url>%2F2016%2F06%2F23%2F%E8%B7%91%E6%AD%A5%E5%A4%A7%E4%BA%8B%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[桐这个学期因为住在学校附近，所以经常放学就跑步了。跑步也进步很大，上学期（11月份左右）校运会拿了第4名（3分59秒）。前天跑步测验的时候，跑了班级第一（3分52秒），因为是夏至，天气比较热，这个成绩还不错。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[告诉你什么是探索性测试(转)]]></title>
    <url>%2F2016%2F06%2F22%2F%E5%91%8A%E8%AF%89%E4%BD%A0%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A2%E7%B4%A2%E6%80%A7%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[告诉你什么是探索性测试 第一次听到探索性测试这个词是去年的10月份。一个微博上的朋友写了一篇关于探索式测试的blog，之后断断续续的阅读了不少相关资料，参加了数场相关讨论，但是还是没有得到一个系统的理解。8月29日晚上有幸聆听了测试顶级专家Micheal Bolton（不是唱歌的那个，是做测试的）关于探索性测试的演讲，解决了数个困扰我很久疑惑。我终于得以把这些知识理清，下面我会把我所理解的探索性测试跟大家做一个分享。 探索性测试的历史和主旨 探索性测试是近十几年内才形成体系的一种测试思想，它的核心理论由Jame Bach在1995年提出，并在数年间由学者和业界的测试工作者不断完善而形成的理论。测试大师Cem Caner在02年首次以“Exploratory Testing”（探索性测试）的名称在学界和业界开始相关的演讲和培训。探索式测试的方法论在这10余年期间不断被测试先锋们不断磨炼和修正，终于在11年，担任过微软和Google测试总监的James Whittaker出版了《探索性测试》一书，让探索式测试在业内获得了广泛关注，并掀起了一股学习和研究热潮。 探索性测试的核心思想是：测试是一个不断学习，不断探索的创造性过程。测试计划、分析、设计、执行其实是相辅相成，相互交织的。依照传统的测试理论，把这四部分在时间上严格区分会限制人的创造性和，进而影响测试效果。同时静态的测试方案和测试用例不足以覆盖对动态系统的测试。探索性测试强调不断的学习、探索，不断的修正测试方法，十分强调人的能动性是它最大的亮点。 探索性测试实际上是将戴明环方法（PDCA）做到了极致，也可以说做到了时间上的交织和同步———在做测试执行的时候，测试者也在做测试分析与设计，同时还可能在修改测试计划，这时候我们就会发现我们现在沿用的一些测试文档例如测试计划文档、测试需求、测试用例这些东西就不大好用了，因为修改频繁，全部记录下来代价太大，且强制划分文档类型会打乱思维。因此探索性测试强调灵活的记录测试的产物,而不必循规蹈矩，这在形式上与传统的测试（探索性测试将传统称为依托脚本的测试，script test）是有极大矛盾的，这也是探索性测试在业界引起的最大争议。 探索性测试有迹可循么？ 答案是肯定的。比照一下探索性测试的思想和我们的日常工作，大部分测试者其实已经在做着某种程度的探索性测试的工作，如果你在发挥能动性，使用多种获取需求的方法，你在做探索性测试;如果你根据测试实际系统的反馈修正测试用例，你在做探索性测试;如果你在做我们常说的自由测试，你也在做探索性测试，但是这肯定不是全部。 探索性测试是有迹可循有具体实践方式的。Cem Kanner提供了一套详细的实践方案，你可以从下面链接获得：https://intranet2.arraynetworks.net/prx/000/http/www.testingeducation.org/BBST/exploratory/BBSTExploring.pdf 当然你也可以使用James Bash和Micheal Boltonl的方法： http://www.developsense.com/resources/et-dynamics3.pdf 你也可以读一下James Whittaker的书：探索式软件测试方法（这本书跟上面两家不是一个流派，不过也能学到很多具体的测试方法，很实用。） http://product.dangdang.com/product.aspx?product_id=20834199 以及我们国内一线测试人员写的一本中文书：探索式测试实践之路（还未读过） http://product.dangdang.com/product.aspx?product_id=22844980 浏览上面的资源你可以得到相当具体的技术和方法，因此这里不在赘述了。除了James Whitaker那本书，剩下3份资源都应该属于上下文驱动流派（context-driven school），是一个路数。据我所知国内的一流测试专家邰晓梅女士也在实现一套基于测试驱动的探索性测试实践方案，让我们一起期待：）。 其实探索性测试和所谓的传统测试并不是冲突和矛盾的，在实践过程中也不会走两个极端。我在交流过程中问了Micheal Bolton他们是否矛盾的问题。他的回答是：“我们可以找两个端点，一端是把人当作生产线螺丝的严格依照脚本进行测试方式，一端是把人比作一个小孩的完全探索性测试，实际工作中，我们肯定是在这两个点连线中的某一个点。具体这个点在哪里，要看它在哪里能够更好的开展测试。”正所谓法无定法，我们其实完全没有必要去恪守、捍卫教条，并非争出个高下来，黑猫白猫，抓住老鼠就是好猫。]]></content>
  </entry>
  <entry>
    <title><![CDATA[一篇关于Github和Coding的区别的说明]]></title>
    <url>%2F2016%2F06%2F22%2F%E4%B8%80%E7%AF%87%E5%85%B3%E4%BA%8EGithub%E5%92%8CCoding%E7%9A%84%E5%8C%BA%E5%88%AB%E7%9A%84%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[一篇关于Github和Coding的区别的说明。概括的说就是，Github主要定位是开源项目的协作，Coding主要定位是私有开发的云端服务平台。为什么 Coding 不是中国的 Github ？]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一篇文章告诉你为何GitHub估值能达20亿美元(转)]]></title>
    <url>%2F2016%2F06%2F22%2F%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%91%8A%E8%AF%89%E4%BD%A0%E4%B8%BA%E4%BD%95GitHub%E4%BC%B0%E5%80%BC%E8%83%BD%E8%BE%BE20%E4%BA%BF%E7%BE%8E%E5%85%83(%E8%BD%AC)%2F</url>
    <content type="text"><![CDATA[同性交友软件Github :-) 作为开发者社区GitHub有何特别之处？眼下软件对各行各业的重要性都在提升，而合作的软件开发和代码分享也有着越来越大的需求。GitHub的成功在很大程度上基于软件开发的开源模式，这种模式意味着开发者可以自由地修改及发布代码。开源软件正在被越来越多企业使用，这帮助企业节约授权费用和开发成本。而通过在GitHub上开展开源项目，以及为开源项目贡献代码，企业也可以更好地吸引开发者，完成招聘。GitHub有何特别之处，具体来说有以下几方面。1）不仅仅是控制系统，还是各种文件的储存系统这个开源平台不仅拥有其它类似控制系统相同的功能，能够管理并储存修改过的代码，还能用于储存其它形式的文件，比如Word，PPT或者其它最终版软件，所以，GitHub不仅仅是一个控制系统，还是一个草稿与最终文件的储存系统。2）开发者自行决定是否将修改发送到中心服务器在Github之前，一些软件，比如CVS 以及Subversion都会给每个编辑中的软件一个中心储存库，每修改写一次代码，系统都会直接将代码发送到储存库，而使用像Github这样的分布式控制系统，不用将每次修改都 发送到中心储存库，只需在本地电脑上修改，然后自行决定将修改过的代码储存到中心服务器，这样许多开发者都愿意作更多细节性修改，因为没有那么麻烦。GitHub还是一个Git储存库托管服务，有许多自己的特色功能。Git是一个命令行工具，GitHub提供一个基于Web的图形界面，可以访问并控制一些协作功能，比如wiki以及基础任务管理工具。3）复制——请求——合并三部曲GitHub的撒手锏就是复制“fork”，能将一个用户的储存库复制到另一个用户的储存库，这样用户就可以访问别人的代码并且在自己的账户下进行 修改，修改好以后，如果该用户喜欢与别人分享，就可以发送一条请求给原始代码编写人，此人可以一键点击按钮，将别人的修改与自己的原始代码相结合。正是这三个步骤：复制——请求——合并，让GitHub变得更加强悍。Code School 的Gregg Pollack 说，在GitHub之前，如果你想修改某个开源软件，就必须先下载原始代码，进行本地修改，然后将这些修改电邮给软件编写人，别些人再对这些修改作出评 估，再决定是否合并，非常麻烦。4）降低开源程序修改门槛而在GitHub中，你提交请求以后，原始代编写人可以看见你在GitHub上的个人介绍，包括其它表现，如果你的修改得到认可，就能获得信誉积 分，这些都会出现在你的个人简介中。GitHub还提供一个公开平台，大家都可参与讨论某个开源代码的修改方案。降低了开源程序修改的门槛，不论你是菜鸟 还是专家，都可以参与。GitHub除了提供公共开源储存库，还提供On-premises 储存库（运行在用户或组织所在的经营场所计算机中的软件），虽然这些方案不能完全利用GitHub的网络效应优势，但可以享受它的协作功能。 为什么GitHub能估值这么高?Github获得如此估值其实并不令人意外，这个产品的现状与想象的空间都极大。一篇文章告诉你为何GitHub估值能达20亿美元 2015-07-30 11:51 来源：逐鹿网 编辑：amy【纠错】0人评论A-A+怎么开淘宝店 网站优化方法 创业如何获得投资 怎么做微商 最新LOL活动 开发者社区 GitHub网站 软件开发平台 软件开发平台GitHub今日宣布，已获得硅谷多家知名风投2.5亿美元融资，这也让其融资总额达到了3.5亿美元，此轮融资对GitHub的估值约为20亿美元。 GitHub有何特别之处？ GitHub创立于2008年，被Forrester称作“面向开发者的Facebook”。自从创建之日起，GitHub就成为了程序员们分享代码、寻求帮助的最佳网站之一。网站发展的顺风顺水，一些硅谷公司在招募程序员时甚至会要求他们提供自己在GitHub上的个人信息，以便HR能够看到他们的真实技术能力。 为了更好的构筑Linux ，其创建者林纳斯·托瓦兹（Linus Torvalds）于2005年创建了Git。借助Git，人们可以在相同的Linux代码上同时开展工作，无需担心影响到其他人。 简单来说，Git让每个人都可以下载一份Linux源代码到自己的机器上并自由修改，然后上载至中央Linux资料库。这样，每个人的改动都可以无缝整合。“这就是Git厉害的地方，”戴博纳说道。“而GitHub的厉害之处是让每个人都可以理解这种运作机制。” GitHub让所有软件项目都能像Linux项目一样工作，普通的开发人员也极易上手。现在，包括谷歌、Facebook、Twitter甚至微软在内的业界巨头都将自己的开源项目托管于GitHub之上。近来，微软陆续对旗下某些重要产品开源，他们选择了GitHub而非自家的开源站点CodePlex来托管上述代码。 得益于戴博纳口中“Git的厉害之处”，开发者社区可以与GitHub保持距离。开发者不但可以下载代码至本地，而且可以任意决定代码的公开范围。Git和GitHub同样可以用作专有软件开发的目的。开发者随时可以决定代码公开与否。 在GitHub上，超过1000万注册用户合作参与2500万个软件项目。个人开发者使用GitHub去保存、编写及分享代码，而企业和政府部门则使用GitHub在整个组织内管理及运行软件项目。目前GitHub对私人软件项目，以及通过GitHub托管软件项目的组织收取费用，而其他服务都是免费的。 作为开发者社区GitHub有何特别之处？ 眼下软件对各行各业的重要性都在提升，而合作的软件开发和代码分享也有着越来越大的需求。GitHub的成功在很大程度上基于软件开发的开源模式，这种模式意味着开发者可以自由地修改及发布代码。开源软件正在被越来越多企业使用，这帮助企业节约授权费用和开发成本。而通过在GitHub上开展开源项目，以及为开源项目贡献代码，企业也可以更好地吸引开发者，完成招聘。GitHub有何特别之处，具体来说有以下几方面。 1）不仅仅是控制系统，还是各种文件的储存系统 这个开源平台不仅拥有其它类似控制系统相同的功能，能够管理并储存修改过的代码，还能用于储存其它形式的文件，比如Word，PPT或者其它最终版软件，所以，GitHub不仅仅是一个控制系统，还是一个草稿与最终文件的储存系统。 2）开发者自行决定是否将修改发送到中心服务器 在Github之前，一些软件，比如CVS 以及Subversion都会给每个编辑中的软件一个中心储存库，每修改写一次代码，系统都会直接将代码发送到储存库，而使用像Github这样的分布式控制系统，不用将每次修改都 发送到中心储存库，只需在本地电脑上修改，然后自行决定将修改过的代码储存到中心服务器，这样许多开发者都愿意作更多细节性修改，因为没有那么麻烦。 GitHub还是一个Git储存库托管服务，有许多自己的特色功能。Git是一个命令行工具，GitHub提供一个基于Web的图形界面，可以访问并控制一些协作功能，比如wiki以及基础任务管理工具。 3）复制——请求——合并三部曲 GitHub的撒手锏就是复制“fork”，能将一个用户的储存库复制到另一个用户的储存库，这样用户就可以访问别人的代码并且在自己的账户下进行 修改，修改好以后，如果该用户喜欢与别人分享，就可以发送一条请求给原始代码编写人，此人可以一键点击按钮，将别人的修改与自己的原始代码相结合。 正是这三个步骤：复制——请求——合并，让GitHub变得更加强悍。Code School 的Gregg Pollack 说，在GitHub之前，如果你想修改某个开源软件，就必须先下载原始代码，进行本地修改，然后将这些修改电邮给软件编写人，别些人再对这些修改作出评 估，再决定是否合并，非常麻烦。 4）降低开源程序修改门槛 而在GitHub中，你提交请求以后，原始代编写人可以看见你在GitHub上的个人介绍，包括其它表现，如果你的修改得到认可，就能获得信誉积 分，这些都会出现在你的个人简介中。GitHub还提供一个公开平台，大家都可参与讨论某个开源代码的修改方案。降低了开源程序修改的门槛，不论你是菜鸟 还是专家，都可以参与。 GitHub除了提供公共开源储存库，还提供On-premises 储存库（运行在用户或组织所在的经营场所计算机中的软件），虽然这些方案不能完全利用GitHub的网络效应优势，但可以享受它的协作功能。 为什么GitHub能估值这么高? Github获得如此估值其实并不令人意外，这个产品的现状与想象的空间都极大。 一、已建立成熟的盈利模式 已有成熟盈利模式，据Github CEO 透露，他们在2011年就已实现了盈利，并且用户成长速度极快。Github的盈利模式主要来自于其提供的代码托管服务，目前其个人代码托管服务为每月7美元，带有防火墙的企业托管服务则需要每月至少5000美元。大型科技公司在购买GitHub服务方面的开支每年高达100万美元 二、程序员知识分享、交友社区 Github经常被黑被调侃的地方就是“全最大的同性交友软件”。在我看来这倒不是一句调侃的话这么简单，因为切下程序员这庞大群体的细分社交的确是一个很好的故事。平台上的分享者渴望得到他人认同或者技术能力的提升，并且从中还能收获快乐。 Github 不是一个简单的代码管理工具，在开源社区最流行的 git 的基础上，它把自己变成了一个 hacker 的社区。这是一件非常难得的事情，本来创建一个活跃并高质量的社区就是不简单，更何况这个社区中交流的语言是代码！而且，hacker （这里的 hacker 泛指热爱用技术的方式解决问题的人，在本文中与开发者、程序员等词交替使用）是一些非常不一样的人，能够吸引这些人的短期注意和长期兴趣是非常不容易的事情。 三、数据沉淀和云储存 Github中的代码分享的数据沉淀下来使得平台中的代码量越来越大，这无形中树立起了更高的竞争壁垒。而另一方面Github天生就是一个很好的代码存储的网盘，云服务中的企业级用户的付费能力比较高，例如dropbox的估值已近百亿美元。 四、在线招聘的有效工具 Github可以给程序员的个人简历加分许多，许多国内外公司在招募员工时已经要求申请人在简历中加入其在GitHub上的相关资料。通过Github上的信息，HR能够快速知道应聘者的实战水平，并且也能为应聘者的学习能力以及协作能力提供旁证。]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《正说清朝十二帝》读后感]]></title>
    <url>%2F2016%2F06%2F20%2F%E3%80%8A%E6%AD%A3%E8%AF%B4%E6%B8%85%E6%9C%9D%E5%8D%81%E4%BA%8C%E5%B8%9D%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[黑格尔说过，人类从历史中得到的教训就是：人类从来不记取历史教训。 比较了好多关于清朝历史方面的书，《正说清朝十二帝》因为丰富的彩色插图吸引了我。书中每个章节根据内容，配有各类的图片，包括人物画像、物品图、景色图、书法图、名画等等。但可能是正说的缘故，书中文字还是比较晦涩，故事也比较平淡，缺少了《明朝那些事儿》的诙谐、有趣感。 清朝处在一个特殊的时代，中国已经从盛唐时期的万国之国，没落成了落后挨打的一方。当时，西方主要的国家，英国、法国、德国、美国，都走上了资本主义发展的道路，这些国家对内努力发展工业，提高科学技术，对外进行殖民扩张。近邻日本也实行了明治维新，实现了国家的现代化。而清朝还沉浸在“天朝统御万国”、“天朝物产丰盛，无所不有，原不藉外夷货物，一通有无”的幻境中。在强敌面前，清朝皇帝采取“率祖旧章”、“持盈保泰”的保守态度，导致国家一步步滑向了灭国的境地。掩卷沉思，有两个场面印象特别深刻。其一，关于道光传位给咸丰的故事本来六阿哥（奕訢）有才有贤，道光也想过立他为太子，但是在一次狩猎后，故事发生了变化。 【藏拙示仁】《清史稿·杜受田传》载:道光晚年诸皇子随其南苑围猎。六子奕訢射猎最多。四子奕詝未获一物，道光究其因，奕詝曰:时方春，鸟兽孳育，不忍伤生…宣宗大喜以为仁孝，于是放弃德才兼备的奕訢，密立有德无才奕詝为储。咸丰后来遇大事缺乏胆识、远略，退缩、逃避，连基本的“德”也是欠缺的。 有句话说得好，德往往是缺才的掩饰。如果评价体系倾向于德，那么就会滋生出一批道义制高点的伪君子。而人才却因此而埋没。管理也一样，在工作上必须有明确的成果作为考核依据，道德的方面可以通过制度、监督进行规避。例如马丁·路德·金在私德上是有问题，但是不能因为这些否认他为黑人争取权利方面的贡献。所以，道光的选择其实也加速了清朝的灭亡。其二，关于道光皇帝节俭的故事。在道光朝，清政府在鸦片战争中吃了败仗。然而，失败并不可怕，可怕的是不从失败中汲取教训，继续封闭，狂妄自大。本来应该在鸦片战争后，总结教训，卧薪尝胆，弃旧维新，进行改革，消除隐患；道光皇帝却以穿补丁裤子显示节俭，这些纯属是捡了芝麻而丢了西瓜。 司马光在写下《资治通鉴》的时候，想通过本书“鉴前世之兴衰，考当今之得失”，但是封建皇朝的2000多年，悲剧却还一再上演。杜牧在《阿旁宫赋》中感叹到：秦人不暇自哀，而后人哀之，后人哀之而不鉴之，亦使后人而复哀后人也。 【欹（qī）器】孔子观于鲁桓公(公元前711年～前694年在位)之庙，有欹器焉。孔子问于守庙者曰：此为何器?守庙者曰：此盖为宥坐之器。孔子曰：吾闻宥坐之器，虚则欹，中则正，满则覆。孔子顾弟子日：注水焉。弟子挹水而注之，果中而正，满而覆，虚而欹。孔子喟然而叹日：吁!恶有满而不覆者哉!” 文章摘录 泰化否，否生泰 正如一位哲人说过的，在权利争夺的平行四边形诸力中，两条边的的两个不同方向的分力，斗争的结果，既不是这条边的力，也不是那条边的力，而是对角线的力，就是两个分力所产生的一个合力。 临大事，有静气。青年天子玄烨在危机时刻，持心坚定，气静不慌。他为了安定惊恐的军心，慌乱的民心，每天游景山，观骑射，以示胸有成竹。有人进行讽谏，康熙置若罔闻。事后他说：“当时我要是表现出一丝惊恐来，就会人心动摇，说不定会出现意外的情况！”他的坚定决心和平静心态，对于稳定大局和安定人心，起了很大的作用。 看来康熙对待吏治，还缺乏系统的制度：严格制度，使官吏不能贪污；严厉惩处，使官吏不敢贪污；严定薪俸，使官吏不必贪污；严肃教育，使官吏不想贪污。 教育能影响一个人，而不能决定一个人的人生道路。 雍正巧妙的将自己隐藏起来。他对父皇表示忠孝，又尽力友善兄弟，并交好朝廷诸臣。他以不争为争，坐收渔人之利。 雍正为了谋取皇位，韬光养晦，费尽心机。他的心腹戴铎，在康熙五十二年为他谋划到：处英明之父子也，不露其长，恐见其弃；过露其长，恐见其疑，此其所以为难。处众多之手足也，此有好竽，彼有好瑟，此有所争，彼有所胜，此其所以为难。……其诸王阿哥之中，俱当以大度包容，使有才者不为忌，无才者以为靠。 康熙：“当初拘禁…时，并没有一个人替他说话，只有四阿哥深知大义，多次在我面前为…保奏，像这样的心地和行事，才是能做大事的人。” 年羹尧与隆科多两人，对雍正来说，是狡兔死，走狗烹；飞鸟尽，良弓藏。对他们自己来说，则是知进不知退，知显不知隐，泰极否来，自酿其祸。 乾隆自我总结一生有“十全武功”，自诩为“十全老人”。十全武功是：“十功者，平准噶尔二，定回部一，打金川为二，靖台湾为一，降缅甸、安南各一，即今之受廓尔喀降，合为十。” 在乾隆时期，世界上发生了三件大事：第一件是英国工业革命；第二件是美利坚合众国成立；第三件是法国大革命。这三件大事再加上此前的英国资产阶级革命，具有划时代的意义，影响了世界历史的进程，改变了整个世界的格局。 据说和珅在狱中，自知生命不久，对着窗外元宵明月，感慨赋诗道：“对景伤前事，怀才误此身。” 嘉庆时期面临一系列的社会危机，但是嘉庆都把上述问题做个个案看待，他没有也不可能从制度上去加以解决。 道光皇帝年轻时，曾写道：“事愈大，心愈小；情愈急，气愈和。”可见他在年轻时，就十分注意磨炼自己的性格。 有两个问题值得思考：鸦片战争清朝失败是必然还是偶然？鸦片战争失败的主要历史责任是穆章阿还是道光皇帝？ 【史鱼尸谏】春秋时期，卫国有位贤人蘧伯玉，为人正直且德才兼备，但卫灵公却不肯重用他；另一位叫弥子瑕的，作风不正派，卫灵公反而委以重任。史鱼是卫国一位大臣，看到这种情况，内心很是忧虑，但屡次进谏，卫灵公始终不采纳。后来，史鱼得了重病，奄奄一息，将要去世前，将儿子唤了过来，嘱咐他说：「我在卫朝做官，却不能够进荐贤德的蘧伯玉而劝退弥子瑕，是我身为臣子却没有能够扶正君王的过失啊！生前无法正君，那么死了也无以成礼。我死后，你将我的尸体放在窗下，这样对我就算完成丧礼了。」史鱼的儿子听了，不敢不从父命，于是在史鱼去世后，便将尸体移放在窗下。卫灵公前来吊丧时，见到大臣史鱼的尸体，竟然被放置在窗下，如此轻慢不敬，因而责问史鱼的儿子。史鱼的儿子于是将史鱼生前的遗命告诉了卫灵公。卫灵公听后很惊愕，脸色都变了，说道：「这是我的过失啊！」于是马上让史鱼的儿子，将史鱼的尸体按礼仪安放妥当，回去后，便重用了蘧伯玉，接着又辞退了弥子瑕并疏远他。当孔夫子听到此事后，赞叹地说道：「古来有许多敢于直言相谏的人，但到死了便也结束了，未有像史鱼这样的，死了以后，还用自己的尸体来劝谏君王，以自己一片至诚的忠心使君王受到感化，难道称不上是秉直的人吗？」《论语》有言：「君使臣以礼，臣事君以忠。」身为臣子，为国为民，尽忠职守，劝谏君王，是为臣的本分。 陆游曾经在《钗头凤》中这样感叹差错凄惨的爱情：红酥手，黄縢酒，满城春色宫墙柳。东风恶，欢情薄。一怀愁绪，几年离索。错、错、错。春如旧，人空瘦，泪痕红浥鲛绡透。桃花落，闲池阁。山盟虽在，锦书难托。莫、莫、莫！ 当年，明成祖朱棣迁都北京，原因之一是“天子守国门”。 【钩弋（yì）夫人】《汉书·外戚传》：“心欲立焉，以其年稚母少，恐女主颛恣乱国家，犹与久之。”后元二年（公元前87年），武帝弥留之际立刘弗陵为太子，以大司马霍光辅政。刘弗陵即位，为汉昭帝，时年八岁。钩弋夫人被赐死后，有人对欲立其子而杀其母的做法不能理解。《资治通鉴·汉纪十四》中记载了武帝的一段解释：“是非儿曹愚人所知也。往古国家所以乱，由主少母壮也。女主独居骄蹇，淫乱自恣，莫能禁也。汝不闻吕后邪！故不得不先去之也。”对此，早有论者指出“自古帝王遗命多矣，要未有如汉武之奇者。”（明人张燧《千百年眼》） 中国自公元前221年秦始皇称皇帝以来，直到1912年宣统皇帝退位，历经2132年，有349位皇帝。 有书真富贵，无事小神仙 连中三元：乡试：解（jiè）元； 会试：会元； 殿试：状元 解的几种读音“解甲归田”的“解”“jiě”“解甲”，就是脱去束在身上的铠甲，故“解”当读jiě。读为“jiè”的“解”字，主要含义有：1：押送，如“解差”（旧时押送犯人者）、“解送”（押送财物或者犯人等）；2：“解元”，明清两代称考取乡试考取第一名的人为“解元”（因为唐朝举进士都是由地方官解送入试，故称）“跑马卖解”的“解”“xiè”读为“xiè”的“解”字，旧指杂技表演的各种技艺，如“跑马卖解”（特指骑在在马上表演的技艺）、“解数”（本指战术驾驶，后泛指手段、本领）等。还有，姓也读此音，如：歌手“解晓东”的姓就是这个读音。 有位哲人说过：“当今列强，有今而无古；希腊、罗马，有古而无今。惟我中国，有古有今。” 纳兰性德，其父为康熙朝大学士明珠。纳兰性德22岁中进士，著有《纳兰词》。被誉为清代第一词人。其《长相思》云：山一程，水一程，身向榆关那畔行，夜深千帐灯。风一更，雪一更，聒碎乡心梦不成，故国无此声。注：聒（guō）声音吵闹，使人厌烦。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何屏蔽宽带运营商投放的网页右下角弹出广告]]></title>
    <url>%2F2016%2F06%2F19%2F%E5%A6%82%E4%BD%95%E5%B1%8F%E8%94%BD%E5%AE%BD%E5%B8%A6%E8%BF%90%E8%90%A5%E5%95%86%E6%8A%95%E6%94%BE%E7%9A%84%E7%BD%91%E9%A1%B5%E5%8F%B3%E4%B8%8B%E8%A7%92%E5%BC%B9%E5%87%BA%E5%B9%BF%E5%91%8A%2F</url>
    <content type="text"><![CDATA[周六，在家里打开自己博客的时候，突然发现右下角弹出广告。很纳闷，因为这个博客是自己建立的网站，不可能会出现广告呀。后来查找，分析之后，才发现是宽带运营商搞的鬼。 上网找到了一篇文章，如下： 如何屏蔽宽带运营商投放的网页右下角弹出广告最近在一次宽带故障之后，发现网速有些卡了，还有一个最重要的变化就是网页右下角弹出广告多了，也不是每次浏览网页都有，也不是访问每个网站都弹出广告，但这原来没有的事情突然发现了，心里很是不舒服的。一开 始还以为是中了病毒或者是浏览器被安装了广告插件，杀毒清理插件一切都正常，网页右下角依旧不定时不经意的弹出广告，使用chrome浏览器审查元素查看，发现有弹出广告在一个iframe框架中，有个m m a e.al ly es.c o m的域名很是显眼。度娘搜索一番，找了篇和我情况类似的技术文章来解决一下，还是有效果的。 “在广告图片上点右键——审查元素，跳到了广告代码的地方，往上看源码，发现广告是在一个iframe里面，看来我的博客源码里被植入了一个iframe。于是我赶快把博客源码下载到本地搜索iframe，但是没发现有可疑的地方。浏览器的插件应该不会弹广告吧，以前用了那么久的时间都没发现有广告。 看上面的js文件觉得很可疑，于是百度一下”static/FloatingContent/245/xd.js”，发现别人也遇到过这种问题，是长城宽带运营商在http请求返回的html代码中插入了广告代码，很无耻！我现在使用得电信宽带居然也出现了这种广告，看来这个广告商生意不错。 解决方法有两个，一个是打电话投诉（貌似这方法不是个方法，弱势群体没人理的。），另一个是自己屏蔽广告。 屏蔽广告的方法很多，因为我用的是多人共用的TP-LINK无线路由，所以直接在无线路由里屏蔽了。 进入路由管理界面，进入【安全设置】里面的【防火墙设置】，勾选“开启防火墙”，勾选“开启IP地址过滤”，“缺省过滤规则”选择“凡是不符合已设IP地址过滤规则的数据包，允许通过本路由器”，勾选“开启域名过滤”。 根据这篇文章，分析了博客的网站页面对应广告部分，发现有一行代码 “http://static.imochy.com/js/dsps.js” ，严重怀疑这就是注入源码里面的广告。按照文章的说法，在路由器的防火墙中过滤掉了这个网站，后来就没事了。只能说宽带运营商太黑了，这些广告因为不是常驻在客户端，所以是无法查杀的，只能通过屏蔽的方式，对普通用户来说，是很难处理的。PS： 这些植入的广告的档次就像路边电线杆贴的小广告，你电信就是发广告，也发一些有用的广告呀！]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器渲染工作原理]]></title>
    <url>%2F2016%2F06%2F18%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[浏览器渲染工作原理How browsers work【中文版】http://my.oschina.net/anna153/blog/377259How browsers work http://taligarsiel.com/Projects/howbrowserswork1.htm浏览器的渲染原理简介 http://coolshell.cn/articles/9666.html]]></content>
      <categories>
        <category>技术相关</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《数学之美》读后感]]></title>
    <url>%2F2016%2F06%2F15%2F%E3%80%8A%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[一本不错的信息处理数学原理科普书。一些复杂的信息问题、工程问题，经作者之手，把背后的数学原理通过简单的形式展示出来，让普通读者明白到了数学解决问题的能力，体会到了数学的美。这本书，背后也道出了一个道理，那就是基础数学理论研究对计算机科学的发展能起到非常重要的作用。例如，书中提到，布尔代数，在19世纪布尔提出的80多年时间里，一直默默无闻，在实际生活中也没有起到任何作用。直到1938年香农提出在电路开关中应用布尔代数来处理之后，才开始在数字电路方面得到了广泛应用。 布尔（George Boole) 是十九世纪英国一位小学数学老师。他生前没有人认为他是数学家。布尔在工作之余，喜欢阅读数学论著、思考数学问题。1854 年“思维规律” （An Investigation of the Laws of Thought, on which are founded the Mathematical Theories of Logic and Probabilities）一书，第一次向人们展示了如何用数学的方法解决逻辑问题。 读者也许会问这么简单的理论能解决什么实际问题。布尔同时代的数学家们也有同样的问题。事实上在布尔代数提出后80 多年里，它确实没有什么像样的应用，直到 1938 年香农在他的硕士论文中指出用布尔代数来实现开关电路，才使得布尔代数成为数字电路的基础。所有的数学和逻辑运算，加、减、乘、除、乘方、开方等等，全部 能转换成二值的布尔运算。 不管索引如何复杂，查找的基本操作仍然是布尔运算。布 尔运算把逻辑和数学联系起来了。它的最大好处是容易实现，速度快，这对于海量的信息查找是至关重要的。它的不足是只能给出是与否的判断，而不能给出量化的 度量。因此，所有搜索引擎在内部检索完毕后，都要对符合要求的网页根据相关性排序，然后才返回给用户。 像作者说的，布尔代数对于数学的意义，等同于量子力学对于物理学的意义，他们将我们对世界的认识从连续状态扩展到了离散的状态。因为作者是搜索方面的专家，所以，作者对搜索涉及的数学建模、有向图、矩阵、统计、概率、迭代等方面进入了深入浅出的描述。印象最深刻的是，作者在讨论到比较两个集合的是否一样的时候，提到了各种算法的优劣性。最基本的算法是采用逐个元素的比较，好一点的是排序后再比较。但是作者提出，其实最优的方案的是，采集每个词的信息指纹——数字，然后对这些数字求和比较，就能马上知道两个集合是否有差异了。因为采用的信息指纹是伪随机数，不同信息指纹加减乘除之后相同的概率非常小。信息指纹在判断网页相似性、论文抄袭等方面发挥了重要的作用。另外说的一点是，因为密码学不是作者的专业，感觉本书在密码学方面讲得不够透。密码方面的知识建议参考(知乎)关于老和尚小和尚讨论密码的问题 文章摘录 了解了罗塞塔石碑的历史，对于今天很多翻译软件和服务都叫做“Rosetta”就不会觉得奇怪了，这其中包括Google的机器翻译和世界上销量最大的PC机上的翻译软件。 阿拉伯数字或者说印度数字的革命性不仅在于它的简洁有效，而且标志着数字和文字的分离。 当司马迁用近53万字记载了中国上千年历史的同时，远在中东的犹太人也用类似的篇幅记载了自创世纪以来，主要是摩西以来他们祖先的历史，这就是《圣经》中的《旧约》部分。 如果说从字母到此的构词法（Morphology）是词的编码规则，那么语法则是语言的编码和解码规则。不过，相比较而言，词可以被认为是有限而且闭合的集合，而语言则是无限和开放的集合。因此，任何语言都有语法规则覆盖不到的地方，这些例外或者说不准确性，让我们的语言丰富多彩。 当然，香浓不必要得什么图灵奖，作为信息论的发明人，他在科学史上的地位和图灵是相当的，而且通信领域最高奖就是以他的名字命名的。 对于人类来讲，一个能把英语翻译成汉语的人，必定能很好理解这两种语言。这就是直觉的作用。在人工智能领域，包括自然语言处理领域，后来把这样的方法论称作“鸟飞派”，也就是看看鸟是怎么飞的，就能模仿鸟造出飞机，而不需要了解空气动力学。事实上我们知道，怀特兄弟发明飞机靠的是空气动力学而不是仿生学。 自然语言的处理从基于规则方法的传统，现在转入了统计的语言处理方法。 在数理统计中，我们之所以敢对采样数据进行观察的结果来预测概率，是因为有大数定理（Law of Large Numbers）在背后做支持，他的要求是有足够的观测值。 这里有一个很好的例子，来自于腾讯搜索部门。最早的语言模型是使用《人民日报》的语料训练的，因为开发者认为这些语料干净、无噪音。但是实际的效果就比较差，经常出现搜索串和网页不匹配的例子。后来改用网页的数据，尽管他们有很多的噪音，但是因为训练数据和应用一直，搜索质量反而好。 但是对于能找到模式（Pattern）的、量比较大的噪音还是有必要过滤的，而且他们也比较容易处理，比如网页文本中存在的大量的制表符。因此，在成本不高的情况下，有必要对训练数据进行过滤。 分词的二义性是语言歧义性的一部分，1990年前后，当时清华大学电子工程系工作的郭进博士用统计语言模型成功解决了分词二义性的问题，将汉语分词的错误率降低了一个数量级。 化学里分子是保持化学性质的最小单位，再往下分到原子，化学性质就变了。 很多自然语言的处理问题是和通信的解码问题等价的，因此它们完全可以由隐马尔可夫模型来解决。 隐马尔可夫模型最初应用于通信领域，继而推广到语音和语言处理中，成为连接自然语言处理和通信的桥梁。同时，隐马尔可夫模型也是机器学习的主要工具之一。和几乎所有机器学习的模型工具一样，它需要一个训练方法（鲍姆-韦尔奇算法）和使用的解码算法（维特比算法），掌握了这两类算法，就基本可以使用隐马尔可夫模型这个工具了 “信息熵（读Shang）”的概念，可以认为，信息量就等于不确定性的多少。 几乎所有的自然语言处理、信息与信号处理的应用都是一个消除不确定性的过程。 信息的作用就在于消除不确定性，自然语言处理的大量问题就是寻找相关的信息。 信息熵的物理含义是对一个信息系统不确定性的度量，在这一点上，它和热力学熵中的概念有相似之处，因为后者就是一个系统无序的度量，从另一个角度讲也是对一种不确定性的度量。 罗曼•罗兰为那些追求灵魂高尚而非物质富裕的年轻人写下了《巨人三传》，让大家呼吸到巨人的气息。 贾里尼克教授在学术上给我最大的帮助就是提高了我在学术上的境界。他告诉我最多的是：什么方法不好。在这一点上和股神巴菲特给和他吃饭的投资人的建议有异曲同工之处。巴菲特和那些投资人讲，你们都非常聪明告诉，不需要我告诉你们做什么，我只需要告诉你们不要去做什么（这样可以少犯很多错误），这些不要做的事情，是巴菲特从一生的经验教训中得到的。 具体的做事方法是术，做事的原理和原则是道。真正做好一件事没有捷径，离不开一万小时的专业训练和努力。 布尔代数对于数学的意义等同于量子力学对于物理学的意义，他们将我们对世界的认识从连续的状态扩展到离散状态。 早期的搜索引擎（比如AltaVista以前的所有搜索引擎），由于受计算机速度和容量的限制，只能对重要、关键的主题词建立索引。至今很多学术杂志还要求作者提供3-5个关键词。这样，所有不常见的词和太常见的虚词就找不到了。现在，为了保证对任何搜索都能提供相关的网页，常见的搜索引擎都会对素有的词进行索引。但是，这在工程上却极具挑战性。因此，整个索引就变得非常之大，显然，这不是一台服务器的内存能够存下来的。所以，这些索引需要通过分布式的方式存储到不同的服务器上。普通的做法就是根据网页的序号将索引分成很多份（Shards），分别存储在不同的服务器中。每当接受一个查询时，这个查询就被分发到许许多多的服务器中，这些服务器同事能并行处理用户的请求，并把结果送到主服务器进行合并处理，最后将结果返回给用户。因此，需要根据网页的重要性、质量和访问的频率建立常用和非常用等不同级别的搜索。常用的索引需要访问速度快，附加信息多，更新也要快。 布尔代数非常简单，但是对数学和计算机发展的意义重大，它不仅把逻辑和数学合二为一，而且给了我们一个看待世界的全新视角，开创了今天的数字化的时代。 比如Google在2013年时整个索引大约有10,000亿个网页，即使更新最频繁的基础索引也有100亿个网页，加入下载一个网页需要一秒钟，那么下载这100亿个网页则需要317年，如果下载10.000亿个网页则需要32,000年左右，是我们人类有文字记载历史的六倍时间。因此，一个商业的网络爬虫需要有成千上万个服务器，并且通过高速网络连接起来。 显然各个网站最重要的网页应该是它的首页。在最极端的情况下，如果爬虫非常小，只能下载非常有限的网页，那么应该下载的是所有网站的首页，如果把爬虫再扩大些，应该爬下首页直接链接的网页，因为这些网页是网站设计者自认为相当重要的网页。在这个前提下，显示BFS明显优于DFS。事实上在搜索引擎的爬虫黎，虽然不是简单地采用BFS，但是先爬哪个网页，后爬哪个网页的调度程序，原理上基本上是BFS、 对于某个网站，一般是由特定的一台或者几台服务器专门下载。这些服务器下载完一个网站，然后再进入下一个网站，而不是每个网站先轮流下载5%，然后回过头来下载第二批。这样可以避免握手的次数太多。要是下载完第一个网站再下载第二个，那么这又有点像DFS，虽然下载同一个网站（或者子网站）时，还是需要BFS的。 在互联网上，如果一个网页被很多其它的网页所链接，说明它收到普遍的承认和信赖，那么它的排名就高。这就是PageRank的核心思想。当然，Google的PageRank算法实际上要复杂得多。比如说，对来自不同网页的链接区别对待，因为那些排名高的网页的链接更可靠，于是要给这些链接比较大的权重。破解这个怪圈的应该是布林。他把这个问题变成了一个二维矩阵相乘的问题，并用迭代的方法解决了这个问题。他们先假定所有网页的排名是相同的，并且根据这个初始值，算出各个网页的第一次迭代排名，然后，再根据第一次迭代排名算出第二次排名。他们两人从理论上证明了无论初始化值如何选取，这种算法都能保证网页排名的估计值能收敛到排名的真实值。值得一提的是，这种算法不需要任何人工干预。 网页排名算法的高明之处在于它把整个互联网当做一个整体来看待。这无意中符合了系统论的观点。相比之下，以前的信息检索大多把每一个网页当做独立的个体对待，大部分人当初只注意了网页内容和查询语句的相关性，忽略了网页之间的关系。 而且决定搜索质量最有用的信息是用户的点击数据。网页排名的计算主要是矩阵相乘，这种计算很容易分解成许多小任务，在多台计算机上并行处理。矩阵相乘的并行化方法会在第29章介绍Google并行计算工具MapReduce时再做讨论。 今天，Google搜索引擎比最初复杂、完善了许多。但是PageRank在Google所有算法中依然是至关重要的。在学术界，这个算法被工人为是文献检索中最大的贡献之一，并且被很多大学列为信息检索科学（Information Retrieval）的内容。佩奇也因为这个算法在30岁时当选为美国工程院院士，是继乔布斯和盖茨之后又一位当选院士的辍学生。由于PageRank算法收到专利保护，它带来了两个结果。首先，其他搜索引擎开始时都比较遵守游戏规则，不去侵犯它，这对当时还很弱小的Google是一个很好的保护。第二，它使得斯坦福大学拥有了超过1%的Google股票，收益超过10亿美元。 在信息检索中，使用最多的权重是“逆文本频率指数”（Inverse Document Frequency，缩写为IDF）。 有限状态机是一个特殊的有向图，它包括一些状态（节点）和连接这些状态的有向弧。 全球导航的关键算法是计算机科学图论中的动态规划（Dynamic Programming）的算法。在图论中，一个抽象的图包括一些节点和连接他们的弧。如果再考虑每条弧的长度，或者说权重，那么这个图就是加权图（Weighted Graph）。图中的弧的权重对应地图上的距离或者行车时间、过路费等。正确的数学模型可以将一个计算量看似很大的问题的计算复杂度大大降低。 辛格这种做事情的哲学，即先帮助用户解决80%的问题，再慢慢解决剩下的20%的问题，是在工业界成功的秘诀之一。在Google，辛格一致坚持寻找简单有效的解决方法，因为他奉行简单的哲学。辛格认为，计算机不必学习人的做法，就如同飞机不必要像鸟一样飞行。其次，辛格坚持每天要分析一些搜索结果不好的例子，以掌握第一手的资料，即使在他成为Google Fellow以后，依然如此。这一点，非常值得从事搜索研究的年轻工程师学习。事实上，我发现中国大部分做搜索的工程师在分析不好的结果上花的时间远比功成名就的辛格要少。辛格非常顾虑年轻人要不怕失败，大胆尝试。有一次，一位刚毕业不久的工程师因为把带有错误的程序推到Google的服务器上而惶惶不可终日。辛格安慰她说，你知道，我在Google犯的一次错误是曾经将所有的网页的相关性得分全部变成了零，于是所有搜索的结果全部都是随机的了。后来，这位出过错的工程师为Google开发出了很多好产品。 幸福的家庭都是相似的，不幸的家庭各有各的不幸。 需要特别之处的是，删除虚词，不仅可以提高计算速度，对新闻分类的准确性也大有好处，因为虚词的权重其实是一种噪音，干扰分类的正常进行。这一点与通信中过滤掉低频噪音是同样的原理。通过这件事，我们也可以看出自然语言处理和通信的很多道理是想通的。 在中学学习语文和大学学习英语文学时，老师都会强调这一点，阅读时要特别关注第一段和最后一段，以及每个段落的第一个句子。 我们希望有一个方法，异常就能把所有新闻相关性计算出来，这个一步到位的方法就是利用矩阵计算中的奇异值分解（Singular Value Decomposition，简称SVD） 虽然Google早就有了MapReduce等并行计算的工具，但是由于奇异值分解很拆拆成不相关子运算，即使在Google内部以前也无法利用并行计算的优势来分解矩阵。直到2007年，Google中国的张智威博士带领几个中国的工程师及实习生实现了奇异值分解的并行算法，这是Google中国对世界的一个贡献。 双对角矩阵：除了两行对角线元素非零，剩下的都是零。 奇异值分解的另一个大问题是存储量较大，因为整个举证都需要存在内存里，而利用余弦原理的聚类则不需要。 任何一段信息（包括文字、语音、视频、图片等），都可以对应一个不太长的随机数，作为区别这段信息和其他信息的指纹（Fingerprint）。只要算法设计得好，任意两段信息的指纹都很难重复，就如同人类的指纹一样。信息指纹在加密、信息压缩和处理中有广泛的应用。 从加密的角度来讲，梅森旋转算法还不够好，因为它产生的随机数还有一定的相关性，破解了一个就等于破解了一大批。 在网页搜索中，有时需要判断两个查询用词完全相关（但是次序可能不同），比如“北京 中关村 星巴克” 和 “星巴克 北京 中关村”用词完全相同，更普遍的讲法是判断两个集合是否相关。判断两个集合是否相同，而完美的计算方法是计算两个集合的指纹，然后进行比较。计算和比较这些特征值的信息指纹即可。我们知道IDF大的词鉴别能力强，因此只需找出每个网页中IDF最大的几个词，并且算出他们的信息指纹即可。如果两个网页这么计算出来的信息指纹相同，则他们基本上是相同的网页。为了允许有一定的容错能力，Google采用了一种特定的信息指纹——相似哈希（Simhash）。上面的算法稍作改进后还可以判断一篇文章是否抄袭了另一篇文章。具体的做法是，将每一篇文章切成小的片段，然后用上述方法挑选这些片段的特征词集合，并计算它们的指纹。只要比较这些指纹，就能找出打断相同的文字，最后根据时间先后，找到原创的和抄袭的。Google实验室利用这个原理做了一个名为CopyCat的项目，可以准确找出原文和转载（拷贝）的文章。 Google制定了一个很有意思的广告分成策略：虽然所有的视频都可以插入广告，但是广告的收益全部提供给原创的视频，及时广告是插入到拷贝的视频中。这样一来，所有拷贝和上传别人视频的网站就不能获得收入。没有了经济利益，也就少了很多盗版和拷贝。 相似哈希的特点是，如果两个网页的相似哈希相差越小，这连个网页的相似性就越高。如果两个网页相同，他们的相似哈希必定相同。如果他们只有少数权重的词不相同，其余的都相同，几乎可以肯定他们的相似哈希也会相同。用64为的相似哈希做对比时，如果只相差一两位，那么对应网页内容重复的可能性大于80%。这样，通过记录每个网页的相似哈希，然后判断一个新网页的相似哈希是否已经出现过，可以找到内容重复的网页，就不必重复索引浪费计算机资源了。 所谓信息指纹，可以简单理解为将一段信息（文字、图片、视频、音频等）随机地映射到一个多维二进制空间中的一个点（一个二进制数字）。只要这个随机函数做得好，那么不同信息对应的这些点就不会重合，因此，这些二进制的数字就成了原来的信息所具有的独一无二的指纹。 在中途岛海战前，美军截取的日军密电经常出现AF这样一个地名，应该是太平洋的某个岛屿，但是美军无从知道是哪个。于是，美军就逐个发布与自己控制的岛屿有关的假新闻。当发出“中途岛供水系统坏了”这条假新闻之后，美军从截获的日军情报中又看到了含有AF的电文（日军情报内容是AF供水除了问题），于是断定中途岛就是AF。事实证明判断正确，美军在那里成功的伏击了日本联合舰队。 日军和重庆间谍约定的密码本就是美国著名作家赛珍珠获得1938年诺贝尔文学奖的《大地》（The Good Earth）一书。这本书很容易找到，解密时接到密码电报的人只要拿着这本书就能解开密码。密码所在的页数就是一个非常简单的公式：发报日期的月数加上天数，再加上10,比如3月11日发报，密码就是3+11+10=24页。这样的密码设计违背了我们前面介绍的“加密函数不应该通过几个自变量和函数值就能推出函数本身”的这个原则，对于这样的密码，破译一篇密文就可可能破译以后的全部密文。 密码机机密时，每次应该自动转一轮，以防同一密码重复使用，因此即使是同一电文，两次发送的密文也应该是不一样。 搜索引擎的排名：最早期的常见作弊方法是重复关键词。有了网页排名（PageRank）之后，作弊者发现一个网页被引用的链接越多，排名就可能越靠前，于是就有了专门买卖链接的生意。比如，有人自己创建成千上百个网站，这些网站上没有实质的内容，只有链接到其客户的网站链接。 而在“道”这个层面解决反作弊的问题，就要透过具体的作弊例子，找到作弊的动机和本质。进而从本质上解决问题。 学过信息论和有信号处理经验的读者可能知道这么一个事实：如果在发动机很吵的汽车里用手机打电话，对方可能听不清；但是如果知道了汽车发动机的频率，可以加上一个与发动机噪音频率相同、振幅相反的信号，很容易消除发动机的噪音，这样，接听人就可以完全听不到汽车的噪音。事实上，完全随机不相关的高斯白噪音是很难消除的。 SEO：Search Engine Optimizer 搜索引擎优化者（帮助别人作弊的人）。 今天的搜索引擎对几乎所有的查询都能给出非常多的信息，但问题是这些信息是否完全可信，尤其是当用户问的是一些需要专业人士认真作答的问题，比如医疗方面的问题。随着互联网的规模越来越大，各种不准确的信息也在不断的增加，那么如何才能从众多的信息源中找到最权威的信息，就成了今年来搜索引擎公司面对的难题。那么权威性是如何度量的呢？为了说明这一点，我们先要引入一个概念——— 提及（Mention）。如果在各种新闻、学术论文或者其他的网络信息页中，讨论到“吸烟危害”的主题时，某两个组织作为信息源被多次提及，那么我们就有理由相信这两个组织是谈论“吸烟危害”这个主题的权威机构。计算网站或网页权威性的另外一个难点在于，权威度与一般网页质量（比如PageRank）不同，它要和搜索主题相关。 作为数学家和天文学家的托勒密，他有很多发明和贡献，其中任何一项都足以让他在科学史上占有重要的一席之地。托勒密发明了球坐标（我们今天还在用），定义了包括赤道和零度经线在内的经纬线（今天地图就是这么划的），他提出了黄道，还发明了弧度制。其实，托勒密在天文学上的地位堪比欧几里得之于几何学，牛顿之于物理学。托勒密集成了毕达哥拉斯的一些思想，他也认为圆是最完美的几何图形，因此他用圆来描述行星运行的规律。根据托勒密的计算，制定了儒略历，即每年365天，每4年增加一个闰年，多一天。1500年来，人们根据他的计算决定农时。但是，经过1500年，托勒密对太阳运动的累计误差，还是多出了10天。1582年，教皇格里高利十三世在儒略历的基础上删除了10天，然后将每一个实际最后一年的闰年改成平年，然后每400年再回插回一个闰年，这就是我们今天用的日历，这个日历几乎没有误差。为了纪念格里高利十三世，现在的日历也叫格里高利日历。 波兰天文学家哥白尼发现，如果以太阳为中心来描述行星的运行，只需要8-10个圆，就能计算出一个行星的运行轨迹，他因此提出了日心说。很遗憾的是，哥白尼正确的假设并没有得到比托勒密更好的结果，相比托勒密的模型，他的模型误差要大得多。而哥白尼日心说的不准确性，也是教会和当时的人们认为哥白尼的学说是邪说的一个重要的原因，所以日心说要想让人心服口服地接受，就要更准确的描述行星的运动。开普勒很幸运地发现了行星围绕太阳运转的轨道实际上是椭圆形的，这样不需要用多个小圆套大圆，而只要用一个椭圆就能将星体运动规律描述清楚了。 一个正确的数学模型应当在形式上是简单的一个正确的模型一开始可能还不如一个精雕细琢的错误模型来的准确，但是，如果我们认定大的方向是对的，就应该坚持下去（日心说一开始并没有地心说准确）正确的模型也可能受噪音的干扰，而显得不准确；这是不应该用一种凑合的修正方法加以弥补，而是要找到噪音的根源，这也许能通往重大的发现。 在过去20年里，在机器学习和自然语言处理领域，80%的成果来自于数据量的增加。 马库斯的主张一贯是监理几个世界上最好的专业，而不是专业最齐全的系。我觉得，当今中国的大学，最需要的就是马库斯这样卓有远见的管理者。 马尔可夫链（Markov chain），他描述了一种状态序列，其每个状态值取决于前面有限个状态。 所有这些（因果）关系，都可以有一个量化的可信度（Belief），即用一个概率描述。也就是说，贝叶斯网络的弧上可以有附件的权重。马尔可夫假设保证了贝叶斯网络便于计算。我们可以通过这样一张网络估算出一个人患心血管疾病的可能性。可以讲，马尔可夫链是贝叶斯网络的特例，而贝叶斯网络是马尔可夫链的推广。使用贝叶斯网络必须先确定这个网络的拓扑结构，然后还要知道各个状态之间的概率，得到拓扑结构和这些参数的过程分别就叫做结构训练和参数训练，统称训练。一个防止陷入局部最优的方法，就是采用蒙特卡洛（Monte Carlo）的方法，用许多随机数在贝叶斯网络中试一试，看看是否陷入局部最优。这个方法的计算量比较大。最近，新的方法是利用信息论，计算节点之间两两的互信息，只保留互信息较大的节点直接的连接，然后再对简化了的网络进行完备的搜索，找到全局优化的结构。 它的特殊性在于，变量之间要遵守马尔可夫假设，即每个状态的转移概率只取决于相邻的状态，这一点，它和我们前面介绍的另一种概率图模型———贝叶斯网络相同。而它们的不同之处在于，条件场是无向图，而贝叶斯网络是有向图。 维特比算法是一个特殊但应用最广的动态规划算法。汉语中每个无声调的拼音对应13个左右的国标汉字。 移动通信使用过两种技术：频分多址（FDMA）和时分多址（TDMA）CDMA：码分多址。由于这种方法是根据不同的密码区分别发送的，因此称为码分多址。 这样同一类中各个点到中心的平均距离d较近，而不同类中心之间的平均距离D较远。我们希望的迭代过程是每一次迭代时，d比以前变小，而D变大。 首先，根据现有的模型，计算各个观测数据输入到模型中的计算结果，这个过程称为期望值计算过程（Expectation），或E过程；接下来，重新计算模型参数，以最大化期望值。在上面的例子中，我们最大化D和-d，这个过程称为最大化的过程（Maximization），或M过程。这一类的算法都称为EM算法。EM算法只需要有一些训练数据，定义一个最大化函数，剩下的事情就交给计算机了。经过若干次的迭代，我们需要的模型就训练好了。这实在是太美妙了，这也许是造物主可以安排的。所以我们把它称为上帝的算法。 单位搜索量带来的收入一般以千次搜索量带来的收入来衡量，称为RPM。 广告的点击量与展示的位置有关，放在第一条的广告的点击率理所当然比第二条的点击率要搞很多。因此，在预估点击率时，必须消除这个噪音。 云计算技术设计的面很广，从存储、计算、资源的调度到权限的管理等。云计算的关键之一是，如何把一个非常大的计算问题，自动分解到许多计算能力不是很强的计算机上，共同完成。这就是MapReduce的根本原理，将一个大任务拆分成小的子任务，并且完成子任务的计算，这个过程叫做Map，将中间结果合并成最终的结果，这个过程叫做Reduce。我们现在发现，Google颇为神秘的云计算中最重要的MapReduce工具，其实原理就是计算机算法中常用的“各个击破”法，它的原理原来这么简单———将复杂的大问题分解成很多小问题分别求解，然后再把小问题的解合并成原始问题的解。 而人工神经网络也具有节点，只是它使用了一个新的名词———神经元。而它的有向弧则被看成是连接神经元的神经。 我们有了训练数据，定义了一个成本函数C，然后按照梯度下降法找到让成本达到最小值的那组参数。这样，人工神经网络的训练就完成了。不过，在实际应用中，我们常常无法获得大量标注好的数据，因此大多数时候，我们不得不通过无监督的训练得到人工神经网络的参数。 设计这样一个成本函数，本身又是一个难题，使用人工神经网络的研究人员需要根据具体的应用来寻找合适的函数。不过总体来讲，成本函数总要遵循这样一个原则：既然人工神经网络解决的是分类的问题，那么我们希望分完类之后，同一类样本（训练数据）应该相互比较靠近，而不同类的样本应该尽可能的远离。比如前面提到的多维空间里的模式分类问题，就可以把每一个样本点到训练出来的聚类中心（Centroid）的欧几里得距离的均值作为成本函数。对已估计语言模型的条件概率，就可以用熵作为成本函数。定义了成本函数后，就可以用梯度下降法进行无监督的参数训练了。 贝叶斯网络更容易考虑（上下文）前后的相关性，因此可以解码一个输入的序列，比如将一段语音识别成文字，或者将一个英语句子翻译成中文。而人工神经网络的输出相对孤立，它可以识别一个个字，但是很难处理一个序列，因此它主要的应用常常是估计一个概率模型的参数，比如语音识别中的声学模型参数的训练、机器翻译中语言模型的训练，等等，而不是作为解码器。 而从20世纪90年代至今，计算能力的提升一半是靠处理器性能的提升，另一半则是靠很多处理器并行工作体现出来的，因此过去训练人工神经网络的方法就必须改变，以适应云计算的要求。Google大脑就是在这样的前提下诞生的，期创新之处也在于利用了云计算的并行处理技术。 人工神经网络是一个形式上非常简单但分类功能强大的机器学习工具，从中可以再次体会到数学中的简单之美。在现实生活中，真正能够通用的工具在形式上必定是简单的。 与模型一样，数据也十分重要，但是人们在很长时间里却低估了数据的作用。在中国的远古传说中，有伏羲演八卦的故事，伏羲是中国上古的三皇之一，比炎、黄二帝还要早得多。 而做实验的目的就是采集数据，因为科学发明需要通过这些数据来推导或者证实。因此，如果一个散户投资人能真正做到“用数据说话”，只需奉行一条投资决策，那就是买指数基金。这当然不是我的发明，而是投资领域注明的经济学家威廉•夏普（William F.Sharpe）和伯顿•麦基尔（Burton G.Malkiel）等人一直倡导的。即统计样本数量不充分，则统计数字毫无意义。至于需要多少数据来统计结果才是准确的，这就需要进行定量分析了。 让我们先看看有关网页搜索领域的竞争。在大多数人看来，Google的搜索比微软的Bing（在质量上）做得略好一点，是因为Google的算法好。这种看法在2010年以前当然是对的，因为那时Bing搜索在技术和工程方面确实明显落后于Google。但是今天这两家公司在技术上已经相差无几了，Google还能稍稍占优，除了产品设计略微好一些外，很多程度上靠的是数据的力量。 在搜索用到的诸多种数据中，最重要的数据有两类，即网页本身的数据和用户点击的数据。点击模型贡献了今天搜索排序至少60%—80%的权重。因此，一些公司就想出更激进的办法，如通过搜索条（Toolbar）、浏览器甚至是输入法来手机用户的点击行为。这些做法的好处在于不仅可以手机到用户使用该公司的搜索引擎本身的点击数据，而且还可能手机用户使用其它搜索引擎的数据。比如微软通过IE浏览器，手机用户使用Google搜索是的点击情况。这样一来，如果一家公司能够在浏览器市场占很大的份额，即使它的搜索量很小，也能收集大量的数据。有了这些数据，尤其是有了用户在更好的搜索引擎上的点击数据，一个搜索引擎公司便可以快速改进长尾搜索的质量。当然，有人诟病Bing的这种做法是“抄”Google的搜索结果，其实并没有直接抄，而是借用Google的结果改进自己的点击模型。这在中国市场上也是一样，因此，搜索质量的竞争就转换成了浏览器或者其它客户端软件市场占有率的竞争。 大数据的好处远不只是成本和准确的问题，它的优势还在于多维度（或叫全方位）。我之所以举医疗行业的例子，是因为除了IT行业，医疗保健是对大数据最热衷的行业。 高德纳的贡献在于找到了一种方法，使得一个算法好坏的度量和问题的大小不再相关。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客迁移大事记]]></title>
    <url>%2F2016%2F06%2F15%2F%E5%8D%9A%E5%AE%A2%E6%90%AC%E5%AE%B6%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[受不了新浪博客乱七八糟的广告，终于下定决心搭建GitHub个人博客了。GitHub及Hexo的安装，NexT主题配置，Sublime Text编辑器、Mark的使用，一天的努力，终于大功告成。从今天开始，以后就在这里记录工作心得、生活心得、读书心得，分享亲子时刻。之前几年记录的博客做了备份，并且还保留在新浪博客上忆桐之家以后有空再蚂蚁搬家般，把新浪博客迁移过来，目前貌似只能手工处理:-(]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于技术书籍的问题]]></title>
    <url>%2F2016%2F06%2F12%2F%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E4%B9%A6%E7%B1%8D%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[大概04年左右的时间，当时横下心，把手头所有的关于技术方面的书籍都扔了，包括看了至少3遍的《Thinking in java》。那时候，自己寻求转型，决定不再走技术路线。所以，后来看的数慢慢偏向了管理、历史和文化方面。现在，回过头来看，其实有点矫枉过正。长时间没有系统的看技术方面的书，导致对新的技术没有一点概念。所以，最近又慢慢的把技术方面的书捡回来看了，特别是新的技术方面的书，当然，还有需要恶补。不过，现在看书和以前看的类型还是有大的不同。以前看的书偏重于技术细节方面的书，看完是需要实践的。现在看的书侧重于原理，看完需要对某项技术有认识，明白原理，方便做出技术方面的判断。 人的轨迹是一个类似旋转楼梯的圆，从高空俯视下去只有一个圆，但其实每一个相似的原点，都是起点。只要勇敢走下去，我们就像DNA的模型一样，螺旋式上升]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于上下班途中看书的思考]]></title>
    <url>%2F2016%2F06%2F12%2F%E5%85%B3%E4%BA%8E%E4%B8%8A%E4%B8%8B%E7%8F%AD%E9%80%94%E4%B8%AD%E7%9C%8B%E4%B9%A6%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[这个学期因为搬到了广雅，离单位远，上下班各需要1个小时左右的时间，所以，捡起了之前的Kindle，利用上下班途中的时间拼命看书。坚持了2个月，发现人特别累，看完书，到单位累；看完书，回到家累。后来，反思了一下，上下班时间反而是一个好好让自己思考的好时间。这段时间没有人打扰，可以放空自己的思想，可以旁观芸芸众生。现在，我们缺乏的不是资讯，反而是思考。当然，因为减少了途中的看书时间，也只能好好利用上班或者在家的空闲时间看书了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《80/20法则》读后感]]></title>
    <url>%2F2016%2F05%2F10%2F8020%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[全书看完，受到的启发是，关注20%有价值的事情，只做最重要的事情！ 根据80/20（帕累托法则）的思维，阐述了一种反常规的思想：我们所说的一分耕耘一分收获并不存在，我们收获的80%往往是耕耘的20%所产生。所以我们的当务之急应该是找出那创造了80%价值的20%投入，这样才能达到事半功倍的效果。作者结合80/20的观点，对在企业发展、时间管理、个人生活等方面提出了自己的见解。 80/20原则，最早是在质量管理中得到使用。根据工厂的统计发现，80%的次品是因为20%的主要缺陷引起的，从而，优先处理这20%的缺陷，就能大幅度的提高产品的质量，降低次品率。 从这引申开，现实生活中，有80%的利润是产生于20%的产品或者客户。这就需要我们思考，我们如何通过优化资源的配置，从而提高公司的竞争力。作者认为，重视和挖掘那些创造了80%利润的客户和产品，忽略和放弃那些低价值的客户和产品。 但是，话说回来，那低效的80%产品可能利润不高，但是作为顾客来说，可能在购买20%高利润产品的时候，需要也顺便一起购买80%里面的某些产品。如果没有这些80%，顾客需要分两个地方购买，会不会导致客户的流逝？所以，有时候也需要考虑方便客户，站在满足客户的角度上来做出取舍，而不仅仅是仅仅考虑价值的问题。 同时，作者也认为，对于忽略和放弃的80%，也需要进行战略分析。我们需要区别对待，通过对市场吸引力、所占位置、收益等进行分析，哪些是新的市场、那些是朝阳产业、哪些是早期投入等等，来作为取舍的判断。 或者，在取舍的时候，也可以考虑通过降低成本的方式，提高低价值用户的利润率。一般情况下，更好的处理方法是将80%的小客户集中起来，为他们提供一套电话销售和订货服务系统。与直接销售相比，这样做既高效，成本又低。 80/20的原则，让我们聚焦于那关键的20%，而聚焦到20%，就能简化公司的管理。目前流行观点认为，因为规模化效应，规模化化之后，边际成本就会降低、利润增加。但是作者提出，规模增加到某个节点会因为复杂度的增加，导致成本的增加超过了利润的增加，从而降低了公司的利润，规模性效用被复杂性所产生的不可见隐形成本给颠覆了。 简单即为美。公司要保持简单，除了控制规模之外，非核心竞争力、非优势的产品和服务进行外包也是一种降低复杂度的一种方法。不过话说回来，作者也同意，大而简单的企业最好，只是需要我们控制复杂度的前提下扩大规模。 从时间管理上来说，并不是所有的事情都同等重要，所以我们关键是要学会找出最有价值的20%事情，然后集中资源优先去处理。 另外，关于时间管理，我们通常认为，计划的时候一般要充分考虑每个节点的时间，然后排出一个可行的时间计划。但是，你有没有想过，通过设立一个不可能的时间计划表，来促使你只做最有价值的20%，这样，就能通过20%的资源创造了80%的价值。类似，在谈判中，80%的让步也是在最后的20%时间里面做出的，因此，你最重要的诉求点，最好在谈判的最后提出，这样，迫于时间的压力，对方更容易做出让步。 引申到个人生活，埋头苦干已经不适合现在的社会了。你努力工作的回报很低，反而独到的思想和做自己想做的事才能为我们带来高额回报。在做事情前，需要利用80/20的思维，考虑哪些事情是值得做的，哪些事情是最有价值的。同时，思考你的方法是否突破了传统，是否提高了效率。这样，才能让你有限的精力投入到最有价值的部分。让你的生活、工作、学习三不误。 【一些有哲理的话】 1、爱尔兰戏剧家萧伯纳说过：“理性的人改变自己以适应这个世界，非理性的人则坚持改变这个世界来适应个人需求，因此，所有的进步都取决于这些非理性的人。” 2、一个数据库，不管它内含数据多么丰富，都称不上信息，它充其量只是信息的原料……一家企业最需要的信息以初始化、无序形式呈现出来时才是可用的。一家企业在做决策特别是战略性决策时，最需要的是企业外部的信息。结果、机遇和威胁只存在于企业外部。 3、总部存在的问题并不是开销，而在于它免除了那些一线工作人员的责任，剥夺了他们的主动权。撤销总部后，公司可以专注于客户需求，而不再去理会由管理层引发的问题。 在撤销总部前，不同的业务领域受到总部关注和干预的程度有所不同。能自主经营、不受总部“干扰”的产品和服务恰恰盈利最多。这就是为什么在实践中运用80/20利润分析法时，经营者通常会吃惊地发现大多数被遗忘的领域正是最赚钱的领域。这并非偶然现象。（但是，运用80/20分析法有时也会有副作用，那就是盈利最多的部分可能会得到高层管理者更多的关注。结果，这一部分的利润率就会有所下降。） 个人注：其实受总部关注最多的恰恰是因为该部分问题较多，因为总部需要处理问题、协调资源。没问题、顺利的部分，总部也不需要花太多精力去关注。 4、1909年时他就指出，他的任务是“普及汽车应用”。在那时，这一目标还很可笑——只有富人才买得起车。但是，批量生产、成本仅占早期汽车成本小部分的T型汽车实现了这一目标。不管这是好事还是坏事，总体来看好处要远多于坏处，我们享受到了“福特主义者”提供的“丰饶之角”。 5、仅培训那些你确信在未来数年里不打算跳槽的人。 让那些顶级销售人员培训他们，根据受训人员之后的表现来表彰和奖励这些销售明星。 加大对第一轮培训后表现最突出的员工的培训力度。挑出表现最优秀的20%受训员工，并将80%的培训力量用在他们身上。不再对排名后50%的员工进行培训，除非通过培训确实能收到奇效。 6、这世上只有四种军官。第一种又懒又笨，不必理会这种人，他们不会成为大害……第二种则是勤奋工作的聪明人，他们有成为优秀军官的潜质，考虑问题非常周全。第三种是勤奋工作的笨人，这些人是威胁，要立即开除，他们会给别人添麻烦。最后一种则既聪明又懒惰，这类人适合做最高职位。 冯·曼施泰因，《论德国军官》 7、凡有的，还要加给他，叫他多余；凡没有的，连他所有的，也要夺去。 《马太福音》 8、亚里士多德曾经说过幸福是人类一切活动的终极目标。 9、如果必须在成功和幸福间做出选择，最好选择幸福。 10、医疗保健问题就像大多数问题领域一样，预防总胜过治疗，预防总比治疗更省钱；在初期阶段就控制住疾病的发展总比到了晚期再采取措施管用得多；培养青少年养成坚持一生的良好生活习惯要胜过任何形式的公共卫生投资。 真正花大力气在各级学校开展健康教育无疑是明智之举，而且要一直推动此类健康教育的发展，直到“临界点”真正出现，学生的生活习惯实现彻底转变。 11、1798年，托马斯·马尔萨斯，一位古怪的英国传教士在他的《人口论》中不无担忧地指出，“人口的增长比食物供应的增长要快”。马尔萨斯对人口增长的估计很正确，但是他不曾想到农业生产率的增长也会如此之快。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《软件系统架构使用视点与利益相关者合作》读后感]]></title>
    <url>%2F2016%2F05%2F09%2F%E3%80%8A%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%BD%BF%E7%94%A8%E8%A7%86%E7%82%B9%E4%B8%8E%E5%88%A9%E7%9B%8A%E7%9B%B8%E5%85%B3%E8%80%85%E5%90%88%E4%BD%9C%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[参考资料：架构设计中常用的视图模型——架构蓝图—软件架构 “4+1” 视图模型一本大杂烩，涵盖了软件架构方方面面的知识，包括宏观的、微观的。所以看的过程觉得特别混乱。不过如果在实践软件架构过程中，还是一本好的参考书，在架构处理的过程中的各种情况，作者都有涉猎。另外，就是本书的翻译有点拗口，很多都是按英语的语序直接翻译过来，有些术语的翻译也不是很准确，建议对已一些术语的翻译，最好同时还保留英文，方便读者的理解。本书的读书笔记如下。 一、架构的总体原理1、总图 2、架构的承上启下作用 3、架构各元素的关系 4、视图、视角的分组及关系 5、视角在各视图的应用 二、视点及视图1、情景视图 2、功能视图 3、信息视图 4、并发视图 5、开发视图 6、部署视图 7、运维视图无。 三、视角1、安全性 2、性能和可伸缩性 3、可用性和弹性 4、演进无。 5、其它位置、开发资源、国际化、法规、易用性等。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>视图</tag>
        <tag>视点</tag>
        <tag>视角</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《从0到1》读后感]]></title>
    <url>%2F2016%2F04%2F20%2F%E3%80%8A%E4%BB%8E0%E5%88%B01%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[从0到1，从无到有，是质的变化，是推动人类进步的主要力量，也是一个公司能够拥有垄断利润的关键。每个企业都必须时刻思考如果抓住0到1的机会，而不是挤入从1到n的那种完全竞争状态的市场。 从0到1，是一种跨越性的创新，应对了中国那句古话，“道生一，一生二，二生三，三生万物”。道生一，就是从无到有的跳跃。从0到1，所以从奇点形成了我们的宇宙；从0到1，所以有了现代工业革命；从0到1，所以有了现代的信息技术。 从0到1是一种思维方式，一种追求。但是如何能够让自己发现0到1的机会，这才是成功者和普通人的区别。作者强调了要敢于挑战、独具一格的性格，要在别人意想不到的地方寻找利基市场，再利用自己技术壁垒，扩大市场，并形成垄断性的利润。那种通过技术的创新改变人类生活的垄断，是有助于社会的进步，因为他们通过解决独一无二的问题取得了创造性垄断的地位。像作者说的，每个企业都在追求垄断性的利润，完全竞争会吞噬企业的利润，使企业只着眼于目前的利益。所以，每个企业要思考未来10、20的世界的样子，然后思考企业能利用到哪个机会，从而抢先一步，占领市场，并且必须使自己的产品或者技术是替代品10倍优势，来保证你的竞争优势。 作者在文中也提到了Paypal黑帮的个人背景和性格，这几个人后来都成了硅谷的著名的创业者或投资人（例如火箭发射回收、特斯拉电动汽车的创始人马斯克Musk）。他们那种敢于挑战、独立思考、敢于和别人不一样的风格是他们创业成功的必要素质，而反思中国的教育，却是希望把大家培养成一个模子的，人云亦云的考试机器。 作者也思考了未来社会智能机器人的竞争问题，作者认为，人类之间的竞争，是涉及一种资源竞争的零和竞争。而机器人不需要和人类竞争资源，所以机器人应该是人类的好帮手，是人类提升生活水平的工具。当然，当超人工智能的出现，人类的将来是怎么样，其实谁也说不清楚。 名句摘录： 1、尼采曾在精神错乱前写道：“个人发生精神错乱很少见，但对群体、政党、国家、时代而言，精神错乱却很普遍。” 2、但是音乐在播放，我们没法责备那些随音乐舞动的人。 3、托尔斯泰在《安娜·卡列尼娜》中以下面这段文字作为开头：“幸福的家庭总是相似的，不幸的家庭各有各的不幸。” 4、国际象棋大师卡帕布兰卡说过：“要想赢，首要工作就是研究残局。” 5、唯一的问题是怎样坦然接受我们的悲剧命运。 6、今天，社会中流传着以下两点看法：死亡不可避免，而且随机发生。 7、风险投资基金通常要10年之后才能退出，因为成功的公司需要时间成长。 8、如果你能解释为什么公司使命激动人心，那么你就能吸引你需要的员工。不是解释工作的重要性，而是解释为什么你在做别人从未想过要做的重要事情。这是唯一能让你的理由变得独特的方法。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《机器学习实战》读后感及笔记]]></title>
    <url>%2F2016%2F04%2F16%2F%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%E5%8F%8A%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一本关于机器学习的实用教程，涵盖了从原理、案例到程序实现（Python）的全面介绍。 机器学习就是从数据中发现数据背后的本质，捕获数据中有价值的信息和模式。 机器学习的核心就是算法，而算法的基础就是一序列的数学知识，包括统计、概率、矩阵等方面的知识。机器学习除了能模拟专家做出一些有目标的预测之外，还能根据数据获取背后的分类和关联关系，并做出预测。 在这个大数据的时代，数据无处不在，如何利用好这些数据、如何发挥这些数据的价值，是人类的挑战，也是每个人的机会。 工业革命是机器成为了人类的另一双手，让人类从繁重的体力劳动转向脑力劳动；而信息技术，特别是人工智能（机器学习）将成为人类的另一个大脑，促进人类从目前的脑力劳动升级到更有创造力的活动中去，造福人类的生活。 在以后的年代，因为机器学习的基础就是统计，统计学将成为一门最热门的科学。 这本书烧了好多脑，从第一遍的一知半解，再到第二遍的难点突破和脑图笔记分解，到第三遍的框架理解和梳理。 也不说那么多了，经过整理的框架如下，具体的内容在脑图文件中可以展开。 如果想深入学习机器学习的算法的话，这本书还是一个不错的推荐。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《无声的告白》读后感]]></title>
    <url>%2F2016%2F04%2F15%2F%E3%80%8A%E6%97%A0%E5%A3%B0%E7%9A%84%E5%91%8A%E7%99%BD%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[一个幸福美满的家庭，随着女儿莉迪亚的死亡，轰然倒塌。 事情真相，像洋葱一样，一层一层的剥开， 死亡的真相渐渐明朗。 一个建立在互不沟通基础上的幸福，像五彩肥皂泡一样，脆弱得承受不了一根稻草的压力。 悲剧的根源，有社会的、家庭的、个人的，这一切交错在一起，导演了一出令人惊讶的故事。 书中有一句话，“一个来自混血家庭背景的孩子，通常难以找到自己的定位”，一句简单的话语，把美国种族问题现状尖锐的抛了出来。一个混血的孩子，特别是一个华人特征的混血孩子，在美国这种以白人为主的社会里，总是显得格外的与众不同。与众不同的结果就是处处难以融入你身边的社会。不管莉迪亚的爸爸多么鼓励她要学会交朋友、要学会融入集体，但是，这些反而给莉迪亚带来了更大的压力，反而让莉迪亚通过表面的、欺骗性交友的应付她的父亲，为以后悲剧埋下了伏笔。上帝造了人，有不同的色彩，同时也有不同的性格，所以作为父母，需要尊重孩子的特性，接受孩子的不一样，让孩子按照她的想法去生活。 莉迪亚母亲玛丽琳的壮志未酬、与众不同的思想，潜移默化的附加到了莉迪亚身上。又因为玛丽琳出走事件的影响，把莉迪亚置于一种一定要完成母亲心愿的高度压力之下。母亲的压力、学习的退步，把自尊心极强的莉迪亚整个信心给摧毁。而玛丽琳就像鸵鸟一样，自欺欺人，看不到或者说不愿意看到真相，生活在一个自己编造的幻觉当中，母女俩维护着一种自欺欺人的平衡当中。 而哥哥内斯要到哈佛上学的事件，把莉迪亚唯一能说说心里话，或者说，在这个家庭中唯一能理解自己的人，又要离开了。这把莉迪亚进一步推到了崩溃的边缘。杰克和哥哥内斯的关系成了压垮莉迪亚的最后一根稻草，成了莉迪亚独自走向湖中，独自走完了人生最后一程的推手…… 这一切，只有那个不起眼的妹妹汉娜，在默默的关注着这一切，也只有她清楚这些故事背后的真相。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《岛上书店》读后感]]></title>
    <url>%2F2016%2F04%2F07%2F%E3%80%8A%E5%B2%9B%E4%B8%8A%E4%B9%A6%E5%BA%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[这本书每章都以书店老板A.J.一篇短小书评来开篇。 全书用一种质朴、平和的文字，描写与世隔绝的艾丽丝岛上书店老板A.J.平凡又不平常的一生。 想要了解一个人，你只需要问一个问题：“你最喜欢哪一本书？” 没有谁是一座孤岛。我们不是我们所收集的、得到的、所读的东西，只要我们还活着，我们就是爱，我们所爱的事物，们所爱的人，我认为真的会存活下去。 这就是A.J.给我们传递的关于阅读和爱的真谛。 因为阅读，他找到了和他有共同阅读兴趣的出版社业务员艾米。 因为爱，A.J.收养了孤儿玛雅，像作者所说的：“一旦一个人开始在乎一件事，就不得不在乎一切事。”因为爱，A.J.把中年丧妻之后的消沉抛之脑后，努力使自己的人生变得美好而辽阔。 虽然后来因为癌症而离开人世，但他的爱在他深爱的两个女人身上得到了延续，他的阅读兴趣在深爱的两个女人那里得到了传承。 本书开篇从艾米代替上任业务员到小岛给书店老板A.J.推销图书开始，到艾米下任到岛上给下任老板兰比亚斯推销图书结束。这些，就像阅读和爱，不断的在你所爱的人中循环着，无始无终。 唯爱与阅读，不可辜负。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《乌合之众》读后感]]></title>
    <url>%2F2016%2F03%2F29%2F%E3%80%8A%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[《乌合之众》，作者勒庞，群体心理学的创始人，这本书也是社会心理学的奠基之作。 懂得群体心理学，就像拥有一道强光，照亮了许多历史现象和经济现象，没有它，那些现象就很难看清。 作者围绕着群体心理学，思考了群体中人的行为特点进行了讨论。 作者认为，人在群体中会失去独立意识，处于无意识的状态，因为感觉到集体力量的强大、有法不责众的心态、在群体中情绪受到暗示和传染，激情燃烧、感情强烈而极端。一个人独处时，他可能是一个有教养的人，但是一旦加入某个群体，就便成了野蛮人，凶残、易怒、充满暴力。 回想一下，在中国发生的很多事情，都印证了作者的这个观点，例如：文化大革命就是这么一个典型的例子，反动派、革命派、红卫兵都是一个群体的活生生的体现。 群体表现出来的感情，不管好坏，都有简单化和极端化这双重特点。他们可以杀人放火、无恶不作，也可以表现得无比忠诚、勇于牺牲、无私无畏，他们会很容易受到荣誉、名誉、国家或者宗教的名字而赴汤蹈火，牺牲性命。 群体的犯罪是在强烈的暗示下进行的，从法律上说是有罪的，但确实不是一般意义上的罪行。 很多伟大的领袖都能够利用群体的特点，来达到目的。 而信仰的力量永远是最强大的，罗马帝国维持其统治，靠的不是武力，而是靠它激起的虔诚的信仰。通过宗教形式，让信仰在人们心中确立，又通过宗教形式，使得信仰免受讨论。所以伟大领袖的重要作用就是创造信仰，不管是政治信仰、宗教信仰、社会信仰，还是一个主张、一个人物或者一个作品。 通过言语的艺术，领导者通过断言、重复、感染，暗示给群体的观念，通过绝对化、简单化的形式，把领导者的思想灌输到了群体当中。 人类的进化，几万年来，科学技术得到飞速发展，例如人类已经能够发明计算机来打败人类围棋高手。但是，人类的智慧，现代人和古人，反而没有太多的差异。甚至，古人因为经历的事情更多、受到的苦难更深，在做人境界、智慧上比现代人更胜一筹。所以说群体的心里学、群体的弱点，在现在社会也有同样的价值。 其它好观点： 1、制度和法律是人们内心精神的体现形式，反映了人们内心精神的需求。既然是人们内心精神诞生了制度和法律，制度和法律就无法改变它。 2、从观察中得到的结论往往是不成熟的，我们看得见的现象背后，还有看不清楚的东西。甚至在这些东西背后，还有看不见的东西 3、陪审团容易受感情因素影响，但这也侧面缓冲了法律的严厉性。如果是法官必须按照法律行事，而现实上往往是法外有情的。 所以最好的律师就首要的是影响陪审员的感情。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>哲学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[合约规划在房地产行业的应用]]></title>
    <url>%2F2016%2F03%2F28%2F%E5%90%88%E7%BA%A6%E8%A7%84%E5%88%92%E5%9C%A8%E6%88%BF%E5%9C%B0%E4%BA%A7%E8%A1%8C%E4%B8%9A%E7%9A%84%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[房地产是一个管理复杂、成本敏感的企业。为了控制风险、保证利润率，每个企业都在最求卓越的成本管理模式，实现精细化、专业化的成本管理目标。 房地产的成本构成，一般分6大成本科目：土地成本、前期工程费用、建筑安装工程、市政及环境工程、公共配套工程、开发间接费用；3大费用：销售费用、财务费用、管理费用。 而房价的构成，按照平均水平估计如下： 房价=土地成本(30%)+建安成本(20%)+三大费用(10%)+税费(15%)+利润(25%) 所以，建安成本、三大费用，是企业成本管理的核心关注点。 房地产成本控制从最初以合同造价控制的事中管理模式，慢慢发展到以目标成本控制的事前动态成本管理。 目标成本控制过程当中，也发现了一些弊端。 目标成本是以科目的粒度来分解，而实际生产是以合同为载体管理，两者有着天然上的差异。导致，在实际生产过程当中，签订合同（或招标）时需要逐个对应目标成本的科目进行绑定、拆分、对比。给一线人员增加很大的工作量，同时，对一线人员的成本素质要求非常高。 有没有什么更好的解决方法呢？（见下图）一、合约规划控制原理说明 为了解决以上问题，房地产企业在成本管控中引入了合约规划管控体系，合约规划作为两者之间的桥梁。具体框架见下图。 把目标成本分解到合约规划，在项目初期就明确了项目的拟签合同清单及对应金额，通过合约规划来控制预算的编制、合同的签订、变更签证的发生、结算的金额等。实现了目标成本通过合约规划这个载体对事前、事中、事后的成本进行全生命周期的控制。具体见下图。 合约规划明确了一个项目拟签合同的份数、每份合同的金额，同时，结合合同范本（规定了相关的发包范围、发包方式、计价标准、付款标准等），就在控制目标成本的同时，规避了合同条款的法律风险，指导项目的经营生产。 二、合约规划和目标成本关联的方式 经过多年的积累，对常见的开发模式、产品、户型、地区，房地产企业都沉淀了多套历史成本数据，基本都有一套比较成熟的科目体系，如何把这些目标成本转换成合约规划，是合约规划体系建设要考虑的第一个问题。 下面就目标成本与合约规划分解衔接的几种方式进行说明。 1、末级科目分解到多个合约规划 原理：以成本科目为基础，目标成本的末级科目分解成多个合约规划。末级科目和合约规划是1:N的对应关系，合约规划与合同的关系是N:1。如下图： 该方式优点： 合约规划的编制简单，根据科目处理即可。签订合同时，能够选择对应合约规划组合而成。对于不同项目、不同工程的合同不统一、项目个性化比较强的情况，能灵活应对。 该方式缺点： 如果科目层级太多、太细，合约规划的量会很多。如果在实际中执行，建议成本科目层级不要太多。 2、按照合同编制一一对应的合约规划 原理：以合同业务为基础，一份合同对应一份合约规划，一份合约规划对应多个末级科目，末级科目和合约规划是N:N的关系，合约规划与合同是1:1的关系。如下图： 目标成本和合约规划的桥梁是通过成本科目和合约规划对应工程发包方案中的工程分项进行关联。如下图： 该方式优点： 合约规划编制的时候就明确了合同的份数、每份合同金额、范围及工作内容（科目组成）。签订合同的时候只需要找到对应的合约规划即可，相关的信息就从合约规划带过来，经办人的操作非常简单。 该方式缺点： 编制合约规划的时候，需要明确每份合约规划对应的工程分项、每份合约规划的工作范围和工作界面。但实际生产过程中，不同施工队的专业能力、承包范围、工作划分和合约规划不一致，往往都是在合同签订（或招标）的时候，才能清楚不同合同对应的施工范围，导致合约规划的变更非常频繁。 3、费用类成本的合约规划控制 除了上述1、2点涉及的成本能够以合同的方式进行合约规划以外，房地产开发当中涉及的一些政府规费无法通过合同来处理，同时，全成本口径的三大费用（销售费用、财务费用、管理费用）有部分也不能进行预先的合约规划处理。如下图： 从全成本的角度出发，建议在科目中增加三大费用科目，然后进行总额控制。 费用类科目，存在两种模式，签订合同或者非合同（政府规费类），统一的处理模式是，每个大类费用（或者对应开发费用科目），编制一个合约规划匹配对应的科目金额。在实际过程中，签订合同（费用是通过虚拟合同处理，流程会走单独的简化流程）时，从对应合约规划总额扣减相应金额，剩余的规划金额自动转换生成一个新的合约规划。 具体的实现原理见下图： 三、合约规划余量的处理方式 在编制合约规划时，实际签订的合同金额会少于合约规划的金额，对于剩余部分的处理，不同企业根据自身的管理目标，也会有不同管理方式。 常见的规划余量有如下几个方式： 1、余额可以作为规划余量给其它同科目下合约规划使用，同时在动态成本中计入待发生成本； 2、余额可以自动结转成新的合约规划，可以供新合同签订使用，同时在动态成本中计入待发生成本； 3、余额可以作为合同的变更成本，在将来合同发生变更签证的时候从该余量中消化，同时在动态成本中计入待发生成本； 4、余额不能再使用，作为节省的成本。 四、合约规划编制的责任分工 合约规划的编制是一项复杂的工作，在落地过程中需要考虑由哪个部门来统筹承担该项职责，需要进行明确。 通常来说，合约规划的编制涉及到成本、招标，在编制过程中需要这两个部门的参与，所以一般企业会单独成立一个合约部，合约部、成本部、招标部同是设立在一个大的部门下面，主要的职责是负责合约规划的编制和合同的统筹管理。 同时，合约规划在初步设计的阶段会进行第一版方案版的编制，在施工图完备之后，再出一版执行版。 总之，合约规划作为企业经济活动价值链前段的有效管控手段，能有效规避一线人员通过化整为零绕过授权体系的问题，能有效提高项目的成本管控水平，同时能简化项目一线人员合同签订、跟踪的工作。]]></content>
      <categories>
        <category>地产相关</category>
      </categories>
      <tags>
        <tag>合约</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《人工智能的未来》读后感]]></title>
    <url>%2F2016%2F03%2F25%2F%E3%80%8A%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E6%9C%AA%E6%9D%A5%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[趁着AlphaGO掀起的热潮，这周看完了《人工智能的未来》，一本谈论人工智能关于计算机技术原理、神经学、哲学的书籍。 关于人工智能的定义，技术上和哲学上都颇具争议。 图灵测试提供了一种技术的、可衡量的手段；但在哲学上，人工智能永远回避不了关于意识或自由意志的问题。 关于自由意志，叔本华提出：“你可以做你想做的，但在生活中任何给定的时刻，你只能想做一件确定的事情，除此之外，绝对没有任何其它事情。”这种决定论的思想，和我们认为我们可以选择我所爱、做我所选大相径庭。 而作者认为，当机器说出它们的感受和感知经验，而我们相信它们所说的是真的时，它们就真正成了有意识的人。 作者通过思维模式识别理论、隐马尔可夫层级模型、遗传算法等人工智能技术，阐述了人工职能领域的进展，同时基于信息科技遵循指数增长的规律，提出了加速回报定律，乐观预计智能机器人在未来几十年内会出现。 从最初的人工耳蜗、人工眼球到人工大脑的扩展，非生物系统的引入（特别是人工大脑技术），是否会产生另外的我，而我们大部分思想（甚至全部）存在云端，是否就可以得到“永生”。 数学家斯坦·乌拉姆说过：“技术的加速发展和对人类生活模式的改变的进展在朝着人类历史上某种类似奇点的方向发展，在这个奇点之后，我们现在熟知的社会将不复存在”。 这一天，对人类来说是喜还是忧？人类是通过自己的智慧毁灭了自己还是得到了永生，谁能说清楚呢？]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《佛学常识答问》读后感]]></title>
    <url>%2F2016%2F03%2F25%2F%E3%80%8A%E4%BD%9B%E5%AD%A6%E5%B8%B8%E8%AF%86%E7%AD%94%E9%97%AE%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[一些我们日常司空见惯的名词，原来别有含义。 例如：南无阿弥陀佛的南无（读na mo 一声）是“敬礼”的意思，如来佛不是一个佛而是“佛陀”的统称，例如可以说释伽牟尼如来。 佛教教义的基本内容就是关于人世间的苦，然后教导人消灭苦的法。而基本的思想就是空及轮回的思想，依据的原理就是诸法由因缘而起。 掩卷沉思，突然想到从小看到大的《西游记》。 之前对于唐僧取经，简单的理解就是为了到西天拿到经书，然后就可以成佛了。 现在回想，在取经途中，经历各种考验、诱惑、危险才是他们成佛的缘。 或者证到无上大觉而成为佛陀，或度己度众生而成了菩萨，或者六根清净证入涅槃而成为罗汉，一切由因缘而起。 人生就像一条漫长的取经路，开始的目的就是经书。可是，当我们达到终点的时候，才发现，真正能够成就我们的，恰恰是旅途上你经历的那些事、遇到的那些人。]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>宗教</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《耶路撒冷三千年》读后感]]></title>
    <url>%2F2016%2F03%2F25%2F%E3%80%8A%E8%80%B6%E8%B7%AF%E6%92%92%E5%86%B7%E4%B8%89%E5%8D%83%E5%B9%B4%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[出于中国政治宣传的需要，作为美国同伙之一的以色列总是以一副欺凌巴勒斯坦的面目出现。 但是《耶路撒冷三千年》，却给我们展现了犹太人三千年来备受磨难、颠沛流离、居无定所的历史。 因为耶稣受难的缘故，犹太人成了基督教徒、伊斯兰教徒的冲突对象，而耶路撒冷的神圣性又使犹太人的应许之地，成了各大帝国的必争之地，罗马帝国、波斯帝国、拜占庭帝国、奥斯曼帝国的铁骑都曾从耶路撒冷踏过，希特勒的“最终解决方案”，更是使犹太人面临灭族的危险。 当你回顾起中国的百年屈辱史，更能感同身受到犹太人对于民族生存、安全的关注，也就自然了解以色列一系列看似强势的行事方式，当然，巴勒斯坦的人民也是如此。 但是，作为三大宗教的圣地耶路撒冷，冲突只是唯一的选择吗？]]></content>
      <categories>
        <category>读书心得</category>
      </categories>
      <tags>
        <tag>宗教</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐长大了]]></title>
    <url>%2F2013%2F12%2F02%2F%E6%A1%90%E6%A1%90%E9%95%BF%E5%A4%A7%E4%BA%86%2F</url>
    <content type="text"><![CDATA[这个学期，桐桐好像突然长大了。 有了很强烈的独立意识。 作业基本能自己主动独立完成，这学期爸爸都不需要给他检查作业了。 另外，也能主动和别人打交道了。 这学期，也会受同学影响，帮他买了相机、手表，因为周围的同学基本都配备了这些。 不过，也慢慢看出有点青春期的意识了，有点和妈妈作对。 PS：桐桐上个月参加学而思的新概念英语背诵比赛，拿了二等奖。不错！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内疚]]></title>
    <url>%2F2013%2F08%2F19%2F%E5%86%85%E7%96%9A%2F</url>
    <content type="text"><![CDATA[这个月以来，桐桐开始带OK镜了。 桐桐是个比较敏感的小孩，所以妈妈帮他带的时候，有时候往往要尝试好多次。 爸爸没耐心，就骂桐桐。 有一天晚上，带好OK镜之后，桐桐伤心的说：“爸爸，我带不好OK镜，我很自责。你骂我，让我觉得我比别人差。”。 听了这话，搞得爸爸很内疚。 桐桐其实是个很自觉的小孩了，对自己的要求也很高。 爸爸以后还是对桐桐多鼓励，爸爸也需要改变自己。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最近大事记]]></title>
    <url>%2F2013%2F08%2F19%2F%E6%9C%80%E8%BF%91%E5%A4%A7%E4%BA%8B%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[很久没在这里写博客了。 慢慢转到了微博以及微信。 8月份开始，桐桐配了OK镜了，因为检查出来300度，希望能控制好度数。 因为公公病了，这个暑假的旅游计划都取消。只是在利用周末时间带桐桐去了深圳东部华侨城和南沙。东部华侨城人太多了，不好玩，还好去了大梅沙沙滩，玩了一会。南沙大酒店还不错，不过南沙的海滩实在不像海滩，在南沙去了一趟天后宫。第二天就去了十九涌吃海鲜，多亏了百度地图，那个高德地图老说GPS未定位，害人不浅。 PS：史阿姨这个8月1日离职了，在我们家做了好多年了，还有点舍不得呀。 PS：桐桐上学期考了个全班第二名，还不错。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同学转学。]]></title>
    <url>%2F2013%2F03%2F01%2F%E5%90%8C%E5%AD%A6%E8%BD%AC%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[桐桐班的凯伦这学期转学了。 琪殷，开学到现在也没有来，怀疑也是转学了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自己睡]]></title>
    <url>%2F2013%2F03%2F01%2F%E8%87%AA%E5%B7%B1%E7%9D%A1%2F</url>
    <content type="text"><![CDATA[桐桐今年春节后终于自己睡了。大概在初八的时候，就自己睡。 并且适应得很好。赞~~~~~~•]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐班级趣事]]></title>
    <url>%2F2012%2F11%2F08%2F%E6%A1%90%E6%A1%90%E7%8F%AD%E7%BA%A7%E8%B6%A3%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[老师问同学们请问叶圣陶除了是文学家，教育家还是什么家？谟然同学高喊，他还是老人家。。。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[与conca合照]]></title>
    <url>%2F2012%2F11%2F08%2F%E4%B8%8Econca%E5%90%88%E7%85%A7%2F</url>
    <content type="text"><![CDATA[10月27日，恒大足球队在天河体育中心夺冠那天晚上，桐桐到太古散步偶遇恒大的球星孔卡抱着爱子，与其来了一张合照，被同学发现了，问怎么可以与孔卡合照、桐说我们是散步碰到孔卡的，可爱的超极球迷立桓同学问，不知道这星期孔卡还去太古散步吗？]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国庆额济纳行]]></title>
    <url>%2F2012%2F10%2F08%2F%E5%9B%BD%E5%BA%86%E9%A2%9D%E6%B5%8E%E7%BA%B3%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[这次国庆，是和中秋节连在一起。 过完中秋，我们一家、舅舅一家，共六人，10月1日去额济纳旅行了。 早上6点出门，赶飞机，中午到兰州。 飞机上发生了一件趣事，舅舅的咖啡倒了，弄湿了iPad和裤脚，没想到过了一会，爸爸的咖啡也倒了，弄湿了妈妈的裤子，让妈妈难受了好一阵。然后下飞机时，舅舅发现他的相机坏了，显示20错误，怎么搞都没搞好，兰州又没有佳能的维修点。到专卖店换了电池、内存卡都不行，找了两档普通维修点，都说需要送检，我们等不起，只能走了。 后来，导游老羊把自己的相机借给了舅舅。不然舅舅会郁闷死了。 吃完午饭，坐下午的火车到嘉峪关，到嘉峪关的时候已经快晚上12点了。第二天，6点半起床，吃完早饭之后，坐大巴到额济纳去了。 路上花了将近6个小时，中午1点半左右才到额济纳。吃完午饭，暂时在呼镇上住下。去额济纳的路上，一路都是荒芜的戈壁滩，间或有一些小草类，远处偶尔会有一些胡杨林，也是稀稀疏疏的。 在路上，停车上了一次简易厕所，开始见识到了西部的厕所时个什么样子了。 2日下午，3点半，我们去了额济纳八道桥的？？吉林沙漠，去的地方时在沙漠边缘了。不过还是在那里体验了一些沙漠的乐趣，穿防沙鞋套、骑骆驼、玩沙子、爬沙丘、滑沙丘、看沙漠日落。不过，可能是风沙的缘故，当时舅舅、菲菲、桐桐都流鼻血了，不过不是很严重。 看完日落，就会镇上吃完，因为大家都是同一时间赶回去，路上比较塞，到了镇上都9点了，快快吃完饭，回酒店洗澡，睡觉了。 3日早上，整个团在导游老羊的带领下，5点半起床，去居延海（其实是一个湖）开日出了。路上很颠簸，我们到的时候，看到已经有密密麻麻的人群了，好位置都给占领了。很多人甚至都爬到自己的车顶上架起来相机，我们只能挑了一些不是太好的位置，架好相机，准比等日出。可是等到了7点多，太阳的影子都看不到，而天慢慢亮了起来。有经验的团友说，日出已经没了。太阳已经升上来了，天气不好，云层比较厚，看不了日出。 我们只能在芦苇荡那里拍了一些照片，走了。走的时候，才发现，原来在居延海边上，架着很多露营的帐篷，很多人为了看日出，直接在边上露营了，可惜了！ 也是在这里体验到了额济纳厕所条件的恶劣。 回去路上，本来是要看什么神树的，传说中，之前，有个将军在烧一片胡杨林的时候，就这棵树没有给烧死，后人就把它当神树崇拜了，不过因为车太多，路不好停，司机说，其实没什么号看的，就一颗大的胡杨树。大家就都没去看了，为了补偿，路上有一条河，风景也不错，我们就停下来拍了一会。 下午，回酒店休息了一会，下午就出发去黑水城、怪树林了。 去黑水城（是一个什么年代的一个边塞的重镇）的路上，塞车特别厉害，堵了很久，司机说，今年高速免费，导致自驾游的认太多，以前的人是没有这么多的。不过堵得时候，发生了一些趣事。主路是双向两车道。有些车为了赶快，开到路边的戈壁滩的沙路上去了，可能有些地方的土比较松，路上发生了好多起车子陷在沙路上的事故，有些用另外一些车拖了出来；有些在轮胎下垫了些硬树木，一大推人用力推，也拖了出来；有些不好运，陷了那里，一筹莫展。 过了一会，车子终于到了售票点，不过这里只是到了怪树林，离黑水城还有9公里按照我们的形成，先去黑水城看，然后回到怪树林拍日落时候的凄凉的风景。当时，听说，去黑水城那里还堵了2公里的车，大家堵怕了，都一致同意在怪树林下了。 怪树林当时是一片胡杨森里，后来河流改道，导致这片胡杨林干枯死了，不过传说胡杨林千年不死、死后千年不倒、倒后千年不腐，于是，在怪树林这里就有各种各样形式怪异的枯死的胡杨林。 一样看上去千奇百怪，太阳开始落山的时候，看过去，满目苍凉。 4日，我们终于要去，这次旅游的核心景区了：看胡杨林。主要是四道桥、二道桥。 第二天7点，我们整个团出发了，去了景区，在路边买了几个肉夹馍后，就坐车到了八道桥，八道桥的景区很大，胡杨林有部分已经黄了，部分还是绿的。趁早上的太阳很好，拍了很多照片。 中午，吃了简单的盒饭，我们又跑去二道桥去拍摄了，二道桥的风景非常漂亮，水面比较宽，拍出来的照片效果比较好。听说，这里河道的，平时是干涸的，因为10月份前后的胡杨林节，才引水过来，满足旅游的需求。因为我们到的时候已经是中午了，太阳很晒，大家也很累，拍了一些，就坐下休息了。等到5点多的时候，要拍日落的河面胡杨林倒影的时候，我们才有开始行动。在晚霞的照耀下，湖底印出一片片的胡杨林，非常漂亮。 今天，终于能早回酒店，好好的睡一觉了，收拾好行李，准备回程了。 第二天，我们7点出发了，开出去不远，车子死火了，打了几次，都没搞好，这是太阳正好升上来，慢慢趁机拍了几张日出照片，补偿了前天看日出的遗憾。 后来，车子修好了，我们来到了一道桥，从一道桥走路进去。 早上的太阳很温馨的照在地面，可能是休息了一晚，或者是早上太阳的缘故，今天的二道桥，看起来比昨天好多了，妈妈又是例牌给桐桐照了很多照片，早上河面的倒影，因为风比较小的缘故，更加清晰，拍照效果也更好。 拍了一会，我们出去吃饭，准备回嘉峪关了，我们的主要行程就此结束。 回到嘉峪关，吃晚饭，团里面的四个小朋友终于火热的打成一片了，有个成都的小妹妹很好玩，大伙玩得都疯了，吃完饭，团友就各奔前程了，我们部分人坐嘉峪关到兰州的卧铺。 6日7点我们到了兰州，因为还有点时间，老羊就带我们去黄河边看了看，顺便去了黄河母亲的雕像拍了一下，然后去机场坐飞机回广州了。 回来，看新闻，才知道其它热门景点都是爆满，才庆幸自己去了额济纳，我们跟的团是摄影为主题的团，这条线路的比较艰苦，去的人相对少点。并且景区都是树林、沙漠，人也不觉得那么多。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[卖报纸]]></title>
    <url>%2F2012%2F09%2F03%2F%E5%8D%96%E6%8A%A5%E7%BA%B8%2F</url>
    <content type="text"><![CDATA[昨天，9月2日，桐桐参加了新快报组织的卖报纸活动。 他去了购书中心，有四班的两个同学，还有菲菲。 桐桐一共卖了13份，还不错。 很有勇气！！！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蔡珩阿姨一家]]></title>
    <url>%2F2012%2F09%2F03%2F%E8%94%A1%E7%8F%A9%E9%98%BF%E5%A7%A8%E4%B8%80%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[蔡珩阿姨一家，因为恬恬要参加“马思聪杯”小提琴比赛，来广州了。 8月17日下午，他们一家和小提琴老师都来了，爸爸去机场接他们飞机。 8月18日，他们比赛完之后（恬恬获得了铜奖），爸爸带他们去了中山纪念堂、越秀山公园、陈家祠，晚上，我们两家人在炳胜吃完饭，就顺便去参观了花城广场。 19日，两家人，在稻香喝完早茶，我和桐桐就带他们去香江野生动物园了，晚上，看了长隆大马戏。本来准备去黄埔军校旧址的，可惜时间不够了。 20日，周一，爸爸要上班，蔡珩阿姨的客户就带他们去了黄埔军校（可惜的是，人家那天闭馆，只能在门口拍了个照），然后他们去爬广州塔，晚上去参加了组委会组织的珠江夜游。下班之后，10点钟，我们一家和蔡珩阿姨一家去了宝业路吃了宵夜。 21日，周二，蔡珩阿姨的客户继续带他们去参观了沙面、上下九、西关那边，晚上参加了组委会组织的小提琴比赛的汇报演出。 22日，他们要回去了，爸爸又送了他们去机场。 PS：恬恬是个很可爱的小女孩~~~~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[牛津合唱团]]></title>
    <url>%2F2012%2F08%2F07%2F%E7%89%9B%E6%B4%A5%E5%90%88%E5%94%B1%E5%9B%A2%2F</url>
    <content type="text"><![CDATA[8月4日，周六，一家人去星海音乐厅，欣赏了 牛津合唱团的表演。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[换班主任了]]></title>
    <url>%2F2012%2F08%2F07%2F%E6%8D%A2%E7%8F%AD%E4%B8%BB%E4%BB%BB%E4%BA%86%2F</url>
    <content type="text"><![CDATA[莫老师，因为家庭，要照顾她生病爸爸的缘故，要离开华阳了。 可惜了，一个好的、专业的老师。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三峡游]]></title>
    <url>%2F2012%2F08%2F07%2F%E4%B8%89%E5%B3%A1%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[暑假了，终于又可以带桐桐去旅游了。 一开始就定好了去三峡游。 但是，出发前几天，北京的7.21暴雨出了大事故，广州因为台风的缘故猛下雨，长江也因为洪峰的缘故，开闸泄洪。 公公、婆婆看到新闻联播之后，开始担心起安全问题来了，还让舅舅把妈妈批评了一通。但是因为已经交了钱，问了订票公司，邮轮还是可以照常开的，也只能参加了。 我们定了长江2号的邮轮，是今年刚下水的。 我们先坐飞机到了重庆，然后包车，化了2个多小时的时间，去了大足，住了一晚，第二天一早就去了宝鼎山石刻，因为旅游团还没有到，人倒不多，得以好好欣赏那些刻在悬崖峭壁上的南宋石刻。这些足足花了80多年的时间才刻成的，经过几百年的风吹雨打，还是那么栩栩如生。 看完石刻，我们就去重庆坐邮轮了，因为水流太急的缘故，船不能在重庆朝天门靠岸，只能坐了3个小时的大巴，到丰都上船了。 晚上9点上了船，号称长江最豪华的邮轮，果然名不虚传。1万7千吨的排水量，里面5星级的装修，共有6层楼，里面有商业街、自助餐厅、卡拉OK厅、电影院、酒吧等等设施。 在船上共住了3个晚上，途径了大、小三峡，参观了丰都鬼城、白帝城、三峡大坝。 之后在宜昌下了船，因为泄洪的缘故，船不能过闸，太可惜了。 在宜昌，舅舅的朋友吴所和肖所接待了我们，吃完饭，我们就坐动车到了武汉，然后马上换了武汉到广州的高铁。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学网球]]></title>
    <url>%2F2012%2F06%2F26%2F%E5%AD%A6%E7%BD%91%E7%90%83%2F</url>
    <content type="text"><![CDATA[从这个学期中开始，桐桐就开始学网球了，跟回了之前学游泳的王教练。 自从学了网球之后，身体还是好了很多，打得也有模有样了。 不过比较麻烦的是，网球受天气影响太了。广州的鱼多，导致错过很多节。 一开始和诚诚一起学，学了两个多月，诚诚就放弃了。不过桐桐还是坚持了下来。 PS：小区的网球场还是不错的，白天40元，晚上60元。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[艺术节]]></title>
    <url>%2F2012%2F05%2F11%2F%E8%89%BA%E6%9C%AF%E8%8A%82%2F</url>
    <content type="text"><![CDATA[五月份是学校的艺术节。 老师让大家报名，桐桐报了唱歌《祖国，慈祥的母亲》 开始也不怎么当真，因为要学的东西太多，也不怎么理他。 后来，快到预赛的前几天，找钢琴老师姜老师给他辅导了一节课，后面，他就自己在家拿着麦克风自己在唱。 本来不报太大希望的，毕竟他从来没有认真学过唱歌。 到了表演预赛那天，他中午活蹦乱跳的跑出来，开心得不得了，说评委夸他唱得很好，叶老师还说以后有空要和他一起唱这首歌。还有老师说要让他进入合唱团，最后评了个97分（应该是很高的分数了）。 下面是比赛后，音乐老师的微博：]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么叫“黄色网站”]]></title>
    <url>%2F2012%2F05%2F09%2F%E4%BB%80%E4%B9%88%E5%8F%AB%E2%80%9C%E9%BB%84%E8%89%B2%E7%BD%91%E7%AB%99%E2%80%9D%2F</url>
    <content type="text"><![CDATA[前几个星期，桐桐语文老师要求班里的同学学会开通邮箱、学会上网查资料。 同时，语文老师也要求说，大家不能上黄色网站。 桐桐回家，问：“爸爸，什么是黄色网站？” 都不知道怎么回答好~~~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手印画]]></title>
    <url>%2F2011%2F11%2F21%2F%E6%89%8B%E5%8D%B0%E7%94%BB%2F</url>
    <content type="text"><![CDATA[桐桐上课时候画的手印画。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习老师]]></title>
    <url>%2F2011%2F11%2F17%2F%E5%AE%9E%E4%B9%A0%E8%80%81%E5%B8%88%2F</url>
    <content type="text"><![CDATA[桐桐班的语文实习老师走了，这是给桐桐的临别寄语。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打人给投诉了]]></title>
    <url>%2F2011%2F11%2F15%2F%E6%89%93%E4%BA%BA%E7%BB%99%E6%8A%95%E8%AF%89%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐昨晚给同学投诉了。 反映，最近老打一个同学，叫kailun。 上次已经投诉过一次，但是家伙还没有改。 后果是，给爸爸又狠狠的教育了一番。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[头等舱]]></title>
    <url>%2F2011%2F11%2F15%2F%E5%A4%B4%E7%AD%89%E8%88%B1%2F</url>
    <content type="text"><![CDATA[这两天去北京培训，客户给买了头等舱，好好享受了头等舱的尊贵服务！赞]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的课程表]]></title>
    <url>%2F2011%2F11%2F01%2F%E6%A1%90%E6%A1%90%E7%9A%84%E8%AF%BE%E7%A8%8B%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[只存了二年级下学期及这学期的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐这个学期的新同桌]]></title>
    <url>%2F2011%2F10%2F27%2F%E6%A1%90%E6%A1%90%E8%BF%99%E4%B8%AA%E5%AD%A6%E6%9C%9F%E7%9A%84%E6%96%B0%E5%90%8C%E6%A1%8C%2F</url>
    <content type="text"><![CDATA[桐桐这个学期的新同桌换成了王汶欣，一个很乖、乐于助人的小女孩。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转：九寨沟]]></title>
    <url>%2F2011%2F10%2F08%2F%E8%BD%AC%EF%BC%9A%E4%B9%9D%E5%AF%A8%E6%B2%9F%2F</url>
    <content type="text"><![CDATA[广州妈网看到的一片文章。 美丽的珍珠滩 暑假，妈妈带我到九寨沟旅游。九寨沟的得名是因为在山沟里有九个民族村寨。这次我们观赏的景点是芦苇海、珍珠滩及珍珠滩瀑布、熊猫海、诺日朗瀑布……其实这些景点并不是真正的海，它们只是海的儿子，所以非常像海。因为这些少数民族没有见过海，却发现这些高山湖泊像大海，所以称这些湖泊为海。 在这些关于水的景点里，我最喜欢珍珠滩及珍珠滩瀑布。珍珠滩这个景点是九寨沟最美的景点之一，也是九寨沟的骄傲。珍珠滩的得名，是因为在阳光的折射下，河里的水闪闪发光，就像无数珍珠在水里发出光彩夺目的光芒。再加上水花打出比雪花还白的浪花，把珍珠滩打扮得更加耀眼了。 我想像这里面有美人鱼，美人鱼坐在石头上，拣起水中的大珍珠，戴在头上，突然，一个大浪花打过来，美人鱼游走了。 走到珍珠滩瀑布前，感到这座瀑布雄伟又壮观。尽管这座瀑布在九寨沟不是最大的，但还是让我想起李白写的“飞流直下三千尺，疑是银河落九天”的诗句。我很担心“珍珠们”从这儿掉下去时有没有碰坏了？当我们离开后，走在栈道上还清晰地听到瀑布的声音，就像千军万马在奔腾。 这就是我看到的珍珠滩和珍珠滩瀑布。一个是柔美无比，一个是壮丽辉煌。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[九寨沟游]]></title>
    <url>%2F2011%2F10%2F08%2F%E4%B9%9D%E5%AF%A8%E6%B2%9F%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[国庆，和桐桐去了成都、黄龙、九寨沟旅游，从10月4日到7日。我们团只有三户，共九个人，巧的是，里面有华师附中省奥校班（全省招80名）的3个学生，他们两家是认识的。 桐桐对其中的一个哥哥崇拜得要命，整天粘着他。 旅游途中，成都整天灰蒙蒙的，感觉不舒服，整个城市很一般。 黄龙，团友他们都有高原反应，我们三个还好，景色还不错，不过和云南玉龙雪山有点类似，和九寨沟的景色也有部分相似。 九寨沟，是最舒服的一个地方，住的是假日酒店，还不错。风景也很漂亮，游起来也没那么累。真正是“九寨归来不看水”。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文娱委员]]></title>
    <url>%2F2011%2F09%2F26%2F%E6%96%87%E5%A8%B1%E5%A7%94%E5%91%98%2F</url>
    <content type="text"><![CDATA[这个学期的班委改选，桐桐和湾湾当选了文娱委员，可能第一天新来的班主任看到他们俩跳拉丁舞，就选了他们。 还告诉他们文娱委员可以管班长、中队长、体育委员等，美得他们:-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学而思奥数班]]></title>
    <url>%2F2011%2F09%2F26%2F%E5%AD%A6%E8%80%8C%E6%80%9D%E5%A5%A5%E6%95%B0%E7%8F%AD%2F</url>
    <content type="text"><![CDATA[这个学期开始，给桐桐报了学而思奥数的提高班。每周五晚上6点到9点。 这个班级，家长可以旁听，感觉内容还是挺多的，难度也挺大。 并且一开始，桐桐还是没怎么入门。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[升国旗]]></title>
    <url>%2F2011%2F09%2F19%2F%E5%8D%87%E5%9B%BD%E6%97%97%2F</url>
    <content type="text"><![CDATA[桐桐这学期成了升旗手，今天早上去升国旗了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[换班主任了]]></title>
    <url>%2F2011%2F08%2F30%2F%E6%8D%A2%E7%8F%AD%E4%B8%BB%E4%BB%BB%E4%BA%862011%2F</url>
    <content type="text"><![CDATA[桐桐的班主任从李老师换成莫老师了。 听说李老师到一年级当级长了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近视]]></title>
    <url>%2F2011%2F08%2F09%2F%E8%BF%91%E8%A7%86%2F</url>
    <content type="text"><![CDATA[家伙，可能是遗传爸爸的近视，从小视力的发育都不好。小时候去看过，有点远视。但是也不怎么理他，最近看东西迷眼睛，去检查了以后。散瞳后，医生说是真性近视，100度+50度散光。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桂林阳朔游]]></title>
    <url>%2F2011%2F08%2F08%2F%E6%A1%82%E6%9E%97%E9%98%B3%E6%9C%94%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[上周三到周六，去了桂林阳朔旅游。这次的旅游的主题是“水”。坐竹筏游了漓江、遇龙河。 仔细算来，桐桐还是参加了很多次旅游：三亚、杭州、上海、黄山、丽江、昆明、香格里拉等。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[治鼻炎]]></title>
    <url>%2F2011%2F08%2F02%2F%E6%B2%BB%E9%BC%BB%E7%82%8E%2F</url>
    <content type="text"><![CDATA[治鼻炎 (2011-07-05 10:09) 当时发了一篇治鼻炎的博文。从6月15日到现在，坚持跑步，正好一个半月，现在的鼻炎都好了。庆祝一下。 过程讲讲吧。 爸爸以前的过敏性鼻炎很厉害，每天晚上两点左右都要打喷嚏醒过来，到空调的地方都要打喷嚏，早晚打、在单位也打。 看了几次医生，吃药的时候就好，但是一停药就又恢复了。中间还吃了很多开瑞坦。 跑步的安排是这样的： 开始，每天早上：一般7点左右起床 1、跑3000米 2、嗮15分钟太阳 3、转脖子，64次 4、手臂左右往后压 64次 5、弯身，然后手碰不同脚64次 6、握拳头、松开64次 7、身前、身后拍掌64次 开始的那个星期，还兼着吃开瑞坦。第一个月，停掉开瑞坦之后的5天，症状还是会有。但是一个多月以后，及基本没什么问题了。另外，开始1个月后，也慢慢开始洗冷水澡。 现在，因为好很多了，所以基本上早上就跑1500米左右。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学游泳]]></title>
    <url>%2F2011%2F08%2F02%2F%E5%AD%A6%E6%B8%B8%E6%B3%B3%2F</url>
    <content type="text"><![CDATA[这个暑假终于要给桐桐学游泳了。 在小区边上的天河新作学的，游泳池水很干净，人也不多。 学了五节课，因为教练要回老家，就停了。 教练走的那天，桐桐竟然能像模像样的游了20米蛙泳。 走了之后，桐桐坚持自己游，没想到过了3天，桐桐竟然能游100米了。 厉害～～～～～～～～～～～～]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[看足球比赛]]></title>
    <url>%2F2011%2F07%2F15%2F%E7%9C%8B%E8%B6%B3%E7%90%83%E6%AF%94%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[广州恒大足球队，今年成绩很好，一直排名第一。 7月11日的时候，又引进了巴西联赛的前MVP球员阿根廷人孔卡（conca），身价1000万美金，年薪据说700万美金（排名和小罗差不多）。 爸爸买了恒大主场的套票，之前一直给同事看。 昨天，星期四，正好是假期，conca又可能第一次登场，爸爸就决定带桐桐去看球。 看球前，下了一阵大雨，还好时间不长，比赛中途也下了一会。不过下雨也好，至少没那么热。 现场人山人海，座无虚席。 conca终于在65分钟左右的时候代替受伤的克莱奥上场，当时比分3：0，恒大领先。全场都是在喊“conca，conca”。 最后，恒大队以5：0的大比分获胜。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[钢琴六级]]></title>
    <url>%2F2011%2F07%2F12%2F%E9%92%A2%E7%90%B4%E5%85%AD%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[7月10日，桐桐参加了钢琴六级考试。获得了良好的成绩。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[考试成绩]]></title>
    <url>%2F2011%2F07%2F05%2F%E8%80%83%E8%AF%95%E6%88%90%E7%BB%A9%2F</url>
    <content type="text"><![CDATA[期末考成绩出来了。桐桐考了语文 99.5 ，数学 98。 据说数学全年级只有一个100分，99分的都没有，听老师说题目是超纲了。 语文5班的平均分是97.2，超高了。 数学的平均分排名是年级第一，上学期也是年级第一。赞！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[治鼻炎]]></title>
    <url>%2F2011%2F07%2F05%2F%E6%B2%BB%E9%BC%BB%E7%82%8E2011%2F</url>
    <content type="text"><![CDATA[爸爸有鼻炎，为了治好它，上网查了很多资料，都说跑步是最有效的。爸爸已经坚持早上跑步，从6月21日开始，已经坚持了15天，继续加油。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[红歌会]]></title>
    <url>%2F2011%2F07%2F05%2F%E7%BA%A2%E6%AD%8C%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[今年是建党90周年，掀起了一番红歌热潮。昨晚也应景带桐桐、洪巧去看了一场红歌演唱会。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逃托管]]></title>
    <url>%2F2011%2F06%2F20%2F%E9%80%83%E6%89%98%E7%AE%A1%2F</url>
    <content type="text"><![CDATA[因为学校没有午休睡觉的地方，桐桐中午是在一一托管进行午休。家伙，上周一和周三竟然和他在一一托管的好朋友吴岳桦中午逃托管，两个人说要回学校学习，中午跑到托管小区下面玩。 周四给老师发现了，在班级开了两个人的批斗会。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[升旗手]]></title>
    <url>%2F2011%2F06%2F13%2F%E5%8D%87%E6%97%97%E6%89%8B%2F</url>
    <content type="text"><![CDATA[桐桐今天开始，要当护旗手和升旗手了。7：30不到就到了学校。升旗手，每个班级一个，年级共八个。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老婆]]></title>
    <url>%2F2011%2F06%2F13%2F%E8%80%81%E5%A9%86%2F</url>
    <content type="text"><![CDATA[昨天，爸爸很累要洗澡，叫桐桐去给爸爸开电热水器。桐桐够不着开关，就让妈妈去开，妈妈不肯，说要爸爸自己开。 桐桐很生气的说，妈妈，你究竟是不是爸爸的老婆，竟然这样。 爸爸好感动呀…… 谢谢桐桐了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如来佛]]></title>
    <url>%2F2011%2F05%2F06%2F%E5%A6%82%E6%9D%A5%E4%BD%9B%2F</url>
    <content type="text"><![CDATA[桐桐最近在看《西游记连环画》，昨天，桐桐对爸爸说，爸爸，如来佛的头上怎么带了玉米帽子。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[水浒传]]></title>
    <url>%2F2011%2F03%2F17%2F%E6%B0%B4%E6%B5%92%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[桐桐最近看完了水浒传的全套连环画，对108将如数家珍。 赞！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你家真有钱]]></title>
    <url>%2F2011%2F03%2F15%2F%E4%BD%A0%E5%AE%B6%E7%9C%9F%E6%9C%89%E9%92%B1%2F</url>
    <content type="text"><![CDATA[去年底，桐桐的同桌麦穗来我们家，第二天的时候。麦穗：“你们家真有钱！” 桐：“为什么？” 麦穗：“因为你们家有个双架床！” 笑~~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[忙！]]></title>
    <url>%2F2010%2F12%2F22%2F%E5%BF%99%EF%BC%81%2F</url>
    <content type="text"><![CDATA[年底真忙呀。单位的事情都集中到年底了，加上房子装修、桐桐期末考试准备、钢琴比赛；都快疯了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[留堂]]></title>
    <url>%2F2010%2F12%2F22%2F%E7%95%99%E5%A0%82%2F</url>
    <content type="text"><![CDATA[上二年级，桐桐很久没有给留堂了。学习方面也基本进入了状态。昨天，妈妈收到短信，有几个男同学要留堂，桐桐是其中一个，要留堂半小时。 爸爸在外面等了半个小时之后，桐桐终于出来了。 爸爸问他为什么给留堂了，桐桐说是昨天放学托管的时候，他和另外一个男同学钟文翰把一个鞋子垫到了一个女同学的桌子上，给投诉了。 家伙又开始调皮了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原来流血是不疼的]]></title>
    <url>%2F2010%2F12%2F09%2F%E5%8E%9F%E6%9D%A5%E6%B5%81%E8%A1%80%E6%98%AF%E4%B8%8D%E7%96%BC%E7%9A%84%2F</url>
    <content type="text"><![CDATA[桐桐小时候一流血就很怕。前段时间，桐桐说：“爸爸，原来流血是不疼的，疼的是伤口。” ：-）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[亚运羽毛球男单决赛]]></title>
    <url>%2F2010%2F11%2F22%2F%E4%BA%9A%E8%BF%90%E7%BE%BD%E6%AF%9B%E7%90%83%E7%94%B7%E5%8D%95%E5%86%B3%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[昨晚一家三口去天河体育馆看男单决赛了。票是从黄牛那儿买来的，400（B票）面值的炒到了1000。还好，两张票，三个人顺利进去了，还占了三个座位。 7：30是中国的混双和韩国的混双比，结果中国0：2输了，搞得桐桐都想哭了。 还好8：30开始的林丹对李宗伟还比较精彩，林丹的表现也很好。桐桐一直大声的给林丹加油。 最有，林丹终于获得了冠军拼图中的最后一块，亚运男单冠军。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐和爸爸是好朋友]]></title>
    <url>%2F2010%2F11%2F15%2F%E6%A1%90%E6%A1%90%E5%92%8C%E7%88%B8%E7%88%B8%E6%98%AF%E5%A5%BD%E6%9C%8B%E5%8F%8B%2F</url>
    <content type="text"><![CDATA[昨天检查桐桐的作业，看到桐桐造了一个句子。我和爸爸是好朋友。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的一家]]></title>
    <url>%2F2010%2F09%2F21%2F%E6%88%91%E7%9A%84%E4%B8%80%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[桐桐在课堂上画的我的一家。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三八妇女节]]></title>
    <url>%2F2010%2F09%2F16%2F%E4%B8%89%E5%85%AB%E5%A6%87%E5%A5%B3%E8%8A%82%2F</url>
    <content type="text"><![CDATA[三八妇女节时候桐桐给妈妈的礼物]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同桌]]></title>
    <url>%2F2010%2F09%2F02%2F%E5%90%8C%E6%A1%8C%2F</url>
    <content type="text"><![CDATA[桐桐今天上午换座位，本来是坐第三排的，结果自己自告奋勇做到第一排去了。同桌是洪希桐。 细数一下桐桐的小学同桌： 一年级第一学期：张雨珊，第一个同桌； 第二学期前半段：杨钧婷，下半段：麦穗；]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[当上班长]]></title>
    <url>%2F2010%2F09%2F02%2F%E5%BD%93%E4%B8%8A%E7%8F%AD%E9%95%BF%2F</url>
    <content type="text"><![CDATA[一年级下学期，桐桐要竞选班长，爸爸妈妈觉得那时候那还没有能很好的管理好自己，就让他先不参加，答应他二年级再竞选。 今天上午，桐桐和妈妈说，他竞选上班长了，还高兴极了。;-) 当上了班长，希望桐桐能管理好自己，以身作则，多为班级做贡献，才不辜负老师和同学们的选票。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书香节]]></title>
    <url>%2F2010%2F08%2F27%2F%E4%B9%A6%E9%A6%99%E8%8A%82%2F</url>
    <content type="text"><![CDATA[上周日去了琶洲参加了书香节。 我们去的时候才刚刚开门，人还比较少，逛了一会，人越来越多，到后来都是人挤人，给桐桐买了两本书就走了。 出来的时候，等着排队进场的人排得足足有100米那么长了。 整个感觉就是人多，其实和平时逛购书中心也没有太大的区别。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乌龟--小黑]]></title>
    <url>%2F2010%2F08%2F27%2F%E4%B9%8C%E9%BE%9F--%E5%B0%8F%E9%BB%91%2F</url>
    <content type="text"><![CDATA[桐桐喜欢乌龟，上各周六（8月21日）带桐桐去芳村花鸟市场。 市场上的有好多的乌龟，想给桐桐买一个象龟，毕竟吃菜叶、红萝卜等，容易打理。但是找了好多档，都是大人巴掌大的象龟，后来在一个档口看到了两个小象龟，有一个雄的刚出生两个月的，还有一个三个月的雌龟。 桐桐看上了两个月那只，可能是因为出生没多久，身上的壳比较黑，桐桐就给他取了名字小小黑。 可能小的象龟比较少见，花了我们二百五十元，大的象龟才需要一百元。 不过，感觉还是小一点，可爱点。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vitas]]></title>
    <url>%2F2010%2F08%2F13%2Fvitas%2F</url>
    <content type="text"><![CDATA[桐桐最近喜欢上了维塔斯，天天在车上听他的课，并且还学会了好几首，唱得有模有样的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐涂鸦]]></title>
    <url>%2F2010%2F08%2F13%2F%E6%A1%90%E6%A1%90%E6%B6%82%E9%B8%A6%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云南之旅]]></title>
    <url>%2F2010%2F08%2F12%2F%E4%BA%91%E5%8D%97%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[考完钢琴之后，马上就报了西部假期的云南游，从8月4日到8月9日，共六天。 一共去了虎跳峡、香格里拉的普达措公园、茶马古道、玉龙雪山、白水河、丽江古城、大理、昆明石林、银都、七彩云南等几个重要的景点。 跟团的行程安排得太满了，基本都是6点起床，晚上11点才回到酒店的。不过桐桐和菲菲还好，一直坚持了下来。 最辛苦的一天，就是去香格里拉的那一天，当上到了4150的海拔高度以后，大家都有了一点高原反应。 桐桐白天还没有什么事，不过当天晚上在香格里拉的酒店就说头疼，过一段时间就醒过来，还好，第二天起来以后就没事了，舅妈的反应时间就长了一点。 桐桐一路上都很高兴，还舍不得回来呢。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[钢琴考级]]></title>
    <url>%2F2010%2F08%2F12%2F%E9%92%A2%E7%90%B4%E8%80%83%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[为了让桐桐能好好去旅游一次，把原定在9月份的3级钢琴考试提前到了8月1日。考试的时候虽然错了一些，不过成绩还是良好。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三国演义]]></title>
    <url>%2F2010%2F07%2F19%2F%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89%2F</url>
    <content type="text"><![CDATA[给桐桐买了一本三国演义的连环画（上海人民美术出版社），桐桐很喜欢看。 爸爸也每天给桐桐读一本。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐学钢琴]]></title>
    <url>%2F2010%2F07%2F19%2F%E6%A1%90%E6%A1%90%E5%AD%A6%E9%92%A2%E7%90%B4%2F</url>
    <content type="text"><![CDATA[桐桐准备考钢琴三级了。 前段时间，因为桐桐对钢琴学习没有动力，就给他换了一个老师。 换了老师之后，桐桐进步很大，平时的练习也认真的很多。 不过因为以前翁老师很注重指法的训练，基本功打得很不错，现在准备三级考试的时候就很顺利。 不过，因为要赶8月5日的考试，每周要上两次课，每天要练习两次，还是挺辛苦的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三好学生]]></title>
    <url>%2F2010%2F07%2F01%2F%E4%B8%89%E5%A5%BD%E5%AD%A6%E7%94%9F%2F</url>
    <content type="text"><![CDATA[桐桐今天被评为三好学生，很高兴。 爸爸回来问桐桐什么是三好学生，桐桐说是语、数、英都很好。 笑～～～～～～～～～～～～～～～～～]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的认错书]]></title>
    <url>%2F2010%2F06%2F28%2F%E6%A1%90%E6%A1%90%E7%9A%84%E8%AE%A4%E9%94%99%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[年初的时候，桐桐弹钢琴不认真，惹爸爸生气，不理他。 事后，桐桐很自觉的写了一个认错书，递给爸爸。 搞得爸爸哭笑不得。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“灭绝”]]></title>
    <url>%2F2010%2F06%2F10%2F%E2%80%9C%E7%81%AD%E7%BB%9D%E2%80%9D%2F</url>
    <content type="text"><![CDATA[桐桐平时看恐龙的资料看得多，经常说起恐龙灭绝的原因。 周一上学路上。 桐桐：“爸爸，现在还有恐怖分子吗？” 爸爸：“有。” 桐桐：“他们什么时候才灭绝？” 笑～～～～～～～～～～～～～～]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人与自然]]></title>
    <url>%2F2010%2F05%2F04%2F%E4%BA%BA%E4%B8%8E%E8%87%AA%E7%84%B6%2F</url>
    <content type="text"><![CDATA[桐桐平时很少看电视，现在开始迷上了人与自然。每天洗澡前都陪他看，从20：35开始，半个小时。 附上一周的节目表： CCTV7的节目表： 2010/05/03星期一 07:05:00 30 人与自然：探秘自然：2009-51 12:05:00 30 人与自然：探秘自然：2009-51 15:34:00 30 人与自然：探秘自然：2009-51 20:35:00 30 人与自然：探秘自然：2009-51 2010/05/04星期二 07:05:00 30 人与自然：探秘自然：2009-52 08:05:00 30 人与自然：探秘自然：2009-52 12:05:00 30 人与自然：探秘自然：2009-52 20:35:00 30 人与自然：探秘自然：2009-52 2010/05/05星期三 07:05:00 30 人与自然：探秘自然：2009-53 08:05:00 30 人与自然：探秘自然：2009-53 12:05:00 30 人与自然：探秘自然：2009-53 20:35:00 30 人与自然：探秘自然：2009-53 2010/05/06星期四 07:05:00 30 人与自然：探秘自然：2009-54 08:05:00 30 人与自然：探秘自然：2009-54 12:05:00 30 人与自然：探秘自然：2009-54 20:35:00 30 人与自然：探秘自然：2009-54 2010/05/07星期五 07:05:00 30 人与自然：探秘自然：2009-55 12:05:00 30 人与自然：探秘自然：2009-55 20:35:00 30 人与自然：探秘自然：2009-55 2010/05/08星期六 07:05:00 30 人与自然：探秘自然：2009-56 12:05:00 30 人与自然：探秘自然：2009-56 14:58:00 30 人与自然：探秘自然：2009-56 20:35:00 30 人与自然：探秘自然：2009-56 2010/05/09星期日 07:05:00 30 人与自然：探秘自然：2009-57 11:35:00 30 人与自然：探秘自然：2009-57 12:35:00 30 人与自然：探秘自然：2009-57 20:35:00 30 人与自然：探秘自然：2009-57]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拉丁舞]]></title>
    <url>%2F2010%2F05%2F03%2F%E6%8B%89%E4%B8%81%E8%88%9E%2F</url>
    <content type="text"><![CDATA[天河区组织青少年拉丁舞比赛，桐桐举手报名了。 为了不打击他，只好找了个老师来教桐桐，梁老师带队参加过上一届的比赛，还比较有经验。 桐桐和湾湾学了8节课，就去参加了。 还拿了个第七名，高兴得要命。;-) 隔壁班有一对小朋友学了一年多，拿了第八名。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一鸣惊人别解]]></title>
    <url>%2F2010%2F05%2F03%2F%E4%B8%80%E9%B8%A3%E6%83%8A%E4%BA%BA%E5%88%AB%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[爸爸经常打喷嚏。 有一天早上，桐桐在厅玩，爸爸打了一个很大的喷嚏。 桐桐说，爸爸你真是一鸣惊人。 笑～～～～～～～～～～～～～]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“凶”科医院]]></title>
    <url>%2F2010%2F04%2F30%2F%E2%80%9C%E5%87%B6%E2%80%9D%E7%A7%91%E5%8C%BB%E9%99%A2%2F</url>
    <content type="text"><![CDATA[前几天，胡校长给桐桐班上思品课，说到了肺结核病的知识。 胡校长说，如果得了这些病就要到胸科医院去看。 桐桐回来问爸爸，那间医院的医生是不是都很凶的？ 笑～～～～～～～～～～～～～～～～～～～]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[竞选班长]]></title>
    <url>%2F2010%2F03%2F02%2F%E7%AB%9E%E9%80%89%E7%8F%AD%E9%95%BF%2F</url>
    <content type="text"><![CDATA[桐桐班这个学期开始竞选班长，一共有16个，加上各种委员，可能是全民皆官了;-) 桐桐开始很想去参加，但是爸爸妈妈认为桐桐首先好先学会管好自己，就没让他去，在变形金刚以及说二年级再去竞选的诱惑下，桐桐答应了。 下面是竞选后老师发过来的短信： 孩子们今天表现很出色，特别是参加班长竞选的孩子，通过精彩的演讲，和激烈的同学投票，有以下同学脱颖而出：39、36、2、44、45、32、7、43、31、10、35、1、40、29、8、46、也表扬如下积极参加班长竞选演讲的孩子：11、26、28、42、17、18、38、33、5。 回来听桐桐说，老师给桐桐当了体育委员，爸爸和妈妈觉得挺好的，让桐桐多参加体育锻炼，搞好身体。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日本料理]]></title>
    <url>%2F2010%2F03%2F01%2F%E6%97%A5%E6%9C%AC%E6%96%99%E7%90%86%2F</url>
    <content type="text"><![CDATA[春节期间，阿姨放假。我们只好天天在外面找地方吃东西。 去了很多以前没有去过的地方，特别是桐桐吃了回转寿司之后，就喜欢上了，后面还陆陆续续吃了好几次。 对海鲜刺身特别喜欢，包括三文鱼、北极贝等。还有，也喜欢吃芥末。 回转寿司能满足小朋友自己决定吃什么的心理，并且种类很多，所以看到很多小朋友都喜欢吃。 附： 为何三文鱼可以生吃，而其它大部分鱼类不能生吃的问题。 一：为什么三文鱼是可以生吃的最佳鱼类？？ 三文鱼有二大特点是其它鱼类不具备的： 第一： 三文鱼鳞小刺少，肉色橙红，属于肉质细嫩鲜美的鱼类。 第二点是三文鱼可以生吃的起决定性的原因！！在所有鱼类中，三文鱼所含的omega—3不饱和脂肪酸最多(每100克三文鱼约含27克)， 我们都知道，肉类食品中，分脂肪酸和不饱和脂肪酸。 而只有不饱和脂肪酸是构成体内脂肪的一种脂肪酸，而且可以被人体直接吸收，而不需要进行体液再加工。 再者，三文鱼所含的不饱和脂肪酸根据双键个数的不同，分为单不饱和脂肪酸和多不饱和脂肪酸二种。食物脂肪中，单不饱和脂肪酸有油酸，多不饱和脂肪酸有亚油酸、亚麻酸、花生四烯酸等。人体对非不饱和脂肪酸不能直接吸收，这就是为何大部分鱼类不能生吃的根本原因！！ 二： 下面来回答你的小题： 1.三文鱼为什么叫刺身？（简略回答就可以） 不是三文鱼可以叫“刺身”， 只要是可以生吃的鱼肉都叫“刺身”。 “刺身”是个外来语， 是日语， 写作：さしみ。 它的意思就是生鱼片。在日本北海道经常是取一些鱼皮，并用竹签刺在鱼片上，以便于识别。这刺在鱼片上的竹签和鱼皮，当初被称作“刺身”。 后来虽然不使用这种方法了，但“刺身”这个名称却保留了下来，变成了泛指各类生鱼片。 2.三文鱼里面有什么东西才能使人吃了不坏肚子？什么原理？ 我在最开始的问题里，已经说明了三文鱼所含有的不饱和脂肪酸可以被人体消化系统直接吸收，因此不会闹肚子。 3.吃起来像什么东西？？味道有什么好吃的？ 如果不加任何佐料的三文鱼吃到嘴里，没有任何滋味！味道和和吃西瓜紧贴西瓜皮那部分的西瓜肉的味道相同，很嫩，但是没有任何鱼腥味。 之所以吃生吃三文鱼完全是一种口感和心理的好奇，就如同韩餐中的生拌牛肉，牛肉完全可以炖熟了吃，而吃生拌牛肉完全是一种新的口感和味道的体验。这个和吃刺身的道理是一样的。 4.为什么吃三文鱼要蘸芥末？？ 吃三文鱼吃芥末，纯粹是为了开胃，增加食欲，没有任何其它目的！ 芥末微苦，味道辛辣，对口舌有强烈刺激，味道十分独特， 这种独特的口感来源于芥末的主要辣味成分：就是芥子油，介子油辣味强烈，可刺激唾液和胃液的分泌，可以起到开胃的作用，能增强食欲。 很多人误解，吃三文鱼吃芥末是为了去除腥味，，呵呵呵，三文鱼属于深海鱼类，深海没有经过污染，因此，三文鱼的肉质非常纯净，没有丝毫的异味！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寒假厦门之旅]]></title>
    <url>%2F2010%2F02%2F26%2F%E5%AF%92%E5%81%87%E5%8E%A6%E9%97%A8%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[桐桐的第一个寒假，从1月24日-2月23日。 关于这个寒假的旅游，妈妈和桐桐想去三亚，去海边玩，但是因为去年去过，并且今年三亚酒店的房价超高，五星级酒店都要1万以上每晚。 后来还想去小娟阿姨的成都玩，但是因为寒假，成都比较冷，最终还是没有下定决心去。 经过反复的考虑，最终选择了去厦门。 第一厦门是妈妈的老家，桐桐这么大还没有回去过，第二厦门有海，可以满足桐桐到海边玩的要求。 2月9日一早，我们三个人一起坐飞机去了厦门。 老姨妈开车来接我们了，并且盛情邀请我们到她家住，她家刚刚装修过，还特意在我们来之前准备好了东西。 放好行李以后，我们就和姨妈到妈妈的舅舅家去拜年了，见到了妈妈的几个舅舅和舅妈，桐桐还和小倩姐姐打得火热。 后来还去拜了妈妈的外婆灵位，拜了桐桐亲公公的坟墓。 在回去的路上，还顺便去探望了妈妈的姨妈，看到姨妈80多岁，精神还很好，妈妈可乐了。 第二天，我们上午去了集美的陈嘉庚纪念公园，陈嘉庚对国家的一个赤子之心，感动了我们。 下午，姨妈车我们还有一个哥哥去了厦门的一个岛上，到海边，看到了很多渔船，还有很原生态的海边，最后，我们想到，原来，这个地方也是上次我们来过的地方。 参观完之后，我们在吃饭的地方，参观了鲍鱼养殖场。 回去的路上，岛上雾很大，花了好多时间才回来。 因为我们都觉得姨妈家吵，并且桐桐喜欢在海边很自由的活动，最后，我们决定到海边的酒店住一个晚上。 第三天一早，姨妈就车我们去厦门环岛南路去参加了一圈，然后去看了人造沙滩。 比较了海悦山庄和海景酒店之后，因为海景酒店是和沙滩连在一起，方便直接到沙滩上完就决定住海景酒店。 放下行李之后，我们去参观了南普陀，还吃了一餐素菜，本来想一起把厦门大学参观了，但是春节期间，可能是因为甲流的原因，不给外人进去参观了。 下午，住在酒店了之后，我们就带桐桐去海边玩了，桐桐终于看到了和海南一样的沙滩，高兴得蹦蹦跳跳。不过感觉和三亚亚龙湾的沙滩还是差很多。 晚上，去了厦门的步行街，买了一些特产。 当天晚上，气象台预报，冷空气要来了，海边也是很多雾，本来还想在厦门过年，但是看天气不好，带的衣服不多，还是决定回广州了。订了12日下午的机票。 12日上午去了鼓浪屿，参观了钢琴博物馆，就开始去机场了。 去厦门，才知道姨妈这个公交车司机，开小车的水平太一般了;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的寒假作业]]></title>
    <url>%2F2010%2F02%2F03%2F%E6%A1%90%E6%A1%90%E7%9A%84%E5%AF%92%E5%81%87%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[语文： 1、每天背两首诗 2、每天课外阅读：一般阅读2000字左右； 3、每天背5个成语 4、写一页的字 数学： 3分钟口算 还有，每天还要弹钢琴。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿凡达]]></title>
    <url>%2F2010%2F01%2F22%2F%E9%98%BF%E5%87%A1%E8%BE%BE%2F</url>
    <content type="text"><![CDATA[最近最火的电影莫过于“阿凡达”了。 一举打破了“泰坦尼克号”保持了多年的票房纪录。 特别是阿凡达的IMAX版，3D版火爆得不得了，常常爆满。 昨天带了桐桐去看，因为3D版买不到票，只能看2D版了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[银行和很行]]></title>
    <url>%2F2010%2F01%2F22%2F%E9%93%B6%E8%A1%8C%E5%92%8C%E5%BE%88%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[上小学前,桐桐认的字不多. 有一次，经过银行门口，让桐桐念，桐桐念成“中国建设很行（xing）”。笑~~~~ 后来，还经常拿这个开桐桐玩笑。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐家长会发言稿]]></title>
    <url>%2F2010%2F01%2F20%2F%E6%A1%90%E6%A1%90%E5%AE%B6%E9%95%BF%E4%BC%9A%E5%8F%91%E8%A8%80%E7%A8%BF%2F</url>
    <content type="text"><![CDATA[桐桐家长会发言稿： 亲爱的老师们，尊敬的叔叔阿姨们：大家下午好！我是一年5班的XX桐，本学期我被评上了“好孩子和乐于助人奖，语文能力小冠军、英语小明星、书写大王、阅读大王”。老师和爸爸妈妈对我充满了期待和希望，使我对学习和生活充满了信心、充满了热爱。下面，我跟大家分享我带来的故事。 《假如真的希望飞翔》 一百多年前，一位穷苦的牧羊人带着两个幼小的儿子替别人放羊。 有一天，他们赶着羊来到一座山坡上，一群大雁鸣叫着从天空飞过，很快消失在远方。 牧羊人的小儿子问父亲：“大雁要往哪里飞？”牧羊人说：“它们要去一个温暖的地方，在那里安家，度过寒冷的冬天。”大儿子眨着眼睛羡慕地说：“要是我们也能像大雁那样飞起来就好了。”小儿子也说：“要能做一只会飞的大雁多好啊！” 牧羊人沉默了一会儿，然后对儿子说：“只要你们想，你们也能飞起来。” 两个儿子试了试，都没能飞起来，他们用怀疑的眼神看着父亲。牧羊人说：“让我飞给你们看。”于是他张开双臂，学着大雁的样子，但也没能飞起来。可是，牧羊人肯定地说：“我因为年纪大了才飞不起来，而你们还小。只要不断努力，将来就一定能飞起来，到那时，你们就可以去任何想去的地方。” 两个儿子牢牢记住了父亲的话，并一直不懈地努力着。等到他们长大，哥哥36岁，弟弟32岁时，两人果真飞起来了，因为他们发明了飞机。 这个牧羊人的两个儿子，就是美国著名的莱特兄弟。 这个故事让我明白，如果真的“想”，并付诸行动，而且一直朝着“想”的方向，就一定能成功。 李老师总是教导我们要做一个有责任心的人、做好每一件小事、将来才能做大事。我想，我们小朋友要热爱祖国、感恩身边每一个关心你的人，尊重老师、团结同学、专心学习、积极发言、遵规守纪，认真完成作业，努力做一个优秀的小学生，长大了才能为人类做贡献。 谢谢大家！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的小学一年级]]></title>
    <url>%2F2010%2F01%2F20%2F%E6%A1%90%E6%A1%90%E7%9A%84%E5%B0%8F%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[桐桐今天回去参加第一学期的试卷讲评了。 一晃眼，就一个学期过去了。 从桐桐要上小学开始，爸爸和妈妈就一直担心着一件事情，那就是桐桐会不会哭。想想桐桐读4年幼儿园，哭了3年半，一直到大班的下学期才没哭。 不过，比我们想象中的好，桐桐上小学从头到尾都很喜欢上学，也很喜欢老师，一直都没有哭过。 虽然刚刚上学的时候，和桐桐会有磕磕碰碰，但是后来都是不打不相识，磕磕碰碰的同学后来都成了要好的朋友。因为他们一般来说有共同的爱好，喜欢在一起玩，冲突自然就会多一点。 妈妈一直说桐桐是慢热型的，熟悉了环境之后，桐桐的表现也就越来越好，得到的表杨也就越来越多。 桐桐对语文的兴趣和能力都强一点，数学方面还是有点粗心。并且到了期末那段时间，上课有点皮，给老师短信批评了几次。不过想老师说的那样，桐桐有点好，就是还是比较听讲。 桐桐最开始的同桌是张雨珊，一个很乖的小女孩，数学很好。后来半个学期之后，桐桐换去和杨钧婷坐了，一个很聪明和全面的小女孩。 巧合的是，他们班有三个桐，有三个姓洪的。其中有一个小女孩叫希桐，仅一字之差。 上面就是桐桐的一年五班。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同学聚会]]></title>
    <url>%2F2010%2F01%2F18%2F%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[上周四桐桐考完试,周六请了小朋友湾湾、奕廷、君君（三班）的小朋友来我们家玩，大家一起吃饭，弹琴，个个都很开心。 周日，又和子瑄去了植物园，他们都舍不得走。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[梅花三弄是哪三弄？]]></title>
    <url>%2F2010%2F01%2F03%2F%E6%A2%85%E8%8A%B1%E4%B8%89%E5%BC%84%E6%98%AF%E5%93%AA%E4%B8%89%E5%BC%84%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[梅花三弄：中国古曲。又名《梅花引》、《玉妃引》。曲谱最早见于明代《神奇秘谱》。谱中解题称晋代桓伊曾为王徽在笛上“为梅花三弄之调。后人以琴为三弄焉”。此说源于《晋书。列传第五十一》，但未写明是以梅花为题材。郭茂倩《乐府诗集》卷第二十四南朝宋鲍照（约414～466）《梅花落》解题称，“《梅花落》本笛中曲也”，“今其声犹有存者”。今存唐诗中亦多有笛曲《梅花落》的描述，说明南朝至唐间，笛曲《梅花落》较为流行。关于笛曲《梅花落》改编，移植为琴曲《梅花三弄》，有托于唐人颜师所作《江梅引。忆红梅》中“漫弹绿绮，引三弄，不觉魂飞”句，说明此曲宁代尚流传。 琴曲《梅花三弄》以泛声演奏主调，并以同样曲调在不同徽位上重复3次，故称为《三弄》。《乐府诗集》卷三十平调曲与卷三十三清调曲中各有1解题，提到相和三调器乐演奏中，以笛作“下声弄、高弄、游弄”的技法。今琴曲中“三弄”的曲体结构可能就是这种表演形式的遗存。 关于《梅花三弄》的乐曲内容，历代琴谱都有所介绍，与南朝至唐的笛曲《梅花落》大都表现怨愁离绪的情感内容不同。明清琴曲《梅花三弄》多以梅花凌霜傲寒，高洁不屈的节操与气质为表现内容，今演奏用谱有虞山派《琴谱谐声》（清周显祖编，1820年刻本）的琴箫合谱，其节奏较为规整，宜于合奏；广陵派晚期的《蕉庵琴谱》（清秦淮瀚辑，1868年刊本），其节奏较自由，曲终前的转调令人耳目一新。 另外”梅花三弄”也有人把之比做像征着梅花花开三度,每度都含有不同的韵味。一度开花稀少，欲露还藏；二度开花大片绽放，满树飘白；三度开花稀落，有绿芽相伴，象征着冬去春来。而在梅花的花期内，一天赏梅花又分早、午、晚三个时间段。早上的梅花含苞欲放，晶莹洁白，幽香阵阵；午时的梅花繁华盛开，灿烂芬芳，笑脸迎人；而傍晚的梅花伴着西斜的夕阳，落英缤纷，景致非常迷人。 后来有琼瑶的小说“梅花三弄”代表三个故事：一弄,梅花烙；二弄,鬼丈夫；三弄,水云间。梅花一弄断人肠 梅花二弄费思量 梅花三弄风波起。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[激动得哭了]]></title>
    <url>%2F2010%2F01%2F03%2F%E6%BF%80%E5%8A%A8%E5%BE%97%E5%93%AD%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐学校在2009年12月31日下午比赛广播体操。 他们班拿了奖（桐桐一直认为他们是拿了一等奖，爸爸好像听到是三等奖）。 爸爸接他的时候，一见到爸爸，他就开始哭。 爸爸还以为像以前那样，有人欺负他，或者他不开心又哭了，马上把他拉上车。 刚上了车，桐桐哭着对爸爸说，爸爸，我不是伤心哭，我是激动得哭了，因为我们班体操比赛拿了一等奖。 晕~~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[坐出租车去哈佛]]></title>
    <url>%2F2010%2F01%2F03%2F%E5%9D%90%E5%87%BA%E7%A7%9F%E8%BD%A6%E5%8E%BB%E5%93%88%E4%BD%9B%2F</url>
    <content type="text"><![CDATA[有一天和桐桐说考大学的事情，然后告诉桐桐哈佛大学是世界上最好的大学。 桐桐说拿他要考大学。 然后桐桐问，那到时候是哈佛大学上学是开车去还是坐出租车去。 :-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的一年]]></title>
    <url>%2F2010%2F01%2F03%2F%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%2F</url>
    <content type="text"><![CDATA[2010年来了，已经很久没有给桐桐写博客了。 希望新的一年里，能坚持给桐桐写博客，记下桐桐生活的一点一滴和喜怒哀乐。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[萤火虫]]></title>
    <url>%2F2009%2F04%2F24%2F%E8%90%A4%E7%81%AB%E8%99%AB%2F</url>
    <content type="text"><![CDATA[答应桐桐周六带他去植物园看萤火虫。 去之前顺便查了一下资料： 1、萤火虫要在环境很好的地方才能生存和繁殖，所以一般都是在野外空气很好的地方才能看到了； 2、萤火虫的寿命一般只有20天左右，并且发光之后，也就意味着萤火虫的生命就所剩无多了； 经过蛹，最后变成成虫后，它也就剩下3-5天的寿命了 3、在萤火虫体内有一种磷化物－发光质，经发光酵素作用，会引起一连串化学反应，它发出的能量只有约1成多转为热能，其余多变作光能，其光称为冷光．常见萤火虫的光色有黄色，红色及绿色．雄萤腹部有2节发光，雌只有1节．亮灯是耗能活动，不会整晚发亮，一般只维持2至3小时.萤火虫都是出现在晚上的草丛中. 不知道现在在植物园能不能看到萤火虫！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[周末]]></title>
    <url>%2F2009%2F04%2F14%2F%E5%91%A8%E6%9C%AB%2F</url>
    <content type="text"><![CDATA[上周末，陪桐桐过得很充实和开心。 周六早上陪桐桐去了体育中心打篮球、跳绳；下午去天河少年宫画画；晚上和文文小朋友一起去K歌王唱歌、吃自助餐，之后还邀请了文文到我们家玩。 周日上午带桐桐去了植物园呼吸新鲜空气，还特意看了曼陀罗花，才知道曼陀罗花可以用来麻醉用的；下午带桐桐去了奶奶家，然后晚上去婆婆家吃饭。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的进步]]></title>
    <url>%2F2009%2F04%2F13%2F%E6%A1%90%E6%A1%90%E7%9A%84%E8%BF%9B%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[桐桐最近进步了很多。 弹钢琴认真了很多，并且能每天坚持认真联系，偶尔遇到苦难，发一回小脾气，但是能很快的调整自己； 坚强了很多，现在怎么摔倒都能忍住了，不像以前，动不动就哭； 还有，就是能听别人讲道理了，并且能努力的改正自己的缺点； 现在周末都带桐桐去体育中心打篮球，现在桐桐拍球进步很多，慢慢有点球感出来了，跳绳也进步了很多。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[恐龙]]></title>
    <url>%2F2009%2F04%2F07%2F%E6%81%90%E9%BE%99%2F</url>
    <content type="text"><![CDATA[昨天去植物园。 回来后，桐桐告诉公公在公园看到恐龙了。 公公问是真的还假的呀？ 桐桐说当然是假的了，如果是真的早把我们咬死了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做恶梦]]></title>
    <url>%2F2009%2F04%2F07%2F%E5%81%9A%E6%81%B6%E6%A2%A6%2F</url>
    <content type="text"><![CDATA[上周五桐桐和小朋友玩不小心摔倒，在那大哭，也不听爸爸讲道理。 惹得爸爸生气了，就很大声地批评他。 那天晚上睡觉时，桐桐对爸爸说，爸爸，你骂得越凶，我就会哭得越大声，还有，你这么大声，我会做恶梦的。 晕~~~~~ 关于对桐桐的教育，一直也在反省。 现在流行一种鼓励为主的欣赏教育，尽量尊重小孩子的兴趣，不批评、不惩罚。 但是，现实当中，小朋友的定性都是很差的，每个人身上都有惰性，每个人都喜欢轻松、不负责任的生活状态。就拿大人来说，如果不是身上的责任，每个人都也会追求一种自由的生活状态。 看了朗朗和李云迪学钢琴的一些往事，也都是克服了重重困难，很多时候想过放弃，都是他们父母亲很严格、很残酷的坚持了下来，包括一些极端的惩罚手段。 所以，要成为人上人，必须吃得苦中苦，这句话还是很有道理的，付出和收获是成正比的。 故天将降大任于是人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。 实际上，也从来没有祈求过，桐桐要成为什么杰出的人才，只要平平安安，能靠自己好好的生活下去，能为社会做出贡献就行了。 一直在欣赏和严格之间把握着分寸，没有规矩不成方圆，规矩的形成是不断克服自己的惰性、提高自己的心智形成的。同时，也要不断的鼓励，多欣赏、多发现每一个进步，让兴趣和规矩能很好的共存。 教育是因材施教的过程，每个人都有每个人的不同吧。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变的道理]]></title>
    <url>%2F2009%2F04%2F03%2F%E5%8F%98%E7%9A%84%E9%81%93%E7%90%86%2F</url>
    <content type="text"><![CDATA[早上送桐桐上学路上。 桐桐：“爸爸，你知道我昨晚为什么用紫色画超人吗？” 爸爸：“不知道呢。” 桐桐：“因为我现在最喜欢紫色。” 爸爸：“你不是喜欢红色、白色之类的吗？” 桐桐：“我现在最喜欢的不是红色、白色之类的了，是紫色” 爸爸：“变来变去的，没个性。” 桐桐：“人都是会变的了，像人都会变老、变死。” 爸爸：“晕。”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三亚之旅]]></title>
    <url>%2F2009%2F04%2F02%2F%E4%B8%89%E4%BA%9A%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[春节后，请了一个礼拜的假期，带桐桐去了海南三亚。 桐桐听到要看大海，就超级高兴。印象中，在桐桐三岁的时候曾经带他到过深圳的大小梅沙，可能还小，都给忘了。 经过妈妈的一番努力，不断的在网上找资料，找旅游团，终于把机票和酒店订好了。 2月4日上午出发，三亚的刘叔叔接了我们，并带了我们到海亚餐厅吃了餐海南菜，到现在还认为，这是我们到三亚几天中口味最好的一餐了。刘叔叔送我们到酒店之后，我们托管好行李马上就坐大巴到了南山，大巴摇了1个多小时，终于到了南山，为了赶时间，其它景点我们都是坐电瓶车一晃而过，到了南山海上观音的时候，才下车好好的拜了拜，并顺便参观了一下。香是婆婆给我们准备从广州带过来的，当地卖的香都象巨无霸那样。 回三亚市区的路上，在三亚湾看到了漂亮的落日，落日就像一个红红的大圆盘一样。可惜，第二天我们想认认真真的欣赏一番的时候，因为天气不好，遗憾的错过了。 回到酒店已经是晚上九点多了，应桐桐的强烈要求，带桐桐去了海边。亚龙湾的海滩都变成了五星级酒店的私家沙滩，晚上的人不多。黑夜笼罩下的大海，更显得静谧，耳边只有海浪一次又一次的冲击着沙滩，海底仿佛藏有无穷无尽的力量。 和桐桐光着脚丫，在海滩冲过的沙滩边上散步，海浪时而调皮得向我们扑过来，桐桐也随之跳跃着。 突然想起那句话，如果在春暖花开的季节，住在海边的一栋房子里面，每天看着日落日出，每天看着蔚蓝的大海，每天听着海浪的声音。 第二天早上。在沙滩画画、玩沙子，在海边趟海水，装了两瓶沙子回来 第二天傍晚计划到三亚市区椰梦长栏的海月广场看日落,可惜,当天的天气不好，灰蒙蒙的，看不到日落了。 只好找了个地方吃饭，根据妈准备的材料，一定要到春园海鲜广场附近吃上一顿海鲜。 春园附近开起了很多的海鲜，包括什么明润、168之类的，正赶上吃饭时间，间间都是人山人海的。 走着走着，看到了一家店面比较小的，叫什么来的，妈妈说这间在网上的口碑很好，就在这里吃了，吃了之后，感觉和广州也没什么太大的区别。并且也不便宜，三个人吃了将近三百元，不过也算了了妈妈的心愿。 吃完饭后就到海边走走。 晚上的海边凉风习习，有点冷，看到天上飘着孔明灯，桐桐很感兴趣。 给桐桐买了一个，卖孔明灯的是一个10岁左右的小孩子。孔明灯的燃料是一种固体的燃料，点上火以后，就慢慢的飞了起来，然后慢慢的向海上面飘过去，然后慢慢的变小，持续8分钟左右，就慢慢熄灭了。 之后意犹未尽，又放了一个，然后在沙滩边走了走，怕桐桐着凉，并且酒店离市区很远，就赶快回去了。 在酒店美美的睡了一觉之后，就要坐晚上6点的飞机回广州了。 趁早上没有其他的出游计划，我们正好把亚龙湾的五星级酒店逛个遍。 亚龙湾的五星级酒店都是连在一起的，亚龙湾的沙滩就自然的成了这些酒店的私家沙滩。 那天的天气很好，碧空万里无云，在沙滩边上漫步就更显得热。 天上飘着零星的白云，三亚的这种天气每天都有很多。 因为时间的关系，逛了凯莱、希尔顿、丽思卡尔顿，凯莱是亚龙湾比较早期的酒店，所以到处都显得很旧；希尔顿是我们比较喜欢的一个酒店，到处都是很明显的原生态，虽然看上去像杂草丛生的样子，但是让人感觉到很写意，特别是有桐桐喜欢的掉床。希尔顿和喜来登就是两种不同的风格，不过都能让人比较舒服。丽思卡尔顿是典型的北京的味道，不是很喜欢。 三天的三亚行，玩得都很开心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐发烧]]></title>
    <url>%2F2009%2F04%2F01%2F%E6%A1%90%E6%A1%90%E5%8F%91%E7%83%A7%2F</url>
    <content type="text"><![CDATA[昨晚桐桐老说肚子疼，今天早上起来就发烧了。 桐桐可能要长高了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电视台--变魔术]]></title>
    <url>%2F2009%2F03%2F31%2F%E7%94%B5%E8%A7%86%E5%8F%B0--%E5%8F%98%E9%AD%94%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[3月13日,广州电视台少儿频道的哥哥姐姐来我们家拍摄变魔术的节目，听说4月份开始播出。 接到这个通知以后，爸爸请了一天假，和妈妈在家好好的搞了一天的卫生，还特意放大了几张桐桐去海南旅游的照片。家里可明亮了。 那天下午，还请来菲菲和诚诚做嘉宾，有魔术团的哥哥来表演变硬币的魔术,小孩子们都很高兴，表现也很好。 PS：这是桐桐的第三次上电视台了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的幽默]]></title>
    <url>%2F2009%2F03%2F27%2F%E6%A1%90%E6%A1%90%E7%9A%84%E5%B9%BD%E9%BB%98%2F</url>
    <content type="text"><![CDATA[平时吃完晚饭都要求桐桐在家里走20个来回。 昨晚，快吃完饭的时候，桐桐说，爸爸，不要再叫我走20个来回了。 吃完饭走20个来回，这个是硬性规定来的，桐桐平时都不敢说不走。我正要发火，但是还是忍着问他，为什么呢？ 他说：“我今天太饱了，要走23个来回。” 笑~~~~~` PS：爸爸对23号、9号情有独钟，桐桐可能也受影响了:-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最近的事]]></title>
    <url>%2F2009%2F03%2F26%2F%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[最近比较忙，很久没有给桐桐写博客了。 最近，桐桐的钢琴学得越来越好了，也对钢琴有了很多的兴趣，并且肯学。爸爸有时候试弹一下，钢琴确实还是比较难的，桐桐小小年纪能学到这样确实不错了。 最近，妈妈摔了一跤，桐桐只能和爸爸睡了。 最近，洪巧姐姐近视了，配了125度的眼镜。 最近，开始上陶艺课的兴趣班，桐桐可高兴了，每天都惦记着。 最近，桐桐开始喜欢上超人、爆丸小子等玩具，对车车没有以前那么狂热了。 最近，桐桐长大了很多，也懂事了很多，很多时候也能控制自己的情绪了，老师都夸桐桐进步了很多，爸爸妈妈也觉得。 桐桐9月份就要上小学了，桐桐马上就变成一个男子汉了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[春节]]></title>
    <url>%2F2009%2F02%2F09%2F%E6%98%A5%E8%8A%82%2F</url>
    <content type="text"><![CDATA[春节带桐桐回雷州了。 桐桐听到要回雷州，高兴得不得了。 可惜天公不作美，春节那几天，冷得要命，就只能呆在家里玩了。 不过，桐桐倒是很开心，因为可以天天吃年饼当早餐，可以有很多的小朋友陪他玩，放了好多烟花和鞭炮，可以看到很多在广州很少见的动物，例如鸡呀、牛呀、猪呀，还有，坐了很多次桐桐喜欢的三轮车。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[广东省博物馆]]></title>
    <url>%2F2009%2F02%2F09%2F%E5%B9%BF%E4%B8%9C%E7%9C%81%E5%8D%9A%E7%89%A9%E9%A6%86%2F</url>
    <content type="text"><![CDATA[桐桐要去博物馆，就在昨天上午带他去了。 桐桐以为博物馆会有很多恐龙化石，到了才发现就一些古代的屏风雕刻、瓷器、图片展等。 广东省博物馆真的好让人失望，东西少了不说，里面的味道又超级能闻。偌大的博物馆，游客没有超过10个人，何况还是免费的。 不过，在参观的时候，桐桐讲了句很有意思的话。 在看瓷器时，有一个碟子上面画了一条龙，桐桐突然说，这个是叶公用的。我想了一会，才明白过来，是他想起了叶公好龙的故事。 下次要找个机会带桐桐到一个有恐龙化石的博物馆看看。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给ZF阿姨画自画像]]></title>
    <url>%2F2009%2F01%2F21%2F%E7%BB%99ZF%E9%98%BF%E5%A7%A8%E7%94%BB%E8%87%AA%E7%94%BB%E5%83%8F%2F</url>
    <content type="text"><![CDATA[那天，桐桐给ZF阿姨画她的肖像，画好之后，还在脸上点了一些点点。原来，ZF阿姨喜欢吃热气的东西，脸上长有豆豆。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小主持]]></title>
    <url>%2F2009%2F01%2F16%2F%E5%B0%8F%E4%B8%BB%E6%8C%81%2F</url>
    <content type="text"><![CDATA[桐桐今天当了幼儿园这个学期最后一个主题月的主持人。前天才把主持稿给到我们手上，搞得把爸爸妈妈手忙脚乱的陪桐桐排练。 还好桐桐记忆力还不错，也基本都记住台词了。 祝桐桐过一个开心的学期最后一天。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妈妈第二漂亮]]></title>
    <url>%2F2009%2F01%2F05%2F%E5%A6%88%E5%A6%88%E7%AC%AC%E4%BA%8C%E6%BC%82%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[1月2日妈妈带桐桐参加小娟阿姨和包叔叔的婚礼,桐桐看见小娟阿姨穿着婚纱走过来就说:”小娟阿姨你今天最漂亮,妈妈第二漂亮!”然后对着妈妈说:”妈妈过了今天你就又是第一漂亮了!” 臭小子,还懂得忽悠妈妈!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开心的2009年元旦]]></title>
    <url>%2F2009%2F01%2F04%2F%E5%BC%80%E5%BF%83%E7%9A%842009%E5%B9%B4%E5%85%83%E6%97%A6%2F</url>
    <content type="text"><![CDATA[2009年终于来了。 趁放假的三天，妈妈和爸爸带桐桐去了很多地方，参加了很多活动。 1月1日，爸爸加班，妈妈带桐桐和成成还有欢欢妹妹去了天河公园，还坐了很多惊险的类似过山车玩具，把妈妈吓得都哭了。 1月2日，早上，带桐桐去了植物园，晒太阳，还有放风筝。晚上，妈妈和桐桐去参加了小娟阿姨的婚礼。 1月3日，妈妈带桐桐和成成他们去了动物园，下午爸爸带桐桐去了书店。 桐桐这个元旦过得可开心了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习计划]]></title>
    <url>%2F2008%2F12%2F30%2F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[2008年马上就要过去，2009年就要来了。不能免俗，也写两句吧。 2009年最重要的事情就是桐桐的学习问题，如果桐桐下半年要念小学的话，不做点准备还不行了。 昨晚想了想，在2009年一开始就要给桐桐制定学习计划，包括认字、阅读。认字使用他们之前的旧字卡就行了，阅读那里争取每天给桐桐念一篇文章。 希望能坚持下去，也希望妈妈监督。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[放风筝]]></title>
    <url>%2F2008%2F12%2F22%2F%E6%94%BE%E9%A3%8E%E7%AD%9D%2F</url>
    <content type="text"><![CDATA[之前去体育中心，看到别人放风筝，桐桐一直要买，都没有下定决心给他买。究其原因，一是，体育中心太多人，怕不安全；二是，自己印象中，小时候一直都没有把风筝放上天，心里有阴影。 桐桐对爸爸不给他买风筝一直耿耿于怀。 周六，和石言弟弟他们去了植物园，终于下定决心给桐桐买了风筝，桐桐挑的是一个很大的飞机风筝。 桐桐拉着线，跑来跑去，风筝在天上飘。看着桐桐高兴的样子，自己还有点内疚。 回来之后，桐桐心满意足的对爸爸说，想不到今天竟然放了风筝，爸爸之前都不肯给我买。 以后多带桐桐去植物园放风筝，那边空气好，场地大，人也没那么多，同时让桐桐跑跑，也能锻炼身体。 PS：周日到电视台拿了桐桐的演出的DVD，晚上给大家放了，效果挺好，桐桐还是很上镜的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[菲菲姐姐的钢琴好棒]]></title>
    <url>%2F2008%2F12%2F18%2F%E8%8F%B2%E8%8F%B2%E5%A7%90%E5%A7%90%E7%9A%84%E9%92%A2%E7%90%B4%E5%A5%BD%E6%A3%92%2F</url>
    <content type="text"><![CDATA[昨天得到一个好消息，菲菲姐姐晋级全国的钢琴比赛。菲菲姐姐从广州市的比赛到省的比赛，现在又晋级全国比赛了，希望菲菲获得好成绩。 PS：菲菲姐姐晋级后，问她妈妈说桐桐会不会送礼物给我.:-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小孩的思维]]></title>
    <url>%2F2008%2F12%2F17%2F%E5%B0%8F%E5%AD%A9%E7%9A%84%E6%80%9D%E7%BB%B4%2F</url>
    <content type="text"><![CDATA[家里今天停水。 昨晚，妈妈说，明天停水，那不煮饭了，爸爸说好的。 桐桐很惊讶的看着爸爸妈妈说，那明天晚上不就没有饭吃了？]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[锻炼身体]]></title>
    <url>%2F2008%2F12%2F15%2F%E9%94%BB%E7%82%BC%E8%BA%AB%E4%BD%93%2F</url>
    <content type="text"><![CDATA[冬天来了，要多陪桐桐锻炼身体。周六，带桐桐去植物园呼吸新鲜空气。 周日一早，带桐桐去体育中心打篮球了，玩得挺开心的。 PS：这个学期桐桐的身体好了很多，这点要重点感谢妈妈。 记忆中桐桐这学期发烧了两次，不过这两次都是早上缺课，下午都能上课。 还有另外两天缺课是因为要检查眼睛。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐发烧了]]></title>
    <url>%2F2008%2F12%2F09%2F%E6%A1%90%E6%A1%90%E5%8F%91%E7%83%A7%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐昨天放学的时候，说脚疼，走不了路，接的时候在那里哭。也不知道是怎么回事，妈妈担心是不是脚受伤了，爸爸以为是周末的时候锻炼太多，导致的酸疼。 回到家以后，爸爸就觉得桐桐的呼吸很重，才知道桐桐发烧了。 最后分析，应该是周日参加成成的生日会，在珠江公园吹了太多的风，又玩得太久了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐爱打人了]]></title>
    <url>%2F2008%2F12%2F07%2F%E6%A1%90%E6%A1%90%E7%88%B1%E6%89%93%E4%BA%BA%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐最近有个坏毛病，喜欢打人。特别是觉得自己受委屈的时候，就更爱打人。 沈老师说得好，要教育他学会不能靠拳头来解决问题，要通过沟通来处理问题。 努力帮桐桐改正。 不过妈妈也太担心了，每个小孩都有自己的优点和缺点，缺点有意识慢慢帮他改正就是了，也不是能一蹴而就的，毕竟小孩子的自控能力比较差。 PS：不过有时候也觉得好玩，昔日的那个奶娃现在竟然会打人了，有点像男子汉了。 PS：成成明天生日，今天提前过，桐桐和妈妈去给成成庆祝生日了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复查眼睛]]></title>
    <url>%2F2008%2F12%2F03%2F%E5%A4%8D%E6%9F%A5%E7%9C%BC%E7%9D%9B%2F</url>
    <content type="text"><![CDATA[昨天带桐桐去复查了眼睛，医生说虽然桐桐的眼睛发育不是很好，但也没什么大问题。有一点远视，还有一点散光，不过问题都不大。 三周后，等散瞳的药没影响后再去复查一下。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐唱歌]]></title>
    <url>%2F2008%2F11%2F26%2F%E6%A1%90%E6%A1%90%E5%94%B1%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[周末，桐桐班老师发短信说，周五中午在等饭的时候，看大家没事，就让桐桐给大家唱说唱脸谱。桐桐很认真的唱，但是下面有些小朋友在下面讲话和笑，桐桐一直很认真，坚持唱完。老师后来批评了个别小朋友，那是不尊重别人的表现，同时也觉得挺有趣的，桐桐进步了。爸爸问桐桐，桐桐说对呀，我唱歌没有受到他们的干扰， 还有，桐桐告诉我们，Apple在边上一起指挥了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[眼睛]]></title>
    <url>%2F2008%2F11%2F25%2F%E7%9C%BC%E7%9D%9B%2F</url>
    <content type="text"><![CDATA[学校检查出桐桐散光。周日带桐桐去了市儿童医院看，人山人海的，还好有人带，马上看了。 查视力得出来，右眼0.6,左眼0.7，还有50度的散光。 和医生说了桐桐看电视或者思考问题的时候喜欢歪着脑袋，那个医生怀疑是眼性斜颈，说严重的话还要动手术，不过他又看了桐桐走路，又觉得不像，就在病历上打了个问号。说等到下周六散瞳回来复检再说。 事后，感觉儿童医院太混乱了，医生态度也不好，就联系到中大附属一院去看。 今天早上去看了，医生态度很好，人也不多。医生判断不是斜颈，说斜颈的话，会经常要歪着脑袋的。检查了一会，说问题不大，就开了散瞳的药（阿托品）回去涂，等下周二再去复检。 今天查视力，两边都加了0.1。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于丘比特]]></title>
    <url>%2F2008%2F11%2F17%2F%E5%85%B3%E4%BA%8E%E4%B8%98%E6%AF%94%E7%89%B9%2F</url>
    <content type="text"><![CDATA[桐桐在参加心水宝贝拍摄时有一个哥哥扮成丘比特,但这个哥哥穿一套小西服,当姐姐问小朋友们知不知道丘比特是谁时,小朋友们说不知道,姐姐告诉小朋友们丘比特是爱神,手上有把箭,然后问小朋友们你们觉得丘比特是什么呀?小朋友们说他是去参加奥运的射箭比赛的! 晚上，妈妈给桐桐讲了丘比特的故事，妈妈说，丘比特把幸福带给了别人，那他自己为什么不幸福呀？桐桐说，因为他射不到自己。 妈妈特地上网查了关于丘比特的故事: 爱神其实就是希腊神话中的丘比特。 爱神丘比特的故事要从美神维纳斯说起。当维纳斯还很年轻的时候，她爱上了大卫——这个古罗马传说中最美的男子。大卫是完美的，而维纳斯是残缺的，她是一个断臂美女，她的残缺在大卫眼中却是如此的完整。他们的结合是神界里最伟大的爱情，正因如此上天赐给他们一件最能象征爱情的礼物，那就是他们的孩子丘比特。 丘比特是一个长着双翼的可爱男孩，他有一把玲珑的神弓，凡是被他的箭射中的人们都会相爱，而且会永远幸福。但是，同样渴望爱情的丘比特却不能带给自己幸福，因为他无法用箭射中自己。 就在那次神的宴会上，维纳斯带着心爱的儿子丘比特去参加，一个神情特别的女孩闯进了丘比特的心。这个女孩很漂亮，却一脸的黯然神伤，丘比特走上前询问原因，原来这个女孩是预言家所罗门的女儿，所罗门曾经预言这是一场灾难的宴会，而她，血石，将成为这场灾难的祭献。丘比特听后非常的伤心，因为他不仅同情女孩的遭遇，而且已经不知不觉间爱上了她。 就在这个时候，可怕的百眼怪出现了！它呼风唤雨，将宴会搅得一塌糊涂。百眼怪是专门与众神为敌的，它本领很大，众神拿它都没有办法，除了拼命的逃离。血石说：“不能再这样下去了，我们终究要除掉这个恶魔。”她似乎忘记了父亲的预言，勇敢的冲向了怪物。而丘比特万分担心血石的情况下，竟慌乱的朝怪物射了一箭，他只想击退他，却忘了他自己的箭是做什么用的。不幸的是这只箭不仅射中了怪物，还射中了奔向怪物的血石！与此同时，维纳斯找到了心爱的儿子，拉起他跳进河里，他们变成两条鱼来脱险。丘比特无法挣脱母亲的手，他含泪回头望着，望着血石和怪物一起离开，消失在茫茫的宇宙中…… 后来，天上就有了一个星座叫双鱼，可是丘比特不在上面，他一个人孤独的坐在木星上，有的时候会向着地球的方向射上一箭。于是，浪漫的双鱼座女孩就会在世界末日与陌生人共舞，爱上他，然后移民到另一个星球去结婚生子…… 儿子,这故事很动人吧!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心水宝贝拍摄花絮]]></title>
    <url>%2F2008%2F11%2F17%2F%E5%BF%83%E6%B0%B4%E5%AE%9D%E8%B4%9D%E6%8B%8D%E6%91%84%E8%8A%B1%E7%B5%AE%2F</url>
    <content type="text"><![CDATA[那天复试以后，导演和我们说起彩排及拍摄时间，我们听成了下午4点。 到了周日早上，我们还在家玩的时候，10：38分，电视台的人打电话过来，说，怎么还没到呀，才明白是搞错时间了。 马上临急临忙套上几件衣服，打的向电视台飞奔过去。 同时也通知舅舅舅妈他们也过去，他们正带着菲菲在爬山呢。 到了电视台，进了录制厅，正好11点，其他两个小朋友正在彩排，还好没有迟到太多，然后才知道是下午2点开始录制。 另外一个6岁多的小男孩好像是大沙头幼儿园，还有一个是黄石路幼儿园的5岁5个月的小姐姐，都是节目组从幼儿园挑选出来的。 录制从下午两点开始，到了将近4点半才结束，回到家都累死了。 不过菲菲姐姐很棒，坐在亲友团位置上，一直都很安静。 拍摄的花絮： 1、关于带妈妈还是带老婆去月球玩的事，桐桐小时候说过，要娶一个有礼貌的老婆，然后带妈妈去月球。昨天，主持人问起桐桐，桐桐竟然说要带老婆。主持人问为什么，桐桐说，因为老婆很凶。笑~ 2、在天使之吻的惩罚环节，就是让一个扮成天使的小女孩沾上蛋糕、番茄酱、咖啡等等，然后亲各个人的脸，其它人都是亲脸或者额头，到了桐桐，主持人问桐桐是亲哪里，脸、嘴巴还是额头，桐桐竟然说嘴巴。 笑~ 3、彩排的时候，桐桐唱了说唱脸谱，导演觉得很好，然后准备到正式节目的时候让桐桐唱。 没想到，到了正式的节目，主持人问，谁要表演唱歌，另外一个哥哥声音很大，主持人就让他唱了，然后，导演在下面，举着白板，上面写着，请3号（桐桐是3号）唱，可惜主持人一直看着那个哥哥唱歌，没看看导演的白板，太可惜了!!!!!!!!!!!!!!!!!!! 这次上电视拍摄的经历，还是挺好的，让桐桐开心了一次。也让桐桐见识了这些场面。 节目的播出时间应该是12月中旬，在广州电视台。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上电视了]]></title>
    <url>%2F2008%2F11%2F13%2F%E4%B8%8A%E7%94%B5%E8%A7%86%E4%BA%86%2F</url>
    <content type="text"><![CDATA[广州电视台少儿频道要挑选几个小朋友去参加节目，在学校初试。 昨天下午到了电视台复试，最后选中了桐桐。 导演评价说，桐桐语言表达能力很强、记忆力好、反应很快、能坚持自己的观点。 还有就是不怯场，还有，导演说，桐桐在学校的时候表现不是最好的一个，但是，在陌生环境下，其它的小朋友都有点怯场，而桐桐不会，反而表现得更好。 复试的时候，听到了导演问他一个问题： 导演:“去过爸爸单位吗？” 桐桐：“去过。” 导演:“爸爸单位与学校有什么不同？” 桐桐：“爸爸单位有老板，学校有老师。” 导演:“老板和老师有什么不同？” 桐桐：“老板发钱，老师不发钱。” 笑~~~~~~~~ PS：初步定了周日下午要去录制节目，请了舅舅、舅妈还有菲菲去当亲友团。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[孟庭苇]]></title>
    <url>%2F2008%2F11%2F06%2F%E5%AD%9F%E5%BA%AD%E8%8B%87%2F</url>
    <content type="text"><![CDATA[看电视的时候桐桐看到孟庭苇。桐桐说她好漂亮，爸爸问，那是她漂亮还是妈妈漂亮。 桐桐说，她是全世界女歌手中最漂亮的。 爸爸说，那就是她最漂亮了？ 桐桐说，我说了，她是女歌手中最漂亮的，并不是说是家里人最漂亮的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十万个为什么]]></title>
    <url>%2F2008%2F11%2F05%2F%E5%8D%81%E4%B8%87%E4%B8%AA%E4%B8%BA%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[桐桐现在很喜欢问为什么。早上送他上学，他问，爸爸，世界上为什么有树。 爸爸就给桐桐解释了树的光合作用还有人的呼吸作用，桐桐又不断的问人为什么要呼吸氧气。 爸爸都快顶不住了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爱哭的妹妹]]></title>
    <url>%2F2008%2F11%2F04%2F%E7%88%B1%E5%93%AD%E7%9A%84%E5%A6%B9%E5%A6%B9%2F</url>
    <content type="text"><![CDATA[桐桐从小爱哭。昨天，妈妈带他去周翼阿姨家做客。 周翼的女儿在边上哭，桐桐走过去说：“爱哭就是我妹妹了！” ;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[南瓜灯]]></title>
    <url>%2F2008%2F11%2F03%2F%E5%8D%97%E7%93%9C%E7%81%AF%2F</url>
    <content type="text"><![CDATA[今年的万圣节，桐桐班本来要叫上外教一起到西餐厅热闹一下，但学校没批，就只能让小朋友自己回家弄南瓜灯。 昨天，妈妈特意从市场买了一个南瓜，桐桐在在南瓜上画了形状，妈妈给桐桐挖了南瓜，弄成了南瓜灯，爸爸在边上看篮球。 妈妈说，以后你就给小桐（桐桐的儿子;-)）弄南瓜灯，桐桐说，不行，让他妈妈帮他弄，像爸爸那样。 笑~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学钢琴]]></title>
    <url>%2F2008%2F10%2F30%2F%E5%AD%A6%E9%92%A2%E7%90%B4%2F</url>
    <content type="text"><![CDATA[桐桐现在学钢琴，不过看他不是很喜欢，觉得他也不是学钢琴的料。桐桐现在最喜欢的是画画、武术、英语，这几个学起来都很专心，谁都打扰不了他。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小鸟]]></title>
    <url>%2F2008%2F10%2F29%2F%E5%B0%8F%E9%B8%9F%2F</url>
    <content type="text"><![CDATA[今天上学路上，桐桐看到了很多小鸟在草地上走，桐桐就偷偷上前看，小鸟一下就飞走了。桐桐说：“要是我是小鸟该多好呀！”，爸爸问他为什么，桐桐说，小鸟可以自由的在天上飞呀。 笑~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三聚氰胺]]></title>
    <url>%2F2008%2F10%2F25%2F%E4%B8%89%E8%81%9A%E6%B0%B0%E8%83%BA%2F</url>
    <content type="text"><![CDATA[四伯今天住院，爸爸说和桐桐去看四伯。 桐桐问，四伯为什么住院。爸爸说是因为结石。桐桐说是肾结石吗，爸爸说是的。 桐桐大声地说，啊，三聚氰胺！ 看来三聚氰胺真实老少皆知了。 背景就是三鹿奶粉含有三聚氰胺，吃了导致肾结石。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爸爸的话都是错的]]></title>
    <url>%2F2008%2F10%2F25%2F%E7%88%B8%E7%88%B8%E7%9A%84%E8%AF%9D%E9%83%BD%E6%98%AF%E9%94%99%E7%9A%84%2F</url>
    <content type="text"><![CDATA[昨天吃饭，不知道说起什么，桐桐说，爸爸的话都是错了，除了批评我的话。妈妈的话都是对的。 笑~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18岁的问题]]></title>
    <url>%2F2008%2F10%2F25%2F18%E5%B2%81%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[早上送桐桐上学，路上。 桐桐问：“爸爸，上大学的时候我多少岁了？” 爸爸：“18岁。” 桐桐：“yeah，18岁我就可以不用听你们的话了！” 爸爸：“你18岁就可以自己做判断和做决定了，但是有什么大事还是可以征求爸爸妈妈的意见。” 桐桐：“哦。那上大学的时候能和爸爸妈妈住一起吗？” 爸爸：“不能了。” 桐桐：“那我会想你们的呀！” 爸爸：“到时爸爸妈妈会定期去看望你的，就像现在爸爸妈妈有空去看奶奶、公共婆婆一样。” 桐桐：“哦。”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拍皮球]]></title>
    <url>%2F2008%2F10%2F21%2F%E6%8B%8D%E7%9A%AE%E7%90%83%2F</url>
    <content type="text"><![CDATA[现在周末有空都带桐桐去体育中心玩皮球，钢琴老师说了，要多拍球，这样对手指的放松及协调性有好处。现在桐桐基本能拍60、70下了。 我让桐桐拍一个100下以上的，失败了两次之后，桐桐说，我拍不了这么多，爸爸就用那个国王和蜘蛛的故事来激励他。桐桐尝试了第三次，果然成功了。 PS： 名人轶事:布鲁斯和蜘蛛 从前，苏格兰有个国王，名叫罗伯特•布鲁斯。他所处的时代是个不文明的野蛮时代，因此他必须机智勇敢。英格兰国王向他开战，率领大军侵入苏格兰，要把他赶出国土。 他打了一次战役又一次战役。布鲁斯六次率领人数不多的英勇部队与敌人作战，可是六次都被打败了，被迫逃跑。最后，他的部队溃散了，他本人被迫躲在森林里和群山深处的僻静地方。 一天，正当他躺着思索的时候，看见一只蜘蛛在他头上，准备织网。他注视着这只蜘蛛慢慢地、小心翼翼地辛勤劳作。 她六次试图把她那纤弱的细丝从一道横梁系到另一道横梁上去。但是六次都失败了。 “可怜的东西！”布鲁斯说道，“你也知道失败的滋味。” 但是蜘蛛并没有由于六次的失败而灰心。她更加小心谨慎地准备第七次尝试。 当布鲁斯看见蜘蛛在柔弱的细丝上摆动时，他几乎忘记了自己的烦恼。她会再次失败吗？不会！这根丝被稳妥地带到横梁上，而且牢牢地系在那儿了。 “我也要做第七次尝试！”布鲁斯喊了起来。 他站了起来，把他的士兵召集在一起，他把自己的计划告诉了他们，并且派他们把振奋斗志的信息带给他那些灰心丧气的臣民。不久，他周围就组成了一支勇敢的苏格兰军队。另一场战斗打响了，英格兰国王只好返回自己的国土了。 从那天以后，凡是叫布鲁斯的人，没有一个伤害过蜘蛛。这个小小的生物给国王上的课永远没有被忘记。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[看画展]]></title>
    <url>%2F2008%2F10%2F21%2F%E7%9C%8B%E7%94%BB%E5%B1%95%2F</url>
    <content type="text"><![CDATA[桐桐现在报名在天河文化局上图画课。周六的时候，老师还特意拿了桐桐的话来表扬。 现在桐桐每天有空都想着画画，并且画的画很有想象力，表现也很到位。 PS：周日去看了画展，什么告别后殖民时代，太后现代化和抽象了，大人都看不懂，更不说小孩子了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[坐地铁]]></title>
    <url>%2F2008%2F10%2F19%2F%E5%9D%90%E5%9C%B0%E9%93%81%2F</url>
    <content type="text"><![CDATA[今晚回婆婆家吃饭，坐地铁回来。 到地铁的时候，关门的提示音已经响起来了，爸爸眼明手快，拉着桐桐就跑进去了，可惜妈妈慢了一步，被关在了外面。 桐桐看着门外的妈妈想哭了，爸爸说，不用怕，妈妈坐下一趟车，我们到终点站等妈妈就行了。 桐桐没有哭，但是还是念念不忘妈妈。 在终点站，终于看到妈妈从下一趟车里面出来了，桐桐才高兴了起来。 路上，桐桐说，妈妈我还担心你被关到地铁里面回不来。还说，妈妈我看到你在外面就很伤心，很想你。 妈妈说，如果爸爸关在外面，你会不会伤心，桐桐说，我也会很伤心的，我会哭的。 ;-) 以后还是小心点，听到提示音还是不能上车了，这样太危险了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[环保意识]]></title>
    <url>%2F2008%2F10%2F06%2F%E7%8E%AF%E4%BF%9D%E6%84%8F%E8%AF%86%2F</url>
    <content type="text"><![CDATA[前几天带桐桐去吃真功夫，路上，桐桐问，真功夫用的是一次性筷子吗，我想了想，说是的。桐桐说，那以后少点去真功夫吃饭，因为他们不支持环保。 笑~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的新朋友]]></title>
    <url>%2F2008%2F10%2F05%2F%E6%A1%90%E6%A1%90%E7%9A%84%E6%96%B0%E6%9C%8B%E5%8F%8B%2F</url>
    <content type="text"><![CDATA[桐桐国庆时认识了二位新朋友,他们都是六岁的小哥,上小学一年级:一个是姜萍阿姨的儿子叫做陈香泽哥哥,另一个是包叔叔的儿子叫包锐哥哥。 香泽哥是一个文静，好学的小朋友，他五岁开始下象棋和围棋，听说他象棋下得很不错的，国庆节开始学打乒乓球呢，香泽哥哥有个姐姐，但他一点也不娇气，桐桐要向他学习！包锐哥哥是小娟阿姨的朋友包叔叔的儿子，很大方外向，并且很象个大哥哥的样子，吃饭时哥哥走进我们就自我介绍：弟弟，我叫包锐，我们一起玩吧！后来桐桐和包锐哥哥玩时摔了一跤哭了，包哥哥就拍着桐桐肩膀说弟弟勇敢啊，不哭！桐桐很喜欢这二个新朋友，要向他们学习。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐语录]]></title>
    <url>%2F2008%2F10%2F05%2F%E6%A1%90%E6%A1%90%E8%AF%AD%E5%BD%95%2F</url>
    <content type="text"><![CDATA[爸爸有点不爱我,为什么呢?因为我有时耍赖他还安慰我,妈妈说过耍赖是不对的!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给儿子的生日礼物]]></title>
    <url>%2F2008%2F09%2F24%2F%E7%BB%99%E5%84%BF%E5%AD%90%E7%9A%84%E7%94%9F%E6%97%A5%E7%A4%BC%E7%89%A9%2F</url>
    <content type="text"><![CDATA[给儿子的生日礼物 儿子，昨天是你的五岁生日，晚上又刮台风，妈妈几乎一夜没睡在回忆你给妈妈带来的每个快乐时光！这五年里你从一个凡事都哇哇大哭的小奶娃变成了如今自称是小伙子的小男子汉了！ 最经典的是你从一岁十一个月上幼儿园到上学期期末几乎每天上学都哭，妈妈为此事伤透了脑筋，你们园长一直鼓励我虽然你的孩子上学哭已破了学校纪录，但相信有一天你的孩子会长大的！后来妈妈在报纸上和书上看到有关爱哭的孩子更聪明，语言表达能力更强之类的报导让妈妈对你的情感表达方式有了重新的认识，妈妈把你的哭当成了一种行为艺术了！上学期期末你上学不哭了，妈妈问你为什么不哭了你很自豪地说妈妈我长大了，孩子，要知道这句话对妈妈有多么重要！ 小时候家里太多人带你所以妈妈没怎么抱着你走路，现在妈妈想抱你也有点抱不动了才后悔当初怎么不多些抱抱你；小时候总要妈妈牵着手的你现在学会了主动牵妈妈的手了；以前你总说妈妈我累了，现在你会说妈妈你辛苦了；以前总是说妈妈帮帮我，现在常说妈妈让我来；以前总问妈妈今天为什么还要上学，现在说妈妈我们什么时候上学呀；还有很多数不完的进步，此时妈妈谢谢你陪伴妈妈一起成长，让妈妈更懂得尊敬父母，更有耐性与理性，更懂得宽容与珍惜，更重要的是让外婆也看到妈妈长大了，象个妈妈样子了！妈妈现在可以理直气壮地对外婆说：妈妈！您的女儿真的长大了！ 孩子，知道你有多可爱吗？有很多的趣事妈妈真的忍不住要与所有人分享： 妈妈生完你出院那天，护士姐姐忘记给你冲一点奶粉填肚子，回家路上塞车你在车里饿了惊天动地地哭，吓得妈妈忘记了还可给你喂母乳； 你还穿尿布挂奶瓶爹妈就送你上幼儿园了，不知道哪一天发现这二样东西你都不用了，还是老师有办法； 妈妈对你最严格，可你总是说妈妈比爸爸好，有一天你画一幅画爸爸和妈妈，爸爸是张笑脸，妈妈张大嘴，妈妈问你妈妈的嘴巴怎么这么大，因为妈妈骂我多所以嘴巴大，爸爸听了对你说：儿子，你终于有分辨事非的能力了； 妈妈找不到东西时，你对妈妈说：妈妈，我找不到东西时你不是说不想它它就会出来的吗； 有一次妈妈在拖地，你看到妈妈电脑里股票涨停了，你大叫，妈妈你的股票涨到电脑的顶顶了； 妈妈把头发染色后问你：妈妈头发这样子怪不怪，你很无所谓地说妈妈女孩子的头发都是有颜色的，男孩子就不行了； 有一次妈妈穿一条新买的裤子准备出门，你开心地说妈妈你今天很象解放军呀，搞得妈妈再也不敢穿那条裤子了； 画画时老师问小朋友请问电话线象什么呀，你大声地回答：象我妈妈的头发！ 你问妈妈，妈妈我什么时候才长大呀？妈妈说等你懂得去感恩，去忍受时你就长大了，你对妈妈说：妈妈什么是感恩与忍受？妈妈说感恩就是懂得爱爱你的人，忍受就比如你打针疼，你想哭但没有哭这就是忍受，你可爱地对妈妈说：妈妈，你辛苦了我永远爱你，我以后打针都不哭了，我是不是长大了呀？ 有几天你晚上睡前尿尿完总说裤子是湿的，妈妈摸过告诉你裤子没湿，你问妈妈为什么明明裤子没湿我总觉得有湿？妈妈说这是一种错觉，比如妈妈有时候明明关了煤气炉，一下楼就觉得好象没有关，从那天起妈妈发现你再没说裤子湿了； 有一次你对妈妈说：妈妈，隔壁班的宫老师不教我但她是我的好朋友，妈妈问为什么，你说每次我上学哭的时候宫老师总安慰我，从那次起妈妈开始关注那位不教你却能让你觉得是好朋友的宫老师，发现她确实是一位很有爱心的老师，妈妈感谢她！ 你前天问妈妈:妈妈,那些打我的小朋友我要不要分生日蛋糕给他们吃,妈妈告诉你你分给他们吃了他们就不好意思再打你了,你说那我分多点给他们吃吧。 孩子，妈妈要告诉你妈妈觉得最有趣的事是和你聊天！最自豪的是每次看你站在舞台上唱歌，总听到别人说这孩子唱得不错呀！最臭美的是别人说你长得象妈妈！ 对了，你不是问妈妈你的同学儿淳（韩国小朋友）说耶稣很爱我们，世界上有没有耶稣？妈妈告诉你：爱无处不在，只要你相信它就存在！ 妈妈把这封信作为你的生日送给你！祝你健康！幸福！快乐！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的生日]]></title>
    <url>%2F2008%2F09%2F24%2F%E6%A1%90%E6%A1%90%E7%9A%84%E7%94%9F%E6%97%A5%2F</url>
    <content type="text"><![CDATA[转眼间桐桐又长大一岁了。这个学期来，桐桐取得了很大的进步，老师也表扬了桐桐在学校的表现。 这个生日，桐桐收到了超人、自行车、红包还有菲菲姐姐送的机器人画。 下午在幼儿园还和小朋友们及老师们，当然还有John，一起分享了蛋糕。 晚上，一起在广州酒家一起吃了饭，还举办了生日Party。 PS：昨天是第一天看到菲菲带眼镜，菲菲有点远视和散光。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快乐的中秋节]]></title>
    <url>%2F2008%2F09%2F16%2F%E5%BF%AB%E4%B9%90%E7%9A%84%E4%B8%AD%E7%A7%8B%E8%8A%82%2F</url>
    <content type="text"><![CDATA[今年是取消五一黄金周之后，第一次中秋节放假。周五晚上，名雅苑幼儿园参加了小区举办的中秋节汇演活动。 桐桐参加了弟子规以及和小区老年人合唱《让世界充满爱》，期间发生了一件很搞笑的事。 桐桐他们站在第一排，工作人员就把立式的麦克风放在桐桐他们前面，没想到桐桐竟然跑到了麦克风前面，全场从头到尾就听到桐桐一个人的声音，桐桐还唱得很棒，把爸爸乐坏了。结束后，大家都猛夸桐桐表演得很好。 周六上午，桐桐参加了知远教育的性格培养训练，下午参加了天河文化宫的画画课程。 周六晚上，和菲菲他们去爬白云山了，还爬到了白云山的最高峰摩星岭。 周日是正式的中秋节，下午去了趟奶奶家，晚上到婆婆家吃饭了。 吃完饭后和小燕阿姨、彩玲阿姨他们去了大学城赏月。 终于度过了一个充实、有意义的中秋短假期。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开学趣事]]></title>
    <url>%2F2008%2F09%2F02%2F%E5%BC%80%E5%AD%A6%E8%B6%A3%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[昨天桐桐开学了,表现还挺好的,听爸爸说他们的新教室布置得很漂亮! 接他的时候,桐桐正在分享小同学的生日蛋糕呢,他告诉妈妈,今天我们学校跨栏比赛均均拿了第一名,妈妈问那你拿了第几名呀?桐桐说我没参加,妈妈问为什么呢?桐桐说妈妈,比赛肯定得有观众吧 回到家妈妈说tony喝水拉!桐桐说妈妈我改英文名了,谁帮你改的呀?我自己呗! 改成什么名字了??三角龙呗!可你知道三角龙英文拦拼吗?不就是threedragon! 妈妈今天查过了三角龙是threehorns.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谁是什么？]]></title>
    <url>%2F2008%2F08%2F29%2F%E8%B0%81%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[刚才和桐桐打电话，我问，你是谁呀。 桐桐：“铜锣。” 爸爸：“为什么？” 桐桐：“因为有个tong字。” 爸爸：“那你爸爸是谁？” 桐桐：“饺子。” 爸爸：“为什么？” 桐桐：“因为你名字有个jiao” 爸爸：“那你妈妈呢？” 桐桐：“橙子。” 爸爸：“为什么？” 桐桐：“因为妈妈名字有个chen。” 爸爸：“那婆婆呢？” 桐桐：“青菜。” 爸爸：“公公呢？” 桐桐：“混沌。” 爸爸：“为什么？” 桐桐：“因为有个dun。” 爸爸：“那奶奶呢？” 桐桐：“也是橙子。” ;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爸爸走了]]></title>
    <url>%2F2008%2F08%2F29%2F%E7%88%B8%E7%88%B8%E8%B5%B0%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐以前和我们开玩笑的时候，我们一说以后都不和他玩了，要走了，永远不回来等等，他就会大哭。 现在，长大了，翅膀硬了，动不动就说，不玩就不玩呗，走就走呗，反正我学校还有很多好朋友。 昨天晚上，桐桐在床上睡觉的时候，爸爸和他说晚安，他不应爸爸。 爸爸：“那我走了，不回来了。” 桐桐：“好的，你走吧。” 爸爸：“那我走了，你就没有爸爸了。” 桐桐：“我就换个新爸爸呗。” 爸爸就假装走了，顺便去晒一件衣服，没想到，刚晒完衣服回来，就听到桐桐哇哇大哭。 原来，他以为爸爸真的要走了，伤心的大哭起来，爸爸问他，那还要不要爸爸，他一边哭一边点点头。 看来桐桐还真的是舍不得爸爸走的;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妈妈煮饭]]></title>
    <url>%2F2008%2F08%2F25%2F%E5%A6%88%E5%A6%88%E7%85%AE%E9%A5%AD%2F</url>
    <content type="text"><![CDATA[周六没有回婆婆家吃饭，妈妈就到菜市场买菜煮饭给我们吃了。 这是妈妈第一次完整的煮一次饭给桐桐吃了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐爸爸的生日]]></title>
    <url>%2F2008%2F08%2F22%2F%E6%A1%90%E7%88%B8%E7%88%B8%E7%9A%84%E7%94%9F%E6%97%A5%2F</url>
    <content type="text"><![CDATA[昨天是桐爸爸的生日，也是印象中农历生日（桐爸爸习惯了过农历生日）和身份证上生日都是同一天的生日了。 昨天的生日，简简单单的过了，和桐妈妈、桐桐一起吃了一餐饭。然后在新家吃了生日蛋糕。 虽然简单，但是能和桐桐在一起过，都是很开心的事情了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搬新家]]></title>
    <url>%2F2008%2F08%2F21%2F%E6%90%AC%E6%96%B0%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[昨晚终于下定决心搬到新家了。 这个暑假，一直让桐桐中午在新房子自己睡。不过晚上还是第一次，桐桐自己睡床上，爸爸睡地上，为了方便给他盖被子。 新房子的空调不知道什么原因，调到29度，还是很冷。所以一个晚上都是在给桐桐盖被子，都没怎么睡。 早上，妈妈有点动摇，说还是让桐桐和他睡。 不过为了锻炼桐桐，还是让他习惯自己睡了。 关键是要解决空调太冷和防止桐桐翻身被子掉的问题。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[奥运会]]></title>
    <url>%2F2008%2F08%2F13%2F%E5%A5%A5%E8%BF%90%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[奥运会在8月8日晚上开幕。 公公、婆婆到我们家一起看，那天晚上，桐桐也很兴奋。一直不肯睡觉，坚持到了看火炬点火仪式。那时都12点多了。 看的过程当中，我们几个大人都困死了，唯一桐桐还生龙活虎的。 开幕式很不错，不过CCTV拍的水平就一般，后面看了美国NBC拍的，不得不赞叹老谋子真的有两下。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的暑假]]></title>
    <url>%2F2008%2F07%2F30%2F%E6%A1%90%E6%A1%90%E7%9A%84%E6%9A%91%E5%81%87%2F</url>
    <content type="text"><![CDATA[这一周，桐桐的暑假开始了。 桐桐已经快五岁，这个暑假，就开始学习很多东西了。 首先是，去和钢琴老师交流了一会，桐桐也挺喜欢的。不过老师要在开学后才开始教，就只能等了。 另外，本来是想去英孚学习英语的，但妈妈觉得幼儿园举办的暑假英语班也挺好，离家里近，又可以让桐桐熟悉下学期的外教。这两周，桐桐就在幼儿园学习英语了，每天早上两个小时。 桐桐班的一个小朋友文文去学水墨画，妈妈也给桐桐报名了，是在天河娱乐广场的天河区文化局。这三周的下午4：00-5：30，桐桐都和文文都一起学画画了。 还有，桐桐的中班升大班，要转成英文实验班。闹得风风火火的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个学期结束了]]></title>
    <url>%2F2008%2F07%2F28%2F%E4%B8%80%E4%B8%AA%E5%AD%A6%E6%9C%9F%E7%BB%93%E6%9D%9F%E4%BA%86%2F</url>
    <content type="text"><![CDATA[上周五，是桐桐中班的最后一天了。 上个学期，桐桐进步很多，6月份以后，上学都不哭了。也慢慢学会了控制自己的情绪，但是还需要更进一步。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[功夫熊猫]]></title>
    <url>%2F2008%2F07%2F14%2F%E5%8A%9F%E5%A4%AB%E7%86%8A%E7%8C%AB%2F</url>
    <content type="text"><![CDATA[昨天第一次带桐桐去看电影了。 在天河城飞扬影院看的《功夫熊猫》，大约90分钟左右，好莱坞制作的关于中国功夫的动画片。 桐桐看到打斗场面，比较害怕，说自己吓得脚都软了，还要妈妈过来。 还好，电影院有好多小朋友，边上还有一个6岁左右的小女孩，桐桐还是坚持了下来。 散场之后桐桐还是比较开心的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐语录]]></title>
    <url>%2F2008%2F07%2F03%2F%E6%A1%90%E6%A1%90%E8%AF%AD%E5%BD%952000%2F</url>
    <content type="text"><![CDATA[今天带桐桐去看病,在医院里有个妈妈正在给孩子喂奶,桐桐很好奇地看着,妈妈解释说BB小时候都吃妈妈的奶长大的,可惜妈妈只喂了你三个月就没奶水了 . 桐桐看了看妈妈,很不屑一顾地说:”喝鲜奶呗!”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐要改进的地方]]></title>
    <url>%2F2008%2F07%2F01%2F%E6%A1%90%E6%A1%90%E8%A6%81%E6%94%B9%E8%BF%9B%E7%9A%84%E5%9C%B0%E6%96%B9%2F</url>
    <content type="text"><![CDATA[桐桐平时表现挺好的，但是有些小毛病要帮他慢慢改正。 1、看到电视上打打杀杀的画面就怕，男子汉也要狠点，不能太软弱； 2、别人不小心碰到就发小脾气，男子汉要有容人之量； 3、爸爸妈妈一批评就撇起小嘴，男子汉不能这么不经骂； 以后要帮桐桐改正，不过桐桐今年最大的进步的上学彻底不哭了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐上台表演]]></title>
    <url>%2F2008%2F06%2F23%2F%E6%A1%90%E6%A1%90%E4%B8%8A%E5%8F%B0%E8%A1%A8%E6%BC%94%2F</url>
    <content type="text"><![CDATA[昨晚，爸爸去送姑妈回家。 晚上，正好，在小区下面蒙牛组织了一个才艺show比赛。 桐桐第三个上去表演了“2008快先来”，表现很棒。主持的姐姐夸桐桐说：“非常厉害。”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二姐姐回来看桐桐了]]></title>
    <url>%2F2008%2F06%2F23%2F%E4%BA%8C%E5%A7%90%E5%A7%90%E5%9B%9E%E6%9D%A5%E7%9C%8B%E6%A1%90%E6%A1%90%E4%BA%86%2F</url>
    <content type="text"><![CDATA[上周一，二姐姐到学校去接了桐桐。桐桐好开心，高兴的大声说：“姐姐来接我了。” 可是，姐姐没有和我们一起吃饭，就走了。 此后几天，桐桐一直都在想念着二姐姐。 周六，带桐桐去了奶奶家，桐桐和二姐姐玩，都舍不得走。 走了之后，又马上说想二姐姐了，并要马上打电话给姐姐。 周日下午，二姐姐又来看桐桐，桐桐刚睡醒，听到二姐姐来了，急急忙忙的从床上下来，跑过去看二姐姐了。 桐桐真是一个讲感情的好孩子。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[狮王进行曲]]></title>
    <url>%2F2008%2F06%2F18%2F%E7%8B%AE%E7%8E%8B%E8%BF%9B%E8%A1%8C%E6%9B%B2%2F</url>
    <content type="text"><![CDATA[桐桐班教狮王进行曲的时候，桐桐扮演了狮王，可威风了。 桐桐从小参加了音乐课程，对节奏的掌握比较好。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[父亲节]]></title>
    <url>%2F2008%2F06%2F16%2F%E7%88%B6%E4%BA%B2%E8%8A%82%2F</url>
    <content type="text"><![CDATA[昨天是6月份的第三个星期日，也是父亲节。 昨天带桐桐还有洪巧姐姐、宏湛弟弟、小宇妹妹他们一起去了动物园，桐桐可开心了，就是给蚊子咬了（以后去动物园一定要穿长裤，特别是下雨天;-)）。 爸爸问桐桐，喜欢母亲节还是父亲节，桐桐说，喜欢父亲节。 因为父亲节可以去动物园。 笑~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打爸爸屁股]]></title>
    <url>%2F2008%2F06%2F13%2F%E6%89%93%E7%88%B8%E7%88%B8%E5%B1%81%E8%82%A1%2F</url>
    <content type="text"><![CDATA[桐桐班有个女同学，长得不怎么的，但是很懂事，桐桐很喜欢她。 平时爸爸和妈妈聊天的时候说到她，爸爸说她太丑了。 没想到桐桐竟然回学校和她说了（童言无忌-)）,没想到她说，回去打你爸爸屁股;-). PS：下次爸爸和妈妈讲话要注意点了，其实桐桐都是很认真在听的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐真的长大了]]></title>
    <url>%2F2008%2F06%2F12%2F%E6%A1%90%E6%A1%90%E7%9C%9F%E7%9A%84%E9%95%BF%E5%A4%A7%E4%BA%86%2F</url>
    <content type="text"><![CDATA[这段时间（特别是过了六一之后），桐桐上学都没哭了。还坚持要自己进去，不要我们送。上学的时候情绪也好很多。 另外，桐桐平时也能控制自己的情绪，没有动不动就哭那样子了。 以前，抱他的时候，他趴在爸爸身上，就感觉到象BB仔那样，现在，抱着他，他挺着直直的，像个小伙子了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐今天最棒了]]></title>
    <url>%2F2008%2F06%2F05%2F%E6%A1%90%E6%A1%90%E4%BB%8A%E5%A4%A9%E6%9C%80%E6%A3%92%E4%BA%86%2F</url>
    <content type="text"><![CDATA[今天桐桐上学的表现是上学这么久以来表现最好的一天。 在学校铁门那里的时候，他们班的小朋友、黄老师、谭园长都在迎接大家的到来。 桐桐在给黄医生看了喉咙以后，正想陪他进去教室，桐桐突然说，爸爸，你不用进去。自己拿了书包，向其他小朋友鞠躬后，就一溜烟跑到教室了。 今天是桐桐上学最乖的一天了。 PS：不过现在桐桐上学还是有进步，只是偶尔会小哭。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吉的堡幼儿园]]></title>
    <url>%2F2008%2F05%2F29%2F%E5%90%89%E7%9A%84%E5%A0%A1%E5%B9%BC%E5%84%BF%E5%9B%AD%2F</url>
    <content type="text"><![CDATA[桐桐班有个同学叫曹儿存，是韩国的小朋友。不过中文讲得好棒。 昨天，曹儿存说在吉的堡幼儿园看到过桐桐。 妈妈问桐桐，曹儿存为什么不读吉德堡幼儿园，桐桐说，可能是吉的堡的老师比麦兜班的老师还严格吧。 PS：桐桐现在的幼儿园中班的番号是麦兜班，这学期新来的老师比较严格;-) PS:曹儿存是从吉的堡幼儿园转学过来的，桐桐也在那里读过几天，不过哭得很厉害，就没有继续上。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随笔]]></title>
    <url>%2F2008%2F05%2F27%2F%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[很久没有给桐桐写博客了，最近比较忙。 桐桐最近上学间断的哭，不过感觉还是比以前进步了。 还有，桐桐5月31日，要参加学校的滑板车比赛，还有拍皮球比赛，这个周末就陪他去练了好几次。不过桐桐现在比较懒，不怎么喜欢运动。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[四川汶川大地震]]></title>
    <url>%2F2008%2F05%2F16%2F%E5%9B%9B%E5%B7%9D%E6%B1%B6%E5%B7%9D%E5%A4%A7%E5%9C%B0%E9%9C%87%2F</url>
    <content type="text"><![CDATA[5月12日，四川汶川发生了与76年唐山大地震同等级的7.6级地震，能量相当于100颗广岛原子弹。 那天我正在上海出差，上海很多高楼都感觉到有点震动。 挺担心桐桐他们的，那几天，妈妈正好发烧。 不过广州还好，基本没什么感觉。 这次的地震人员伤亡挺厉害的，特别是正好在下午，很多在上学的学生给压在瓦砾之下。 地震后，中央响应非常迅速，温总理迅速在几个小时内赶赴现场，指挥救灾。 全国、全世界都踊跃捐款，桐桐在学校也捐了款。 保佑所有受灾的同胞。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[怎么对洪小桐的问题]]></title>
    <url>%2F2008%2F05%2F09%2F%E6%80%8E%E4%B9%88%E5%AF%B9%E6%B4%AA%E5%B0%8F%E6%A1%90%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[现在爸爸送桐桐上学之后，桐桐会一天表现很好，一天小哭。 前天，爸爸送到教室门口的时候，桐桐拉着爸爸的手，不肯进去，爸爸很果断的甩开了他的手，转头就走了。 昨晚，桐桐和爸爸睡觉的时候，说起洪小桐（桐桐一直说洪小桐是他儿子;-)）。桐桐说，如果洪小桐上学哭的话，我就用力的甩开他的手，走掉。 爸爸问，如果洪小桐哭了怎么办，桐桐说，就把他关到房间。如果还哭，就狠狠的打他一通。 ~~~晕，看来现在爸爸怎么对桐桐，他心里都记得一清二楚了;-)还想到用来对付洪小桐了。看来以后爸爸要对桐桐温柔点才行。 PS：昨天黄老师说整个幼儿园的老师都认识桐桐，我想，那肯定的啦。桐桐是幼儿园有史以来哭得最久的小朋友了。从没到两岁哭到现在。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[奥运圣火广州站传递]]></title>
    <url>%2F2008%2F05%2F08%2F%E5%A5%A5%E8%BF%90%E5%9C%A3%E7%81%AB%E5%B9%BF%E5%B7%9E%E7%AB%99%E4%BC%A0%E9%80%92%2F</url>
    <content type="text"><![CDATA[昨天，5月7日，对广州市民来说是个特别的日子。这一天，2008北京奥运火炬传递在广州进行。 为了感受奥运圣火传递的气氛，爸爸、桐桐都特意请假去现场看。 在仔细分析了路线之后，决定去云台花园看。按计划，圣火11点到云台花园，我们一家3口，8点半就到了。但是到现场一看，已经到处人山人海了，本来想喝早茶，位置都没了。附近的停车场也都停满了，只好，绕了很远（很多路口都封掉），终于停在鹿湖我们平时打球的那个地方那个。 把现场情况和小燕说了，本来已经出门的他们打消了到现场看圣火的念头。不过，还有一个热情高涨的老蔡同学，从湛江千里迢迢的赶来看生活了。 看圣火的过程有个小插曲，妈妈和桐桐先下车，他们买了门票进去，买票的时候妈妈还问，要不要帮爸爸一起买了，爸爸想和老蔡一起进去再买，就说不用。 等到爸爸停好车，到公园门口时候是9：10，那时候，云台花园从安全的角度考虑，已经不让观众再买票进去了，妈妈和保安说了很多话，都没有答应。爸爸妈妈还正着急着呢，最后，只能和保安说，妈妈出来，爸爸进去带桐桐看看。保安这时候体现了人道主义精神，还是让爸爸补票进去了，真幸运！！ 在花园里面的人都挺多了，不过相比外面的人山人海，里面还算舒服多了。 在里面等了一个多小时，圣火都没有来，桐桐都等着不耐烦了。 不过还好现场有很多的东西玩，时间过得还相对快些。 在11点左右，圣火终于到了，不过离我们那里太远，看不大清。圣火一下子就过去了。 看完之后，爸爸和桐桐还意犹未尽，于是爸爸决定下午再去看，并一定要帮桐桐拍到清晰的火炬传递画面。 最后选定了中大北门那里，因为那里学生多，气氛会好点。 一早，爸爸就把车停在了中大的南门（不让车进去了），然后走了20分钟的路，到了北门，根据网上的资料，圣火在3：55到北门，看到时间还早，并且那么晒，就到中大里面乘凉了。 没想到，才3点不到，就听到人群欢呼了，开始还以为是那些人是草木皆兵，但还是忘外面跑了，没想到外面已经人山人海了。并且，看样子应该是火炬快到的样子。只好拼命的找好位置看，可是，树顶、围墙到处都是人了。只能顺着忘前走，走了很远还是人山人海，想，今天太倒霉了，看来是看不到圣火了。 但是，皇天不负有心人，这时，奇迹出现了。正当我觉得没希望的忘前走的时候，在我跟前有一个人拿着一个阶梯凳放了下来，这时我也不管三七二十一，立马跳上去，在我之后也马上跳上几个。这个阶梯凳有两层，每层大概就两个人的位置，但是，紧急时期，每层都挤了4个人。大家侧着身，也都理解，并且也说说笑笑，好像很熟悉一样。这就是圣火的力量！！！ 很幸运，能找到这么一个好的至高点，可以让我从上往下看得一清二楚。 站上没多久，圣火就到了，比预定的时间早了半个多小时。 在一种亢奋的气氛中，不停的“中国，加油”叫喊声中，圣火慢慢的走过去了，无论是火炬手，还是观众，都在陶醉在这一刻，达到了忘我的境界。那些学生朋友们挥动着国旗，把现场装饰成红旗的海洋，一片红彤彤的世界。 真幸运，能置身其中，享受这一刻。 当时请假看圣火的时候，我的理由就是，可能我这一辈子也就一次机会能看到圣火，还真的不枉此行。 后来才知道，因为陈家祠站的人太多，圣火没有按预定的计划进去再加上中途比较顺利，所以提前了半个多小时到达中大北门。正因为这样，导致我们花花小姐赶到现场的时候，已经错过了火炬的传递，不过能到现场感受到那种气氛，也就够了。 后来才知道，因为体育东路的人太多，开辟出一条给火炬手的路线都困难重重，导致，火炬的传递都直接转到了体育中心进行。 后来才知道，体育中心聚集了好几十万人，周边到处都是人山人海，路上都是人。广州的市民真是太热情了。 PS：圣火快到的征兆 1、先是直升飞机到了现场上空； 2、有几部警车开路； 看圣火的秘籍： 1、能早去就早去，一定在沿线占到最前面的位置； 2、早去的时候拿个小凳子，等的时候可以坐坐。听说有一个茂名的人，提早8个小时到了广州等； 3、去的晚的时候可以带个三角梯，这样就可以居高临下了； 4、没有准备的话，平时可以苦练猴子爬树术，爬到路边的小树上看；现场有许多的人都是这样的； 5、或者平时多联系双脚跳，如果去晚了，站在人群后面可以通过双脚跳在前面人员的头顶看； 6、一定不要在下班前后的时间再去，要么你找不到好的位置，要么你根本都进不去； 7、还有一个建议，就是，最好找到一些冷门的线路，人少点，相对容易占到有利位置。 北京2008年奥运会广州火炬接力火炬手、路段配比表 http://www.tyj.gd.gov.cn/html/aoyuhj/2008_05_05_17_8511.html 北京2008年奥运会广州火炬接力火炬手、路段配比表http://www.tyj.gd.gov.cn/html/aoyuhj/2008_05_05_17_8511_2.html 广州火炬传递路线图：]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐这几天好棒]]></title>
    <url>%2F2008%2F05%2F06%2F%E6%A1%90%E6%A1%90%E8%BF%99%E5%87%A0%E5%A4%A9%E5%A5%BD%E6%A3%92%2F</url>
    <content type="text"><![CDATA[昨天爸爸妈妈一起开车送桐桐，爸爸直接送到学校。 桐桐很乖，见到老师都主动打招呼，整个过程都是很开心的。 PS：我们分析，是不是前天桐桐打哭了卡卡，所以很有成就感;-) 今天本来桐桐一起都很乖的，在学校门口见到老师的时候还主动打招呼，不过到了教师门口，在主动叫了黄老师以后，就说不想进去。不过爸爸很果断地说，不行，就把他的手撇开了。然后黄老师就拉他进去，说给他贴红花了。 走的时候也没听到哭。 PS：分析，可能今天去得比较晚，所有的小朋友都在里面，所以他有点怕。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[周末去祁福农庄]]></title>
    <url>%2F2008%2F04%2F28%2F%E5%91%A8%E6%9C%AB%E5%8E%BB%E7%A5%81%E7%A6%8F%E5%86%9C%E5%BA%84%2F</url>
    <content type="text"><![CDATA[周六本来要和石言弟弟去看木偶剧的，不巧，那天正好有人包场，没看成，就去了祁福农庄。 走了迷宫、喂了马和兔子、看了动物表演、荡了秋千、坐了小火车、碰碰车，还有骑了马，可开心了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐上学不哭]]></title>
    <url>%2F2008%2F04%2F28%2F%E6%A1%90%E6%A1%90%E4%B8%8A%E5%AD%A6%E4%B8%8D%E5%93%AD%2F</url>
    <content type="text"><![CDATA[这个学期都是妈妈送桐桐上学，但是哭得越来越厉害。 分析，还是桐桐太粘妈妈了。于是，上周五和今天都是由爸爸一个人送。 之前都是在学校才哭，现在从家里出来以后，要离开妈妈，桐桐就开始哭了，不过也就哭一会。 不过，还好的一点是，桐桐到了学校，反而不哭了，不过还有点不情愿，但是见到老师还是能鞠躬问好，桐桐好乖。 希望桐桐坚持。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[妈妈是霸王龙]]></title>
    <url>%2F2008%2F04%2F20%2F%E5%A6%88%E5%A6%88%E6%98%AF%E9%9C%B8%E7%8E%8B%E9%BE%99%2F</url>
    <content type="text"><![CDATA[昨天中午睡觉时，桐桐和爸爸说，妈妈是霸王龙，因为妈妈很霸道。而爸爸就很温和。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐惹妈妈哭了]]></title>
    <url>%2F2008%2F04%2F20%2F%E6%A1%90%E6%A1%90%E6%83%B9%E5%A6%88%E5%A6%88%E5%93%AD%E4%BA%86%2F</url>
    <content type="text"><![CDATA[昨天桐桐不听话，老哭，惹得妈妈也哭了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿子又大哭了]]></title>
    <url>%2F2008%2F04%2F15%2F%E5%84%BF%E5%AD%90%E5%8F%88%E5%A4%A7%E5%93%AD%E4%BA%86%2F</url>
    <content type="text"><![CDATA[妈妈 09:54:57 刚才园长打电话来 妈妈 09:55:09 说问了一个专家,主要问题在我身上 妈妈 09:55:23 说我放不开导致孩子抓住我心理 妈妈 09:55:48 让我们所有人以后少在他面前提哭字 -爸爸- 09:55:51 哈哈，那也是唐园长想到的。 妈妈 09:55:53 包括老帅 -爸爸- 09:55:53 好呀 -爸爸- 09:56:04 其实想想也是 妈妈 09:56:10 该做什么就做什么 妈妈 09:56:20 让他习惯自然就好了 -爸爸- 09:56:20 妈妈 09:56:34 晚上妈妈要出去有事就是有事 -爸爸- 09:56:42 不过你的儿子还是比较特别点。要成大事的 妈妈 09:56:44 妈妈没空就只能是爸爸送 -爸爸- 09:56:46 是呀 妈妈 09:56:57 她们说起来简单 -爸爸- 09:57:13 不是，有些原则上的东西还是可以遵守的。 妈妈 09:57:15 又没亲身体会,这些道理我懂啊 -爸爸- 09:57:29 但是我们确实是没有做到最好 妈妈 09:57:49 园长说今天接他按正常,不要骂 妈妈 09:57:58 不当一会事 -爸爸- 09:58:03 哦，好的 妈妈 09:58:32 也许他自己还会提起哭的事,就和他说哦你长大了呀相信你自己会改的 妈妈 09:58:44 就说老师和园长都这么认为的 -爸爸- 09:58:51 哦，好的 妈妈 09:58:57 如果送他到保安亭就哭 妈妈 09:59:26 就和他说妈妈上班是不能迟到的,你这样就让保安叔叔看着你,我去放书包 妈妈 09:59:32 让老师出来接你吧 妈妈 09:59:46 其实说起来容易做起来难 -爸爸- 09:59:53 这个招是谁就教的 妈妈 10:00:00 万一他跑出去马路怎么办 -爸爸- 10:00:04 并且也要老师配合才行呀 妈妈 10:00:21 这个招是我提出来园长教的 -爸爸- 10:00:30 妈妈 10:00:36 意思是让他习惯该怎么样就怎么样 -爸爸- 10:00:46 也是 妈妈 10:01:04 另外让他知道哭对我们没有影响 -爸爸- 10:01:32 也是 妈妈 10:02:01 她说现在你儿子抓住你的心理了可你抓不住他心理 妈妈 10:02:09 他是个很精的孩子 妈妈 10:02:15 妈妈 10:02:29 我的头痛死了 妈妈 10:02:36 象高血压那样 妈妈 10:03:19 园长说孩子一病我很紧张,你儿子比你还清楚 妈妈 10:03:25 所以病了就可以不上学 -爸爸- 10:03:33 晕，你去推拿一下吧。不过说实话，你有时候要学会放下。 妈妈 10:03:39 早上没有 -爸爸- 10:03:42 现在他哭，我都不当回事了 -爸爸- 10:03:52 就是要冷处理他 妈妈 10:04:06 刚才我帮罗栋文推门,他就找借口想哭 妈妈 10:04:12 气人 妈妈 10:04:21 哪个小朋友会这样 妈妈 10:04:39 另外今天罗的妈妈跟着我后面找老师 -爸爸- 10:04:55 哦 妈妈 10:05:10 园长说是因为罗和均均打招呼,均可能表示友好推了他一下 妈妈 10:05:22 罗的妈妈就去说均均 妈妈 10:05:37 罗看见妈妈这样说就去踢均均 妈妈 10:05:47 罗的妈妈还要找老师讲理 妈妈 10:06:06 搞得三个老师都为这事不理小朋友,园长批评他们 -爸爸- 10:06:19 这些人，服了他。小孩子打打闹闹有什么了不起 妈妈 10:06:48 他自己孩子常打人可能被投诉多了不甘心吧 -爸爸- 10:07:11 妈妈 10:07:43 不过听说她抓着均骂 -爸爸- 10:07:54 神经病呀，这种人 妈妈 10:08:15 是的 -爸爸- 10:08:26 真服了她 妈妈 10:08:34 今天还收不收起他的东西? 妈妈 10:10:09 看来罗妈妈的教育方法和我们的都有问题 -爸爸- 10:12:01 不用了，像唐园长说的不当一回事就可以了 妈妈 10:12:10 哦 妈妈 10:12:49 我和园长说如果今天不批评他会不会得寸进尺,她说不会的 妈妈 10:12:55 会慢慢惯性 妈妈 10:13:13 习惯 -爸爸- 10:14:14 哦，我们就试试看吧 妈妈 10:14:21 恩]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[肚脐]]></title>
    <url>%2F2008%2F04%2F12%2F%E8%82%9A%E8%84%90%2F</url>
    <content type="text"><![CDATA[今天给桐桐洗澡。 桐桐问，为什么我的肚脐不凸出来。 妈妈说，因为候医生在你出世的时候，剪肚脐的时候剪得好，就凹进去了。凹进去才好看呀。 桐桐说，那候医生为什么不剪我的鸡鸡。 笑~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爸爸最爱的人是谁]]></title>
    <url>%2F2008%2F04%2F12%2F%E7%88%B8%E7%88%B8%E6%9C%80%E7%88%B1%E7%9A%84%E4%BA%BA%E6%98%AF%E8%B0%81%2F</url>
    <content type="text"><![CDATA[今天桐桐问了爸爸好多关于最什么最什么的事情。 爸爸最问他，那你说爸爸最爱的人是谁，开始以为桐桐会说是我。 没想到桐桐说，是妈妈。 桐桐和妈妈说了，妈妈说，你爸爸最爱的人是你和奶奶;-)。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打预防针]]></title>
    <url>%2F2008%2F04%2F12%2F%E6%89%93%E9%A2%84%E9%98%B2%E9%92%88%2F</url>
    <content type="text"><![CDATA[今天带桐桐去打预防针，桐桐很勇敢，没有哭。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[春游]]></title>
    <url>%2F2008%2F04%2F06%2F%E6%98%A5%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[这次清明节开始放假，连上周末，共三天。 清明节除了拜山之外，也是踏青的好时间。 周五，带桐桐去了广州图书馆，桐桐很喜欢，看得都舍不得走，不过广州图书馆有点小，下次去中山图书馆看看。下午，给桐桐买了一个摄像机，是直接刻录到硬盘的。 周六，上午和奶奶、姑姑、洪巧表姐、小宇妹妹去了大夫山。春天到了，到处生意盎然的。他们玩得可开心了，有扔石头、开叶子船，桐桐还用水中的泥沙弄了蛋糕。 最开心的是，洪巧姐姐发现了蒲公英，他们拼命的吹，可开心了。这是他们第一次玩吹蒲公英。晚上，又带桐桐去了二沙岛。 周日，和公公婆婆、舅舅舅妈、菲菲姐姐一起去了植物园，看了禾que花之后，舅舅抓了个蚱蜢，爸爸又抓了个蜜蜂，然后舅舅又抓了个蝴蝶，桐桐还踩到了一个蚂蚁，桐桐看到这些昆虫可开心了。特别视舅舅为偶像。 这三天，陪桐桐度过了一个美好的假期。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[想妈妈+什么时候才能哭]]></title>
    <url>%2F2008%2F03%2F29%2F%E6%83%B3%E5%A6%88%E5%A6%88%2B%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E6%89%8D%E8%83%BD%E5%93%AD%2F</url>
    <content type="text"><![CDATA[昨晚陪桐桐睡觉。 桐桐：我想妈妈 爸爸：我也是。 桐桐：你想谁呀？ 爸爸：你呀。 桐桐：我不是在你边上了吗！ 爸爸：哦，对哦。（笑~~~~~） 桐桐：你是不是想奶奶，每个人都想妈妈的。 桐桐：爸爸，什么时候才能哭。 爸爸：男子汉都不要哭。 桐桐：是不是有什么大事才能哭。 爸爸：例如什么大事？ 桐桐：例如养的小狗死了，可以哭；还有妈妈死了，也可以哭，因为妈妈死了以后就永远都看不到妈妈了。 爸爸：我觉得男子汉还是不要哭。你有没有见过爸爸哭？ 桐桐：那奶奶都没有死呀。（笑~~~）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客随想]]></title>
    <url>%2F2008%2F03%2F26%2F%E5%8D%9A%E5%AE%A2%E9%9A%8F%E6%83%B3%2F</url>
    <content type="text"><![CDATA[从2007年3月13日开始第一篇博客开始，也有一年多的时间了，加起来也一共记录了180多篇的成长点滴。 桐桐也从一个BB仔，长成了一个有点男子汉气概的小伙子了。 过程当中经历了很多的事情，但是爸爸妈妈爱桐桐的心永远是不变的。 这个博客，是爸爸妈妈给桐桐以后的礼物，记录了桐桐生活中的很多琐碎的事情，希望桐桐以后看到能喜欢。 有很多朋友想让爸爸把这个博客公开出去，但是爸爸想，这是爸爸妈妈给桐桐的日记，是帮桐桐记录他的生活痕迹的，只要爸爸妈妈知道，让桐桐以后能看到就行了。并不是为了写给别人看的。 等到桐桐自己长大了，希望桐桐能接过去，继续写下去]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[韩国话]]></title>
    <url>%2F2008%2F03%2F25%2F%E9%9F%A9%E5%9B%BD%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[今天一早,桐桐醒来就和妈妈说：“妈妈韩国话睡觉和吃饭是这样说的……”哦说起来还象模象样的 。 桐桐班上有三个韩国小朋友：金久儿，曹儿淳和林根佑，其中曹儿淳是桐桐那一组的，中国话也讲得不错，妈妈和桐桐说有空学些韩国话教妈妈，这回还真学回来了呵呵 可惜妈妈笨没记住呢。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐表演]]></title>
    <url>%2F2008%2F03%2F25%2F%E6%A1%90%E6%A1%90%E8%A1%A8%E6%BC%94%2F</url>
    <content type="text"><![CDATA[周六，下起了今年最大的一场春雨。没地方去，就去看木偶剧了。 木偶剧改在四楼小场表演了。 很多剧目之前已经看过了，不过这次还是留下很深刻的印象。 1、以前去看木偶剧，从来都没有获奖（5+1抽奖），这次爸爸和桐桐两张票都抽中了奖。真幸运。 2、桐桐上去抽奖前，表演了《好汉歌》，拿麦克风的姿势很正确，唱得也很好，搞得下面个个都夸，这个小朋友好棒。 爸爸开心死了~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[愉快的周末之旅]]></title>
    <url>%2F2008%2F03%2F25%2F%E6%84%89%E5%BF%AB%E7%9A%84%E5%91%A8%E6%9C%AB%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[周日，应花花姐姐的邀请，和春梅阿姨、可茵姐姐、小玲阿姨、广鹏哥哥一起去祁福看名犬展，一起去看的，还有花花姐姐的两个同事，嘉嘉姐姐和芳芳姐姐。 三个小朋友看到狗可高兴了，桐桐每看到一个狗，都要问人家，它会不会咬人呀，只有听到说不会咬人，他才凑过脑袋去看。 因为是流感季节，担心狗有细菌，就没怎么让桐桐看太多。 中午吃完饭后，到花花姐姐温馨的家坐了一会，然后就去祁福农庄了。 三个小朋友在一起玩，个个都很开心。 拔路边的野蓟草喂小鸡、喂马、喂兔子，然后玩了走迷宫，鹏鹏哥哥和可茵姐姐还在迷宫里面找到了很多复活节彩蛋（周日正好是复活节）。 后面还玩了荡秋千、跷跷板等游戏，还有原野游乐场的爬山游戏（可惜桐桐还小，玩不了）。 玩着一下子就到了下午6点钟。 这几年来，桐桐不管什么情况，都要睡午觉的。周日第一次破例没有睡午觉了。 PS：那三个姐姐可喜欢桐桐了，桐桐在他们面前手舞足蹈的讲话，笑死大家了，个个都夸桐桐的表达能力很强，爸爸可骄傲了;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的进步]]></title>
    <url>%2F2008%2F03%2F25%2F%E6%A1%90%E6%A1%90%E7%9A%84%E8%BF%9B%E6%AD%A52008%2F</url>
    <content type="text"><![CDATA[桐桐上一周，整整一周上学都没有哭，很棒。 完整的一周没哭，印象中还是第一次，桐桐真棒。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿子的早饭]]></title>
    <url>%2F2008%2F03%2F21%2F%E5%84%BF%E5%AD%90%E7%9A%84%E6%97%A9%E9%A5%AD%2F</url>
    <content type="text"><![CDATA[桐桐告诉妈妈早上学校吃了很好吃的叉烧包, 妈妈好奇地问每个小朋友可以吃几个呀?桐桐说:二个,还想吃就只能再吃半个.妈妈问桐桐那你吃了几个呀?桐桐说:二个加半个.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有没有永远]]></title>
    <url>%2F2008%2F03%2F19%2F%E6%9C%89%E6%B2%A1%E6%9C%89%E6%B0%B8%E8%BF%9C%2F</url>
    <content type="text"><![CDATA[桐桐最近老问妈妈，有关永远的问题，例如姐姐是不是永远都不会来之类的。 妈妈说，没有永远的东西。 桐桐说，那是不是恐龙是不是永远都不再有了？ 妈妈说，是哦;-) 桐桐又说，那妈妈你是不是永远都爱我？ 妈妈说，对哦;-) 桐桐又说，那水果是不是永远都有的？ 笑~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大夫山]]></title>
    <url>%2F2008%2F03%2F14%2F%E5%A4%A7%E5%A4%AB%E5%B1%B1%2F</url>
    <content type="text"><![CDATA[周末带桐桐去了大夫山。 骑自行车，这是例排的节目。 因为捞鱼的地方可能喷了农药，就没捞成鱼。 不过桐桐找到一个地方，桐桐很喜欢。 春天到了，工人们在湖边都松土，泥土干了以后就有很多小块的泥土，桐桐就捡起小土块往湖中扔，玩得津津有味的。 随后，很多小朋友看到桐桐玩得这么有趣，各个都来玩。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爸爸妈妈的对话]]></title>
    <url>%2F2008%2F03%2F03%2F%E7%88%B8%E7%88%B8%E5%A6%88%E5%A6%88%E7%9A%84%E5%AF%B9%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[仔仔上学还哭，以下是妈妈和爸爸的对话： 妈妈 09:52:50今天桐桐不肯进学校,我说那你自己回去,他居然真的掉头就走 妈妈 09:52:59有点反叛了-爸爸- 09:57:26是有个性了 -爸爸- 09:57:37没事的，仔还是比较听话的 妈妈 09:58:02不是的要注意了开始反叛以后很容易象你动不动离家出走的 -爸爸- 09:58:37晕 -爸爸- 09:59:01如果仔像我这么乖，你都要偷笑了 妈妈09:59:25象你我真烦死了 -爸爸- 09:59:51又没见奶奶烦死 妈妈 10:15:21老师打电话来说你的仔挺好的,叫他听我电话他不肯 妈妈 10:15:26说一句就走了 -爸爸- 10:16:18哈哈，没事的啦，你不要老干扰他上课 妈妈 10:16:34是老师打来的 -爸爸- 10:16:50哦]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[愉快的周末]]></title>
    <url>%2F2008%2F03%2F03%2F%E6%84%89%E5%BF%AB%E7%9A%84%E5%91%A8%E6%9C%AB%2F</url>
    <content type="text"><![CDATA[周末，天气终于放晴了，又可以带桐桐出去活动了。 周六上午，带桐桐去珠江公园捞鱼，顺便晒晒太阳。 鱼没有捞到，不过桐桐倒是玩得很开心，桐桐对自然的野外的东西还是很感兴趣，并且总是能找到兴趣点，并玩得津津有味。 周日，上午，带桐桐到体育中心去踢足球，桐桐摔了几跤，不过桐桐知道，踢球总是要摔跤的，所以都没有哭，桐桐长大了。 下午，睡醒觉，又带他到楼下踢了一会儿的球。 终于过了一个愉快的周末。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐又病了]]></title>
    <url>%2F2008%2F02%2F26%2F%E6%A1%90%E6%A1%90%E5%8F%88%E7%97%85%E4%BA%86%2F</url>
    <content type="text"><![CDATA[上周五开始流鼻涕，一直到今天早上好点。不过昨晚还是有点咳嗽。 本来想让他今天上学的，家伙不肯上。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的新学期开始了]]></title>
    <url>%2F2008%2F02%2F21%2F%E6%A1%90%E6%A1%90%E7%9A%84%E6%96%B0%E5%AD%A6%E6%9C%9F%E5%BC%80%E5%A7%8B%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐这个学期换了老师，汪老师、朱老师走了，麦老师到来另外的班级。 来了新的黄老师（以前中班的副班主任）、喻老师（听说是之前名雅苑幼儿园的老师，走了又回来）、谢老师（桐桐小班时候的生活老师）。 周一上学的时候，桐桐开开心心的进去了，没有哭，想想桐桐终于长大了。 周二、周三也没有哭，没想到今天上学哭了，真郁闷。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小熊维尼]]></title>
    <url>%2F2008%2F02%2F13%2F%E5%B0%8F%E7%86%8A%E7%BB%B4%E5%B0%BC%2F</url>
    <content type="text"><![CDATA[最近看了小熊维尼的碟，声音效果不是很好。故事也比较深奥。 不过给桐桐买了一套小熊维尼的故事书，还不错，图画、故事等都不错，桐桐也喜欢听。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[春节又过去了]]></title>
    <url>%2F2008%2F02%2F13%2F%E6%98%A5%E8%8A%82%E5%8F%88%E8%BF%87%E5%8E%BB%E4%BA%86%2F</url>
    <content type="text"><![CDATA[这么春节，姐姐走了，忙得爸爸和妈妈团团转，还好能到婆婆家吃饭。姐姐走了之后，其它的还能解决，就是吃饭的事情麻烦点。 姐姐走了之后，桐桐都挺想念姐姐的，还问了好几次：“姐姐永远都不回来了吗？” 这次春节天气出奇的冷，所以也就没有带桐桐出去玩，就初一去了一趟动物园，然后逛了一下商场，不过哪里都是人山人海。 趁这次春节，新家那里也准备得查不多了。 爸爸，明天就上班了，桐桐也下周一上学，希望天气快点暖和起来。 PS：今天和桐桐的同学马裕丹还有她妈妈到大椰风喝茶、吃饭。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[姐姐走了]]></title>
    <url>%2F2008%2F02%2F04%2F%E5%A7%90%E5%A7%90%E8%B5%B0%E4%BA%86%2F</url>
    <content type="text"><![CDATA[姐姐今天早上9点半的车。 一早，姐姐和桐桐说再见，桐桐就憋着嘴巴要哭，然后爸爸就告诉桐桐，姐姐要回去看大伯母、大伯父，之后还会来看桐桐的。桐桐还是想哭，但没有哭出来。 过了一会，桐桐说，那今晚谁给我们煮饭，听到是妈妈煮，桐桐说好的。 又过了一会，桐桐说，那姐姐不在，你们打死我怎么办。晕，平时桐桐不听话，爸爸妈妈会打他，只有姐姐不打他，有时候还护着他。桐桐连这点都想到了，以后都不能打桐桐了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的爱好]]></title>
    <url>%2F2008%2F02%2F02%2F%E6%A1%90%E6%A1%90%E7%9A%84%E7%88%B1%E5%A5%BD%2F</url>
    <content type="text"><![CDATA[从小桐桐就很喜欢车。 记得那时住骏汇时，用手推车，在黄埔大道上，看车来来往往的汽车，桐桐就会兴奋得哇哇大叫。 长大了，自己会玩了，就整天在家里摆车龙，从早到晚； 再大一点，会看书了，到书店也就买车车的书； 再大一点，就在家拼积木，从早到晚； 再大一点，就转成在家听故事，从早到晚； 现在，学会了画画，就在家画个不停，画得不是很像，但是构思到布局都很有想像力，从早到晚画个不停，妈妈还老担心会弄坏眼睛。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好冷的天气]]></title>
    <url>%2F2008%2F01%2F31%2F%E5%A5%BD%E5%86%B7%E7%9A%84%E5%A4%A9%E6%B0%94%2F</url>
    <content type="text"><![CDATA[今年天气好冷，特别是湖南，遭遇了50年一遇的寒冷天气，高速路都结了冰，电线给结的冰压坏，铁路也遭受了很大的破坏。 正好又碰上春运，大堆旅客积压在广州火车站，最多的时候达到了15万人。 就是冷，都连续十多天了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[钱罐的问题]]></title>
    <url>%2F2008%2F01%2F28%2F%E9%92%B1%E7%BD%90%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[桐桐的小猪钱罐存了不少钱，是瓷做的。 有一天我们说，如果那天桐桐要用钱，就把钱罐摔了，就拿出钱了。 桐桐说：“钱罐底下有个圆的塞子，往上一推就可以了，这个主意好不好。” ~~笑，桐桐真聪明。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[结婚车队]]></title>
    <url>%2F2008%2F01%2F25%2F%E7%BB%93%E5%A9%9A%E8%BD%A6%E9%98%9F%2F</url>
    <content type="text"><![CDATA[平时路上看到的结婚车队很多，大都是各种名车。 今天在黄埔大道上算开了一次眼界，在上华快的时候，发现前面有好多小面包和皮卡在打四角灯，开始还奇怪，怎么一下子这么多车一起坏，后面仔细一看，才知道是结婚车队来的。笑死人了，第一次看到这么次的结婚车队了;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐说英文]]></title>
    <url>%2F2008%2F01%2F25%2F%E6%A1%90%E6%A1%90%E8%AF%B4%E8%8B%B1%E6%96%87%2F</url>
    <content type="text"><![CDATA[早上，和桐桐玩游戏，桐桐扮猪八戒，爸爸扮孙悟空。 然后桐桐叫爸爸猴哥。 突然桐桐冒出“monkey brother”,笑死爸爸了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最近好忙]]></title>
    <url>%2F2008%2F01%2F25%2F%E6%9C%80%E8%BF%91%E5%A5%BD%E5%BF%99%2F</url>
    <content type="text"><![CDATA[最近事情都撞到一起了。 桐桐放假了，二姐姐说明年她不来了。 然后新房子要收房，准备新房子的东西，准备搬家等等，好多事情。 正好妈妈最近又得了带状苞疹，爸爸又准备年会的事情好忙。 又加上最近几天又特别冷，真是忙得焦头烂额了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐终于会打人了;-)]]></title>
    <url>%2F2008%2F01%2F18%2F%E6%A1%90%E6%A1%90%E7%BB%88%E4%BA%8E%E4%BC%9A%E6%89%93%E4%BA%BA%E4%BA%86%3B-)%2F</url>
    <content type="text"><![CDATA[一直以来，桐桐都太文静，所以平时也教他，如果谁打他，一定要还击。 前两天，就为了桐桐打人的事情和另外一个小孩的家长斗了起来。 事情起因是，那几天桐桐发烧在家，突然又一次，在桐桐班的群上，有一个小孩的家长说桐桐打了他的小孩，讲得比较难听那种，把妈妈给气死了。爸爸和妈妈立马就上去和她辩论了一番，狠狠的打击了她一通。 就是要告诉她，我们不是好欺负的，大人不要在大庭广众之下拿小孩的事情说事，不要借小孩的口来发泄自己的情绪。 无论谁，如果要故意伤害桐桐，哪怕一点点，我们都会不惜一切代价保护桐桐。 不过时候还是庆幸，桐桐终于会打人了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[又发烧了]]></title>
    <url>%2F2008%2F01%2F14%2F%E5%8F%88%E5%8F%91%E7%83%A7%E4%BA%86%2F</url>
    <content type="text"><![CDATA[昨天天气转冷。 昨天早上带桐桐去看新房子还有那个二手房子，可能是累了，中午吃饭的时候，桐桐就发烧了，饭都没吃就回去了。 昨晚还烧得厉害，今天早上去看了一下，医生说可能是上周发烧的病根没除，开了点药。但是还是不行，下午还老反复，喉咙还多了脓点，下午又要带他去打针了。 桐桐身体好差。 如果查桐桐博客用得最多的关键词那就是病了，希望桐桐的身体能好点。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搬家记]]></title>
    <url>%2F2008%2F01%2F13%2F%E6%90%AC%E5%AE%B6%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[这几年搬了好多次家，路线图如下： 骏汇大厦-〉信步闲庭-〉骏汇大厦-〉龙口西-〉信步闲庭-〉倾城时代]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐上医院没哭了]]></title>
    <url>%2F2008%2F01%2F09%2F%E6%A1%90%E6%A1%90%E4%B8%8A%E5%8C%BB%E9%99%A2%E6%B2%A1%E5%93%AD%E4%BA%86%2F</url>
    <content type="text"><![CDATA[儿子前天发烧了，下班时候妈妈带桐桐去看梁医生，以前每次去看病，桐桐都一路哭过去。这次，因为妈妈出发前作了思想工作，桐桐一直都没有哭。好乖！ 还好，梁医生说不用打针，就开了点药。也奇怪，看了梁医生之后发烧也好了，咳嗽也好了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[少年宫的合唱团]]></title>
    <url>%2F2008%2F01%2F04%2F%E5%B0%91%E5%B9%B4%E5%AE%AB%E7%9A%84%E5%90%88%E5%94%B1%E5%9B%A2%2F</url>
    <content type="text"><![CDATA[今天给儿子报了少年宫的合唱团，不知道能否中签。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[等待是一种幸福]]></title>
    <url>%2F2008%2F01%2F04%2F%E7%AD%89%E5%BE%85%E6%98%AF%E4%B8%80%E7%A7%8D%E5%B9%B8%E7%A6%8F%2F</url>
    <content type="text"><![CDATA[转自妈妈的QZone 近来用手机打电话就象小灵通一样,最关键的话永远听不到,于是周六晚上去检测手机,趁机也逛逛商场。临走时儿子问我去哪？我说去办点事，儿子说妈妈你早点回哦我等你回来，快关大门时儿子又说了一句妈妈你要在我睡之前到哦别趁我睡着了才回来哦。 到了手机维修点我对接待人员大至说了一下我手机的问题，她冷冷地说放下吧最快一个半小时才能有结果。于是我开始大采购了，过了一小时，一位维修人员打电话来了，小姐你的手机我们检测过了什么问题也没有你过来拿吧，我说不会吧什么问题也没有？对啊你尽快来取回手机吧，我街也不想逛了白走一趟，再说想起儿子出门前的话，他在家一定等急了。 到家后儿子居然睡着了，我亮了一下房间灯，儿子突然开口说妈妈你回来拉，接着又睡着了，还睡得很甜呢。对于儿子来说等待是一种幸福！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的一年了]]></title>
    <url>%2F2008%2F01%2F04%2F%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%E4%BA%86%2F</url>
    <content type="text"><![CDATA[元旦从12月30日开始放假，共3天。 30日上午了下塘西路那边的儿童活动中心看了航空展，太一般了，还好，送的那个会飞的直升机，儿子还比较喜欢；然后到了珠江新城的第二少年宫，也没什么东西。不过听说那天下午第二少年宫发生了玻璃幕墙的玻璃出现自爆现象，还伤到了3个人。 31日上午去星海音乐厅看了儿童剧“海的女儿”。 31日晚上，到了号称白金五星级的花园酒店吃饭，在桃园馆吃的，等了很久，菜一般，不过倒是在花园酒店拍了很多的照片，算庆祝新的一年到来吧。 1日，到了奶奶家，还拍了很多照片。 就这样，短短的三天就过去了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的一年快到了]]></title>
    <url>%2F2007%2F12%2F31%2F%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%E5%BF%AB%E5%88%B0%E4%BA%86%2F</url>
    <content type="text"><![CDATA[今天是2007年的最后一天了。 桐桐的博客从今年年初开通，到现在差不多记录了桐桐150篇的点点滴滴的生长痕迹。 希望桐桐在新的一年里平平安安、快快乐乐、健健康康的成长。 在新一年了，爸爸也努力帮桐桐记录生长的有趣的事情，作为桐桐长大的一份礼物送给桐桐。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海的女儿]]></title>
    <url>%2F2007%2F12%2F31%2F%E6%B5%B7%E7%9A%84%E5%A5%B3%E5%84%BF%2F</url>
    <content type="text"><![CDATA[今天带桐桐去星海音乐厅去看了儿童剧“海的女儿”（160元/张，儿童还要票）。 星海音乐厅的环境还不错，演出的场馆也不是很大，开始还以为买的票已经很远了，进去才知道，位置还不错，看的还挺清楚的。 海的女儿是由上海儿童戏院编排的一出童话剧，改编自安徒生的童话。 还不错，桐桐看的还津津有味的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人老珠黄新解]]></title>
    <url>%2F2007%2F12%2F31%2F%E4%BA%BA%E8%80%81%E7%8F%A0%E9%BB%84%E6%96%B0%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[桐桐最近很喜欢画画。 早上，桐桐要帮爸爸妈妈画画。 桐桐画了爸爸的眼睛，然后用黄色给爸爸画眼珠子，给妈妈画的时候用的是黑色。妈妈问，为什么爸爸的眼珠子是黄色，而妈妈的是黑色。 桐桐说：因为爸爸人老珠黄呀。 笑~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[辽辽的生日]]></title>
    <url>%2F2007%2F12%2F29%2F%E8%BE%BD%E8%BE%BD%E7%9A%84%E7%94%9F%E6%97%A5%2F</url>
    <content type="text"><![CDATA[明天开始放学了，学校组织了爬白云山，妈妈和姐姐带桐桐去。 正好今天也是辽辽(桐桐喜欢的女孩子，很乖的，可惜有点近视，带眼镜)的生日，小朋友们还在山上吃了蛋糕。 不过听妈妈说，桐桐不乖，有点小气。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[买碟有感]]></title>
    <url>%2F2007%2F12%2F24%2F%E4%B9%B0%E7%A2%9F%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[转自妈妈QZone 儿子最近学会唱刘欢唱的＜＜好汉歌＞＞和＜＜亚洲雄风＞＞,高兴之余希望他能学更多的民歌,向来就爱逛CD店,这次更是带着任务去逛的,想帮儿子买一张刘欢的专辑,里面当然要有以上两首歌了. 到了天河城逛第一家影音店,一进门便自己查找,上架摆满了流行歌手的CD,找不到我要的CD,半蹲着找还是找不着,蹲下来找终于在最下架一个角落头找到几张刘欢的专辑,但没有我想要的那张.再换一家,仍然是从上架一直找到下架才找到刘欢的,也没有找到我想要的那张CD,怀着最后一线希望走进第三家,这回我可不愿意再蹲下来了,直接问销售小姐:’’请问有刘欢的碟吗’?’’只见那小姑娘把手叉在胸前,用很奇异的眼神把我从头到脚打量了一下,然后摇摇头说:’’没有!’’当时我的第一感觉就是这年头买周杰伦或蔡依林的碟听是时尚,买刘欢或其它民歌手的碟的人是落伍了…… 民歌是否被通俗歌淹没了,何时能在CD店的上架浮现民歌手的碟呢?]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[核桃蛋白汉堡]]></title>
    <url>%2F2007%2F12%2F21%2F%E6%A0%B8%E6%A1%83%E8%9B%8B%E7%99%BD%E6%B1%89%E5%A0%A1%2F</url>
    <content type="text"><![CDATA[今天早上吃早餐，吃到后面，桐桐拿蛋白夹着核桃吃，还美其名曰“汉堡包”。 ;-) 最近桐桐很喜欢唱“好汉歌”和“亚洲雄风”。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂记]]></title>
    <url>%2F2007%2F12%2F17%2F%E6%9D%82%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[圣诞节快到了，上周，桐桐上学都没有哭，妈妈兑现诺言，给桐桐买了一颗圣诞树。 吴阿姨的孙子浩浩哥哥从美国回来，还一起去shangri-la吃了饭。 今天早上上学，桐桐突然问，是不是女孩子才有股票。笑~~~~，因为平时都是妈妈和姐姐看股票，说股票，桐桐竟然天真的这样想。;-) PS:桐桐周六晚又鼻子流血了，不肯听大人讲，死命哭，流了很多，心疼死了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[李想生日]]></title>
    <url>%2F2007%2F12%2F11%2F%E6%9D%8E%E6%83%B3%E7%94%9F%E6%97%A5%2F</url>
    <content type="text"><![CDATA[今天是幼儿园李想的五岁生日。 桐桐在学校吃了生日蛋糕。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐要找爸爸谈心]]></title>
    <url>%2F2007%2F12%2F10%2F%E6%A1%90%E6%A1%90%E8%A6%81%E6%89%BE%E7%88%B8%E7%88%B8%E8%B0%88%E5%BF%83%2F</url>
    <content type="text"><![CDATA[昨天，桐桐不乖，老是哭，给爸爸打，也给妈妈打。 今天一起床，桐桐就向爸爸说，要找爸爸谈心，还自我检讨了一番。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[礼貌小天使]]></title>
    <url>%2F2007%2F12%2F06%2F%E7%A4%BC%E8%B2%8C%E5%B0%8F%E5%A4%A9%E4%BD%BF%2F</url>
    <content type="text"><![CDATA[桐桐今天一大早起来，到幼儿园当礼貌小天使，迎接其他小朋友上学了。 7：52分就到了学校，还是第一个到的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[舅舅家]]></title>
    <url>%2F2007%2F12%2F03%2F%E8%88%85%E8%88%85%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[昨天带桐桐去了舅舅家，和菲菲姐姐去小区那里爬山。 舅舅还抓了一个蝴蝶，五颜六色的，漂亮极了。 中间还发生了一个小插曲，舅妈给菲菲和桐桐拍照，他们两个坐在一起，舅妈让桐桐给菲菲讲悄悄话，桐桐就靠近了菲菲耳朵说：“你生日，我就送个礼物给你。”到了菲菲讲，菲菲不出声，桐桐就整个耳朵靠到菲菲嘴巴那里去，菲菲还是不说话，弄了几次，惹得桐桐生气了，翘着小嘴走了，到边上侧着脸生气了。弄得菲菲也生气了。 不过，他们俩很快就没事了。 之后，还在会所一起喝茶了呢。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于金锅]]></title>
    <url>%2F2007%2F12%2F01%2F%E5%85%B3%E4%BA%8E%E9%87%91%E9%94%85%2F</url>
    <content type="text"><![CDATA[昨天晚上黄阿姨请桐桐去她家吃美食,据说黄阿姨家的那金锅值六千元. 到了黄阿姨家黄阿姨用那金锅煮了一道又一道的美食,最后一道美食是用金锅爆米花,黄阿姨先放点油,然后放一把的把玉米在锅里盖上盖子,点火,不一会听到了叭叭响,大概是米花在爆了,接着打开盖子一锅的米花爆出来了很可爱当然也很可口! 最可惜的是海滨叔叔不在家,因为桐桐本来有几个英语单词要请教他的.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有两种唱法]]></title>
    <url>%2F2007%2F11%2F28%2F%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%94%B1%E6%B3%95%2F</url>
    <content type="text"><![CDATA[生日快乐歌，桐桐很早就会唱了。 在车上，有这首歌的英文版。歌词和平时的有点不同，听着，桐桐突然说，这首歌有两种唱法。 然后，真的把两种版本唱了出来，桐桐好棒。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[演唱会]]></title>
    <url>%2F2007%2F11%2F28%2F%E6%BC%94%E5%94%B1%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[桐桐现在每天睡觉前都要在床上开一场演唱会了，唱他幼儿园学到的歌还有自己熟悉的歌，还表演各种体操武术之类的。笑死人了。 PS：桐桐在家睡觉都要人陪着睡，到了幼儿园，中午现在也要老师陪着才肯睡。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我不要那么快回去]]></title>
    <url>%2F2007%2F11%2F26%2F%E6%88%91%E4%B8%8D%E8%A6%81%E9%82%A3%E4%B9%88%E5%BF%AB%E5%9B%9E%E5%8E%BB%2F</url>
    <content type="text"><![CDATA[昨天上午带桐桐去奶奶家玩，因为中午爸爸有事，要早点走，桐桐就一直不肯，说，我还要玩一会，我不要那么快走。 回到家以后，还向妈妈投诉说，以后要在奶奶家玩久点。 PS：桐桐现在讲“小熊搬家的故事” ，讲的很好，很完整、很生动。 PS：周六参加了舅妈的生日会，蛋糕(新加坡Bread Talk）很好吃。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我真是服了你呀]]></title>
    <url>%2F2007%2F11%2F17%2F%E6%88%91%E7%9C%9F%E6%98%AF%E6%9C%8D%E4%BA%86%E4%BD%A0%E5%91%80%2F</url>
    <content type="text"><![CDATA[姐姐平时不吃饭。 今天，吃晚饭时，桐桐突然说：“姐姐，我真是服了你呀，一天到晚都不吃饭。” 笑~~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好运气]]></title>
    <url>%2F2007%2F11%2F15%2F%E5%A5%BD%E8%BF%90%E6%B0%94%2F</url>
    <content type="text"><![CDATA[周日（11月11日）下午，桐桐还有点烧，又咳嗽得厉害，就带桐桐去看梁敏医生。 到了越秀区儿童医院，外面已经没有车位了，没方法，就把车停在医院门口，想想，抄牌就抄牌吧。 桐桐一直哭，说不要打针，验完血后，梁医生看了，开了点药，说不用打针了，桐桐这才停止了哭。 看这么多次病，好像还是第一次不用打针的。 妈妈去拿药，本来想在医院里面等，想想还是到车上等吧。 和桐桐上了车，不久，往边上一看，看到一个阿Sir拿着摄像机在拍，原来是在拍停我后面的那部车。 赶快跑！！！！！！ 又省下了100大洋！！！！ 今天真好运。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐如是说]]></title>
    <url>%2F2007%2F11%2F09%2F%E6%A1%90%E6%A1%90%E5%A6%82%E6%98%AF%E8%AF%B4%2F</url>
    <content type="text"><![CDATA[今天凌晨一点多桐桐高烧,发冷,哭着喊妈妈给我盖大被子,给我开热空调!过一会可能太热了就喊妈妈你怎么给我盖这么多被子!!!我要全部拿开,盖凉的被子!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[他们可真懒呀]]></title>
    <url>%2F2007%2F11%2F08%2F%E4%BB%96%E4%BB%AC%E5%8F%AF%E7%9C%9F%E6%87%92%E5%91%80%2F</url>
    <content type="text"><![CDATA[前晚陪桐桐睡觉，给他讲故事。 讲到，有一个老公公老奶奶，他们没有小孩，桐桐问，那他们为什么不生一个，然后马上接着说了一句，他们可真懒呀！ 笑~~~ 注：桐桐今天早上又发烧了，明天的秋游看来要泡汤了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐关灯]]></title>
    <url>%2F2007%2F11%2F06%2F%E6%A1%90%E6%A1%90%E5%85%B3%E7%81%AF%2F</url>
    <content type="text"><![CDATA[现在睡觉前桐桐都要自己关灯，但是开关比较高，他就是踮起脚也还差一点。 平时都是爸爸抱着他关的，前天晚上，竟然发现他自己关了灯，还奇怪桐桐怎么长高了呢。 一看，原来他拿了我们的鞋子、还有他的鞋子，垫在脚下，就够着开关了。 桐桐真聪明。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[”独眼龙”很毒吗]]></title>
    <url>%2F2007%2F10%2F31%2F%E2%80%9D%E7%8B%AC%E7%9C%BC%E9%BE%99%E2%80%9D%E5%BE%88%E6%AF%92%E5%90%97%2F</url>
    <content type="text"><![CDATA[昨晚陪桐桐睡觉，又像往常那样讲阿里巴巴和四十大盗的改编版，麦尔什么什么娜和多少多少大盗（注：麦尔卓娜是阿里巴巴故事里面的那个聪明的女佣人）。 昨晚，爸爸改编成麦尔罗娜和一万大盗，讲到那个强盗头目是个独眼龙，桐桐问问，他的眼睛很毒吗，会不会毒死人。笑~~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学英语]]></title>
    <url>%2F2007%2F10%2F30%2F%E5%AD%A6%E8%8B%B1%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[从小就给桐桐买了很多的英语碟，包括英语过山车、DISNEY英语、洪恩学习英语的N种。 不过这么多，桐桐最喜欢的还是英语过山车，里面有几个很可爱的形象，包括lily姐姐（老师）、多多（很聪明的猴子，桐桐的偶像）、迷糊（爱吃的可爱小猪）、花花（爱穿花裙子的小鸭）、巧克力（爱吃巧克力的小花猫）。 还有就是最近买的洪恩英语，叫“HelloTeddy”。动画、色彩、对白、情节、歌曲都很不错。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你的孙子来看你了]]></title>
    <url>%2F2007%2F10%2F29%2F%E4%BD%A0%E7%9A%84%E5%AD%99%E5%AD%90%E6%9D%A5%E7%9C%8B%E4%BD%A0%E4%BA%86%2F</url>
    <content type="text"><![CDATA[那天带桐桐去婆婆院子玩，婆婆住六楼，桐桐在下面喊，婆婆，你的孙子来看你了。 边上有一群老奶奶在踢毽子，都笑了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的新朋友]]></title>
    <url>%2F2007%2F10%2F23%2F%E6%A1%90%E6%A1%90%E7%9A%84%E6%96%B0%E6%9C%8B%E5%8F%8B2007%2F</url>
    <content type="text"><![CDATA[上周六（10月13日）和爸爸同学春梅还有她的女儿莫可茵姐姐一起去了大夫山。 骑了自行车、捞鱼、玩泥沙等等，中午还请他们去了shangri-la吃了午饭。 桐桐好开心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐发烧了]]></title>
    <url>%2F2007%2F10%2F23%2F%E6%A1%90%E6%A1%90%E5%8F%91%E7%83%A7%E4%BA%862007%2F</url>
    <content type="text"><![CDATA[桐桐这个周六早上开始发烧了，到今天咳嗽得很厉害。 爸爸最近很忙，没关心好桐桐。也没有给桐桐写博客了，惭愧中。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐流鼻血了]]></title>
    <url>%2F2007%2F10%2F11%2F%E6%A1%90%E6%A1%90%E6%B5%81%E9%BC%BB%E8%A1%80%E4%BA%86%2F</url>
    <content type="text"><![CDATA[周日晚上刚刚流了一次，是左鼻孔流的；昨晚又流了两次，在右鼻孔。 可能是天气干燥的缘故吧。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国庆杭州、上海之旅]]></title>
    <url>%2F2007%2F10%2F09%2F%E5%9B%BD%E5%BA%86%E6%9D%AD%E5%B7%9E%E3%80%81%E4%B8%8A%E6%B5%B7%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[国庆带了桐桐去旅游。 2号坐飞机去了杭州，桐桐在飞机上可开心了，还第一次喝了雪碧。 到了杭州，坐上了传说中的benz的士，不过，普通的士才需要120元，benz要了250元。 到了杭州，入住了西湖边上的shangri-la酒店，要1900一晚，入住了，觉得一点都不值，比普通的四星级酒店还差，搞得晚上桐桐都睡不好，说要回家睡。以后再也不想住这个地方了。 到西湖坐了大轮船，还有手摇橹船，桐桐特别喜欢坐那个摇橹船。还在苏堤上骑了单车。西湖边上的的士非常难打，到了西湖一天半，都没有打到的士，反而坐了两次的黑面包的士，第二次，那个黑的士还不好意思开到酒店大堂，就在路上停了。 第二天，我们坐车到了上海，本来想坐火车的，但是没有买到票。 到了上海，已经是晚上6点了，车在浦东汽车站停了下来，那个鬼地方，破破烂烂的，的士也很少，没方法，只好又打了一个烂面包黑的，去浦东的shangri-la下，这次搞笑的是， shangri-la的保安还以为这个是兜客开错地方了，开始还不让面包车停，笑死我们了。 浦东的shangri-la富丽堂皇，比杭州的那间不可同日而语，房间也很新，很干净，终于有了种五星级酒店的感觉了，住的是行政套房，可以看到一半的江景。从房间(2105房,3000元/晚)往下看，黄浦江两岸的夜景实在太漂亮了。 吃晚饭之后，去东方明珠看夜上海的奢华，我们买了票，一张要150元，连桐桐也要半票。看到有一个地方排队，我们就跟了上去。等了半天，从这边塔角绕道了那边塔角，突然，妈妈看到有人从中间拿票进去了，上前问工作人员，才知道，散票是可以从中间直接进取的，团体票才要排队。（：-）白排了半个小时的冤枉队）。进去后，看到团体票的队伍浩浩汤汤，庆幸我们发现了，不然都不知道排到猴年马月了。 要坐两次电梯才能到最顶，好像是350米高，为了坐着两次电梯，排了至少一个小时。到了上面，整个夜上海映入眼中，金贸大厦也映入眼底，黄浦江两岸灯红酒绿的。上海的每个高层建筑物的顶部都特意设计过灯饰，把上海的夜搞得富丽堂皇，不过，还是不喜欢这些人工的点缀，还是喜欢杭州的夜，静谧、凉风习习、还有碧波荡漾的西湖。 下去的时候也是人山人海，又排了将近一个小时才下去。 之后，在浦东的江边喝了饮料，顺便观赏了黄浦江两岸的风景，浦西一群古建筑，浦东一群现代建筑，在黄浦江的两边也相得益彰。 第二天早上，打的去了上海交大，爸爸的母校，变化还是挺大的，宿舍都重新粉刷装修过，足球场也变成了草地，球场边上的农田，都变成了公路，把较大隔成两半。找到了爸爸以前住的19栋楼，只是物是人飞了。 中午到正大广场的小南国吃了阳澄湖的大闸蟹就去坐飞机回来了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐上学又哭了]]></title>
    <url>%2F2007%2F10%2F09%2F%E6%A1%90%E6%A1%90%E4%B8%8A%E5%AD%A6%E5%8F%88%E5%93%AD%E4%BA%86%2F</url>
    <content type="text"><![CDATA[国庆长假后，桐桐这两天上学又哭了。 昨天是因为要在幼儿园吃早餐，哭了一通。 今天，不愿意上学，给爸爸打了一通，到了幼儿园又不肯进去。爸爸做他思想工作，说去帮他买机枪模型，要让他到教室等爸爸，他说，还是在外面凳子上等爸爸，到了教室汪老师还以为他在上课。 已经连续三天给爸爸狠狠打屁股了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这个"“"是不是66]]></title>
    <url>%2F2007%2F10%2F09%2F66%2F</url>
    <content type="text"><![CDATA[桐桐昨晚看书，看到标题里面有个“xxxxxxxx”,就说，爸爸，这个”“”是不是66。;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的生日]]></title>
    <url>%2F2007%2F09%2F25%2F2007%2F</url>
    <content type="text"><![CDATA[桐桐四岁生日了，并且碰上周日。 周五，妈妈买了一个大大的两磅蛋糕送到幼儿园，和小朋友们一起吃。回家桐桐高兴极了，其它小朋友都一个个祝桐桐生日快乐，还有几个小朋友，例如辽辽等，还一边鞠躬一边祝桐桐生日快乐。 周六，爸爸给桐桐买了一套漂亮的衣服，还有桐桐自己挑的一套瑞士的各种汽车（桐桐一位是救护车，因为车身上有瑞士的国旗红十字），妈妈之前也给桐桐买了一套漂亮的衣服还有鞋子。 周日，到了桐桐生日这天，桐桐六点多就要起床了，说今天是他的生日。爸爸起床，然后很有礼貌的给桐桐鞠了一躬，然后祝桐桐生日快乐。 上午我们去了奶奶家，姑丈送了一部遥控赛车，小燕子阿姨送了一部坦克、一部轨道车。中午和奶奶、姑姑、姑丈、小宇妹妹、柳姐姐、碧伯、林叔叔、阿莲阿姨、小禧妹妹、洪巧姐姐等人一起到唐苑酒家吃饭了。奶奶、还有林叔叔还给桐桐煮了一个鸡蛋（乡下的习俗，生日吃鸡蛋）。 还有，姑姑、奶奶、碧伯、林叔叔还给了大红包，桐桐放在上衣袋里面，到了后面说，放不下了;-) 中午，点了四根蜡烛，在洪巧姐姐的带头下，我们都给桐桐唱起了生日快乐歌，桐桐在吹蜡烛前，还双手合十，认认真真的许了愿。然后用力的把蜡烛吹灭了，还和爸爸用刀切了第一刀。桐桐最开心就是吹蜡烛那一下了;-) 晚上，和公公、婆婆、舅舅、舅母、菲菲姐姐、关蓉阿姨、可乐妹妹还有可乐的爸爸一起到龙苑酒家吃晚饭，为了桐桐这餐饭，舅舅还推掉了客户，把吃饭的房间让给了我们;-)婆婆，送给桐桐一个塑料灯笼，中间有闪光的灯在转，很好玩的（个人觉得是婆婆有史以来买过最好的礼物;-)）,舅舅送了一部大大的黑色悍马汽车，桐桐爱不释手，菲菲姐姐亲自作了一个生日卡给桐桐，上面都是菲菲姐姐亲自画的，可有意义了，上面画了，菲菲推着一部车，上面有一个蛋糕，送到桐桐面前，还有一个漂亮的七星瓢虫在边上。关蓉阿姨又送了一个大大的生日蛋糕给桐桐（妈妈对关蓉阿姨开玩笑说，以后我们家的生日蛋糕都由关蓉阿姨包了）。 吃完饭，菲菲带头唱完生日快乐歌后，轮到桐桐吹生日蜡烛了，我们都说桐桐吹蜡烛吧，没想到桐桐说，还不行，先许个愿，然后认认真真地双手合十，许起愿来（把大家都逗乐了），然后用力吹灭了蜡烛。爸爸又和桐桐一起切了第一刀。 桐桐可爱吃蛋糕了，中午和晚上都把他那一份蛋糕吃得干干净净。 桐桐今年的生日最隆重，最开心了。 希望桐桐快快长大，少哭点。 祝桐桐永远快乐。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐生日了]]></title>
    <url>%2F2007%2F09%2F25%2F%E6%A1%90%E6%A1%90%E7%94%9F%E6%97%A5%E4%BA%86%2F</url>
    <content type="text"><![CDATA[23号是桐桐生日,这天他乐坏了,收到了很多礼物和祝福,还吃了二次蛋糕,想起爸爸妈妈小时候过生日顶多是红鸡旦一个,希望桐桐快乐乐地成长,也希望桐桐珍惜自己拥用的东西!桐桐生日快乐!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[勇气]]></title>
    <url>%2F2007%2F09%2F16%2F%E5%8B%87%E6%B0%94%2F</url>
    <content type="text"><![CDATA[桐桐一直比较胆小,为了锻炼他的胆子爸妈常会鼓励他表现自已,昨天早上妈妈姐姐带他去看木偶剧时他上台第一个表演了顺口溜,晚上到江边见一位哥哥卖唱,妈妈让桐桐请哥哥让他唱歌他居然当着很多人面鼓起气上台表演了一番,表演完还说妈妈给钱给我,(因为之前妈妈给了钱给桐桐让他给卖唱的哥,桐桐问妈妈为什么要给钱哥哥?妈妈说因为哥哥付出了劳动)桐桐认为自己也付出了劳动呵呵!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于把EF的课程给退了]]></title>
    <url>%2F2007%2F09%2F12%2F%E7%BB%88%E4%BA%8E%E6%8A%8AEF%E7%9A%84%E8%AF%BE%E7%A8%8B%E7%BB%99%E9%80%80%E4%BA%86%2F</url>
    <content type="text"><![CDATA[从7月22日开始上学，上了6周，EF私自把桐桐等四个小朋友分到了小班，再和一些很小的小朋友一起。并且骗我们说是教材调整，最后给其中一个家长发现了。 在沟通协商的工程当中，EF的校长，态度强硬，一点妥协都没有，最后只能退了。不过听说加拿大少儿英语比较好，又在财富广场，有空再去看看。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐想爷爷]]></title>
    <url>%2F2007%2F09%2F11%2F%E6%A1%90%E6%A1%90%E6%83%B3%E7%88%B7%E7%88%B7%2F</url>
    <content type="text"><![CDATA[桐桐爷爷在爸爸三岁时候就过世了，在爸爸这里也没什么印象了。 之前，桐桐看到电视，说道爷爷，他会问爷爷呢，我们就说爷爷去了一个很远的地方。 昨晚，桐桐上床睡了一会，突然大哭起来，说我想爷爷。 搞得爸爸心疼死了，只好说爷爷去了很远的地方；桐桐问，爷爷什么时候回来，爸爸说要过很久的。然后用其他话题，引开了，桐桐才肯睡觉。 可能这就是血缘的关系吧，希望爷爷在天之灵能感受到桐桐对他的那份想念之情。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开学啦!]]></title>
    <url>%2F2007%2F09%2F03%2F%E5%BC%80%E5%AD%A6%E5%95%A6!%2F</url>
    <content type="text"><![CDATA[桐桐开学啦,上中班啦,整个假期妈妈对桐桐只有两个字—内疚!没带桐桐去哪玩,天天在家看那半死不活的广东明珠,结果到开学了还在看.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[猴子捞月]]></title>
    <url>%2F2007%2F08%2F27%2F%E7%8C%B4%E5%AD%90%E6%8D%9E%E6%9C%88%2F</url>
    <content type="text"><![CDATA[桐桐现在能把猴子捞月这个故事讲的很完整了，太厉害了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿子讲故事]]></title>
    <url>%2F2007%2F08%2F23%2F%E5%84%BF%E5%AD%90%E8%AE%B2%E6%95%85%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[儿子现在很喜欢听cd讲故事，听了之后还能讲给我们听，学得很像的样子。 有什么猴子捞月，叶公好龙等等。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爸爸的生日]]></title>
    <url>%2F2007%2F08%2F21%2F%E7%88%B8%E7%88%B8%E7%9A%84%E7%94%9F%E6%97%A5%2F</url>
    <content type="text"><![CDATA[爸爸之前一直过的是农历的生日七月二十一，但是现代人都不记这些农历的日子了。并且又和身份证上的日期不符。 所以，为了方便，爸爸决定以后的生日都用身份证上的出生年月，方便桐桐记住爸爸的生日。 今天一大早，桐桐就过来，祝爸爸生日快乐，还亲了爸爸一口，爸爸好开心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有意义的一天]]></title>
    <url>%2F2007%2F08%2F19%2F%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[因为前段时间上课的缘故，很久没有陪桐桐出去玩了。 昨天，陪桐桐去天河公园，坐了公共汽车、电瓶车、划船、玩树叶拼图等等，下午还陪桐桐去游泳，晚上去看马戏。 过了一个有意义的一天。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[森林密码]]></title>
    <url>%2F2007%2F08%2F19%2F%E6%A3%AE%E6%9E%97%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[昨天晚上带桐桐去长隆马戏看了“森林密码”，一起去的还有洪巧表姐。 因为到长隆饭店吃饭的缘故，我们到的时候已经没有好的位置了，还好爸爸花了50元，加了一个主席位，和桐桐坐在那里。 一开始，是一大堆士兵，桐桐很喜欢，到了后面，还老问爸爸，怎么士兵还没有出来。 表演和上次来的时候内容差不多，最精彩和惊险的是，四个人滚圈圈的节目。有几次都像要掉下来的样子。这个节目表演完之后，四个演员下来和观众们互动，其中表演得嘴棒的，还亲了桐桐的额头一下，高兴得桐桐。 后面还有吊环、跳水等环节。 马戏表演结束后，还看了免费的烟花，桐桐和表姐都很开心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[消灭父亲节]]></title>
    <url>%2F2007%2F08%2F19%2F%E6%B6%88%E7%81%AD%E7%88%B6%E4%BA%B2%E8%8A%82%2F</url>
    <content type="text"><![CDATA[桐桐喜欢欺负爸爸。 今天在车上，桐桐问，妈妈和我的节日是什么节，妈妈说，是母亲节。然后，我说，爸爸和桐桐的节日是父亲节。桐桐说：我把父亲节消灭了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐发梦]]></title>
    <url>%2F2007%2F08%2F18%2F%E6%A1%90%E6%A1%90%E5%8F%91%E6%A2%A6%2F</url>
    <content type="text"><![CDATA[中午陪桐桐睡觉。 桐桐突然下了一跳的样子，睁开眼睛，对爸爸说：“爸爸，我梦到坐地铁，被关在里面。”爸爸对桐桐说，桐桐不用怕，你就在里面，等爸爸和叔叔阿姨过来救你。 桐桐现在会告诉爸爸做梦的内容了，长大了，儿子。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[舍不得的东西]]></title>
    <url>%2F2007%2F08%2F17%2F%E8%88%8D%E4%B8%8D%E5%BE%97%E7%9A%84%E4%B8%9C%E8%A5%BF%2F</url>
    <content type="text"><![CDATA[平时妈妈很少给零食桐桐吃,哪天开恩让他吃点,他就会含在嘴里不舍得吞下肚子,真可怜!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的假期]]></title>
    <url>%2F2007%2F08%2F17%2F%E6%A1%90%E6%A1%90%E7%9A%84%E5%81%87%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[桐桐的假期快过完了,假期里都是在于积木,听故事,平时最爱的车车也不玩了,小孩子说变就变了,虽然在家护理得好好的,却不见长肉.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高尔夫球童]]></title>
    <url>%2F2007%2F08%2F16%2F%E9%AB%98%E5%B0%94%E5%A4%AB%E7%90%83%E7%AB%A5%2F</url>
    <content type="text"><![CDATA[今天看到peterlynch（彼得.林奇，最成功的基金经理）的故事，说到他小时候（11岁时）做高尔夫球童的事。 在此期间，他认识了很多公司的高层人物，听到了很多的投资策略以及投资的信息。 所以，等桐桐大了，也要让他去参加社会实习，特别是参加暑期工，学会自食其力。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的心愿]]></title>
    <url>%2F2007%2F08%2F15%2F%E6%A1%90%E6%A1%90%E7%9A%84%E5%BF%83%E6%84%BF%2F</url>
    <content type="text"><![CDATA[桐桐的心愿是长高!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐撇小嘴]]></title>
    <url>%2F2007%2F08%2F15%2F%E6%A1%90%E6%A1%90%E6%92%87%E5%B0%8F%E5%98%B4%2F</url>
    <content type="text"><![CDATA[我们平时教育桐桐说，爸爸妈妈骂不能哭，哭就是小气。 现在桐桐倒是有了进步，现在骂他，他不开心，就撇着小嘴，又想哭又不哭的样子，好可怜。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿子现在喜欢问为什么了]]></title>
    <url>%2F2007%2F08%2F15%2F%E5%84%BF%E5%AD%90%E7%8E%B0%E5%9C%A8%E5%96%9C%E6%AC%A2%E9%97%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%86%2F</url>
    <content type="text"><![CDATA[现在每讲一个桐桐没有听过的词语，桐桐就会问是什么意思。有一天，爸爸说，这把枪的电池很耐用，桐桐马上问，爸爸，耐用是什么意思呀。 今天早上，桐桐还给爸爸讲了一个后悔的意思：说妈妈看中一个什么（没听清），又想买又不想买，过了几天再去看，已经给另外一个阿姨买了，所以妈妈很后悔！ ;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐现在很喜欢小乌龟]]></title>
    <url>%2F2007%2F08%2F09%2F%E6%A1%90%E6%A1%90%E7%8E%B0%E5%9C%A8%E5%BE%88%E5%96%9C%E6%AC%A2%E5%B0%8F%E4%B9%8C%E9%BE%9F%2F</url>
    <content type="text"><![CDATA[喜欢在床上披着一件被子，说我是小乌龟。;-) 可能是桐桐听龟兔赛跑的故事听多了，觉得乌龟很厉害呢。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐怕妈妈，不怕爸爸]]></title>
    <url>%2F2007%2F08%2F08%2F%E6%A1%90%E6%A1%90%E6%80%95%E5%A6%88%E5%A6%88%EF%BC%8C%E4%B8%8D%E6%80%95%E7%88%B8%E7%88%B8%2F</url>
    <content type="text"><![CDATA[爸爸平时和桐桐疯疯癫癫惯了，桐桐现在老欺负爸爸，怕妈妈。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐今天终于肯自己上EF的英语课了]]></title>
    <url>%2F2007%2F08%2F06%2F%E6%A1%90%E6%A1%90%E4%BB%8A%E5%A4%A9%E7%BB%88%E4%BA%8E%E8%82%AF%E8%87%AA%E5%B7%B1%E4%B8%8AEF%E7%9A%84%E8%8B%B1%E8%AF%AD%E8%AF%BE%E4%BA%86%2F</url>
    <content type="text"><![CDATA[昨天，爸爸去上计算机课，就妈妈陪桐桐去EF英语课，路上都讲好了，要自己进教室，自己上课。 但是到了教室，又哭，不肯一个人上课，一定要妈妈陪。 还好，课间的时候，妈妈狠狠的批评了他一通，就乖乖的进去了。 桐桐的外教是Mr.Dan]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐生气时]]></title>
    <url>%2F2007%2F08%2F04%2F%E6%A1%90%E6%A1%90%E7%94%9F%E6%B0%94%E6%97%B6%2F</url>
    <content type="text"><![CDATA[桐桐现在一生妈妈气就会说我的样子象爸爸和姐姐不象妈妈,小家伙居然知道妈妈喜欢他象妈妈,可喜的是他现在有点怕妈妈了,因为妈妈对他比较严格.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于桐桐的女朋友]]></title>
    <url>%2F2007%2F08%2F02%2F%E5%85%B3%E4%BA%8E%E6%A1%90%E6%A1%90%E7%9A%84%E5%A5%B3%E6%9C%8B%E5%8F%8B%2F</url>
    <content type="text"><![CDATA[昨天和一个朋友讨论以后小孩让他找什么女朋友的问题。 朋友的观点是，要找一个家长喜欢，并且女孩子喜欢他的人。 我的观点是要让桐桐找他喜欢的人，不会强迫他。就是错了，也是当让他碰壁。不然，拆散他们的话，他永远觉得那个人好，并且会恨父母亲。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐打针]]></title>
    <url>%2F2007%2F07%2F31%2F%E6%A1%90%E6%A1%90%E6%89%93%E9%92%88%2F</url>
    <content type="text"><![CDATA[周六发烧，到昨天（周一）还没好，就带他去看梁医生。 然后就验血、试针、打吊针，桐桐怕疼，每次可怜得哭着说都说：“医生，你轻点。”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐幼儿园明天开始放假了]]></title>
    <url>%2F2007%2F07%2F27%2F%E6%A1%90%E6%A1%90%E5%B9%BC%E5%84%BF%E5%9B%AD%E6%98%8E%E5%A4%A9%E5%BC%80%E5%A7%8B%E6%94%BE%E5%81%87%E4%BA%86%2F</url>
    <content type="text"><![CDATA[今天上半天，下午就接回家，明天开始放假。 准备带桐桐去旅游，丽江或者盘龙峡，但最终还没有定，主要是担心天气太热。 另外，还想让桐桐在假期学跆拳道，男子汉就要会打架才行;-))]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典绕口令]]></title>
    <url>%2F2007%2F07%2F25%2F%E7%BB%8F%E5%85%B8%E7%BB%95%E5%8F%A3%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[绕口令 绕口令是我国一种传统的语言游戏,又称“急口令”、“吃口令”、“拗口令”。由于它是将若干双声、叠词词汇或发音相同、相近的语、词有意集中在一起，组成简单、有趣的语韵，要求快速念出，所以读起来使人感到节奏感强，妙趣横生。民间语言游戏。将声母、韵母或声调极易混同的字，组成反覆、重叠、绕口、拗口的句子，要求一口气急速念出。 喇嘛和哑巴打南边来了个喇嘛，手里提拉着五斤鳎(tǎ)目。打北边来了个哑巴，腰里别着个喇叭。南边提拉着鳎目的喇嘛要拿鳎目换北边别喇叭哑巴的喇叭。哑巴不愿意拿喇叭换喇嘛的鳎目，喇嘛非要换别喇叭哑巴的喇叭。喇嘛抡起鳎目抽了别喇叭哑巴一鳎目，哑巴摘下喇叭打了提拉着鳎目的喇嘛一喇叭。也不知是提拉着鳎目的喇嘛抽了别喇叭哑巴一鳎目，还是别喇叭哑巴打了提拉着鳎目的喇嘛一喇叭。喇嘛炖鳎目，哑巴嘀嘀哒哒吹喇叭。 六十六头牛六十六岁的陆老头，盖了六十六间楼，买了六十六篓油，养了六十六头牛，栽了六十六棵垂杨柳。六十六篓油，堆在六十六间楼；六十六头牛，扣在六十六棵垂杨柳。忽然一阵狂风起，吹倒了六十六间楼，翻倒了六十六篓油，折断了六十六棵垂杨柳，砸死了六十六头牛，急煞了六十六岁的陆老头。 老六放牛柳林镇有个六号楼，刘老六住在六号楼。有一天，来了牛老六，牵了六只猴；来了侯老六，拉了六头牛；来了仇老六，提了六篓油；来了尤老六，背了六匹绸。牛老六、侯老六、仇老六、尤老六，住上刘老六的六号楼，半夜里，牛抵猴，猴斗牛，撞倒了仇老六的油，油坏了尤老六的绸。牛老六帮仇老六收起油，侯老六帮尤老六洗掉绸上油，拴好牛，看好猴，一同上楼去喝酒。 天上七颗星天上七颗星，地上七块冰，台上七盏灯，树上七只莺，墙上七枚钉。吭唷吭唷拔脱七枚钉。喔嘘喔嘘赶走七只莺。乒乒乓乓踏坏七块冰。一阵风来吹来七盏灯。一片乌云遮掉七颗星。连念七遍就聪明。天上七颗星，地下七块冰，树上七只鹰，梁上七根钉，台上七盏灯。呼噜呼噜扇灭七盏灯，嗳唷嗳唷拔掉七根钉，呀嘘呀嘘赶走七只鹰，抬起一脚踢碎七块冰，飞来乌云盖没七颗星。一连念七遍就聪明。 司小四和史小世司小四和史小世，四月十四日十四时四十上集市，司小四买了四十四斤四两西红柿，史小世买了十四斤四两细蚕丝。司小四要拿四十四斤四两西红柿换史小世十四斤四两细蚕丝。史小世十四斤四两细蚕丝不换司小四四十四斤四两西红柿。司小四说我四十四斤四两西红柿可以增加营养防近视，史小世说我十四斤四两细蚕丝可以织绸织缎又抽丝。 酸枣子山上住着三老子，山下住着三小子，山腰住着三哥三嫂子。山下三小子，找山腰三哥三嫂子，借三斗三升酸枣子，山腰三哥三嫂子，借给山下三小子三斗三升酸枣子。山下三小子，又找山上三老子，借三斗三升酸枣子，山上三老子，还没有三斗三升酸枣子，只好到山腰找三哥三嫂子，给山下三小子借了三斗三升酸枣子。过年山下三小子打下酸枣子，还了山腰三哥三嫂子，两个三斗三升酸枣子。板凳与扁担板凳宽，扁担长。扁担没有板凳宽，板凳没有扁担长。扁担在绑在板凳上，板凳不让扁担绑在板凳上，扁担偏要扁担绑在板凳上 吃桔子 吃桔子，剥桔子，桔皮丢在垃圾箱里。不吃桔子，不剥桔子，不把桔皮丢在垃圾箱里。 墙上一根钉墙上一根钉，钉上挂条绳，绳下吊个瓶，瓶下放盏灯。掉下墙上钉，脱掉钉上绳。滑落绳下瓶，打碎瓶下灯。瓶打灯，灯打瓶，瓶说灯，灯骂绳，瓶说绳，绳说钉，丁丁当当，乒乓乓乓。妈妈骂马妈妈种麻，我去放马，马吃了麻，妈妈骂马。 白老八 白老八门前栽了八颗白果树，从北边飞来了八个白八哥儿不知在哪住。白老八拿了八个巴达棍儿要打八个白八哥儿，八个八哥儿飞上了八颗白果树，不知道白老八拿这八个巴达棍儿打着了八个白八哥儿，还是打着了八颗白果树。 买菜小艾和小戴，一起去买菜。小艾把一斤菜给小戴，小戴有比小艾多一倍的菜；小戴把一斤菜给小艾，小艾、小戴就有一般多的菜。 吃荸荠荸荠有皮，皮上有泥。洗掉荸荠皮上的泥，削去荸荠外面的皮，小丽、小艺和小奇，欢欢喜喜吃荸荠。 倒吊鸟梁上两对倒吊鸟，泥里两对鸟倒吊。可怜梁上的两对倒吊鸟，惦着泥里的两对鸟倒吊，可怜泥里的两对鸟倒吊，也惦着梁上的两对倒吊鸟。 兜装豆兜里装豆，豆装满兜，兜破漏豆。倒出豆，补破兜，补好兜，又装豆，装满兜，不漏豆。 两只鹅 河边两只鹅，一同过了河；白鹅去拾草，黑鹅来搭窝。冬天北风刮，草窝真暖和，住在草窝里，哦哦唱支歌。四个头 天上有日头，地下有石头，嘴里有舌头，瓶口有塞头。天上是日头不是石头，地下是石头不是日头， 嘴里是舌头不是塞头，瓶中是塞头不是舌头。 一个人这边一个人，挑了一挑瓶。那边一个人，担了一挑盆。瓶碰烂了盆，盆碰烂了瓶。卖瓶买盆来赔盆， 卖盆买瓶来赔瓶。瓶不能赔盆，盆不能赔瓶。 一场空抬头看，满天星，低头看，一道坑。坑里看，栽满葱，葱上看，冻着冰。屋里看，点着灯，墙上看，钉的钉。钉上看，挂的弓，弓上看，卧的鹰。寒冬天，刮大风，刮散了，满天星。 学捏梨盘里放着一个梨，桌上放块橡皮泥。小丽用泥学捏梨，眼看着梨手捏泥，比比，真梨、假梨差不离。《糊灯笼》红红糊红粉灯笼，给军属送光荣灯；芬芬糊粉红灯笼，给军属送灯光荣；红红糊完红粉灯笼，糊粉红灯笼；芬芬糊完粉红灯笼，糊红粉灯笼。 《灰损肥》一堆肥，一堆灰，肥混灰，灰损肥，不要肥混灰，防止灰损肥。 《算算看》 老杜和老顾，齐走富裕路。老杜养了兔，老顾养了鹿。老顾给老杜十只兔，两家平等同只数；老顾给老杜十只鹿，顾家是杜家一半数。请问老杜养了多少兔，再问老顾养了多少鹿。给你一个简单的. ［蚕和蝉］ 这是蚕，那是蝉，蚕常在叶里藏，蝉常在林里唱。 ［捉兔］ 一位爷爷他姓顾，上街打醋又买布。买了布，打了醋，回头看见鹰抓兔。放下布，搁下醋，上前去追鹰和兔，了鹰，跑了兔。打翻醋，醋湿布。 ［小猪］ 小猪扛锄头，吭哧吭哧走。小鸟唱枝头，小猪扭头瞅，锄头撞石头，石头砸猪头。小猪怨锄头，锄头怨猪头。 ［四和十］ 四和十，十和四，十四和四十，四十和十四。说好四和十得靠舌头和牙齿,谁说四十是“细席”，他的舌头没用力；谁说十四是“适时”，他的舌头没伸直。认真学，常练习，十四、四十、四十四。 ［枪和糠］ 墙上一个窗，窗上一支枪，窗下一箩糠。枪落进了糠，糠埋住了枪。窗要糠让枪，糠要枪上墙，墙要枪上窗。互相不退让，糠赶不走枪，枪也上不了窗和墙, ［小牛赔油］ 小牛放学去打球，踢倒老刘一瓶油，小回家取来油，向老刘道歉又赔油,老刘不要小牛还油,小牛硬要把油还给老刘，老刘夸小牛，小牛直摇头，你猜老刘让小牛还油，还是不让小牛不油 ［窝和锅］ 树上一个窝，树下一口锅，窝掉下来打着锅，窝和锅都破，锅要窝赔锅，窝要锅赔窝，闹了半天，不知该锅赔窝，还是窝赔锅。 ［南南有个篮］ 南南有个篮篮，篮篮装着盘盘，盘盘放着碗碗，碗碗盛着饭饭。南南翻了篮篮，篮篮扣了盘盘，盘盘打了碗碗，碗碗撒了饭饭。 ［猫鼻子］ 白猫黑鼻子，黑猫白鼻子；黑猫的白鼻子，碰破了白猫黑鼻子,白猫的黑鼻子破了,剥了秕谷壳儿补鼻子；黑猫的白鼻子不破,不剥秕谷壳儿补鼻子。 ［瘸子］ 北边来了一个瘸子,背着一捆橛子。南边来了一个瘸子,背着一筐茄子。背橛子的瘸子打了背茄子的瘸子一橛子。背茄子的瘸子打了背橛子的瘸子一茄子。史上最强的绕口令，无人能读出1、初入江湖：化肥会挥发2、小有名气：黑化肥发灰，灰化肥发黑3、名动一方：黑化肥发灰会挥发；灰化肥挥发会发黑4、天下闻名：黑化肥挥发发灰会花飞；灰化肥挥发发黑会飞花5、一代宗师：黑灰化肥会挥发发灰黑讳为花飞；灰黑化肥会挥发发黑灰为讳飞花6、超凡入圣：黑灰化肥灰会挥发发灰黑讳为黑灰花会飞；灰黑化肥会会挥发发黑灰为讳飞花化为灰吃葡萄不吐葡萄皮 不吃葡萄倒吐葡萄皮高高山上一条藤， 藤条头上挂铜铃， 风吹藤动铜铃动，风停藤停铜铃停。班干部关班干部（多说几遍）灰化肥会化灰，黑化肥不会化灰表哥抱表弟。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[绕口令［捉兔］]]></title>
    <url>%2F2007%2F07%2F25%2F%E7%BB%95%E5%8F%A3%E4%BB%A4%EF%BC%BB%E6%8D%89%E5%85%94%EF%BC%BD%2F</url>
    <content type="text"><![CDATA[［捉兔］ 一位爷爷他姓顾，上街打醋又买布。买了布，打了醋，回头看见鹰抓兔。放下布，搁下醋，上前去追鹰和兔，了鹰，跑了兔。打翻醋，醋湿布。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐换老师了]]></title>
    <url>%2F2007%2F07%2F25%2F%E6%A1%90%E6%A1%90%E6%8D%A2%E8%80%81%E5%B8%88%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐明年要升到中班了。 今天幼儿园宣布，除了班主任还是汪老师之外，李老师和谢老师都走了。 来了一个新的罗老师，还有保育老师麦老师（曾经被评过先进老师）。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐今天又有点发烧了]]></title>
    <url>%2F2007%2F07%2F22%2F%E6%A1%90%E6%A1%90%E4%BB%8A%E5%A4%A9%E5%8F%88%E6%9C%89%E7%82%B9%E5%8F%91%E7%83%A7%E4%BA%86%2F</url>
    <content type="text"><![CDATA[一大早起来就发烧。不过还比较稳定。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐上EF英语课程]]></title>
    <url>%2F2007%2F07%2F22%2F%E6%A1%90%E6%A1%90%E4%B8%8AEF%E8%8B%B1%E8%AF%AD%E8%AF%BE%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[今天是第一次上EF英语课程。 桐桐不肯一个人进去，一定要爸爸陪着。 开始桐桐还不适应，老师提问不肯出声，到了后来，就适应了。表现得很好。 还玩了，手来手转圈圈的游戏，桐桐好喜欢。 上课时一个外国老师，Mr. Dan，上课气氛很活跃。 结束后，问桐桐，下次还来不来，桐桐说还要来。 希望下次桐桐能一个人进去学习。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[珠江夜游]]></title>
    <url>%2F2007%2F07%2F21%2F%E7%8F%A0%E6%B1%9F%E5%A4%9C%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[昨天晚上，爸爸、妈妈、桐桐一起参加了名雅苑幼儿园大班毕业典礼的活动，活动在珠江夜游的游轮上举行。很热闹，还有自助餐吃，桐桐了好多好多。 桐桐他们还表演了金鱼与渔夫的故事，桐桐扮演海浪，爸爸好喜欢桐桐的表演。 听老师说，开始时让桐桐表演渔夫的，但是桐桐喜欢海浪，最后就扮演了海浪。无论桐桐表演什么，爸爸都认为桐桐是最棒的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐别灰心]]></title>
    <url>%2F2007%2F07%2F19%2F%E6%A1%90%E6%A1%90%E5%88%AB%E7%81%B0%E5%BF%83%2F</url>
    <content type="text"><![CDATA[昨晚桐桐翻来翻去睡不着,妈妈问他为什么还不睡?他说他的弟子规背得不好很难过.妈妈真的很惊讶,因为妈妈觉得他背得很不错了,想不到他年纪小小的就有这种压力了.妈妈鼓励他说,宝贝你已经很不错了,妈妈相信你是背得最棒的一个小朋友了,儿子问是真的吗?妈妈说当然了,不一会桐桐就睡着了.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[珠江夜游]]></title>
    <url>%2F2007%2F07%2F18%2F%E7%8F%A0%E6%B1%9F%E5%A4%9C%E6%B8%B82007%2F</url>
    <content type="text"><![CDATA[本周五，是名雅苑幼儿园的大班毕业会。 邀请了全部师生参加珠江夜游庆祝（晚上6点）。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个经典桌面游戏的介绍站点]]></title>
    <url>%2F2007%2F07%2F18%2F%E4%B8%80%E4%B8%AA%E7%BB%8F%E5%85%B8%E6%A1%8C%E9%9D%A2%E6%B8%B8%E6%88%8F%E7%9A%84%E4%BB%8B%E7%BB%8D%E7%AB%99%E7%82%B9%2F</url>
    <content type="text"><![CDATA[http://www.ourlounge.com.cn/ 里面有许多适合大人及小朋友的经典桌面游戏。 地点在北京，还可以到这里全家一起玩。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐学游泳]]></title>
    <url>%2F2007%2F07%2F16%2F%E6%A1%90%E6%A1%90%E5%AD%A6%E6%B8%B8%E6%B3%B3%2F</url>
    <content type="text"><![CDATA[这段时间广州好热。还好小区小面有个游泳池。 下午，会偶尔找个时间带桐桐下去游泳。 桐桐胆子还是小点，今天不小心呛了一口水，哭了很久，还说以后都不游水了。 到后来，还是说还是要去游泳。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给桐桐报了EF的英语课程]]></title>
    <url>%2F2007%2F07%2F16%2F%E7%BB%99%E6%A1%90%E6%A1%90%E6%8A%A5%E4%BA%86EF%E7%9A%84%E8%8B%B1%E8%AF%AD%E8%AF%BE%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[桐桐四岁了，书上说，五岁前小朋友的语言能力是最强的。 桐桐在语言方面比同龄的小朋友好很多，现在所有的中文基本都能说了，绕口令也念的头头是道，是时候给桐桐学习英语了。 一直在给桐桐找英语培训，都觉得很多都不合适，最后看到了英孚教育，它是奥运会的培训合作伙伴。到EF体验，感觉很正规，起码门面各方面作得很好，就是很有实力的那种。 然后就给桐桐报了名，本来是要去海珠区那家，但是因为考虑路程的问题，最后还是去了东方新世界（天河公园）的那间。从7月22日开始上学，每个周日的9:00-10:40,一共一个学年,学费6600左右。 希望桐桐能学好英语。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐不开心的事]]></title>
    <url>%2F2007%2F07%2F14%2F%E6%A1%90%E6%A1%90%E4%B8%8D%E5%BC%80%E5%BF%83%E7%9A%84%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[晚上睡觉前是妈妈和桐桐聊天的时间，最近桐桐学校的好同学李想不上学了，听说是回老家了，（李想比桐桐大九个月，是个很老实可爱的孩子，和桐桐一样很喜欢车车）桐桐问妈妈李想还回来吗我想他了，妈妈安慰桐桐也许会的．桐桐班上走了几个同学都是和他比较好的，萧洋．郑芷其这两个是班上比较漂亮的女孩，桐桐可想她们了．一想起这些同学走了，桐桐就难过，看来友情真的很可贵，小孩子都懂．]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[珠江夜游]]></title>
    <url>%2F2007%2F07%2F14%2F%E7%8F%A0%E6%B1%9F%E5%A4%9C%E6%B8%B82007-1%2F</url>
    <content type="text"><![CDATA[前几天桐桐班主任汪老师通知妈妈20号学校组织珠江夜游,当晚吃自助餐，晚上睡觉时妈妈问桐桐想不想珠江夜游？桐桐说，妈妈我好想啊，因为有自助餐吃，妈妈你一定要报名哦，老师说只有报名的小朋友才有得吃，妈妈说，如果超过三个小朋友报名妈妈就报好吗？桐桐说一定超过的妈妈你明天去报名吧，老师说很好吃的．．．晕．．．]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吃冰糕]]></title>
    <url>%2F2007%2F07%2F14%2F%E5%90%83%E5%86%B0%E7%B3%95%2F</url>
    <content type="text"><![CDATA[晚上睡觉时桐桐告诉妈妈,妈妈,今天老师给了我吃一种夏天吃的东西,很好吃的,妈妈问?是不是甜的啊?(妈妈一般不希望老师给桐桐吃太多甜食)桐桐说不是的妈妈,我吃完没咳嗽啊,那是什么啊?妈妈明天问老师到底是什么?妈妈,别问了我告诉你是冰糕,哦原来是这个啊,妈妈,妈妈,我只吃了一点点.没关系,妈妈见桐桐很害怕的样子只好违心地说了这三个字,桐桐怕妈妈批评,解释了好几次,妈妈,每个小朋友只能吃一点的.可怜的桐桐,妈妈是不是管你太严了???]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐最近在学习绕口令中]]></title>
    <url>%2F2007%2F07%2F08%2F%E6%A1%90%E6%A1%90%E6%9C%80%E8%BF%91%E5%9C%A8%E5%AD%A6%E4%B9%A0%E7%BB%95%E5%8F%A3%E4%BB%A4%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[到现在桐桐已经学会了板凳和扁担，鹅与河，还有大车拉小车。 在爸爸同事和同学面前念着有板有眼。 开心死爸爸了。 今天到了奶奶家，桐桐亲了奶奶十一下;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扁担和板凳]]></title>
    <url>%2F2007%2F07%2F07%2F%E6%89%81%E6%8B%85%E5%92%8C%E6%9D%BF%E5%87%B3%2F</url>
    <content type="text"><![CDATA[板凳宽，扁担长,桐桐会背这首绕口令了，好开心！！！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐进步了]]></title>
    <url>%2F2007%2F07%2F06%2F%E6%A1%90%E6%A1%90%E8%BF%9B%E6%AD%A5%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐学会了用筷子了]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于肤色]]></title>
    <url>%2F2007%2F06%2F26%2F%E5%85%B3%E4%BA%8E%E8%82%A4%E8%89%B2%2F</url>
    <content type="text"><![CDATA[桐桐学校有个非洲小朋友叫傅亮亮,妈妈吃饭时候告诉桐桐,不要吃太多酱油哦,不然皮肤会黑的,桐桐说,妈妈傅亮亮妈妈给他那么多酱油吃啊???]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[游泳]]></title>
    <url>%2F2007%2F06%2F26%2F%E6%B8%B8%E6%B3%B3%2F</url>
    <content type="text"><![CDATA[昨天带桐桐到小区楼下的游泳池游泳了。 桐桐好开心哦。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐语录]]></title>
    <url>%2F2007%2F06%2F23%2F%E6%A1%90%E6%A1%90%E8%AF%AD%E5%BD%952007%2F</url>
    <content type="text"><![CDATA[桐桐昨天问爸爸，“打是疼骂是爱，你听过吗？”。 爸爸说没有。 桐桐说：“你以为打是不疼，骂是不爱对不对呀？” 爸爸笑~~ 今天带桐桐去看木偶剧，有一出“渔翁与白鹅” 白鹅吃完鱼后，用脚抹嘴巴，桐桐说：“白鹅怎么用脚抹嘴巴？” 爸爸说因为它没有手呀。 桐桐说，它的手就是翅膀呀。 爸爸笑~~ 然后，渔翁出来了，脱下帽子，桐桐突然说：“他是老奶奶呀。” 爸爸仔细一看，原来渔翁是古代的，在头顶扎了个辫子，桐桐以为是老奶奶呢。 爸爸笑~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[出差北京]]></title>
    <url>%2F2007%2F06%2F19%2F%E5%87%BA%E5%B7%AE%E5%8C%97%E4%BA%AC%2F</url>
    <content type="text"><![CDATA[这一周，爸爸到北京出差。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[香江野生动物园]]></title>
    <url>%2F2007%2F06%2F19%2F%E9%A6%99%E6%B1%9F%E9%87%8E%E7%94%9F%E5%8A%A8%E7%89%A9%E5%9B%AD%2F</url>
    <content type="text"><![CDATA[之前带桐桐去过两次香江野生动物园。 因为6月份幼儿园的主题活动是动物，所以决定又带桐桐去一趟动物园。 全家人在本周六去了香江动物园，这次的区别是，在出发前发了一张导游录音解说的cd，可以一边开车看动物的时候，车载的cd可以一边解说各种动物的情况，从中可以学到很多东西。 在整个过程当中，看到了凤凰、骆驼、大象、犀牛、河马、豹子、老虎、狮子、羚羊、斑马、长颈鹿、熊、鸵鸟等等动物。并且知道了豹子是动物界的短跑之王，知道了不会飞的鸟是鸵鸟，知道了老虎是独居动物，知道了老虎是生活在森林里面，狮子生活在草原，知道了好多好多的知识。 之后到了步行区看到了树熊考拉和熊猫。桐桐还学着树熊的样子抱着爸爸，爸爸可开心了。 PS：周日是奶奶的生日，和桐桐去奶奶家吃饭了，桐桐还送了奶奶一个吻。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我一点怕都不怕]]></title>
    <url>%2F2007%2F06%2F13%2F%E6%88%91%E4%B8%80%E7%82%B9%E6%80%95%E9%83%BD%E4%B8%8D%E6%80%95%2F</url>
    <content type="text"><![CDATA[妈妈今天给桐桐买了一把手枪。 桐桐拿枪对着吗妈妈说：“妈妈，你怕不怕？” 妈妈说：“我有一点怕。” 桐桐说：“我一点怕都不怕。” 笑~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爸爸开车]]></title>
    <url>%2F2007%2F06%2F11%2F%E7%88%B8%E7%88%B8%E5%BC%80%E8%BD%A6%2F</url>
    <content type="text"><![CDATA[今天送桐桐上学路上，很塞车。 桐桐突然冒了一句话：“爸爸，你开车是世界上最歪的，摇来晃去的。”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐发烧了]]></title>
    <url>%2F2007%2F06%2F07%2F%E6%A1%90%E6%A1%90%E5%8F%91%E7%83%A7%E4%BA%862007-1%2F</url>
    <content type="text"><![CDATA[桐桐昨天又发烧了,带他去打吊针,闭着眼睛使命哭,妈妈好心疼,才病好没多久又来了,是不是妈妈带小孩的水平太差了?祝桐桐早日康复!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐语录]]></title>
    <url>%2F2007%2F06%2F04%2F%E6%A1%90%E6%A1%90%E8%AF%AD%E5%BD%952007-1%2F</url>
    <content type="text"><![CDATA[晚上，妈妈给桐桐讲三个和尚没水喝的故事。 桐桐突然说，我给他们发三个水桶,他们就有水喝了。 笑~~~]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[六一儿童节的活动]]></title>
    <url>%2F2007%2F06%2F04%2F%E5%85%AD%E4%B8%80%E5%84%BF%E7%AB%A5%E8%8A%82%E7%9A%84%E6%B4%BB%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[六一儿童节那天带桐桐去黄花岗剧院看了《美人鱼》木偶剧，老师唱歌跳舞的，看得桐桐和爸爸晕晕欲睡的。 6月2日，爸爸妈妈带桐桐去河南剧院看了木偶剧《聪明的笨人》、《包公审石头》、《三只小猪》、《森林保卫战》等四出剧。还比较好看。 6月3日，带桐桐参加了广州市教育展，在锦汉展览馆那边，参展的企业太少了。不过在那边看到了Porolo的卡通人，桐桐很喜欢。 PS：爸爸在当当网给桐桐买了很多的少儿书，给桐桐作为六一儿童节礼物，可恶的当当网还没有送过来。 PS：桐桐的画或得了全国一等奖和铜奖，还有在幼儿园获得了“礼貌好宝宝称号”，妈妈好开心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐语录]]></title>
    <url>%2F2007%2F05%2F31%2F%E6%A1%90%E6%A1%90%E8%AF%AD%E5%BD%952007-2%2F</url>
    <content type="text"><![CDATA[桐桐昨天和妈妈说在幼儿园没有睡中午觉，妈妈问，为什么不睡觉呀，桐桐说：“妈妈，我想你，泪水嘀嗒嘀嗒的掉下来。”PS：桐桐今天的病好点了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑色星期三]]></title>
    <url>%2F2007%2F05%2F31%2F%E9%BB%91%E8%89%B2%E6%98%9F%E6%9C%9F%E4%B8%89%2F</url>
    <content type="text"><![CDATA[昨天一大早，传来财政部提高股市交易印花税的消息，从原先的千分之一调整到千分之三。股市当天放量大跌，沪深股市成交4千亿，近千个股跌停。沪市报收4053.09点，下跌281.83点,创下当天最高下跌点数；深市收盘12627.15点，下跌829.45点。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[礼貌宝宝]]></title>
    <url>%2F2007%2F05%2F29%2F%E7%A4%BC%E8%B2%8C%E5%AE%9D%E5%AE%9D%2F</url>
    <content type="text"><![CDATA[桐桐给评为“礼貌宝宝”。 PS:桐桐这几天有点拉肚子。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是胡桃夹子玩偶]]></title>
    <url>%2F2007%2F05%2F28%2F%E4%BB%80%E4%B9%88%E6%98%AF%E8%83%A1%E6%A1%83%E5%A4%B9%E5%AD%90%E7%8E%A9%E5%81%B6%2F</url>
    <content type="text"><![CDATA[每个孩子都有一个特别意义的玩具这是一个关于孩子与玩具的故事表演诙谐有趣、鬼马搞笑让孩子学会勇敢、坚强 这是一个流传已久的的童话故事，德国作家霍夫曼把它写成了著名的《咬核桃的小人和老鼠国王》。自柴可夫斯基将它改编为芭蕾舞曲上演之后，一个多世纪以来已经成为经久不衰、家喻户晓的世界经典芭蕾舞剧，与柴可夫斯基的另一力作《天鹅湖》齐名。在欧洲，《胡桃夹子》(Nutcracker)是圣诞节期间几乎每个家庭必看的戏。 《胡桃夹子》描写的是孩子们与各式各样有趣的玩偶之间的故事，中国木偶艺术剧院首次以人偶剧的形式把它搬上舞台，尚未看过《胡桃夹子》芭蕾舞剧的孩子，可通过观看卡通童话剧，了解剧情，作为高雅艺术的启门钥匙。 中国木偶艺术剧团用气派的大制作，改变了以往传统木偶剧单纯的托举式遮挡表演的封闭形式，采用开放式的舞台结构，以人扮演高大的流动布景亮相在木偶戏中，特别是大幕拉开，整个舞台呈现出一本书的样式，所有景物都会随着剧情发展，展现在书中，并且剧中的森林景观还将随着剧情变幻，展示现场季节变换的布景绝技，另小朋友们感觉目不暇接。《胡桃夹子》剧情简介 圣诞夜，美丽的嘉丽得到了两个圣诞礼物：一枚克里克拉开心胡桃项坠和一个威武得像士兵一样的胡桃夹子，她开心极了，抱着胡桃夹子进入了梦乡……睡梦中，她看见酷鼠三兄弟抢走了她的克里克拉开心胡桃项坠，还要夺走胡桃夹子，情急之下，嘉丽勇敢地脱下鞋子打中了鼠老大的头，救下胡桃夹子，但自己却被老鼠的魔法变得跟玩具一样大小了。于是胡桃夹子召来嘉丽所有的玩具和玩具兵们，开始了一场与老鼠国王的较量。 该剧通过木偶和人偶同台演出的形式，把一个可爱的小女孩在梦中同自己所有心爱的玩具之间发生的神奇故事活灵活现的展现出来。在西方，胡桃夹子就被用做送给孩子最好的圣诞礼物,象征着孩子要做勇敢,坚强的人,西方传说胡桃夹子就象中国的门神一样,可以保护家园。什么是胡桃夹子玩偶 这个玩偶真正的用途是夹核桃，把核桃放在他的嘴里，把头顶压下去，核桃就能夹碎。他的形象是一个卫兵，嘴大。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐语录]]></title>
    <url>%2F2007%2F05%2F28%2F%E6%A1%90%E6%A1%90%E8%AF%AD%E5%BD%952007-3%2F</url>
    <content type="text"><![CDATA[上周五放学的时候，桐桐说老师给他们吃了钙片。 晚上洗澡时，爸爸问，是不是老师给你吃了钙片呀，桐桐说是呀，还有我说错了好几次，以前老师都是给钙片吃的。 我们都笑了。 背景：我们一起要求老师不要给糖给桐桐吃，特别是前段时间桐桐有点咳嗽，但是有一次桐桐回来说老师给了糖吃，于是妈妈特意找了老师说不要给糖桐桐吃。 可能老师教他们回来说是钙片不是糖;-) 省得我们担心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《火》]]></title>
    <url>%2F2007%2F05%2F28%2F%E3%80%8A%E7%81%AB%E3%80%8B%2F</url>
    <content type="text"><![CDATA[周日，名雅苑幼儿园举办演出。 桐桐参加了舞蹈《火》的表演，桐桐表现好棒。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[看了胡桃夹子]]></title>
    <url>%2F2007%2F05%2F28%2F%E7%9C%8B%E4%BA%86%E8%83%A1%E6%A1%83%E5%A4%B9%E5%AD%90%2F</url>
    <content type="text"><![CDATA[周五放学后带桐桐去黄花岗剧院买了《胡桃夹子》的木偶剧票，没想到，票都已经差不多卖完了，只好买了三张二楼的，桐桐也要票。 周六一早，外面下着雨，爸爸、妈妈还有桐桐一起出发了。 到了剧院，人山人海的，剧院前的车位都停满了。 找到座位，才明白为什么儿童也要购票了，原来作为实在太紧了，一个大人腿都伸不直，别说抱小孩了。 总体感觉黄花岗剧场条件太差了，蚊子又多，人又多，还是河南剧院好点。 不过胡桃夹子演得还不错，桐桐看得津津有味。 胡桃夹子是中国木偶剧团改编的，故事的大概情节如下： 嘉丽是一个自私、娇气的小女孩。喜欢乱扔玩具，不喜欢和同伴分享玩具。 圣诞节，妈妈给她送了一个胡桃夹子的玩具（是一个玩具武士和一个胡桃）。但是因为她的一个同伴不小心把胡桃夹子（玩具武士，叫西蒙）掉在地上，她一怒之下，把伙伴们都赶走了。 在嘉丽睡觉的时候，酷鼠三兄弟来了，他们要欺负嘉丽的时候，西蒙挺身而出，对抗老鼠们。老鼠施魔法，把嘉丽变成了玩具，并抢走了胡桃。 在玩具世界，嘉丽见到了她以前摒弃的玩具，还有时间博士和西蒙。 嘉丽一心要变回去，离开玩具世界，甚至抱怨是西蒙害了她。 玩具们不计前嫌，都想方设法让嘉丽变回人形。 老鼠们从书上看到，如果他们吃了这个胡桃，就可以变得魔法无边，一旦人吃了，就可以破解老鼠的所有魔法，但是这个胡桃只有胡桃夹子西蒙能咬开。于是老鼠就谎称说让胡桃夹子帮忙咬开胡桃，然后就可以把解除嘉丽的魔法。 玩具们都同心同力，帮忙嘉丽。西蒙在咬胡桃的时候，乘机咬了老鼠大王的手，并且把胡桃扔给了嘉丽，但是自己也落到老鼠手中。 嘉丽被感动了，她舍不得西蒙，她宁愿用胡桃换回西蒙，她宁愿在玩具世界，和玩具朋友们在一起。 时间一分分过去了，玩具们都要求嘉丽赶快吃掉胡桃，变回人形。一旦天亮，嘉丽就永远都变不回去了。 眼看天快亮了，时间博士只能舍命拉住时针，让时间减速。 嘉丽在这紧要关头，终于把胡桃吃了。 嘉丽回到了现实世界，经历了这次风波，嘉丽明白了要珍惜玩具，要珍惜朋友，有好玩的玩具要和朋友分享，要学会帮助别人。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[咬核桃小人和老鼠国王]]></title>
    <url>%2F2007%2F05%2F25%2F%E5%92%AC%E6%A0%B8%E6%A1%83%E5%B0%8F%E4%BA%BA%E5%92%8C%E8%80%81%E9%BC%A0%E5%9B%BD%E7%8E%8B%2F</url>
    <content type="text"><![CDATA[咬核桃小人和老鼠国王 （德）霍夫曼 这是德国作家霍夫曼(1976一1822，)创作的童话。霍夫曼受浪漫派影响，所写小说具有神秘怪诞色彩，带有童话手法，而这部童话则是专为其朋友之子写的。它曾被改编成芭蕾舞剧，由俄国大作曲家柴科夫斯基谱曲，后来又写成《核桃夹子组曲》，脍炙人口，这个童话就更广为人知了。 童话写小姑娘玛丽收到教父送的圣诞礼物。—— 一个咬核桃小人，即核桃夹子。它与一队玩具马兵一起锁在玻璃柜里。玛丽夜梦老鼠国王率大群老鼠来攻打马兵，咬核桃小人指挥马兵作战受伤。玛丽情急，用自己的鞋子击中老鼠国王；救了咬核桃小人的命，但因用力过度，昏倒在地。接下来她病倒，教父前来探病时给她讲故事，说一位国王设宴王后做好香肠，却被老鼠吃了大半，国王大怒，命技师消灭这些老鼠。老鼠王后向公主报复，使她变成丑八怪。国王又命技师恢复公主的美貌，否则砍头。技师打听到，只要公主能吃上克拉图克核桃的肉便可复原，花了十五年工夫才把一颗克拉图克核桃弄来了。但核桃奇硬，无人能咬开，技师的侄子愿意一试。核桃终于咬开，但规定咬开后须闭眼退后七步，侄子退后两步便被老鼠王后绊倒，于是变成了丑八怪。公主吃了桃肉恢复美貌，变丑的侄子却被国王赶走。玛丽听了故事十分同情侄子，夜又做梦，见丑八怪的咬核桃小人与七个脑袋的小鼠王决斗，打败了鼠主，原来咬核桃小人竟是一个王子。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树叶帽圈]]></title>
    <url>%2F2007%2F05%2F25%2F%E6%A0%91%E5%8F%B6%E5%B8%BD%E5%9C%88%2F</url>
    <content type="text"><![CDATA[昨天看了一篇文章，是用树枝做成一个帽圈，带在头上的那种。 小时候经常玩的，有空也帮桐桐弄一个。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[雷州站要停止客运了]]></title>
    <url>%2F2007%2F05%2F24%2F%E9%9B%B7%E5%B7%9E%E7%AB%99%E8%A6%81%E5%81%9C%E6%AD%A2%E5%AE%A2%E8%BF%90%E4%BA%86%2F</url>
    <content type="text"><![CDATA[今天看广州日报，看到一个惊人的消息，为配合火车第六次提速，要停止粤海铁路雷州站的客运停靠。 原因是因为，粤海铁路无法满足火车速度提高的要求，只能通过减少停站的数量来提速，都什么道理！！！ 怀念和仔仔在雷州站等火车的那个晚上，还下着大雨。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[胡桃夹子]]></title>
    <url>%2F2007%2F05%2F22%2F%E8%83%A1%E6%A1%83%E5%A4%B9%E5%AD%90%2F</url>
    <content type="text"><![CDATA[5月26、27日在黄花岗有木偶剧《胡桃夹子》的演出，有空就带桐桐去看； 另外，在凤凰城有念古经书的私塾，有空也带桐桐去看。 PS：桐桐和爸爸祝妈妈生日快乐，永远美丽。 每个孩子都有一个特别意义的玩具这是一个关于孩子与玩具的故事表演诙谐有趣、鬼马搞笑让孩子学会勇敢、坚强 这是一个流传已久的的童话故事，德国作家霍夫曼把它写成了著名的《咬核桃的小人和老鼠国王》。自柴可夫斯基将它改编为芭蕾舞曲上演之后，一个多世纪以来已经成为经久不衰、家喻户晓的世界经典芭蕾舞剧，与柴可夫斯基的另一力作《天鹅湖》齐名。在欧洲，《胡桃夹子》(Nutcracker)是圣诞节期间几乎每个家庭必看的戏。 《胡桃夹子》描写的是孩子们与各式各样有趣的玩偶之间的故事，中国木偶艺术剧院首次以人偶剧的形式把它搬上舞台，尚未看过《胡桃夹子》芭蕾舞剧的孩子，可通过观看卡通童话剧，了解剧情，作为高雅艺术的启门钥匙。 中国木偶艺术剧团用气派的大制作，改变了以往传统木偶剧单纯的托举式遮挡表演的封闭形式，采用开放式的舞台结构，以人扮演高大的流动布景亮相在木偶戏中，特别是大幕拉开，整个舞台呈现出一本书的样式，所有景物都会随着剧情发展，展现在书中，并且剧中的森林景观还将随着剧情变幻，展示现场季节变换的布景绝技，另小朋友们感觉目不暇接。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“猪老板”]]></title>
    <url>%2F2007%2F05%2F21%2F%E2%80%9C%E7%8C%AA%E8%80%81%E6%9D%BF%E2%80%9D%2F</url>
    <content type="text"><![CDATA[偶的老板姓朱。 今天桐桐不怎么愿意上学。爸爸就逗他说，朱老板说，桐桐赶快送你爸爸上班，不然就开除他了。 桐桐说：为什么叫猪老板，猪老板是不是象猪。 笑;-)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[带桐桐去儿童图书馆]]></title>
    <url>%2F2007%2F05%2F21%2F%E5%B8%A6%E6%A1%90%E6%A1%90%E5%8E%BB%E5%84%BF%E7%AB%A5%E5%9B%BE%E4%B9%A6%E9%A6%86%2F</url>
    <content type="text"><![CDATA[本来想这个周末带桐桐买放大镜，然后在太阳底下烧火柴的游戏。但天公不作美，一直是阴天，就暂时没有玩，下次记得了。作为代替品，周六带桐桐到大夫山去骑单车、捞鱼仔了。 一直在想带桐桐去什么好玩的地方，前几天想到了一个好地方，就是解放桥那边的儿童图书馆，以后要多带桐桐去图书馆了，要潜移默化的影响他。 PS：妈妈明天生日了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给桐桐买放大镜]]></title>
    <url>%2F2007%2F05%2F16%2F%E7%BB%99%E6%A1%90%E6%A1%90%E4%B9%B0%E6%94%BE%E5%A4%A7%E9%95%9C%2F</url>
    <content type="text"><![CDATA[今天突然想起了小时候用放大镜在太阳底下照太阳，聚焦点燃火柴的游戏。 答应了周末给桐桐买。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐会按摩了]]></title>
    <url>%2F2007%2F05%2F15%2F%E6%A1%90%E6%A1%90%E4%BC%9A%E6%8C%89%E6%91%A9%E4%BA%86%2F</url>
    <content type="text"><![CDATA[桐桐最近乖了很多，也有礼貌了很多，公公来了会马上大声说，公公好，公公走了，也会大声说，公公再见。 但是还是有点小气。 还要，桐桐在学校学了按摩，这几天回来都给妈妈、姐姐按摩。有时捏捏眼眉，有时捏捏颧骨，有时捏捏头。好好玩。 爸爸要他按摩，他说，现在还不是父亲节。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[限量版车车]]></title>
    <url>%2F2007%2F05%2F10%2F%E9%99%90%E9%87%8F%E7%89%88%E8%BD%A6%E8%BD%A6%2F</url>
    <content type="text"><![CDATA[今天上学时桐桐有点情绪,妈妈安慰他说,桐桐听话好好上学,妈妈帮你排队买限量版车车桐桐不明白什么是限量版,就说好的妈妈,那请你来接我时把限量版和车车两个朋友带来接我哦!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[怪物和乖小孩]]></title>
    <url>%2F2007%2F05%2F10%2F%E6%80%AA%E7%89%A9%E5%92%8C%E4%B9%96%E5%B0%8F%E5%AD%A9%2F</url>
    <content type="text"><![CDATA[昨天讲的故事有一个怪物，桐桐很感兴趣，问了很多为什么。 桐桐问，怪物为什么躲在山洞里面，我说，怪物躲在里面，如果看到谁不听话、不乖，就跳出来抓住他，吃掉。 桐桐说，那乖孩子呢，我还没回答，桐桐接着说，是不是就握握手。 笑~~~ PS:桐桐这三天有点感冒。今天桐桐送爸爸上班，下车时，祝爸爸身体健康，多喝点水。桐桐长大了，爸爸好开心。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[休整日(5月7日)]]></title>
    <url>%2F2007%2F05%2F07%2F%E4%BC%91%E6%95%B4%E6%97%A5(5%E6%9C%887%E6%97%A5)%2F</url>
    <content type="text"><![CDATA[明天就要上学了，今天是五一节黄金周的最后一天。 今天上午在家好好休息了一个上午，下午带桐桐去上东方爱婴的音乐课（骏景分校）。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天河公园(5月6日)]]></title>
    <url>%2F2007%2F05%2F07%2F%E5%A4%A9%E6%B2%B3%E5%85%AC%E5%9B%AD(5%E6%9C%886%E6%97%A5)%2F</url>
    <content type="text"><![CDATA[今天公公婆婆、妈妈还有姐姐带桐桐到天河公园了。 坐了电瓶车、卡丁车、喂鱼、坐船、恐龙推车、打战飞船。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大夫山（5月5日）]]></title>
    <url>%2F2007%2F05%2F05%2F%E5%A4%A7%E5%A4%AB%E5%B1%B1%EF%BC%885%E6%9C%885%E6%97%A5%EF%BC%89%2F</url>
    <content type="text"><![CDATA[今天爸爸、姐姐带桐桐去了大夫山。 走新光快速路，30分钟不到就到了大夫山。 去的路上有点毛毛雨，还好到了大夫山，雨就停了。 下雨之后的大夫山，凉风习习的，空气中弥漫着浓烈的负离子。 我们租了两部自行车，桐桐和爸爸骑一部。一路上，阵阵微风吹过来，很舒服。 然后爸爸从斜坡上骑下去，速度很快，一边喊着yaho，桐桐好开心呀。这个玩法是上次桐桐幼儿园组织到大夫山玩的时候就喜欢上了。 之后，桐桐拿着一个风车，骑车的时候，风车也跟着很快很快的转动，可好玩了。 最后，我们还坐了四人脚踏船。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[木偶剧(5月4日)]]></title>
    <url>%2F2007%2F05%2F05%2F%E6%9C%A8%E5%81%B6%E5%89%A7(5%E6%9C%884%E6%97%A5)%2F</url>
    <content type="text"><![CDATA[五一节的第四天了。 今天妈妈、姐姐带桐桐去看木偶剧了。 上演的是白雪公主，桐桐很喜欢。不过现在的木偶剧主要是人来演，中间插了一点木偶。 表演之前有抽奖环节，桐桐手上拿了很多的番薯条，来不及举手。还好，桐桐吃得快，吃完以后就举手。但是轮到桐桐的时候，已经不能表演了，只能抽奖，开始桐桐还不敢把手申进抽奖箱。抽奖之后，桐桐还很不明白，怎么抽出来的奖不是自己的。他一直以为，抽奖是抽给自己的呢。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云山+滨江游(5月3日)]]></title>
    <url>%2F2007%2F05%2F03%2F%E7%99%BD%E4%BA%91%E5%B1%B1%2B%E6%BB%A8%E6%B1%9F%E6%B8%B8(5%E6%9C%883%E6%97%A5)%2F</url>
    <content type="text"><![CDATA[白 不知不觉到了五一节的第三天。 上午，妈妈、姐姐还有桐桐去白云山看忆桐成长树了。 下午睡醒觉，带桐桐去看车。然后到滨江路上骑自行车，很好玩的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[珠江游(5月2日)]]></title>
    <url>%2F2007%2F05%2F02%2F%E7%8F%A0%E6%B1%9F%E6%B8%B8(5%E6%9C%882%E6%97%A5)%2F</url>
    <content type="text"><![CDATA[很早前就答应带桐桐去坐游轮游珠江的,今天终于可以兑现了,现在的游轮比以前条件好多了,有空调,票价便宜,(从中大码头至芳村,途经天字码头、长堤码头)，桐桐好开心呀。 游轮是广州最近重新开的，票价2元。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[成长树(5月1日)]]></title>
    <url>%2F2007%2F05%2F02%2F%E6%88%90%E9%95%BF%E6%A0%91(5%E6%9C%881%E6%97%A5)%2F</url>
    <content type="text"><![CDATA[五一的第一天假期,爸爸妈妈带桐桐上白云山看望桐桐种的”忆桐成长树”.我们惊喜地发现小木棉树发芽了长得很不错的,桐桐帮它淋水,施肥还带了点泥土回家作纪念,祝桐桐象小树一样茁壮成长!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[云溪公园]]></title>
    <url>%2F2007%2F04%2F29%2F%E4%BA%91%E6%BA%AA%E5%85%AC%E5%9B%AD%2F</url>
    <content type="text"><![CDATA[桐桐今天幼儿园组织去云溪公园春游，坐了校巴。 看桐桐今天放学好开心。 爸爸妈妈今天一起去接桐桐了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多喝点水身体健康]]></title>
    <url>%2F2007%2F04%2F28%2F%E5%A4%9A%E5%96%9D%E7%82%B9%E6%B0%B4%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7%2F</url>
    <content type="text"><![CDATA[由于桐桐妈妈主管家务事所以博客由爸爸主笔,妈妈只负责写桐桐妙语,桐桐前段时间发烧,妈妈老是怕他不喝水,每天都说几十次桐桐要喝多点水身体才健康,谁知道小家伙前两天很认真地和妈妈说,妈妈祝你多喝点水身体健康,祝你劳动节快乐!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的成长之路]]></title>
    <url>%2F2007%2F04%2F26%2F%E6%A1%90%E6%A1%90%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[桐桐三岁半了， 四岁的时候让桐桐学好多好多的东西了。 1、体育是强身健体的必要手段，并且可以培养良好的性格 跆拳道—强身健体 羽毛球—隔网运动，不容易受伤，并且在广东很流行；-） 2、英语是一种工具，必须掌握好 要开始让桐桐参加一些课外的英语课了，要在五岁前接受语言的培训。 现在要开始找了。 3、古文是中国文化的精髓，文化才是决定性的力量 准备找一些mp3类读古文的，爸爸和桐桐一起学习。 4、音乐是陶冶性情的最好工具，生命中不能没有音乐 先让桐桐学习钢琴，如果还没兴趣也不强求，但是要让桐桐掌握音乐，不一定要精通。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿子讲话越来越像大人了]]></title>
    <url>%2F2007%2F04%2F26%2F%E5%84%BF%E5%AD%90%E8%AE%B2%E8%AF%9D%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%83%8F%E5%A4%A7%E4%BA%BA%E4%BA%86%2F</url>
    <content type="text"><![CDATA[儿子现在讲话越来越像大人了。 前天，下班在车上。 桐桐：“爸爸是不是迟到给老板批评了？” 爸爸：“是的。” 桐桐：“那你有没有对老板说下次我改正了？” 爸爸很委屈的说：“下次我改正了。” 桐桐：“不是现在说嘛，我又不是你老板。” 大家笑。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洪小桐]]></title>
    <url>%2F2007%2F04%2F25%2F%E6%B4%AA%E5%B0%8F%E6%A1%90%2F</url>
    <content type="text"><![CDATA[桐桐现在老说他的儿子叫洪小桐。然后我是洪小桐的爷爷，海英是洪小桐的奶奶。 今天，海英问桐桐，说如果爸爸和妈妈老了怎么办。桐桐说，那我扶爸爸，洪小桐扶妈妈。海英又说，如果洪小桐还小，不会走路怎么办呀。桐桐说，那我先扶妈妈回去睡觉，然后再扶爸爸。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐最近好乖]]></title>
    <url>%2F2007%2F04%2F23%2F%E6%A1%90%E6%A1%90%E6%9C%80%E8%BF%91%E5%A5%BD%E4%B9%96%2F</url>
    <content type="text"><![CDATA[桐桐最近长大了很多，又乖又有礼貌，晚上睡觉也不那么吵闹了。 ps：昨天转到了骏景的东方爱婴上课了，好多小朋友，他们班一共有九个bb。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今天带桐桐去广州市青少年科技馆]]></title>
    <url>%2F2007%2F04%2F21%2F%E4%BB%8A%E5%A4%A9%E5%B8%A6%E6%A1%90%E6%A1%90%E5%8E%BB%E5%B9%BF%E5%B7%9E%E5%B8%82%E9%9D%92%E5%B0%91%E5%B9%B4%E7%A7%91%E6%8A%80%E9%A6%86%2F</url>
    <content type="text"><![CDATA[今天带桐桐去科技馆，可能桐桐太小了，还不懂。 感觉很一般。 长大了再带桐桐去玩可能好点，可能适合小学高年级或者初中的小朋友玩。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐班今天组织水果拼图活动]]></title>
    <url>%2F2007%2F04%2F20%2F%E6%A1%90%E6%A1%90%E7%8F%AD%E4%BB%8A%E5%A4%A9%E7%BB%84%E7%BB%87%E6%B0%B4%E6%9E%9C%E6%8B%BC%E5%9B%BE%E6%B4%BB%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[姐姐陪桐桐参加了。 我们还提供了榨汁机。 另外，今天问了广外的高中同学，据说广外外校的英语教学还可以。 广外外校网址： http://www.gwdwx.com/homepage/]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐今天当值日生]]></title>
    <url>%2F2007%2F04%2F18%2F%E6%A1%90%E6%A1%90%E4%BB%8A%E5%A4%A9%E5%BD%93%E5%80%BC%E6%97%A5%E7%94%9F%2F</url>
    <content type="text"><![CDATA[今天是桐桐在幼儿园第一次当值日生。 桐桐上学的时候好开心，见到谁都打招呼了，很有礼貌。包括谭园长了、梁老师了、还有其他担任礼仪的哥哥姐姐了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐今天上学了]]></title>
    <url>%2F2007%2F04%2F16%2F%E6%A1%90%E6%A1%90%E4%BB%8A%E5%A4%A9%E4%B8%8A%E5%AD%A6%E4%BA%86%2F</url>
    <content type="text"><![CDATA[上个礼拜，桐桐病了，一直没有上学。 今天终于可以高高兴兴上学了。 PS:周六，带桐桐到高中同学远佳家看他家的小千金。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐昨晚终于睡了一个好觉]]></title>
    <url>%2F2007%2F04%2F13%2F%E6%A1%90%E6%A1%90%E6%98%A8%E6%99%9A%E7%BB%88%E4%BA%8E%E7%9D%A1%E4%BA%86%E4%B8%80%E4%B8%AA%E5%A5%BD%E8%A7%89%2F</url>
    <content type="text"><![CDATA[桐桐昨天没有发烧了，但是还是咳嗽得厉害。 还好昨晚睡觉的时候还没怎么咳嗽，听妈妈说只是咳嗽了一次。 希望桐桐早日康复。 爸爸永远只爱桐桐一个。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐的烧还没有退]]></title>
    <url>%2F2007%2F04%2F12%2F%E6%A1%90%E6%A1%90%E7%9A%84%E7%83%A7%E8%BF%98%E6%B2%A1%E6%9C%89%E9%80%80%2F</url>
    <content type="text"><![CDATA[今天已经是桐桐发烧的第五天了。 早上还有点烧，本周都没有上幼儿园了。 把妈妈累坏了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[昨晚爸爸打桐桐屁股了]]></title>
    <url>%2F2007%2F04%2F11%2F%E6%98%A8%E6%99%9A%E7%88%B8%E7%88%B8%E6%89%93%E6%A1%90%E6%A1%90%E5%B1%81%E8%82%A1%E4%BA%86%2F</url>
    <content type="text"><![CDATA[昨晚桐桐还有点发烧，不乖，整晚吵吵闹闹的，爸爸忍不住就打了桐桐屁股（妈妈也打了）。 早上，桐桐看到爸爸，就要爸爸出去，说爸爸欺负他，还要爸爸向他道歉。爸爸道歉后，桐桐才原谅了爸爸。 下次爸爸要改正，尽量不要打桐桐了，不过桐桐也要乖点才行哦。 PS:桐桐从周六晚发烧到，到今天早上还有点烧，本来今天要上学的，看桐桐还有点不舒服，就继续请假一天。 希望桐桐早日康复。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于看完了贞观长歌]]></title>
    <url>%2F2007%2F04%2F10%2F%E7%BB%88%E4%BA%8E%E7%9C%8B%E5%AE%8C%E4%BA%86%E8%B4%9E%E8%A7%82%E9%95%BF%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[熬了好多夜，终于看完了82集的贞观长歌。 昨晚看到了早上5：30;-) 不过唐朝的历史都给拍得有点像清朝宫廷剧了，太多戏说的味道。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐语录]]></title>
    <url>%2F2007%2F04%2F08%2F%E6%A1%90%E6%A1%90%E8%AF%AD%E5%BD%952007-4%2F</url>
    <content type="text"><![CDATA[桐桐又发烧了今天爸爸妈妈带他去打针,基本没哭.下午睡醒觉,妈妈抱着桐桐说:’’宝宝你发烧妈妈心疼死了.’’桐桐说:’’妈妈我带你去看病.’’可是妈妈没病啊?有,妈妈你有心病,你的心生病了,我拿听筒帮你听听……]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿歌《水》]]></title>
    <url>%2F2007%2F04%2F04%2F%E5%84%BF%E6%AD%8C%E3%80%8A%E6%B0%B4%E3%80%8B%2F</url>
    <content type="text"><![CDATA[小小的水，是泪水； 大大的水，是海水； 跳舞的水，是喷泉； 健康的水，是汗水； 脏脏的水，是泥水； 静静的水，是湖水； 甜甜的水，西瓜水； 宝贵的水，自来水。 这是桐桐今天在幼儿园表演的儿歌。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅十二]]></title>
    <url>%2F2007%2F04%2F03%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E5%8D%81%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[今天是初六，今晚要坐火车去广州了。 车票是二哥因为认识车站的人，才定到的，定了4张火车卧铺票。奶奶、姑姑、爸爸、二姐姐、翔宇、桐桐、洪巧姐姐七人一起去了，姑丈因为票不够，第二天才去了。 从姑姑家回来之后，我们就准备行李之类的啦。 奶奶还帮买了一筐的土鸡蛋。车票是晚上10点38分的。7点多，天下起了雨。说来也奇怪，回雷州的时候，广州之前的天气一直都阳光灿烂的，偏偏在我们出发的时候下去了雨，这次回广州也是这样。真是应那句话“贵人出门招风雨。” 我们一行冒着雨出发了，在三轮车上因为封闭性不好，都挺冷的。外面因为下雨，黑乎乎一片，因为雷州的治安不好，并且去火车站的那段路很偏僻，三轮车司机也是忐忑不安，奶奶也是担心得不得了。之间还发生了一个小插曲，奶奶和姑姑坐的三轮车，开始是一个女司机，过了一会，她换给了她老公开，我们两部车就分别走了，吓得奶奶说，我们还有两个哥哥在后面;-) 三轮车在15分钟左右平安到了车站。 我们来得早，车站的人还不多。 但是后面，越来越多的人来了，还有很多没有票，希望用站台票上车的人，而工作人员说，因为是春运，火车已经严重超载，站台票的人也上不去。然后开始清理没票人员，所以搞得气氛很紧张。 唉，中国的春运真是很恐怖的一件事情，那天，没票的人比有票的人还多。上火车前，隔壁的那位听说还是在初一上午6点排队才买到了初六的票（提前六天售票）。 桐桐第一次坐火车，因为上了车也已经11点了，桐桐也很快睡着。 早上8点，火车到了广州，晚点了一个小时，妈妈已经在车站接我们了。 愉快的雷州之行结束了。 （全剧完）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅十一]]></title>
    <url>%2F2007%2F04%2F03%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E5%8D%81%E4%B8%80%2F</url>
    <content type="text"><![CDATA[今天是初六，定了今晚的火车票。 白天，按照乡下的风俗，要给姑姑和姑丈作31（其实才是29）。 奶奶定做了8个很大很大的年饼。 一早，二姐姐（大伯有事去不了）、二伯、四伯、五伯、六伯，还有爸爸、桐桐一行七人去姑姑家。 奶奶和六伯一大早就开始张罗了。乡下的规矩很多，礼节也很多，要准备的东西也特别多。 今天外面风挺大的。 早上9点多，我们坐三轮车去姑姑家了。 姑姑家在石头村，以前爸爸在东岭小学跟二伯念书的时候，就很老是听到了石头村的名字。因为石头村在东岭村上面，到东岭的时候一定要经过石头村，并且这两个村当时因为土地的事情也有点争端。那都是1987年前的事情了，弹指一挥间二十年过去了，爸爸也从一个小学生变成了爸爸。 路上，两边都是农田，空气很好，有三三两两的农民伯伯在田里面干活。 桐桐高高兴兴的到了姑姑家，见到了翔宇妹妹。 翔宇的爷爷煮了好多好吃的东西给我们吃。吃完饭，桐桐就和四伯、六伯到外面坐那个拖拉机了。 在玩的时候，有几个小朋友在田野里面玩，突然一个小朋友把一部单车丢到了一个小池塘中。桐桐看到了，很生气的说，批评他们。把我们都逗乐了。 桐桐在那个拖拉机上玩了很旧。 玩了一会，我们回家了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅十]]></title>
    <url>%2F2007%2F04%2F03%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E5%8D%81%2F</url>
    <content type="text"><![CDATA[初三，奶奶、爸爸还有桐桐去球曾奶奶那里拜神了。 爸爸的小时候，妈妈经常带着爸爸去的。爸爸读书等一直也都很顺利，奶奶也说了，这多凭了神对我们的眷顾。所以，每次回乡下，是一定要去参拜一下的。 桐桐到了，也像模像样的学着爸爸和奶奶的样子参拜。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[观贞观长歌有感]]></title>
    <url>%2F2007%2F04%2F03%2F%E8%A7%82%E8%B4%9E%E8%A7%82%E9%95%BF%E6%AD%8C%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[看了40集，描写了李世民的丰功伟绩以及宫廷争斗。 把李世民描写得完美至极。 1、敢冒险 2、胸怀宽广 3、天下为公 4、不惜牺牲，特别是周边的人 5、能忍 6、当机立断 7、善于用人]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐变小猪嘴了]]></title>
    <url>%2F2007%2F04%2F03%2F%E6%A1%90%E6%A1%90%E5%8F%98%E5%B0%8F%E7%8C%AA%E5%98%B4%E4%BA%86%2F</url>
    <content type="text"><![CDATA[昨天放学的时候，桐桐的上唇那里给抓了，变成小猪嘴了，听说是给卡卡抓的。 卡卡还不会说话，平时也就喜欢打人。 ps:今天桐桐送爸爸上班，经过冼村小学，桐桐问，为什么叫冼村小学，妈妈说，因为它很小叻，桐桐突然说“那如果盖得大大的，是不是就变成冼村大学了。”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅九]]></title>
    <url>%2F2007%2F04%2F02%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E4%B9%9D%2F</url>
    <content type="text"><![CDATA[随后几天，大家都沉醉在新年的欢快气氛中。 桐桐也每天要早上起来都要吃笨笨的早餐，每天都要六伯骑摩托车带他去兜风，每天都和四伯放烟花。还有，晚上和爸爸睡觉乖了很多。 开心的日子过得很快，并且天气还这么好，有点阳光，但是有不太热。 奶奶一天到晚整好吃的东西给桐桐吃，奶奶眼里只要桐桐想吃的，都可以给他吃;-) 按乡下习俗，大年初二，姐夫会回来。因此，奶奶一早就买了一个鸡放在楼顶养着，桐桐也有空没空都逗它玩。 初二那天，姐夫带了一只鸭子回来，把它栓好了，桐桐看到它好玩，还摸了好几回。然后就和其它小朋友玩了。 一会回来，他看到鸭子给杀死躺在地上，大哭了起来“让它活过来”，把我们都逗乐了。 在桐桐眼里，一草一木都是有生命的。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[忆桐成长树]]></title>
    <url>%2F2007%2F04%2F01%2F%E5%BF%86%E6%A1%90%E6%88%90%E9%95%BF%E6%A0%91%2F</url>
    <content type="text"><![CDATA[昨天3月31日，爸爸、妈妈还有桐桐一起去白云山植树了。 一早，一家人开车到白云山，本来广州日报上说可以免费坐电瓶车到植树点（摩星岭的休闲广场），到了，才知道报纸等错了，只能买了电瓶车票。不过从山顶公园到摩星岭那一段还是免费了。 到了山顶公园，要换电瓶车，足足等了15分钟才开车。 今天植树的人很多，大部分是单位的。有有家庭小孩的人自发的，有单位组织的，不过都是年轻人居多，还有些老外，据说是领事馆的。 来到了摩星岭的休闲广场，园丁叔叔给我们带来了一颗很漂亮的木棉树，没有长叶子，但是每个枝都长出来了新芽。 植树点是一个很开阔的斜坡，往下看，可以看到新体育馆，很漂亮，风景很好，并且加上天气非常好，有点太阳，真是个植树的好日子。 找到了一个树坑，妈妈扶着树，爸爸用锄头填泥土，桐桐拿着小塑料铲也给树树填土。 不一会，就把树树种好了，还用锄头把泥土压紧了。 爸爸拿着小桶子你拿水，桐桐就把水一瓢一瓢淋给树树了。 最后桐桐还给树树洒了一泡尿;-) 种树时，我们拍了DV和录像。 昨天是一个充满意义的一天，希望桐桐和这颗木棉树一起成长，不怕风吹雨打，永远挺拔不屈。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树的来信]]></title>
    <url>%2F2007%2F03%2F29%2F%E6%A0%91%E7%9A%84%E6%9D%A5%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[今天桐桐在学校带回来了一片树叶。 公公说，这是不是树叶呀，桐桐说“这是树给我的信”。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[炒鱿鱼]]></title>
    <url>%2F2007%2F03%2F29%2F%E7%82%92%E9%B1%BF%E9%B1%BC%2F</url>
    <content type="text"><![CDATA[今天接桐桐时，妈妈说：＂桐桐，你上学进教室时要快点，不然妈妈和姐姐会迟到，迟到呢会被老板炒鱿鱼的＂。桐桐说“啊妈妈，你和姐姐被老板炒炒呀炒，变成鱿鱼了”]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅八]]></title>
    <url>%2F2007%2F03%2F28%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E5%85%AB%2F</url>
    <content type="text"><![CDATA[大年初一到了，在阵阵鞭炮声中开始了新的一年。 今天的天年阳光普照，听说广州自从我们走了之后，都一致灰沉沉的，偶尔还有阴阴细雨。而雷州，自从我们到了之后，都一致阳光灿烂的。 在这样的好天气了，全家带桐桐一起逛街了，逛了一会，实在太多人，就回家放烟花了。放了烟花就让六伯骑摩托车带桐桐到田野里面溜达了，爸爸骑着单车在后面，桐桐在后镜看到爸爸可开心了。这一招是从二伯那天骑他，我在骑自行车被看见之后，就成了逗桐桐开心而累试不爽的招数了。 我们一行最后到了经过我们村的唯一一条河流—南渡河。南渡河可谓我们家的母亲河了，再往前就是入海口了。 记得小时候，二哥、三哥们经常到南渡河去捕鱼，因为以前穷，捕到的鱼大部分都是拿去卖的，特别是那些大条一点的。 现在抱着桐桐看着这条河流，风平浪静的，在靠岸边有很多浮萍。偶尔一阵风吹过，引起一圈圈的涟漪。景色美极了。 河边不远的地方就是桐桐爷爷的坟墓了，因为不是清明，就没去看。 （未完，待续）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅七]]></title>
    <url>%2F2007%2F03%2F27%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E4%B8%83%2F</url>
    <content type="text"><![CDATA[大年三十是个特别的日子。 二十多年前的那个大年三十，是妈妈最困难、最难过的一天。 这天是爸爸的忌日。 按乡下的习俗，这天要到祖屋给爸爸做忌日的。 一早，几位哥哥都准备好，然后大家都到祖屋去了。 也带上了桐桐。 桐桐和爸爸一起拜了，还有模有样的。 之后就开始烧一些金银财宝类的。 那天，心里特不好受，想起妈妈那一年是怎么过的，孤身一个人，要带大那么多子女，要面对那么多困难。 不过还好，兄弟姐妹们也都很怪，也都很争气。大家齐心协力，这么多年也都挨了过来，妈妈也得以安度晚年。 妈妈为了我们兄弟姐妹们，付出了很多，受了很多的苦，我们一定要孝顺妈妈。桐桐也要像爸爸那样孝顺奶奶。 （未完，待续）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅六]]></title>
    <url>%2F2007%2F03%2F26%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E5%85%AD%2F</url>
    <content type="text"><![CDATA[不止不觉到了大年三十。 桐桐到乡下还是比较适应，并且见到了很多以前没有见到过的东西，可高兴了。 并且除了第一天晚上要妈妈，第二天晚上要姐姐之外，都肯和爸爸睡觉了。 大年三十，乡下习惯在午夜12：00左右的时候放烟花。 所以一大早就先让桐桐看snoopy，DVD机还是在回来第二天让六伯去买的。看完后，很早就上床睡觉了。 到了午夜，鞭炮声开始陆陆续续的传来，桐桐也给那些鞭炮吵得翻过来翻过去的。还好，也没有醒。 可以，到了后面，我们邻居开始放的时候声音特别大，并且又是长长的那种，吵得桐桐抱住了爸爸。 随后，我们家也放了一排鞭炮，是比较短的那种，为了不吓着桐桐。 可能是鞭炮吓跑了那只野山猫，今晚没有听到也山猫凄凉的叫声了。 新的一年开始了。 （未完，待续）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅五]]></title>
    <url>%2F2007%2F03%2F25%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E4%BA%94%2F</url>
    <content type="text"><![CDATA[大年二十九，带桐桐到大伯家去，正好碰到弄年饼，桐桐看到我们在弄，自己也拿一个小盘自己做起了小年饼，并美其名曰“笨笨的早餐”，看到好投入的样子很可爱。 晚上，六伯买回来了很多烟花，四伯就带桐桐到楼顶放烟花了，噼里啪啦的声音伴随着那些小朋友的笑声，其中桐桐的声音是最响亮的一个。 烟花里面桐桐最喜欢的一个就是类似车轮状的，在燃放的时候会在地上转圈圈，并冒出美丽的七彩光。 随后的时间里，每天都要给桐桐放一次。 有一次，六伯让桐桐拿着蚊香点烟花，其中有一次不小心手碰到了火，吓得桐桐大哭. ;-) (未完，待续)]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[忆桐成长树]]></title>
    <url>%2F2007%2F03%2F25%2F%E5%BF%86%E6%A1%90%E6%88%90%E9%95%BF%E6%A0%912007%2F</url>
    <content type="text"><![CDATA[昨天早上带桐桐去白云山。 正门没有车位，就去了大金钟路的门爬上去，在山顶吃了山水豆腐花后，坐缆车下山。 同时，响应广州市政府的号召，在游客中心报名参加了植树活动，时间定在下周六。 树名：木棉树 价格：120元 位置：白云山摩星岭牌坊休闲广场附近。 牌语：忆桐成长树 取义于一同成长的谐音，希望桐桐和这颗木棉树一样茁壮成长。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐表决心]]></title>
    <url>%2F2007%2F03%2F22%2F%E6%A1%90%E6%A1%90%E8%A1%A8%E5%86%B3%E5%BF%83%2F</url>
    <content type="text"><![CDATA[晚上睡觉前妈妈表扬桐桐:宝宝,你现在进步了,上学不哭了(据园长说我家桐桐已打破他们学校里上学哭的纪录),妈妈很开心!桐桐搂着妈妈很难过地说:’’妈妈,以前小时候我上学老是哭,对不起了,我以后都不哭了!’’妈妈心里可乐了,这孩子真长大了还那么体贴妈妈,谁知道那个晚上,桐桐哭闹了几次,哈,孩子就是孩子永远长不大!]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于咬脚怪兽]]></title>
    <url>%2F2007%2F03%2F22%2F%E5%85%B3%E4%BA%8E%E5%92%AC%E8%84%9A%E6%80%AA%E5%85%BD%2F</url>
    <content type="text"><![CDATA[桐桐睡觉象爸爸不爱盖脚,妈妈就告诉他不盖脚咬脚怪兽会咬你的脚的,桐桐问妈妈:妈妈,咬脚怪兽的眼睛是什么形状的?是不是方形的?咬脚怪兽的脚是什么色的?是不是绿色的?妈妈告诉桐桐妈妈只知道咬脚怪兽只是在有人不盖被子时才出现的,桐桐听完就把脚缩回被窝里了,呵呵!爸爸小时候奶奶一定没给他讲过咬脚怪兽的故事了.]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅四]]></title>
    <url>%2F2007%2F03%2F22%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[今天是到雷州的第一个早上，一大早，奶奶就热了乡下的年饼给桐桐吃，桐桐没见过年饼，就根据蓝精灵里面的“笨笨的早餐”来命名了。 桐桐可爱吃了，吃了一个，还想吃，但怕消化不良，就没给。奶奶说不怕的;-) 吃完早餐之后，带桐桐去田野看拖拉机了。 外面有点冷，有点很小很小的毛毛雨。 桐桐在路上跑呀跑，看到路上的小鸡，就问，他们怎么不会家呀。桐桐在广州看到的鸡都是在笼子里面的，或者围起来的。桐桐跑过去，想和小鸡玩，但是小鸡都吓得跑掉了。桐桐很奇怪，小鸡怎么不和我玩呀。 终于远远看到在耕田的拖拉机了，六伯抱桐桐到进一点的地方看，看得桐桐都不想走了，但是因为拖拉机的声音太大了，也就没有给桐桐看太久。 然后就回家了。 （未完，待续）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐这两天晚上睡觉都没有闹]]></title>
    <url>%2F2007%2F03%2F22%2F%E6%A1%90%E6%A1%90%E8%BF%99%E4%B8%A4%E5%A4%A9%E6%99%9A%E4%B8%8A%E7%9D%A1%E8%A7%89%E9%83%BD%E6%B2%A1%E6%9C%89%E9%97%B9%2F</url>
    <content type="text"><![CDATA[桐桐这两天睡觉都没有闹了，好乖。 ps:今天桐桐带了一盘“观音莲”到幼儿园的植物角了。 ps:桐桐前天到卡卡家探望小腿受伤的卡卡了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好玩的地方]]></title>
    <url>%2F2007%2F03%2F21%2F%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%9C%B0%E6%96%B9%2F</url>
    <content type="text"><![CDATA[转贴 昨天,我带尚言小朋友去了广州青少年科技馆,里面有很多适合小朋友玩的互动活动,比如模拟驾驶、电磁翘翘板、气流篮球、无弦琴、水枪风车、激光点燃圣火等，尚言玩得非常开心，我和他爸爸两个大朋友也玩得非常开心。大家可以带小朋友去玩。 自驾车由童心路转入西胜街（即广东省电大旁边岔路），直上约200米即可见到广州市科学技术协会及广州青少年科技馆。或可乘公交车到童心南站下车，沿西胜街往上走约200米。星期一、星期二闭馆，星期三至星期日开馆。开馆时间为：早上9:00～下午4：30。门票成人10元/人，小朋友免票。如果家长是教师或军人，带上证件，也可免票。 —————————————————————————另外昨天也去了科技馆，但从规模上来讲比香港的差太多了，而且设施也欠保养，有一些已经坏了或者不开放，有些很陈旧了，可能与材料有关，不经用，但总的来说，对孩子获取知识还是有的，好过没有，没去的还是带孩子去玩玩吧。 如果有机会能去香港科技馆玩玩很不错 —————————————————————————— 今年寒假，我带儿子去一趟北京，当地的朋友介绍我们去了北京科技馆，去了之后觉得真的要好好向朋友们介绍一下，儿子囔着要再去一次呢． 北京科技馆分三个展馆，其中一个是少儿展馆，里面有三层，除了有广州科技馆内展出的科技小常识，还有很多游乐场、手工区，门票是小孩子不用钱，大人２０元，而且不限时间，我们在内玩了足足一天，我儿子还不舍得走人． 啥时广州的科技馆有北京那种规模就好了]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐退步了]]></title>
    <url>%2F2007%2F03%2F20%2F%E6%A1%90%E6%A1%90%E9%80%80%E6%AD%A5%E4%BA%86%2F</url>
    <content type="text"><![CDATA[昨晚到舅舅那里吃饭庆祝舅舅的生日。 桐桐吃了好多生日蛋糕。 晚上睡觉不乖了，大吵大闹的，一会说耳朵痒，一会说要爸爸，一会又说不要。 今天起床也没有叫爸爸起床。 上学的时候开始说呀爸爸送进去，但是爸爸一下车，又说要爸爸妈妈一起送，因为爸爸要看着车，只好让妈妈送进去了，听说进教室的时候哭了，还哭得挺厉害的，可能是昨天在学校给老师批评了。 桐桐要进步哦。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅三]]></title>
    <url>%2F2007%2F03%2F19%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E4%B8%89%2F</url>
    <content type="text"><![CDATA[桐桐今天路上坐车累了，很快就上床睡觉。姐姐也回她家去了。 和桐桐睡觉的前，说要妈妈。还好，临时准备了很多车车的故事，哄他睡着了。 桐桐睡得很香。 半夜，有一个野猫在窗边叫，好大声，我开始还以为是哪个bb在哭，好凄凉。 还好桐桐睡了很好，没有吵醒。 第二天一大早，公鸡就在窗边催我们起床了。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐进步了]]></title>
    <url>%2F2007%2F03%2F19%2F%E6%A1%90%E6%A1%90%E8%BF%9B%E6%AD%A5%E4%BA%862007%2F</url>
    <content type="text"><![CDATA[妈妈昨天和桐桐说了，做人最重要的是礼貌，然后是大方，第三才是聪明。 桐桐遗传了爸爸的聪明。 昨晚，公公到我们家，桐桐很有礼貌的弯腰说：“公公好”。 桐桐终于进步了。 ps:今天是桐桐舅舅的生日。 ps:妈妈老是没有帮桐桐写博客。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欢迎其他小朋友到桐桐家]]></title>
    <url>%2F2007%2F03%2F18%2F%E6%AC%A2%E8%BF%8E%E5%85%B6%E4%BB%96%E5%B0%8F%E6%9C%8B%E5%8F%8B%E5%88%B0%E6%A1%90%E6%A1%90%E5%AE%B6%2F</url>
    <content type="text"><![CDATA[昨天，高中同学杨振到我们家来了，一家三口，包括了一个可爱的小男孩乐君，乐君比桐桐大几天。 同时也叫了陈小燕一家过来，石言好可爱。 桐桐看到小朋友来了，担心人家拿走他的车车，看起来不高兴的样子。 这样子是不对的哦，有好玩的东西要和小朋友一起玩。 以后要让桐桐多和其他小朋友一起玩才行，不能老给我们几个围着转。 ps:今天中午到婆婆家吃饺子，桐桐好喜欢吃。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅二]]></title>
    <url>%2F2007%2F03%2F16%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[汽车停在了雷州水店车站，天色已经有点黑，我们下了车，拿行李准备走的时候，有人过来拉我们的行李，还以为是那些拉客仔，说了不要，回头一看，是六伯来的。本来，因为汽车误点都叫六伯不用来接我们的。 一行找了一个三轮车坐上去，好像是花了8元。 桐桐第一次坐三轮车，很开心的样子，不时看看这里看看那里。雷州这个小城市，有很多的摩托车、三轮车、自行车等，都是桐桐以前没有看到过的景象。路上的交通秩序很乱的。 三轮车开的时候风比较大，给桐桐带了一个帽子，好了点。 10分钟之后到了奶奶家，我们下了车，桐桐很舍不得三轮车，还和三轮车说了声byebye。 家门口，是四伯来接我们，四伯一下抱起了桐桐，两人还有说有笑的回家去了。 到家之后，天比较黑，但还没有全黑。这时，那些小朋友还有大人们看到桐桐回来了，一窝蜂围了过来，起码有10多个人，桐桐从没一下没见到这么多的“陌生人”，特别是在一个陌生的环境。一下子就哭了，说要回家。 只好把他抱到二楼去，然后奶奶喂桐桐吃饭了。 之后，一直不肯下一楼，最后连哄带骗才搞定。 （未完待续） ps:今天桐桐要爸爸送进幼儿园，没有哭，好乖。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻根问祖--雷州之旅一]]></title>
    <url>%2F2007%2F03%2F15%2F%E5%AF%BB%E6%A0%B9%E9%97%AE%E7%A5%96--%E9%9B%B7%E5%B7%9E%E4%B9%8B%E6%97%85%E4%B8%80%2F</url>
    <content type="text"><![CDATA[桐桐2003年9月23日出生以来，一直都没有回过家乡雷州。这也成了奶奶和爸爸的一个心愿。 因为桐桐身体不好，一直担心不习惯新环境，所以也没有带桐桐回乡下。 2007年2月15日，是一个值得纪念的日子，这一天，桐桐和爸爸回乡下了，同行的还有二姐姐。奶奶听到这个消息可高心了。 这天早上，外面开始下起了毛毛细雨，妈妈送我们到省汽车站，碧伯、林叔叔也在车站等我们了，车票也是碧伯给我们买的。 10：45分，开往海安（途径雷州）的大巴从省车站出发了。 一路上，桐桐高兴得不得了，一会看看这里，一会看看那里；因为春运的缘故，高速路上的车特别多，桐桐一会问问这是什么车，那是什么车，一刻不停的。还有路边的乡村特有的景色，让桐桐惊喜连连。 下午6：00左右，大巴到雷州了，是六伯过来接我们的。 （未完，待续）]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[桐桐格言]]></title>
    <url>%2F2007%2F03%2F14%2F%E6%A1%90%E6%A1%90%E6%A0%BC%E8%A8%80%2F</url>
    <content type="text"><![CDATA[最近桐桐常说的一句话是谢谢你妈妈，不过你还是个好妈妈！]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿子有进步但还需更进一步]]></title>
    <url>%2F2007%2F03%2F14%2F%E5%84%BF%E5%AD%90%E6%9C%89%E8%BF%9B%E6%AD%A5%E4%BD%86%E8%BF%98%E9%9C%80%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[儿子这几天上学都没有哭了，昨天还有今天早上都是。 昨晚爸爸开会，听说儿子睡觉前不乖，给妈妈打屁股了。 哪天桐桐改掉爱哭的坏习惯，就真正成为一个男子汉了。 希望这天早点到。 ps:爸爸今天的工作顺利了很多，儿子是爸爸工作的最大动力，爸爸要和桐桐一起进步，为桐桐做出好的榜样。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿子长大了]]></title>
    <url>%2F2007%2F03%2F13%2F%E5%84%BF%E5%AD%90%E9%95%BF%E5%A4%A7%E4%BA%86%2F</url>
    <content type="text"><![CDATA[昨天下班时，儿子来接。 上车时，儿子说：“爸爸，我今天上学不哭了”，高兴的爸爸跳起来。 还听说，姐姐送桐桐进幼儿园时，儿子竟然说“姐姐快点，不然要迟到了”，儿子真的长大了！ 想想，儿子从2005年8月份上幼儿园以来，当时还是上小小班（小二班），上学一直哭。偶尔一两天不哭，也从来也不会说主动说，我今天没有哭，昨天是第一次主动说的。希望儿子以后天天上学都不哭了。 ps:儿子今天早上起床又哭了，看来儿子还没有长大。 ps:爸爸今天上班有点不开心的事，不过爸爸会坚强点，再坚强点。]]></content>
      <categories>
        <category>生活杂记</category>
      </categories>
      <tags>
        <tag>亲子</tag>
      </tags>
  </entry>
</search>
